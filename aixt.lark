// This file is part of the Aixt project, https://gitlab.com/fermarsan/aixt-project.git
//
// The MIT License (MIT)
// 
// Copyright (c) 2023 Fernando MartÃ­nez Santa
//
// Based on the V grammar taken from several sources:
//     Abstract Syntax Tree V's documentation:  https://modules.vlang.io/v.ast.html
//     V grammar definition in lark:            https://github.com/Itay2805/Vork/blob/master/v.lark
//     V grammar definition in Antlr-v4:        https://github.com/antlr/grammars-v4/blob/master/v/V.g4

// source_file: (cPreprocessors eos)* (moduleClause eos)? (import_decl eos)* (topLevel_decl eos)* (orphan_stmt_list eos)* EOF
  
source_file: eos* (stmt (eos+ stmt)*) eos*
    
stmt:   assign_stmt

// assign_stmt: expression_list assign_op expression_list
assign_stmt: IDENT ASSIGN_OP expr    
    
!expr:  IDENT 
    |   literal
    |   conversion

!conversion:    type_name "(" expr ")"      

!type_name: "rune" | "bool" | "string" | NUMERIC_TYPE

!literal:   integer_literal 
        |   float_literal 
        |   BOOL //bool_literal
        |   CHAR            ->  char_literal 
        |   STRING          ->  string_literal

!float_literal:     FLOAT

!integer_literal:   INT | HEX | OCTAL | BIN     

!eos:   ";" | NEWLINE                           // end of statement

NUMERIC_TYPE:   "u8"  | "u16" | "u32" | "u64" | "usize" | "uint"
            |   "i8"  | "i16" | "i32" | "i64" | "isize" | "int"
            |   "f64" | "f32"

ASSIGN_OP:  ("+" | "-" | "|" | "^" | "*" | "/" | "%" | "<<" | ">>" | "&" )? "="
BINARY_OP:  "||" | "&&" | REL_OP | ADD_OP | MUL_OP
REL_OP:     "==" | "!=" | "<" | "<=" | ">" | ">="
ADD_OP.1:   "+" | "-" | "|" | "^"
MUL_OP:     "*" | "/" | "%" | "<<" | ">>" | "&" | "&^"
UNARY_OP:   "+" | "-" | "!" | "^" | "*" | "&" | "<-"

FLOAT:      INT EXP | DECIMAL EXP?
DECIMAL:    INT "." INT? | "." INT

BOOL:       "true" | "false"
STRING:     /\'.*\'/
CHAR:       /`.`/
EXP.1:      /[eE][\+-]?[0-9][0-9_]*/            // all numeric literals with "_"
INT:        /[0-9][0-9_]*/                        
HEX.1:      /0x[0-9A-Fa-f][0-9A-Fa-f_]*/
OCTAL.1:    /0o[0-7][0-7_]*/        
BIN.1:      /0b[01][01_]*/                


%import common.CNAME    ->  IDENT
%import common (CPP_COMMENT, C_COMMENT, WS_INLINE, NEWLINE)

%ignore WS_INLINE 
%ignore CPP_COMMENT
%ignore C_COMMENT


// type _expr = AnonFn
// 	| ArrayDecompose
// 	| Array_init
// 	| AsCast
// 	| Assoc
// 	| At_expr
// 	                        | bool_literal
// 	| CTempVar
// 	| Call_expr
// 	| Cast_expr
// 	| Chan_init
// 	                        | char_literal
// 	                        | Comment
// 	| ComptimeCall
// 	| ComptimeSelector
// 	| ComptimeType
// 	| Concat_expr
// 	| Dump_expr
// 	| Empty_expr
// 	| EnumVal
// 	                        | float_literal
// 	| Go_expr
// 	                        | IDENT      
// 	| If_expr
// 	| IfGuard_expr
// 	| Index_expr
// 	| Infix_expr
// 	                        | integer_literal
// 	| IsRefType
// 	| Likely
// 	| Lock_expr
// 	| Map_init
// 	| Match_expr
// 	| Nil
// 	| NodeError
// 	| None
// 	| OffsetOf
// 	| Or_expr
// 	| Par_expr
// 	| Postfix_expr
// 	| Prefix_expr
// 	| Range_expr
// 	| Select_expr
// 	| Selector_expr
// 	| SizeOf
// 	| Sql_expr
// 	| StringInterLiteral
// 	                        | string_literal
// 	| Struct_init
// 	| TypeNode
// 	| TypeOf
// 	| Unsafe_expr

// type _stmt = Asm_stmt
// 	| Assert_stmt
// 	                        | assign_stmt
// 	| Block
// 	| Branch_stmt
// 	| ComptimeFor
// 	| Const_decl
// 	| Defer_stmt
// 	| Empty_stmt
// 	| Enum_decl
// 	| _expr_stmt
// 	| Fn_decl
// 	| ForC_stmt
// 	| ForIn_stmt
// 	| For_stmt
// 	| Global_decl
// 	| GotoLabel
// 	| Goto_stmt
// 	| Hash_stmt
// 	| Import
// 	| Interface_decl
// 	| Module
// 	| NodeError
// 	| Return
// 	| Sql_stmt
// 	| Struct_decl
// 	| Type_decl