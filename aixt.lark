// This file is part of the Aixt project, https://gitlab.com/fermarsan/aixt-project.git
//
// The MIT License (MIT)
// 
// Copyright (c) 2023 Fernando Mart√≠nez Santa
//
// Based on the V grammar taken from several sources:
//     Abstract Syntax Tree V's documentation:  https://modules.vlang.io/v.ast.html
//     V grammar definition in lark:            https://github.com/Itay2805/Vork/blob/master/v.lark
//     V grammar definition in Antlr-v4:        https://github.com/antlr/grammars-v4/blob/master/v/V.g4

// source_file: (cPreprocessors eos)* (moduleClause eos)? (importDecl eos)* (topLevelDecl eos)* (orphan_stmt_list eos)* EOF
  
source_file: eos* (stmt (eos+ stmt)*) eos*
    
stmt:   assign_stmt

// assign_stmt: expression_list assign_op expression_list
assign_stmt: IDENT assign_op expr    

!assign_op:  ("+" | "-" | "|" | "^" | "*" | "/" | "%" | "<<" | ">>" | "&" )? "="
    
!expr:  IDENT 
    |   number

!number:    integer_literal 
        |   float_literal 
        |   bool_literal 

!bool_literal:  "true" | "false"

!float_literal: INT _EXP | DECIMAL _EXP?

!integer_literal:   SIGNED_INT | HEX | OCTAL | BIN     

!eos:   ";" | NEWLINE                           //end of statement

_EXP:       ("e"|"E") SIGNED_INT
DECIMAL:    INT "." INT? | "." INT
SIGNED_INT: ["+"|"-"] INT
INT:        /[0-9][0-9_]+/                      //all numeric literals with "_"  
HEX.1:      /0x[0-9A-Fa-f][0-9A-Fa-f_]+/
OCTAL.1:    /0o[0-7][0-7_]+/        
BIN.1:      /0b[01][01_]+/                


%import common.CNAME    ->  IDENT
%import common (CPP_COMMENT, C_COMMENT, WS_INLINE, NEWLINE)

%ignore WS_INLINE 
%ignore CPP_COMMENT
%ignore C_COMMENT


// type Expr = AnonFn
// 	| ArrayDecompose
// 	| ArrayInit
// 	| AsCast
// 	| Assoc
// 	| AtExpr
// 	| BoolLiteral
// 	| CTempVar
// 	| CallExpr
// 	| CastExpr
// 	| ChanInit
// 	| CharLiteral
// 	                        | Comment
// 	| ComptimeCall
// 	| ComptimeSelector
// 	| ComptimeType
// 	| ConcatExpr
// 	| DumpExpr
// 	| EmptyExpr
// 	| EnumVal
// 	                        | float_literal
// 	| GoExpr
// 	                        | IDENT         
// 	| IfExpr
// 	| IfGuardExpr
// 	| IndexExpr
// 	| InfixExpr
// 	                        | integer_literal
// 	| IsRefType
// 	| Likely
// 	| LockExpr
// 	| MapInit
// 	| MatchExpr
// 	| Nil
// 	| NodeError
// 	| None
// 	| OffsetOf
// 	| OrExpr
// 	| ParExpr
// 	| PostfixExpr
// 	| PrefixExpr
// 	| RangeExpr
// 	| SelectExpr
// 	| SelectorExpr
// 	| SizeOf
// 	| SqlExpr
// 	| StringInterLiteral
// 	| StringLiteral
// 	| StructInit
// 	| TypeNode
// 	| TypeOf
// 	| UnsafeExpr

// type _stmt = Asm_stmt
// 	| Assert_stmt
// 	| assign_stmt
// 	| Block
// 	| Branch_stmt
// 	| ComptimeFor
// 	| ConstDecl
// 	| Defer_stmt
// 	| Empty_stmt
// 	| EnumDecl
// 	| Expr_stmt
// 	| FnDecl
// 	| ForC_stmt
// 	| ForIn_stmt
// 	| For_stmt
// 	| GlobalDecl
// 	| GotoLabel
// 	| Goto_stmt
// 	| Hash_stmt
// 	| Import
// 	| InterfaceDecl
// 	| Module
// 	| NodeError
// 	| Return
// 	| Sql_stmt
// 	| StructDecl
// 	| TypeDecl