Grammar:

Rule 0     S' -> prog
Rule 1     prog -> topLevelDecls
Rule 2     topLevelDecls -> topLevelDecls topLevelDecl eos
Rule 3     topLevelDecls -> topLevelDecl eos
Rule 4     topLevelDecl -> declaration
Rule 5     declaration -> varDecl
Rule 6     varDecl -> identifierList DECL_ASGN expressionList
Rule 7     identifierList -> identifierList , IDENTIFIER
Rule 8     identifierList -> IDENTIFIER
Rule 9     expressionList -> expressionList , expression
Rule 10    expressionList -> expression
Rule 11    statementList -> statementList eos statement
Rule 12    statementList -> statement
Rule 13    block -> { statementList }
Rule 14    statement -> block
Rule 15    statement -> simpleStmt
Rule 16    statement -> declaration
Rule 17    simpleStmt -> assignment
Rule 18    simpleStmt -> expressionStmt
Rule 19    expressionStmt -> expression
Rule 20    assignment -> expressionList ASSIGN expressionList  [precedence=right, level=8]
Rule 21    expression -> expression BINARY_OP unaryExpr
Rule 22    expression -> unaryExpr
Rule 23    unaryExpr -> UNARY_OP unaryExpr  [precedence=right, level=7]
Rule 24    unaryExpr -> primaryExpr
Rule 25    primaryExpr -> conversion
Rule 26    primaryExpr -> operand
Rule 27    operand -> ( expression )
Rule 28    operand -> operandName
Rule 29    operand -> literal
Rule 30    operandName -> IDENTIFIER
Rule 31    literal -> basicLit
Rule 32    conversion -> type_ ( expression )
Rule 33    type_ -> typeName
Rule 34    typeName -> numericType
Rule 35    typeName -> STRING
Rule 36    typeName -> BOOL
Rule 37    typeName -> RUNE
Rule 38    numericType -> F32
Rule 39    numericType -> F64
Rule 40    numericType -> ISIZE
Rule 41    numericType -> I64
Rule 42    numericType -> I32
Rule 43    numericType -> I16
Rule 44    numericType -> I8
Rule 45    numericType -> USIZE
Rule 46    numericType -> U64
Rule 47    numericType -> U32
Rule 48    numericType -> U16
Rule 49    numericType -> U8
Rule 50    basicLit -> INT_LIT
Rule 51    basicLit -> FLOAT_LIT
Rule 52    basicLit -> DECIMAL_LIT EXPONENT
Rule 53    basicLit -> FLOAT_LIT EXPONENT
Rule 54    basicLit -> FALSE
Rule 55    basicLit -> TRUE
Rule 56    basicLit -> RUNE_LIT
Rule 57    basicLit -> STRING_LIT
Rule 58    FLOAT_LIT -> . DECIMAL_LIT
Rule 59    FLOAT_LIT -> DECIMAL_LIT .
Rule 60    FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT
Rule 61    INT_LIT -> HEX_LIT
Rule 62    INT_LIT -> OCTAL_LIT
Rule 63    INT_LIT -> BINARY_LIT
Rule 64    INT_LIT -> DECIMAL_LIT
Rule 65    eos -> eos NEWL
Rule 66    eos -> NEWL
Rule 67    eos -> eos ;
Rule 68    eos -> ;
Rule 69    BINARY_OP -> MUL_OP
Rule 70    BINARY_OP -> ADD_OP
Rule 71    BINARY_OP -> REL_OP
Rule 72    BINARY_OP -> LOGIC_AND  [precedence=left, level=2]
Rule 73    BINARY_OP -> LOGIC_OR  [precedence=left, level=1]
Rule 74    REL_OP -> GE  [precedence=left, level=3]
Rule 75    REL_OP -> GT  [precedence=left, level=3]
Rule 76    REL_OP -> LE  [precedence=left, level=3]
Rule 77    REL_OP -> LT  [precedence=left, level=3]
Rule 78    REL_OP -> NE  [precedence=left, level=3]
Rule 79    REL_OP -> EQ  [precedence=left, level=3]
Rule 80    ADD_OP -> XOR  [precedence=left, level=4]
Rule 81    ADD_OP -> OR  [precedence=left, level=4]
Rule 82    ADD_OP -> MINUS  [precedence=left, level=4]
Rule 83    ADD_OP -> PLUS  [precedence=left, level=4]
Rule 84    MUL_OP -> SHR  [precedence=left, level=5]
Rule 85    MUL_OP -> SHL  [precedence=left, level=5]
Rule 86    MUL_OP -> AND  [precedence=left, level=5]
Rule 87    MUL_OP -> MOD  [precedence=left, level=5]
Rule 88    MUL_OP -> DIV  [precedence=left, level=5]
Rule 89    MUL_OP -> STAR  [precedence=left, level=5]
Rule 90    UNARY_OP -> AND  [precedence=left, level=5]
Rule 91    UNARY_OP -> EXCLM
Rule 92    UNARY_OP -> MINUS  [precedence=left, level=4]

Unused terminals:

    DIV_ASGN
    AS
    MOD_ASGN
    ENUM
    CONST
    FOR
    IN
    OR_ASGN
    STAR_ASGN
    PLUS_PLUS
    UMINUS
    IF
    ELSE
    MINUS_ASGN
    AND_ASGN
    STRUCT
    CONTINUE
    TYPE
    FN
    SHL_ASGN
    MATCH
    STATIC
    SHR_ASGN
    MAP
    BREAK
    IMPORT
    MINUS_MINUS
    PLUS_ASGN
    XOR_ASGN
    RETURN

Terminals, with rules where they appear:

(                    : 27 32
)                    : 27 32
,                    : 7 9
.                    : 58 59 60
;                    : 67 68
AND                  : 86 90
AND_ASGN             : 
AS                   : 
ASSIGN               : 20
BINARY_LIT           : 63
BOOL                 : 36
BREAK                : 
CONST                : 
CONTINUE             : 
DECIMAL_LIT          : 52 58 59 60 60 64
DECL_ASGN            : 6
DIV                  : 88
DIV_ASGN             : 
ELSE                 : 
ENUM                 : 
EQ                   : 79
EXCLM                : 91
EXPONENT             : 52 53
F32                  : 38
F64                  : 39
FALSE                : 54
FN                   : 
FOR                  : 
GE                   : 74
GT                   : 75
HEX_LIT              : 61
I16                  : 43
I32                  : 42
I64                  : 41
I8                   : 44
IDENTIFIER           : 7 8 30
IF                   : 
IMPORT               : 
IN                   : 
ISIZE                : 40
LE                   : 76
LOGIC_AND            : 72
LOGIC_OR             : 73
LT                   : 77
MAP                  : 
MATCH                : 
MINUS                : 82 92
MINUS_ASGN           : 
MINUS_MINUS          : 
MOD                  : 87
MOD_ASGN             : 
NE                   : 78
NEWL                 : 65 66
OCTAL_LIT            : 62
OR                   : 81
OR_ASGN              : 
PLUS                 : 83
PLUS_ASGN            : 
PLUS_PLUS            : 
RETURN               : 
RUNE                 : 37
RUNE_LIT             : 56
SHL                  : 85
SHL_ASGN             : 
SHR                  : 84
SHR_ASGN             : 
STAR                 : 89
STAR_ASGN            : 
STATIC               : 
STRING               : 35
STRING_LIT           : 57
STRUCT               : 
TRUE                 : 55
TYPE                 : 
U16                  : 48
U32                  : 47
U64                  : 46
U8                   : 49
UMINUS               : 
USIZE                : 45
XOR                  : 80
XOR_ASGN             : 
error                : 
{                    : 13
}                    : 13

Nonterminals, with rules where they appear:

ADD_OP               : 70
BINARY_OP            : 21
FLOAT_LIT            : 51 53
INT_LIT              : 50
MUL_OP               : 69
REL_OP               : 71
UNARY_OP             : 23
assignment           : 17
basicLit             : 31
block                : 14
conversion           : 25
declaration          : 4 16
eos                  : 2 3 11 65 67
expression           : 9 10 19 21 27 32
expressionList       : 6 9 20 20
expressionStmt       : 18
identifierList       : 6 7
literal              : 29
numericType          : 34
operand              : 26
operandName          : 28
primaryExpr          : 24
prog                 : 0
simpleStmt           : 15
statement            : 11 12
statementList        : 11 13
topLevelDecl         : 2 3
topLevelDecls        : 1 2
typeName             : 33
type_                : 32
unaryExpr            : 21 22 23
varDecl              : 5


state 0

    (0) S' -> . prog
    (1) prog -> . topLevelDecls
    (2) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (3) topLevelDecls -> . topLevelDecl eos
    (4) topLevelDecl -> . declaration
    (5) declaration -> . varDecl
    (6) varDecl -> . identifierList DECL_ASGN expressionList
    (7) identifierList -> . identifierList , IDENTIFIER
    (8) identifierList -> . IDENTIFIER
    IDENTIFIER      shift and go to state 7

    prog                           shift and go to state 1
    topLevelDecls                  shift and go to state 2
    topLevelDecl                   shift and go to state 3
    declaration                    shift and go to state 4
    varDecl                        shift and go to state 5
    identifierList                 shift and go to state 6

state 1

    (0) S' -> prog .


state 2

    (1) prog -> topLevelDecls .
    (2) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (4) topLevelDecl -> . declaration
    (5) declaration -> . varDecl
    (6) varDecl -> . identifierList DECL_ASGN expressionList
    (7) identifierList -> . identifierList , IDENTIFIER
    (8) identifierList -> . IDENTIFIER
    $end            reduce using rule 1 (prog -> topLevelDecls .)
    IDENTIFIER      shift and go to state 7

    topLevelDecl                   shift and go to state 8
    declaration                    shift and go to state 4
    varDecl                        shift and go to state 5
    identifierList                 shift and go to state 6

state 3

    (3) topLevelDecls -> topLevelDecl . eos
    (65) eos -> . eos NEWL
    (66) eos -> . NEWL
    (67) eos -> . eos ;
    (68) eos -> . ;
    NEWL            shift and go to state 10
    ;               shift and go to state 11

    eos                            shift and go to state 9

state 4

    (4) topLevelDecl -> declaration .
    NEWL            reduce using rule 4 (topLevelDecl -> declaration .)
    ;               reduce using rule 4 (topLevelDecl -> declaration .)


state 5

    (5) declaration -> varDecl .
    NEWL            reduce using rule 5 (declaration -> varDecl .)
    ;               reduce using rule 5 (declaration -> varDecl .)


state 6

    (6) varDecl -> identifierList . DECL_ASGN expressionList
    (7) identifierList -> identifierList . , IDENTIFIER
    DECL_ASGN       shift and go to state 12
    ,               shift and go to state 13


state 7

    (8) identifierList -> IDENTIFIER .
    DECL_ASGN       reduce using rule 8 (identifierList -> IDENTIFIER .)
    ,               reduce using rule 8 (identifierList -> IDENTIFIER .)


state 8

    (2) topLevelDecls -> topLevelDecls topLevelDecl . eos
    (65) eos -> . eos NEWL
    (66) eos -> . NEWL
    (67) eos -> . eos ;
    (68) eos -> . ;
    NEWL            shift and go to state 10
    ;               shift and go to state 11

    eos                            shift and go to state 14

state 9

    (3) topLevelDecls -> topLevelDecl eos .
    (65) eos -> eos . NEWL
    (67) eos -> eos . ;
    IDENTIFIER      reduce using rule 3 (topLevelDecls -> topLevelDecl eos .)
    $end            reduce using rule 3 (topLevelDecls -> topLevelDecl eos .)
    NEWL            shift and go to state 15
    ;               shift and go to state 16


state 10

    (66) eos -> NEWL .
    NEWL            reduce using rule 66 (eos -> NEWL .)
    ;               reduce using rule 66 (eos -> NEWL .)
    IDENTIFIER      reduce using rule 66 (eos -> NEWL .)
    $end            reduce using rule 66 (eos -> NEWL .)


state 11

    (68) eos -> ; .
    NEWL            reduce using rule 68 (eos -> ; .)
    ;               reduce using rule 68 (eos -> ; .)
    IDENTIFIER      reduce using rule 68 (eos -> ; .)
    $end            reduce using rule 68 (eos -> ; .)


state 12

    (6) varDecl -> identifierList DECL_ASGN . expressionList
    (9) expressionList -> . expressionList , expression
    (10) expressionList -> . expression
    (21) expression -> . expression BINARY_OP unaryExpr
    (22) expression -> . unaryExpr
    (23) unaryExpr -> . UNARY_OP unaryExpr
    (24) unaryExpr -> . primaryExpr
    (90) UNARY_OP -> . AND
    (91) UNARY_OP -> . EXCLM
    (92) UNARY_OP -> . MINUS
    (25) primaryExpr -> . conversion
    (26) primaryExpr -> . operand
    (32) conversion -> . type_ ( expression )
    (27) operand -> . ( expression )
    (28) operand -> . operandName
    (29) operand -> . literal
    (33) type_ -> . typeName
    (30) operandName -> . IDENTIFIER
    (31) literal -> . basicLit
    (34) typeName -> . numericType
    (35) typeName -> . STRING
    (36) typeName -> . BOOL
    (37) typeName -> . RUNE
    (50) basicLit -> . INT_LIT
    (51) basicLit -> . FLOAT_LIT
    (52) basicLit -> . DECIMAL_LIT EXPONENT
    (53) basicLit -> . FLOAT_LIT EXPONENT
    (54) basicLit -> . FALSE
    (55) basicLit -> . TRUE
    (56) basicLit -> . RUNE_LIT
    (57) basicLit -> . STRING_LIT
    (38) numericType -> . F32
    (39) numericType -> . F64
    (40) numericType -> . ISIZE
    (41) numericType -> . I64
    (42) numericType -> . I32
    (43) numericType -> . I16
    (44) numericType -> . I8
    (45) numericType -> . USIZE
    (46) numericType -> . U64
    (47) numericType -> . U32
    (48) numericType -> . U16
    (49) numericType -> . U8
    (61) INT_LIT -> . HEX_LIT
    (62) INT_LIT -> . OCTAL_LIT
    (63) INT_LIT -> . BINARY_LIT
    (64) INT_LIT -> . DECIMAL_LIT
    (58) FLOAT_LIT -> . . DECIMAL_LIT
    (59) FLOAT_LIT -> . DECIMAL_LIT .
    (60) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 22
    EXCLM           shift and go to state 23
    MINUS           shift and go to state 24
    (               shift and go to state 28
    IDENTIFIER      shift and go to state 32
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    ISIZE           shift and go to state 47
    I64             shift and go to state 48
    I32             shift and go to state 49
    I16             shift and go to state 50
    I8              shift and go to state 51
    USIZE           shift and go to state 52
    U64             shift and go to state 53
    U32             shift and go to state 54
    U16             shift and go to state 55
    U8              shift and go to state 56
    HEX_LIT         shift and go to state 57
    OCTAL_LIT       shift and go to state 58
    BINARY_LIT      shift and go to state 59
    .               shift and go to state 60

    expressionList                 shift and go to state 17
    expression                     shift and go to state 18
    unaryExpr                      shift and go to state 19
    UNARY_OP                       shift and go to state 20
    primaryExpr                    shift and go to state 21
    conversion                     shift and go to state 25
    operand                        shift and go to state 26
    type_                          shift and go to state 27
    operandName                    shift and go to state 29
    literal                        shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 33
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 13

    (7) identifierList -> identifierList , . IDENTIFIER
    IDENTIFIER      shift and go to state 61


state 14

    (2) topLevelDecls -> topLevelDecls topLevelDecl eos .
    (65) eos -> eos . NEWL
    (67) eos -> eos . ;
    IDENTIFIER      reduce using rule 2 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    $end            reduce using rule 2 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    NEWL            shift and go to state 15
    ;               shift and go to state 16


state 15

    (65) eos -> eos NEWL .
    NEWL            reduce using rule 65 (eos -> eos NEWL .)
    ;               reduce using rule 65 (eos -> eos NEWL .)
    IDENTIFIER      reduce using rule 65 (eos -> eos NEWL .)
    $end            reduce using rule 65 (eos -> eos NEWL .)


state 16

    (67) eos -> eos ; .
    NEWL            reduce using rule 67 (eos -> eos ; .)
    ;               reduce using rule 67 (eos -> eos ; .)
    IDENTIFIER      reduce using rule 67 (eos -> eos ; .)
    $end            reduce using rule 67 (eos -> eos ; .)


state 17

    (6) varDecl -> identifierList DECL_ASGN expressionList .
    (9) expressionList -> expressionList . , expression
    NEWL            reduce using rule 6 (varDecl -> identifierList DECL_ASGN expressionList .)
    ;               reduce using rule 6 (varDecl -> identifierList DECL_ASGN expressionList .)
    ,               shift and go to state 62


state 18

    (10) expressionList -> expression .
    (21) expression -> expression . BINARY_OP unaryExpr
    (69) BINARY_OP -> . MUL_OP
    (70) BINARY_OP -> . ADD_OP
    (71) BINARY_OP -> . REL_OP
    (72) BINARY_OP -> . LOGIC_AND
    (73) BINARY_OP -> . LOGIC_OR
    (84) MUL_OP -> . SHR
    (85) MUL_OP -> . SHL
    (86) MUL_OP -> . AND
    (87) MUL_OP -> . MOD
    (88) MUL_OP -> . DIV
    (89) MUL_OP -> . STAR
    (80) ADD_OP -> . XOR
    (81) ADD_OP -> . OR
    (82) ADD_OP -> . MINUS
    (83) ADD_OP -> . PLUS
    (74) REL_OP -> . GE
    (75) REL_OP -> . GT
    (76) REL_OP -> . LE
    (77) REL_OP -> . LT
    (78) REL_OP -> . NE
    (79) REL_OP -> . EQ
    ,               reduce using rule 10 (expressionList -> expression .)
    NEWL            reduce using rule 10 (expressionList -> expression .)
    ;               reduce using rule 10 (expressionList -> expression .)
    LOGIC_AND       shift and go to state 67
    LOGIC_OR        shift and go to state 68
    SHR             shift and go to state 69
    SHL             shift and go to state 70
    AND             shift and go to state 71
    MOD             shift and go to state 72
    DIV             shift and go to state 73
    STAR            shift and go to state 74
    XOR             shift and go to state 75
    OR              shift and go to state 76
    MINUS           shift and go to state 77
    PLUS            shift and go to state 78
    GE              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    LT              shift and go to state 82
    NE              shift and go to state 83
    EQ              shift and go to state 84

    BINARY_OP                      shift and go to state 63
    MUL_OP                         shift and go to state 64
    ADD_OP                         shift and go to state 65
    REL_OP                         shift and go to state 66

state 19

    (22) expression -> unaryExpr .
    LOGIC_AND       reduce using rule 22 (expression -> unaryExpr .)
    LOGIC_OR        reduce using rule 22 (expression -> unaryExpr .)
    SHR             reduce using rule 22 (expression -> unaryExpr .)
    SHL             reduce using rule 22 (expression -> unaryExpr .)
    AND             reduce using rule 22 (expression -> unaryExpr .)
    MOD             reduce using rule 22 (expression -> unaryExpr .)
    DIV             reduce using rule 22 (expression -> unaryExpr .)
    STAR            reduce using rule 22 (expression -> unaryExpr .)
    XOR             reduce using rule 22 (expression -> unaryExpr .)
    OR              reduce using rule 22 (expression -> unaryExpr .)
    MINUS           reduce using rule 22 (expression -> unaryExpr .)
    PLUS            reduce using rule 22 (expression -> unaryExpr .)
    GE              reduce using rule 22 (expression -> unaryExpr .)
    GT              reduce using rule 22 (expression -> unaryExpr .)
    LE              reduce using rule 22 (expression -> unaryExpr .)
    LT              reduce using rule 22 (expression -> unaryExpr .)
    NE              reduce using rule 22 (expression -> unaryExpr .)
    EQ              reduce using rule 22 (expression -> unaryExpr .)
    ,               reduce using rule 22 (expression -> unaryExpr .)
    NEWL            reduce using rule 22 (expression -> unaryExpr .)
    ;               reduce using rule 22 (expression -> unaryExpr .)
    )               reduce using rule 22 (expression -> unaryExpr .)


state 20

    (23) unaryExpr -> UNARY_OP . unaryExpr
    (23) unaryExpr -> . UNARY_OP unaryExpr
    (24) unaryExpr -> . primaryExpr
    (90) UNARY_OP -> . AND
    (91) UNARY_OP -> . EXCLM
    (92) UNARY_OP -> . MINUS
    (25) primaryExpr -> . conversion
    (26) primaryExpr -> . operand
    (32) conversion -> . type_ ( expression )
    (27) operand -> . ( expression )
    (28) operand -> . operandName
    (29) operand -> . literal
    (33) type_ -> . typeName
    (30) operandName -> . IDENTIFIER
    (31) literal -> . basicLit
    (34) typeName -> . numericType
    (35) typeName -> . STRING
    (36) typeName -> . BOOL
    (37) typeName -> . RUNE
    (50) basicLit -> . INT_LIT
    (51) basicLit -> . FLOAT_LIT
    (52) basicLit -> . DECIMAL_LIT EXPONENT
    (53) basicLit -> . FLOAT_LIT EXPONENT
    (54) basicLit -> . FALSE
    (55) basicLit -> . TRUE
    (56) basicLit -> . RUNE_LIT
    (57) basicLit -> . STRING_LIT
    (38) numericType -> . F32
    (39) numericType -> . F64
    (40) numericType -> . ISIZE
    (41) numericType -> . I64
    (42) numericType -> . I32
    (43) numericType -> . I16
    (44) numericType -> . I8
    (45) numericType -> . USIZE
    (46) numericType -> . U64
    (47) numericType -> . U32
    (48) numericType -> . U16
    (49) numericType -> . U8
    (61) INT_LIT -> . HEX_LIT
    (62) INT_LIT -> . OCTAL_LIT
    (63) INT_LIT -> . BINARY_LIT
    (64) INT_LIT -> . DECIMAL_LIT
    (58) FLOAT_LIT -> . . DECIMAL_LIT
    (59) FLOAT_LIT -> . DECIMAL_LIT .
    (60) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 22
    EXCLM           shift and go to state 23
    MINUS           shift and go to state 24
    (               shift and go to state 28
    IDENTIFIER      shift and go to state 32
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    ISIZE           shift and go to state 47
    I64             shift and go to state 48
    I32             shift and go to state 49
    I16             shift and go to state 50
    I8              shift and go to state 51
    USIZE           shift and go to state 52
    U64             shift and go to state 53
    U32             shift and go to state 54
    U16             shift and go to state 55
    U8              shift and go to state 56
    HEX_LIT         shift and go to state 57
    OCTAL_LIT       shift and go to state 58
    BINARY_LIT      shift and go to state 59
    .               shift and go to state 60

    UNARY_OP                       shift and go to state 20
    unaryExpr                      shift and go to state 85
    primaryExpr                    shift and go to state 21
    conversion                     shift and go to state 25
    operand                        shift and go to state 26
    type_                          shift and go to state 27
    operandName                    shift and go to state 29
    literal                        shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 33
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 21

    (24) unaryExpr -> primaryExpr .
    LOGIC_AND       reduce using rule 24 (unaryExpr -> primaryExpr .)
    LOGIC_OR        reduce using rule 24 (unaryExpr -> primaryExpr .)
    SHR             reduce using rule 24 (unaryExpr -> primaryExpr .)
    SHL             reduce using rule 24 (unaryExpr -> primaryExpr .)
    AND             reduce using rule 24 (unaryExpr -> primaryExpr .)
    MOD             reduce using rule 24 (unaryExpr -> primaryExpr .)
    DIV             reduce using rule 24 (unaryExpr -> primaryExpr .)
    STAR            reduce using rule 24 (unaryExpr -> primaryExpr .)
    XOR             reduce using rule 24 (unaryExpr -> primaryExpr .)
    OR              reduce using rule 24 (unaryExpr -> primaryExpr .)
    MINUS           reduce using rule 24 (unaryExpr -> primaryExpr .)
    PLUS            reduce using rule 24 (unaryExpr -> primaryExpr .)
    GE              reduce using rule 24 (unaryExpr -> primaryExpr .)
    GT              reduce using rule 24 (unaryExpr -> primaryExpr .)
    LE              reduce using rule 24 (unaryExpr -> primaryExpr .)
    LT              reduce using rule 24 (unaryExpr -> primaryExpr .)
    NE              reduce using rule 24 (unaryExpr -> primaryExpr .)
    EQ              reduce using rule 24 (unaryExpr -> primaryExpr .)
    ,               reduce using rule 24 (unaryExpr -> primaryExpr .)
    NEWL            reduce using rule 24 (unaryExpr -> primaryExpr .)
    ;               reduce using rule 24 (unaryExpr -> primaryExpr .)
    )               reduce using rule 24 (unaryExpr -> primaryExpr .)


state 22

    (90) UNARY_OP -> AND .
    AND             reduce using rule 90 (UNARY_OP -> AND .)
    EXCLM           reduce using rule 90 (UNARY_OP -> AND .)
    MINUS           reduce using rule 90 (UNARY_OP -> AND .)
    (               reduce using rule 90 (UNARY_OP -> AND .)
    IDENTIFIER      reduce using rule 90 (UNARY_OP -> AND .)
    STRING          reduce using rule 90 (UNARY_OP -> AND .)
    BOOL            reduce using rule 90 (UNARY_OP -> AND .)
    RUNE            reduce using rule 90 (UNARY_OP -> AND .)
    DECIMAL_LIT     reduce using rule 90 (UNARY_OP -> AND .)
    FALSE           reduce using rule 90 (UNARY_OP -> AND .)
    TRUE            reduce using rule 90 (UNARY_OP -> AND .)
    RUNE_LIT        reduce using rule 90 (UNARY_OP -> AND .)
    STRING_LIT      reduce using rule 90 (UNARY_OP -> AND .)
    F32             reduce using rule 90 (UNARY_OP -> AND .)
    F64             reduce using rule 90 (UNARY_OP -> AND .)
    ISIZE           reduce using rule 90 (UNARY_OP -> AND .)
    I64             reduce using rule 90 (UNARY_OP -> AND .)
    I32             reduce using rule 90 (UNARY_OP -> AND .)
    I16             reduce using rule 90 (UNARY_OP -> AND .)
    I8              reduce using rule 90 (UNARY_OP -> AND .)
    USIZE           reduce using rule 90 (UNARY_OP -> AND .)
    U64             reduce using rule 90 (UNARY_OP -> AND .)
    U32             reduce using rule 90 (UNARY_OP -> AND .)
    U16             reduce using rule 90 (UNARY_OP -> AND .)
    U8              reduce using rule 90 (UNARY_OP -> AND .)
    HEX_LIT         reduce using rule 90 (UNARY_OP -> AND .)
    OCTAL_LIT       reduce using rule 90 (UNARY_OP -> AND .)
    BINARY_LIT      reduce using rule 90 (UNARY_OP -> AND .)
    .               reduce using rule 90 (UNARY_OP -> AND .)


state 23

    (91) UNARY_OP -> EXCLM .
    AND             reduce using rule 91 (UNARY_OP -> EXCLM .)
    EXCLM           reduce using rule 91 (UNARY_OP -> EXCLM .)
    MINUS           reduce using rule 91 (UNARY_OP -> EXCLM .)
    (               reduce using rule 91 (UNARY_OP -> EXCLM .)
    IDENTIFIER      reduce using rule 91 (UNARY_OP -> EXCLM .)
    STRING          reduce using rule 91 (UNARY_OP -> EXCLM .)
    BOOL            reduce using rule 91 (UNARY_OP -> EXCLM .)
    RUNE            reduce using rule 91 (UNARY_OP -> EXCLM .)
    DECIMAL_LIT     reduce using rule 91 (UNARY_OP -> EXCLM .)
    FALSE           reduce using rule 91 (UNARY_OP -> EXCLM .)
    TRUE            reduce using rule 91 (UNARY_OP -> EXCLM .)
    RUNE_LIT        reduce using rule 91 (UNARY_OP -> EXCLM .)
    STRING_LIT      reduce using rule 91 (UNARY_OP -> EXCLM .)
    F32             reduce using rule 91 (UNARY_OP -> EXCLM .)
    F64             reduce using rule 91 (UNARY_OP -> EXCLM .)
    ISIZE           reduce using rule 91 (UNARY_OP -> EXCLM .)
    I64             reduce using rule 91 (UNARY_OP -> EXCLM .)
    I32             reduce using rule 91 (UNARY_OP -> EXCLM .)
    I16             reduce using rule 91 (UNARY_OP -> EXCLM .)
    I8              reduce using rule 91 (UNARY_OP -> EXCLM .)
    USIZE           reduce using rule 91 (UNARY_OP -> EXCLM .)
    U64             reduce using rule 91 (UNARY_OP -> EXCLM .)
    U32             reduce using rule 91 (UNARY_OP -> EXCLM .)
    U16             reduce using rule 91 (UNARY_OP -> EXCLM .)
    U8              reduce using rule 91 (UNARY_OP -> EXCLM .)
    HEX_LIT         reduce using rule 91 (UNARY_OP -> EXCLM .)
    OCTAL_LIT       reduce using rule 91 (UNARY_OP -> EXCLM .)
    BINARY_LIT      reduce using rule 91 (UNARY_OP -> EXCLM .)
    .               reduce using rule 91 (UNARY_OP -> EXCLM .)


state 24

    (92) UNARY_OP -> MINUS .
    AND             reduce using rule 92 (UNARY_OP -> MINUS .)
    EXCLM           reduce using rule 92 (UNARY_OP -> MINUS .)
    MINUS           reduce using rule 92 (UNARY_OP -> MINUS .)
    (               reduce using rule 92 (UNARY_OP -> MINUS .)
    IDENTIFIER      reduce using rule 92 (UNARY_OP -> MINUS .)
    STRING          reduce using rule 92 (UNARY_OP -> MINUS .)
    BOOL            reduce using rule 92 (UNARY_OP -> MINUS .)
    RUNE            reduce using rule 92 (UNARY_OP -> MINUS .)
    DECIMAL_LIT     reduce using rule 92 (UNARY_OP -> MINUS .)
    FALSE           reduce using rule 92 (UNARY_OP -> MINUS .)
    TRUE            reduce using rule 92 (UNARY_OP -> MINUS .)
    RUNE_LIT        reduce using rule 92 (UNARY_OP -> MINUS .)
    STRING_LIT      reduce using rule 92 (UNARY_OP -> MINUS .)
    F32             reduce using rule 92 (UNARY_OP -> MINUS .)
    F64             reduce using rule 92 (UNARY_OP -> MINUS .)
    ISIZE           reduce using rule 92 (UNARY_OP -> MINUS .)
    I64             reduce using rule 92 (UNARY_OP -> MINUS .)
    I32             reduce using rule 92 (UNARY_OP -> MINUS .)
    I16             reduce using rule 92 (UNARY_OP -> MINUS .)
    I8              reduce using rule 92 (UNARY_OP -> MINUS .)
    USIZE           reduce using rule 92 (UNARY_OP -> MINUS .)
    U64             reduce using rule 92 (UNARY_OP -> MINUS .)
    U32             reduce using rule 92 (UNARY_OP -> MINUS .)
    U16             reduce using rule 92 (UNARY_OP -> MINUS .)
    U8              reduce using rule 92 (UNARY_OP -> MINUS .)
    HEX_LIT         reduce using rule 92 (UNARY_OP -> MINUS .)
    OCTAL_LIT       reduce using rule 92 (UNARY_OP -> MINUS .)
    BINARY_LIT      reduce using rule 92 (UNARY_OP -> MINUS .)
    .               reduce using rule 92 (UNARY_OP -> MINUS .)


state 25

    (25) primaryExpr -> conversion .
    LOGIC_AND       reduce using rule 25 (primaryExpr -> conversion .)
    LOGIC_OR        reduce using rule 25 (primaryExpr -> conversion .)
    SHR             reduce using rule 25 (primaryExpr -> conversion .)
    SHL             reduce using rule 25 (primaryExpr -> conversion .)
    AND             reduce using rule 25 (primaryExpr -> conversion .)
    MOD             reduce using rule 25 (primaryExpr -> conversion .)
    DIV             reduce using rule 25 (primaryExpr -> conversion .)
    STAR            reduce using rule 25 (primaryExpr -> conversion .)
    XOR             reduce using rule 25 (primaryExpr -> conversion .)
    OR              reduce using rule 25 (primaryExpr -> conversion .)
    MINUS           reduce using rule 25 (primaryExpr -> conversion .)
    PLUS            reduce using rule 25 (primaryExpr -> conversion .)
    GE              reduce using rule 25 (primaryExpr -> conversion .)
    GT              reduce using rule 25 (primaryExpr -> conversion .)
    LE              reduce using rule 25 (primaryExpr -> conversion .)
    LT              reduce using rule 25 (primaryExpr -> conversion .)
    NE              reduce using rule 25 (primaryExpr -> conversion .)
    EQ              reduce using rule 25 (primaryExpr -> conversion .)
    ,               reduce using rule 25 (primaryExpr -> conversion .)
    NEWL            reduce using rule 25 (primaryExpr -> conversion .)
    ;               reduce using rule 25 (primaryExpr -> conversion .)
    )               reduce using rule 25 (primaryExpr -> conversion .)


state 26

    (26) primaryExpr -> operand .
    LOGIC_AND       reduce using rule 26 (primaryExpr -> operand .)
    LOGIC_OR        reduce using rule 26 (primaryExpr -> operand .)
    SHR             reduce using rule 26 (primaryExpr -> operand .)
    SHL             reduce using rule 26 (primaryExpr -> operand .)
    AND             reduce using rule 26 (primaryExpr -> operand .)
    MOD             reduce using rule 26 (primaryExpr -> operand .)
    DIV             reduce using rule 26 (primaryExpr -> operand .)
    STAR            reduce using rule 26 (primaryExpr -> operand .)
    XOR             reduce using rule 26 (primaryExpr -> operand .)
    OR              reduce using rule 26 (primaryExpr -> operand .)
    MINUS           reduce using rule 26 (primaryExpr -> operand .)
    PLUS            reduce using rule 26 (primaryExpr -> operand .)
    GE              reduce using rule 26 (primaryExpr -> operand .)
    GT              reduce using rule 26 (primaryExpr -> operand .)
    LE              reduce using rule 26 (primaryExpr -> operand .)
    LT              reduce using rule 26 (primaryExpr -> operand .)
    NE              reduce using rule 26 (primaryExpr -> operand .)
    EQ              reduce using rule 26 (primaryExpr -> operand .)
    ,               reduce using rule 26 (primaryExpr -> operand .)
    NEWL            reduce using rule 26 (primaryExpr -> operand .)
    ;               reduce using rule 26 (primaryExpr -> operand .)
    )               reduce using rule 26 (primaryExpr -> operand .)


state 27

    (32) conversion -> type_ . ( expression )
    (               shift and go to state 86


state 28

    (27) operand -> ( . expression )
    (21) expression -> . expression BINARY_OP unaryExpr
    (22) expression -> . unaryExpr
    (23) unaryExpr -> . UNARY_OP unaryExpr
    (24) unaryExpr -> . primaryExpr
    (90) UNARY_OP -> . AND
    (91) UNARY_OP -> . EXCLM
    (92) UNARY_OP -> . MINUS
    (25) primaryExpr -> . conversion
    (26) primaryExpr -> . operand
    (32) conversion -> . type_ ( expression )
    (27) operand -> . ( expression )
    (28) operand -> . operandName
    (29) operand -> . literal
    (33) type_ -> . typeName
    (30) operandName -> . IDENTIFIER
    (31) literal -> . basicLit
    (34) typeName -> . numericType
    (35) typeName -> . STRING
    (36) typeName -> . BOOL
    (37) typeName -> . RUNE
    (50) basicLit -> . INT_LIT
    (51) basicLit -> . FLOAT_LIT
    (52) basicLit -> . DECIMAL_LIT EXPONENT
    (53) basicLit -> . FLOAT_LIT EXPONENT
    (54) basicLit -> . FALSE
    (55) basicLit -> . TRUE
    (56) basicLit -> . RUNE_LIT
    (57) basicLit -> . STRING_LIT
    (38) numericType -> . F32
    (39) numericType -> . F64
    (40) numericType -> . ISIZE
    (41) numericType -> . I64
    (42) numericType -> . I32
    (43) numericType -> . I16
    (44) numericType -> . I8
    (45) numericType -> . USIZE
    (46) numericType -> . U64
    (47) numericType -> . U32
    (48) numericType -> . U16
    (49) numericType -> . U8
    (61) INT_LIT -> . HEX_LIT
    (62) INT_LIT -> . OCTAL_LIT
    (63) INT_LIT -> . BINARY_LIT
    (64) INT_LIT -> . DECIMAL_LIT
    (58) FLOAT_LIT -> . . DECIMAL_LIT
    (59) FLOAT_LIT -> . DECIMAL_LIT .
    (60) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 22
    EXCLM           shift and go to state 23
    MINUS           shift and go to state 24
    (               shift and go to state 28
    IDENTIFIER      shift and go to state 32
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    ISIZE           shift and go to state 47
    I64             shift and go to state 48
    I32             shift and go to state 49
    I16             shift and go to state 50
    I8              shift and go to state 51
    USIZE           shift and go to state 52
    U64             shift and go to state 53
    U32             shift and go to state 54
    U16             shift and go to state 55
    U8              shift and go to state 56
    HEX_LIT         shift and go to state 57
    OCTAL_LIT       shift and go to state 58
    BINARY_LIT      shift and go to state 59
    .               shift and go to state 60

    expression                     shift and go to state 87
    unaryExpr                      shift and go to state 19
    UNARY_OP                       shift and go to state 20
    primaryExpr                    shift and go to state 21
    conversion                     shift and go to state 25
    operand                        shift and go to state 26
    type_                          shift and go to state 27
    operandName                    shift and go to state 29
    literal                        shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 33
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 29

    (28) operand -> operandName .
    LOGIC_AND       reduce using rule 28 (operand -> operandName .)
    LOGIC_OR        reduce using rule 28 (operand -> operandName .)
    SHR             reduce using rule 28 (operand -> operandName .)
    SHL             reduce using rule 28 (operand -> operandName .)
    AND             reduce using rule 28 (operand -> operandName .)
    MOD             reduce using rule 28 (operand -> operandName .)
    DIV             reduce using rule 28 (operand -> operandName .)
    STAR            reduce using rule 28 (operand -> operandName .)
    XOR             reduce using rule 28 (operand -> operandName .)
    OR              reduce using rule 28 (operand -> operandName .)
    MINUS           reduce using rule 28 (operand -> operandName .)
    PLUS            reduce using rule 28 (operand -> operandName .)
    GE              reduce using rule 28 (operand -> operandName .)
    GT              reduce using rule 28 (operand -> operandName .)
    LE              reduce using rule 28 (operand -> operandName .)
    LT              reduce using rule 28 (operand -> operandName .)
    NE              reduce using rule 28 (operand -> operandName .)
    EQ              reduce using rule 28 (operand -> operandName .)
    ,               reduce using rule 28 (operand -> operandName .)
    NEWL            reduce using rule 28 (operand -> operandName .)
    ;               reduce using rule 28 (operand -> operandName .)
    )               reduce using rule 28 (operand -> operandName .)


state 30

    (29) operand -> literal .
    LOGIC_AND       reduce using rule 29 (operand -> literal .)
    LOGIC_OR        reduce using rule 29 (operand -> literal .)
    SHR             reduce using rule 29 (operand -> literal .)
    SHL             reduce using rule 29 (operand -> literal .)
    AND             reduce using rule 29 (operand -> literal .)
    MOD             reduce using rule 29 (operand -> literal .)
    DIV             reduce using rule 29 (operand -> literal .)
    STAR            reduce using rule 29 (operand -> literal .)
    XOR             reduce using rule 29 (operand -> literal .)
    OR              reduce using rule 29 (operand -> literal .)
    MINUS           reduce using rule 29 (operand -> literal .)
    PLUS            reduce using rule 29 (operand -> literal .)
    GE              reduce using rule 29 (operand -> literal .)
    GT              reduce using rule 29 (operand -> literal .)
    LE              reduce using rule 29 (operand -> literal .)
    LT              reduce using rule 29 (operand -> literal .)
    NE              reduce using rule 29 (operand -> literal .)
    EQ              reduce using rule 29 (operand -> literal .)
    ,               reduce using rule 29 (operand -> literal .)
    NEWL            reduce using rule 29 (operand -> literal .)
    ;               reduce using rule 29 (operand -> literal .)
    )               reduce using rule 29 (operand -> literal .)


state 31

    (33) type_ -> typeName .
    (               reduce using rule 33 (type_ -> typeName .)


state 32

    (30) operandName -> IDENTIFIER .
    LOGIC_AND       reduce using rule 30 (operandName -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 30 (operandName -> IDENTIFIER .)
    SHR             reduce using rule 30 (operandName -> IDENTIFIER .)
    SHL             reduce using rule 30 (operandName -> IDENTIFIER .)
    AND             reduce using rule 30 (operandName -> IDENTIFIER .)
    MOD             reduce using rule 30 (operandName -> IDENTIFIER .)
    DIV             reduce using rule 30 (operandName -> IDENTIFIER .)
    STAR            reduce using rule 30 (operandName -> IDENTIFIER .)
    XOR             reduce using rule 30 (operandName -> IDENTIFIER .)
    OR              reduce using rule 30 (operandName -> IDENTIFIER .)
    MINUS           reduce using rule 30 (operandName -> IDENTIFIER .)
    PLUS            reduce using rule 30 (operandName -> IDENTIFIER .)
    GE              reduce using rule 30 (operandName -> IDENTIFIER .)
    GT              reduce using rule 30 (operandName -> IDENTIFIER .)
    LE              reduce using rule 30 (operandName -> IDENTIFIER .)
    LT              reduce using rule 30 (operandName -> IDENTIFIER .)
    NE              reduce using rule 30 (operandName -> IDENTIFIER .)
    EQ              reduce using rule 30 (operandName -> IDENTIFIER .)
    ,               reduce using rule 30 (operandName -> IDENTIFIER .)
    NEWL            reduce using rule 30 (operandName -> IDENTIFIER .)
    ;               reduce using rule 30 (operandName -> IDENTIFIER .)
    )               reduce using rule 30 (operandName -> IDENTIFIER .)


state 33

    (31) literal -> basicLit .
    LOGIC_AND       reduce using rule 31 (literal -> basicLit .)
    LOGIC_OR        reduce using rule 31 (literal -> basicLit .)
    SHR             reduce using rule 31 (literal -> basicLit .)
    SHL             reduce using rule 31 (literal -> basicLit .)
    AND             reduce using rule 31 (literal -> basicLit .)
    MOD             reduce using rule 31 (literal -> basicLit .)
    DIV             reduce using rule 31 (literal -> basicLit .)
    STAR            reduce using rule 31 (literal -> basicLit .)
    XOR             reduce using rule 31 (literal -> basicLit .)
    OR              reduce using rule 31 (literal -> basicLit .)
    MINUS           reduce using rule 31 (literal -> basicLit .)
    PLUS            reduce using rule 31 (literal -> basicLit .)
    GE              reduce using rule 31 (literal -> basicLit .)
    GT              reduce using rule 31 (literal -> basicLit .)
    LE              reduce using rule 31 (literal -> basicLit .)
    LT              reduce using rule 31 (literal -> basicLit .)
    NE              reduce using rule 31 (literal -> basicLit .)
    EQ              reduce using rule 31 (literal -> basicLit .)
    ,               reduce using rule 31 (literal -> basicLit .)
    NEWL            reduce using rule 31 (literal -> basicLit .)
    ;               reduce using rule 31 (literal -> basicLit .)
    )               reduce using rule 31 (literal -> basicLit .)


state 34

    (34) typeName -> numericType .
    (               reduce using rule 34 (typeName -> numericType .)


state 35

    (35) typeName -> STRING .
    (               reduce using rule 35 (typeName -> STRING .)


state 36

    (36) typeName -> BOOL .
    (               reduce using rule 36 (typeName -> BOOL .)


state 37

    (37) typeName -> RUNE .
    (               reduce using rule 37 (typeName -> RUNE .)


state 38

    (50) basicLit -> INT_LIT .
    LOGIC_AND       reduce using rule 50 (basicLit -> INT_LIT .)
    LOGIC_OR        reduce using rule 50 (basicLit -> INT_LIT .)
    SHR             reduce using rule 50 (basicLit -> INT_LIT .)
    SHL             reduce using rule 50 (basicLit -> INT_LIT .)
    AND             reduce using rule 50 (basicLit -> INT_LIT .)
    MOD             reduce using rule 50 (basicLit -> INT_LIT .)
    DIV             reduce using rule 50 (basicLit -> INT_LIT .)
    STAR            reduce using rule 50 (basicLit -> INT_LIT .)
    XOR             reduce using rule 50 (basicLit -> INT_LIT .)
    OR              reduce using rule 50 (basicLit -> INT_LIT .)
    MINUS           reduce using rule 50 (basicLit -> INT_LIT .)
    PLUS            reduce using rule 50 (basicLit -> INT_LIT .)
    GE              reduce using rule 50 (basicLit -> INT_LIT .)
    GT              reduce using rule 50 (basicLit -> INT_LIT .)
    LE              reduce using rule 50 (basicLit -> INT_LIT .)
    LT              reduce using rule 50 (basicLit -> INT_LIT .)
    NE              reduce using rule 50 (basicLit -> INT_LIT .)
    EQ              reduce using rule 50 (basicLit -> INT_LIT .)
    ,               reduce using rule 50 (basicLit -> INT_LIT .)
    NEWL            reduce using rule 50 (basicLit -> INT_LIT .)
    ;               reduce using rule 50 (basicLit -> INT_LIT .)
    )               reduce using rule 50 (basicLit -> INT_LIT .)


state 39

    (51) basicLit -> FLOAT_LIT .
    (53) basicLit -> FLOAT_LIT . EXPONENT
    LOGIC_AND       reduce using rule 51 (basicLit -> FLOAT_LIT .)
    LOGIC_OR        reduce using rule 51 (basicLit -> FLOAT_LIT .)
    SHR             reduce using rule 51 (basicLit -> FLOAT_LIT .)
    SHL             reduce using rule 51 (basicLit -> FLOAT_LIT .)
    AND             reduce using rule 51 (basicLit -> FLOAT_LIT .)
    MOD             reduce using rule 51 (basicLit -> FLOAT_LIT .)
    DIV             reduce using rule 51 (basicLit -> FLOAT_LIT .)
    STAR            reduce using rule 51 (basicLit -> FLOAT_LIT .)
    XOR             reduce using rule 51 (basicLit -> FLOAT_LIT .)
    OR              reduce using rule 51 (basicLit -> FLOAT_LIT .)
    MINUS           reduce using rule 51 (basicLit -> FLOAT_LIT .)
    PLUS            reduce using rule 51 (basicLit -> FLOAT_LIT .)
    GE              reduce using rule 51 (basicLit -> FLOAT_LIT .)
    GT              reduce using rule 51 (basicLit -> FLOAT_LIT .)
    LE              reduce using rule 51 (basicLit -> FLOAT_LIT .)
    LT              reduce using rule 51 (basicLit -> FLOAT_LIT .)
    NE              reduce using rule 51 (basicLit -> FLOAT_LIT .)
    EQ              reduce using rule 51 (basicLit -> FLOAT_LIT .)
    ,               reduce using rule 51 (basicLit -> FLOAT_LIT .)
    NEWL            reduce using rule 51 (basicLit -> FLOAT_LIT .)
    ;               reduce using rule 51 (basicLit -> FLOAT_LIT .)
    )               reduce using rule 51 (basicLit -> FLOAT_LIT .)
    EXPONENT        shift and go to state 88


state 40

    (52) basicLit -> DECIMAL_LIT . EXPONENT
    (64) INT_LIT -> DECIMAL_LIT .
    (59) FLOAT_LIT -> DECIMAL_LIT . .
    (60) FLOAT_LIT -> DECIMAL_LIT . . DECIMAL_LIT
    EXPONENT        shift and go to state 89
    LOGIC_AND       reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    SHR             reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    SHL             reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    AND             reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    MOD             reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    DIV             reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    STAR            reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    XOR             reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    OR              reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    MINUS           reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    PLUS            reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    GE              reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    GT              reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    LE              reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    LT              reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    NE              reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    EQ              reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    ,               reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    NEWL            reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    ;               reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    )               reduce using rule 64 (INT_LIT -> DECIMAL_LIT .)
    .               shift and go to state 90


state 41

    (54) basicLit -> FALSE .
    LOGIC_AND       reduce using rule 54 (basicLit -> FALSE .)
    LOGIC_OR        reduce using rule 54 (basicLit -> FALSE .)
    SHR             reduce using rule 54 (basicLit -> FALSE .)
    SHL             reduce using rule 54 (basicLit -> FALSE .)
    AND             reduce using rule 54 (basicLit -> FALSE .)
    MOD             reduce using rule 54 (basicLit -> FALSE .)
    DIV             reduce using rule 54 (basicLit -> FALSE .)
    STAR            reduce using rule 54 (basicLit -> FALSE .)
    XOR             reduce using rule 54 (basicLit -> FALSE .)
    OR              reduce using rule 54 (basicLit -> FALSE .)
    MINUS           reduce using rule 54 (basicLit -> FALSE .)
    PLUS            reduce using rule 54 (basicLit -> FALSE .)
    GE              reduce using rule 54 (basicLit -> FALSE .)
    GT              reduce using rule 54 (basicLit -> FALSE .)
    LE              reduce using rule 54 (basicLit -> FALSE .)
    LT              reduce using rule 54 (basicLit -> FALSE .)
    NE              reduce using rule 54 (basicLit -> FALSE .)
    EQ              reduce using rule 54 (basicLit -> FALSE .)
    ,               reduce using rule 54 (basicLit -> FALSE .)
    NEWL            reduce using rule 54 (basicLit -> FALSE .)
    ;               reduce using rule 54 (basicLit -> FALSE .)
    )               reduce using rule 54 (basicLit -> FALSE .)


state 42

    (55) basicLit -> TRUE .
    LOGIC_AND       reduce using rule 55 (basicLit -> TRUE .)
    LOGIC_OR        reduce using rule 55 (basicLit -> TRUE .)
    SHR             reduce using rule 55 (basicLit -> TRUE .)
    SHL             reduce using rule 55 (basicLit -> TRUE .)
    AND             reduce using rule 55 (basicLit -> TRUE .)
    MOD             reduce using rule 55 (basicLit -> TRUE .)
    DIV             reduce using rule 55 (basicLit -> TRUE .)
    STAR            reduce using rule 55 (basicLit -> TRUE .)
    XOR             reduce using rule 55 (basicLit -> TRUE .)
    OR              reduce using rule 55 (basicLit -> TRUE .)
    MINUS           reduce using rule 55 (basicLit -> TRUE .)
    PLUS            reduce using rule 55 (basicLit -> TRUE .)
    GE              reduce using rule 55 (basicLit -> TRUE .)
    GT              reduce using rule 55 (basicLit -> TRUE .)
    LE              reduce using rule 55 (basicLit -> TRUE .)
    LT              reduce using rule 55 (basicLit -> TRUE .)
    NE              reduce using rule 55 (basicLit -> TRUE .)
    EQ              reduce using rule 55 (basicLit -> TRUE .)
    ,               reduce using rule 55 (basicLit -> TRUE .)
    NEWL            reduce using rule 55 (basicLit -> TRUE .)
    ;               reduce using rule 55 (basicLit -> TRUE .)
    )               reduce using rule 55 (basicLit -> TRUE .)


state 43

    (56) basicLit -> RUNE_LIT .
    LOGIC_AND       reduce using rule 56 (basicLit -> RUNE_LIT .)
    LOGIC_OR        reduce using rule 56 (basicLit -> RUNE_LIT .)
    SHR             reduce using rule 56 (basicLit -> RUNE_LIT .)
    SHL             reduce using rule 56 (basicLit -> RUNE_LIT .)
    AND             reduce using rule 56 (basicLit -> RUNE_LIT .)
    MOD             reduce using rule 56 (basicLit -> RUNE_LIT .)
    DIV             reduce using rule 56 (basicLit -> RUNE_LIT .)
    STAR            reduce using rule 56 (basicLit -> RUNE_LIT .)
    XOR             reduce using rule 56 (basicLit -> RUNE_LIT .)
    OR              reduce using rule 56 (basicLit -> RUNE_LIT .)
    MINUS           reduce using rule 56 (basicLit -> RUNE_LIT .)
    PLUS            reduce using rule 56 (basicLit -> RUNE_LIT .)
    GE              reduce using rule 56 (basicLit -> RUNE_LIT .)
    GT              reduce using rule 56 (basicLit -> RUNE_LIT .)
    LE              reduce using rule 56 (basicLit -> RUNE_LIT .)
    LT              reduce using rule 56 (basicLit -> RUNE_LIT .)
    NE              reduce using rule 56 (basicLit -> RUNE_LIT .)
    EQ              reduce using rule 56 (basicLit -> RUNE_LIT .)
    ,               reduce using rule 56 (basicLit -> RUNE_LIT .)
    NEWL            reduce using rule 56 (basicLit -> RUNE_LIT .)
    ;               reduce using rule 56 (basicLit -> RUNE_LIT .)
    )               reduce using rule 56 (basicLit -> RUNE_LIT .)


state 44

    (57) basicLit -> STRING_LIT .
    LOGIC_AND       reduce using rule 57 (basicLit -> STRING_LIT .)
    LOGIC_OR        reduce using rule 57 (basicLit -> STRING_LIT .)
    SHR             reduce using rule 57 (basicLit -> STRING_LIT .)
    SHL             reduce using rule 57 (basicLit -> STRING_LIT .)
    AND             reduce using rule 57 (basicLit -> STRING_LIT .)
    MOD             reduce using rule 57 (basicLit -> STRING_LIT .)
    DIV             reduce using rule 57 (basicLit -> STRING_LIT .)
    STAR            reduce using rule 57 (basicLit -> STRING_LIT .)
    XOR             reduce using rule 57 (basicLit -> STRING_LIT .)
    OR              reduce using rule 57 (basicLit -> STRING_LIT .)
    MINUS           reduce using rule 57 (basicLit -> STRING_LIT .)
    PLUS            reduce using rule 57 (basicLit -> STRING_LIT .)
    GE              reduce using rule 57 (basicLit -> STRING_LIT .)
    GT              reduce using rule 57 (basicLit -> STRING_LIT .)
    LE              reduce using rule 57 (basicLit -> STRING_LIT .)
    LT              reduce using rule 57 (basicLit -> STRING_LIT .)
    NE              reduce using rule 57 (basicLit -> STRING_LIT .)
    EQ              reduce using rule 57 (basicLit -> STRING_LIT .)
    ,               reduce using rule 57 (basicLit -> STRING_LIT .)
    NEWL            reduce using rule 57 (basicLit -> STRING_LIT .)
    ;               reduce using rule 57 (basicLit -> STRING_LIT .)
    )               reduce using rule 57 (basicLit -> STRING_LIT .)


state 45

    (38) numericType -> F32 .
    (               reduce using rule 38 (numericType -> F32 .)


state 46

    (39) numericType -> F64 .
    (               reduce using rule 39 (numericType -> F64 .)


state 47

    (40) numericType -> ISIZE .
    (               reduce using rule 40 (numericType -> ISIZE .)


state 48

    (41) numericType -> I64 .
    (               reduce using rule 41 (numericType -> I64 .)


state 49

    (42) numericType -> I32 .
    (               reduce using rule 42 (numericType -> I32 .)


state 50

    (43) numericType -> I16 .
    (               reduce using rule 43 (numericType -> I16 .)


state 51

    (44) numericType -> I8 .
    (               reduce using rule 44 (numericType -> I8 .)


state 52

    (45) numericType -> USIZE .
    (               reduce using rule 45 (numericType -> USIZE .)


state 53

    (46) numericType -> U64 .
    (               reduce using rule 46 (numericType -> U64 .)


state 54

    (47) numericType -> U32 .
    (               reduce using rule 47 (numericType -> U32 .)


state 55

    (48) numericType -> U16 .
    (               reduce using rule 48 (numericType -> U16 .)


state 56

    (49) numericType -> U8 .
    (               reduce using rule 49 (numericType -> U8 .)


state 57

    (61) INT_LIT -> HEX_LIT .
    LOGIC_AND       reduce using rule 61 (INT_LIT -> HEX_LIT .)
    LOGIC_OR        reduce using rule 61 (INT_LIT -> HEX_LIT .)
    SHR             reduce using rule 61 (INT_LIT -> HEX_LIT .)
    SHL             reduce using rule 61 (INT_LIT -> HEX_LIT .)
    AND             reduce using rule 61 (INT_LIT -> HEX_LIT .)
    MOD             reduce using rule 61 (INT_LIT -> HEX_LIT .)
    DIV             reduce using rule 61 (INT_LIT -> HEX_LIT .)
    STAR            reduce using rule 61 (INT_LIT -> HEX_LIT .)
    XOR             reduce using rule 61 (INT_LIT -> HEX_LIT .)
    OR              reduce using rule 61 (INT_LIT -> HEX_LIT .)
    MINUS           reduce using rule 61 (INT_LIT -> HEX_LIT .)
    PLUS            reduce using rule 61 (INT_LIT -> HEX_LIT .)
    GE              reduce using rule 61 (INT_LIT -> HEX_LIT .)
    GT              reduce using rule 61 (INT_LIT -> HEX_LIT .)
    LE              reduce using rule 61 (INT_LIT -> HEX_LIT .)
    LT              reduce using rule 61 (INT_LIT -> HEX_LIT .)
    NE              reduce using rule 61 (INT_LIT -> HEX_LIT .)
    EQ              reduce using rule 61 (INT_LIT -> HEX_LIT .)
    ,               reduce using rule 61 (INT_LIT -> HEX_LIT .)
    NEWL            reduce using rule 61 (INT_LIT -> HEX_LIT .)
    ;               reduce using rule 61 (INT_LIT -> HEX_LIT .)
    )               reduce using rule 61 (INT_LIT -> HEX_LIT .)


state 58

    (62) INT_LIT -> OCTAL_LIT .
    LOGIC_AND       reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    LOGIC_OR        reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    SHR             reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    SHL             reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    AND             reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    MOD             reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    DIV             reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    STAR            reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    XOR             reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    OR              reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    MINUS           reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    PLUS            reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    GE              reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    GT              reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    LE              reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    LT              reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    NE              reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    EQ              reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    ,               reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    NEWL            reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    ;               reduce using rule 62 (INT_LIT -> OCTAL_LIT .)
    )               reduce using rule 62 (INT_LIT -> OCTAL_LIT .)


state 59

    (63) INT_LIT -> BINARY_LIT .
    LOGIC_AND       reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    LOGIC_OR        reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    SHR             reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    SHL             reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    AND             reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    MOD             reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    DIV             reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    STAR            reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    XOR             reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    OR              reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    MINUS           reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    PLUS            reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    GE              reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    GT              reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    LE              reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    LT              reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    NE              reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    EQ              reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    ,               reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    NEWL            reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    ;               reduce using rule 63 (INT_LIT -> BINARY_LIT .)
    )               reduce using rule 63 (INT_LIT -> BINARY_LIT .)


state 60

    (58) FLOAT_LIT -> . . DECIMAL_LIT
    DECIMAL_LIT     shift and go to state 91


state 61

    (7) identifierList -> identifierList , IDENTIFIER .
    DECL_ASGN       reduce using rule 7 (identifierList -> identifierList , IDENTIFIER .)
    ,               reduce using rule 7 (identifierList -> identifierList , IDENTIFIER .)


state 62

    (9) expressionList -> expressionList , . expression
    (21) expression -> . expression BINARY_OP unaryExpr
    (22) expression -> . unaryExpr
    (23) unaryExpr -> . UNARY_OP unaryExpr
    (24) unaryExpr -> . primaryExpr
    (90) UNARY_OP -> . AND
    (91) UNARY_OP -> . EXCLM
    (92) UNARY_OP -> . MINUS
    (25) primaryExpr -> . conversion
    (26) primaryExpr -> . operand
    (32) conversion -> . type_ ( expression )
    (27) operand -> . ( expression )
    (28) operand -> . operandName
    (29) operand -> . literal
    (33) type_ -> . typeName
    (30) operandName -> . IDENTIFIER
    (31) literal -> . basicLit
    (34) typeName -> . numericType
    (35) typeName -> . STRING
    (36) typeName -> . BOOL
    (37) typeName -> . RUNE
    (50) basicLit -> . INT_LIT
    (51) basicLit -> . FLOAT_LIT
    (52) basicLit -> . DECIMAL_LIT EXPONENT
    (53) basicLit -> . FLOAT_LIT EXPONENT
    (54) basicLit -> . FALSE
    (55) basicLit -> . TRUE
    (56) basicLit -> . RUNE_LIT
    (57) basicLit -> . STRING_LIT
    (38) numericType -> . F32
    (39) numericType -> . F64
    (40) numericType -> . ISIZE
    (41) numericType -> . I64
    (42) numericType -> . I32
    (43) numericType -> . I16
    (44) numericType -> . I8
    (45) numericType -> . USIZE
    (46) numericType -> . U64
    (47) numericType -> . U32
    (48) numericType -> . U16
    (49) numericType -> . U8
    (61) INT_LIT -> . HEX_LIT
    (62) INT_LIT -> . OCTAL_LIT
    (63) INT_LIT -> . BINARY_LIT
    (64) INT_LIT -> . DECIMAL_LIT
    (58) FLOAT_LIT -> . . DECIMAL_LIT
    (59) FLOAT_LIT -> . DECIMAL_LIT .
    (60) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 22
    EXCLM           shift and go to state 23
    MINUS           shift and go to state 24
    (               shift and go to state 28
    IDENTIFIER      shift and go to state 32
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    ISIZE           shift and go to state 47
    I64             shift and go to state 48
    I32             shift and go to state 49
    I16             shift and go to state 50
    I8              shift and go to state 51
    USIZE           shift and go to state 52
    U64             shift and go to state 53
    U32             shift and go to state 54
    U16             shift and go to state 55
    U8              shift and go to state 56
    HEX_LIT         shift and go to state 57
    OCTAL_LIT       shift and go to state 58
    BINARY_LIT      shift and go to state 59
    .               shift and go to state 60

    expression                     shift and go to state 92
    unaryExpr                      shift and go to state 19
    UNARY_OP                       shift and go to state 20
    primaryExpr                    shift and go to state 21
    conversion                     shift and go to state 25
    operand                        shift and go to state 26
    type_                          shift and go to state 27
    operandName                    shift and go to state 29
    literal                        shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 33
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 63

    (21) expression -> expression BINARY_OP . unaryExpr
    (23) unaryExpr -> . UNARY_OP unaryExpr
    (24) unaryExpr -> . primaryExpr
    (90) UNARY_OP -> . AND
    (91) UNARY_OP -> . EXCLM
    (92) UNARY_OP -> . MINUS
    (25) primaryExpr -> . conversion
    (26) primaryExpr -> . operand
    (32) conversion -> . type_ ( expression )
    (27) operand -> . ( expression )
    (28) operand -> . operandName
    (29) operand -> . literal
    (33) type_ -> . typeName
    (30) operandName -> . IDENTIFIER
    (31) literal -> . basicLit
    (34) typeName -> . numericType
    (35) typeName -> . STRING
    (36) typeName -> . BOOL
    (37) typeName -> . RUNE
    (50) basicLit -> . INT_LIT
    (51) basicLit -> . FLOAT_LIT
    (52) basicLit -> . DECIMAL_LIT EXPONENT
    (53) basicLit -> . FLOAT_LIT EXPONENT
    (54) basicLit -> . FALSE
    (55) basicLit -> . TRUE
    (56) basicLit -> . RUNE_LIT
    (57) basicLit -> . STRING_LIT
    (38) numericType -> . F32
    (39) numericType -> . F64
    (40) numericType -> . ISIZE
    (41) numericType -> . I64
    (42) numericType -> . I32
    (43) numericType -> . I16
    (44) numericType -> . I8
    (45) numericType -> . USIZE
    (46) numericType -> . U64
    (47) numericType -> . U32
    (48) numericType -> . U16
    (49) numericType -> . U8
    (61) INT_LIT -> . HEX_LIT
    (62) INT_LIT -> . OCTAL_LIT
    (63) INT_LIT -> . BINARY_LIT
    (64) INT_LIT -> . DECIMAL_LIT
    (58) FLOAT_LIT -> . . DECIMAL_LIT
    (59) FLOAT_LIT -> . DECIMAL_LIT .
    (60) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 22
    EXCLM           shift and go to state 23
    MINUS           shift and go to state 24
    (               shift and go to state 28
    IDENTIFIER      shift and go to state 32
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    ISIZE           shift and go to state 47
    I64             shift and go to state 48
    I32             shift and go to state 49
    I16             shift and go to state 50
    I8              shift and go to state 51
    USIZE           shift and go to state 52
    U64             shift and go to state 53
    U32             shift and go to state 54
    U16             shift and go to state 55
    U8              shift and go to state 56
    HEX_LIT         shift and go to state 57
    OCTAL_LIT       shift and go to state 58
    BINARY_LIT      shift and go to state 59
    .               shift and go to state 60

    unaryExpr                      shift and go to state 93
    UNARY_OP                       shift and go to state 20
    primaryExpr                    shift and go to state 21
    conversion                     shift and go to state 25
    operand                        shift and go to state 26
    type_                          shift and go to state 27
    operandName                    shift and go to state 29
    literal                        shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 33
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 64

    (69) BINARY_OP -> MUL_OP .
    AND             reduce using rule 69 (BINARY_OP -> MUL_OP .)
    EXCLM           reduce using rule 69 (BINARY_OP -> MUL_OP .)
    MINUS           reduce using rule 69 (BINARY_OP -> MUL_OP .)
    (               reduce using rule 69 (BINARY_OP -> MUL_OP .)
    IDENTIFIER      reduce using rule 69 (BINARY_OP -> MUL_OP .)
    STRING          reduce using rule 69 (BINARY_OP -> MUL_OP .)
    BOOL            reduce using rule 69 (BINARY_OP -> MUL_OP .)
    RUNE            reduce using rule 69 (BINARY_OP -> MUL_OP .)
    DECIMAL_LIT     reduce using rule 69 (BINARY_OP -> MUL_OP .)
    FALSE           reduce using rule 69 (BINARY_OP -> MUL_OP .)
    TRUE            reduce using rule 69 (BINARY_OP -> MUL_OP .)
    RUNE_LIT        reduce using rule 69 (BINARY_OP -> MUL_OP .)
    STRING_LIT      reduce using rule 69 (BINARY_OP -> MUL_OP .)
    F32             reduce using rule 69 (BINARY_OP -> MUL_OP .)
    F64             reduce using rule 69 (BINARY_OP -> MUL_OP .)
    ISIZE           reduce using rule 69 (BINARY_OP -> MUL_OP .)
    I64             reduce using rule 69 (BINARY_OP -> MUL_OP .)
    I32             reduce using rule 69 (BINARY_OP -> MUL_OP .)
    I16             reduce using rule 69 (BINARY_OP -> MUL_OP .)
    I8              reduce using rule 69 (BINARY_OP -> MUL_OP .)
    USIZE           reduce using rule 69 (BINARY_OP -> MUL_OP .)
    U64             reduce using rule 69 (BINARY_OP -> MUL_OP .)
    U32             reduce using rule 69 (BINARY_OP -> MUL_OP .)
    U16             reduce using rule 69 (BINARY_OP -> MUL_OP .)
    U8              reduce using rule 69 (BINARY_OP -> MUL_OP .)
    HEX_LIT         reduce using rule 69 (BINARY_OP -> MUL_OP .)
    OCTAL_LIT       reduce using rule 69 (BINARY_OP -> MUL_OP .)
    BINARY_LIT      reduce using rule 69 (BINARY_OP -> MUL_OP .)
    .               reduce using rule 69 (BINARY_OP -> MUL_OP .)


state 65

    (70) BINARY_OP -> ADD_OP .
    AND             reduce using rule 70 (BINARY_OP -> ADD_OP .)
    EXCLM           reduce using rule 70 (BINARY_OP -> ADD_OP .)
    MINUS           reduce using rule 70 (BINARY_OP -> ADD_OP .)
    (               reduce using rule 70 (BINARY_OP -> ADD_OP .)
    IDENTIFIER      reduce using rule 70 (BINARY_OP -> ADD_OP .)
    STRING          reduce using rule 70 (BINARY_OP -> ADD_OP .)
    BOOL            reduce using rule 70 (BINARY_OP -> ADD_OP .)
    RUNE            reduce using rule 70 (BINARY_OP -> ADD_OP .)
    DECIMAL_LIT     reduce using rule 70 (BINARY_OP -> ADD_OP .)
    FALSE           reduce using rule 70 (BINARY_OP -> ADD_OP .)
    TRUE            reduce using rule 70 (BINARY_OP -> ADD_OP .)
    RUNE_LIT        reduce using rule 70 (BINARY_OP -> ADD_OP .)
    STRING_LIT      reduce using rule 70 (BINARY_OP -> ADD_OP .)
    F32             reduce using rule 70 (BINARY_OP -> ADD_OP .)
    F64             reduce using rule 70 (BINARY_OP -> ADD_OP .)
    ISIZE           reduce using rule 70 (BINARY_OP -> ADD_OP .)
    I64             reduce using rule 70 (BINARY_OP -> ADD_OP .)
    I32             reduce using rule 70 (BINARY_OP -> ADD_OP .)
    I16             reduce using rule 70 (BINARY_OP -> ADD_OP .)
    I8              reduce using rule 70 (BINARY_OP -> ADD_OP .)
    USIZE           reduce using rule 70 (BINARY_OP -> ADD_OP .)
    U64             reduce using rule 70 (BINARY_OP -> ADD_OP .)
    U32             reduce using rule 70 (BINARY_OP -> ADD_OP .)
    U16             reduce using rule 70 (BINARY_OP -> ADD_OP .)
    U8              reduce using rule 70 (BINARY_OP -> ADD_OP .)
    HEX_LIT         reduce using rule 70 (BINARY_OP -> ADD_OP .)
    OCTAL_LIT       reduce using rule 70 (BINARY_OP -> ADD_OP .)
    BINARY_LIT      reduce using rule 70 (BINARY_OP -> ADD_OP .)
    .               reduce using rule 70 (BINARY_OP -> ADD_OP .)


state 66

    (71) BINARY_OP -> REL_OP .
    AND             reduce using rule 71 (BINARY_OP -> REL_OP .)
    EXCLM           reduce using rule 71 (BINARY_OP -> REL_OP .)
    MINUS           reduce using rule 71 (BINARY_OP -> REL_OP .)
    (               reduce using rule 71 (BINARY_OP -> REL_OP .)
    IDENTIFIER      reduce using rule 71 (BINARY_OP -> REL_OP .)
    STRING          reduce using rule 71 (BINARY_OP -> REL_OP .)
    BOOL            reduce using rule 71 (BINARY_OP -> REL_OP .)
    RUNE            reduce using rule 71 (BINARY_OP -> REL_OP .)
    DECIMAL_LIT     reduce using rule 71 (BINARY_OP -> REL_OP .)
    FALSE           reduce using rule 71 (BINARY_OP -> REL_OP .)
    TRUE            reduce using rule 71 (BINARY_OP -> REL_OP .)
    RUNE_LIT        reduce using rule 71 (BINARY_OP -> REL_OP .)
    STRING_LIT      reduce using rule 71 (BINARY_OP -> REL_OP .)
    F32             reduce using rule 71 (BINARY_OP -> REL_OP .)
    F64             reduce using rule 71 (BINARY_OP -> REL_OP .)
    ISIZE           reduce using rule 71 (BINARY_OP -> REL_OP .)
    I64             reduce using rule 71 (BINARY_OP -> REL_OP .)
    I32             reduce using rule 71 (BINARY_OP -> REL_OP .)
    I16             reduce using rule 71 (BINARY_OP -> REL_OP .)
    I8              reduce using rule 71 (BINARY_OP -> REL_OP .)
    USIZE           reduce using rule 71 (BINARY_OP -> REL_OP .)
    U64             reduce using rule 71 (BINARY_OP -> REL_OP .)
    U32             reduce using rule 71 (BINARY_OP -> REL_OP .)
    U16             reduce using rule 71 (BINARY_OP -> REL_OP .)
    U8              reduce using rule 71 (BINARY_OP -> REL_OP .)
    HEX_LIT         reduce using rule 71 (BINARY_OP -> REL_OP .)
    OCTAL_LIT       reduce using rule 71 (BINARY_OP -> REL_OP .)
    BINARY_LIT      reduce using rule 71 (BINARY_OP -> REL_OP .)
    .               reduce using rule 71 (BINARY_OP -> REL_OP .)


state 67

    (72) BINARY_OP -> LOGIC_AND .
    AND             reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    EXCLM           reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    MINUS           reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    (               reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    IDENTIFIER      reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    STRING          reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    BOOL            reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    RUNE            reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    DECIMAL_LIT     reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    FALSE           reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    TRUE            reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    RUNE_LIT        reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    STRING_LIT      reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    F32             reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    F64             reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    ISIZE           reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    I64             reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    I32             reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    I16             reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    I8              reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    USIZE           reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    U64             reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    U32             reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    U16             reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    U8              reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    HEX_LIT         reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    OCTAL_LIT       reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    BINARY_LIT      reduce using rule 72 (BINARY_OP -> LOGIC_AND .)
    .               reduce using rule 72 (BINARY_OP -> LOGIC_AND .)


state 68

    (73) BINARY_OP -> LOGIC_OR .
    AND             reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    EXCLM           reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    MINUS           reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    (               reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    IDENTIFIER      reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    STRING          reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    BOOL            reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    RUNE            reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    DECIMAL_LIT     reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    FALSE           reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    TRUE            reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    RUNE_LIT        reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    STRING_LIT      reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    F32             reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    F64             reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    ISIZE           reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    I64             reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    I32             reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    I16             reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    I8              reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    USIZE           reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    U64             reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    U32             reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    U16             reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    U8              reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    HEX_LIT         reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    OCTAL_LIT       reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    BINARY_LIT      reduce using rule 73 (BINARY_OP -> LOGIC_OR .)
    .               reduce using rule 73 (BINARY_OP -> LOGIC_OR .)


state 69

    (84) MUL_OP -> SHR .
    AND             reduce using rule 84 (MUL_OP -> SHR .)
    EXCLM           reduce using rule 84 (MUL_OP -> SHR .)
    MINUS           reduce using rule 84 (MUL_OP -> SHR .)
    (               reduce using rule 84 (MUL_OP -> SHR .)
    IDENTIFIER      reduce using rule 84 (MUL_OP -> SHR .)
    STRING          reduce using rule 84 (MUL_OP -> SHR .)
    BOOL            reduce using rule 84 (MUL_OP -> SHR .)
    RUNE            reduce using rule 84 (MUL_OP -> SHR .)
    DECIMAL_LIT     reduce using rule 84 (MUL_OP -> SHR .)
    FALSE           reduce using rule 84 (MUL_OP -> SHR .)
    TRUE            reduce using rule 84 (MUL_OP -> SHR .)
    RUNE_LIT        reduce using rule 84 (MUL_OP -> SHR .)
    STRING_LIT      reduce using rule 84 (MUL_OP -> SHR .)
    F32             reduce using rule 84 (MUL_OP -> SHR .)
    F64             reduce using rule 84 (MUL_OP -> SHR .)
    ISIZE           reduce using rule 84 (MUL_OP -> SHR .)
    I64             reduce using rule 84 (MUL_OP -> SHR .)
    I32             reduce using rule 84 (MUL_OP -> SHR .)
    I16             reduce using rule 84 (MUL_OP -> SHR .)
    I8              reduce using rule 84 (MUL_OP -> SHR .)
    USIZE           reduce using rule 84 (MUL_OP -> SHR .)
    U64             reduce using rule 84 (MUL_OP -> SHR .)
    U32             reduce using rule 84 (MUL_OP -> SHR .)
    U16             reduce using rule 84 (MUL_OP -> SHR .)
    U8              reduce using rule 84 (MUL_OP -> SHR .)
    HEX_LIT         reduce using rule 84 (MUL_OP -> SHR .)
    OCTAL_LIT       reduce using rule 84 (MUL_OP -> SHR .)
    BINARY_LIT      reduce using rule 84 (MUL_OP -> SHR .)
    .               reduce using rule 84 (MUL_OP -> SHR .)


state 70

    (85) MUL_OP -> SHL .
    AND             reduce using rule 85 (MUL_OP -> SHL .)
    EXCLM           reduce using rule 85 (MUL_OP -> SHL .)
    MINUS           reduce using rule 85 (MUL_OP -> SHL .)
    (               reduce using rule 85 (MUL_OP -> SHL .)
    IDENTIFIER      reduce using rule 85 (MUL_OP -> SHL .)
    STRING          reduce using rule 85 (MUL_OP -> SHL .)
    BOOL            reduce using rule 85 (MUL_OP -> SHL .)
    RUNE            reduce using rule 85 (MUL_OP -> SHL .)
    DECIMAL_LIT     reduce using rule 85 (MUL_OP -> SHL .)
    FALSE           reduce using rule 85 (MUL_OP -> SHL .)
    TRUE            reduce using rule 85 (MUL_OP -> SHL .)
    RUNE_LIT        reduce using rule 85 (MUL_OP -> SHL .)
    STRING_LIT      reduce using rule 85 (MUL_OP -> SHL .)
    F32             reduce using rule 85 (MUL_OP -> SHL .)
    F64             reduce using rule 85 (MUL_OP -> SHL .)
    ISIZE           reduce using rule 85 (MUL_OP -> SHL .)
    I64             reduce using rule 85 (MUL_OP -> SHL .)
    I32             reduce using rule 85 (MUL_OP -> SHL .)
    I16             reduce using rule 85 (MUL_OP -> SHL .)
    I8              reduce using rule 85 (MUL_OP -> SHL .)
    USIZE           reduce using rule 85 (MUL_OP -> SHL .)
    U64             reduce using rule 85 (MUL_OP -> SHL .)
    U32             reduce using rule 85 (MUL_OP -> SHL .)
    U16             reduce using rule 85 (MUL_OP -> SHL .)
    U8              reduce using rule 85 (MUL_OP -> SHL .)
    HEX_LIT         reduce using rule 85 (MUL_OP -> SHL .)
    OCTAL_LIT       reduce using rule 85 (MUL_OP -> SHL .)
    BINARY_LIT      reduce using rule 85 (MUL_OP -> SHL .)
    .               reduce using rule 85 (MUL_OP -> SHL .)


state 71

    (86) MUL_OP -> AND .
    AND             reduce using rule 86 (MUL_OP -> AND .)
    EXCLM           reduce using rule 86 (MUL_OP -> AND .)
    MINUS           reduce using rule 86 (MUL_OP -> AND .)
    (               reduce using rule 86 (MUL_OP -> AND .)
    IDENTIFIER      reduce using rule 86 (MUL_OP -> AND .)
    STRING          reduce using rule 86 (MUL_OP -> AND .)
    BOOL            reduce using rule 86 (MUL_OP -> AND .)
    RUNE            reduce using rule 86 (MUL_OP -> AND .)
    DECIMAL_LIT     reduce using rule 86 (MUL_OP -> AND .)
    FALSE           reduce using rule 86 (MUL_OP -> AND .)
    TRUE            reduce using rule 86 (MUL_OP -> AND .)
    RUNE_LIT        reduce using rule 86 (MUL_OP -> AND .)
    STRING_LIT      reduce using rule 86 (MUL_OP -> AND .)
    F32             reduce using rule 86 (MUL_OP -> AND .)
    F64             reduce using rule 86 (MUL_OP -> AND .)
    ISIZE           reduce using rule 86 (MUL_OP -> AND .)
    I64             reduce using rule 86 (MUL_OP -> AND .)
    I32             reduce using rule 86 (MUL_OP -> AND .)
    I16             reduce using rule 86 (MUL_OP -> AND .)
    I8              reduce using rule 86 (MUL_OP -> AND .)
    USIZE           reduce using rule 86 (MUL_OP -> AND .)
    U64             reduce using rule 86 (MUL_OP -> AND .)
    U32             reduce using rule 86 (MUL_OP -> AND .)
    U16             reduce using rule 86 (MUL_OP -> AND .)
    U8              reduce using rule 86 (MUL_OP -> AND .)
    HEX_LIT         reduce using rule 86 (MUL_OP -> AND .)
    OCTAL_LIT       reduce using rule 86 (MUL_OP -> AND .)
    BINARY_LIT      reduce using rule 86 (MUL_OP -> AND .)
    .               reduce using rule 86 (MUL_OP -> AND .)


state 72

    (87) MUL_OP -> MOD .
    AND             reduce using rule 87 (MUL_OP -> MOD .)
    EXCLM           reduce using rule 87 (MUL_OP -> MOD .)
    MINUS           reduce using rule 87 (MUL_OP -> MOD .)
    (               reduce using rule 87 (MUL_OP -> MOD .)
    IDENTIFIER      reduce using rule 87 (MUL_OP -> MOD .)
    STRING          reduce using rule 87 (MUL_OP -> MOD .)
    BOOL            reduce using rule 87 (MUL_OP -> MOD .)
    RUNE            reduce using rule 87 (MUL_OP -> MOD .)
    DECIMAL_LIT     reduce using rule 87 (MUL_OP -> MOD .)
    FALSE           reduce using rule 87 (MUL_OP -> MOD .)
    TRUE            reduce using rule 87 (MUL_OP -> MOD .)
    RUNE_LIT        reduce using rule 87 (MUL_OP -> MOD .)
    STRING_LIT      reduce using rule 87 (MUL_OP -> MOD .)
    F32             reduce using rule 87 (MUL_OP -> MOD .)
    F64             reduce using rule 87 (MUL_OP -> MOD .)
    ISIZE           reduce using rule 87 (MUL_OP -> MOD .)
    I64             reduce using rule 87 (MUL_OP -> MOD .)
    I32             reduce using rule 87 (MUL_OP -> MOD .)
    I16             reduce using rule 87 (MUL_OP -> MOD .)
    I8              reduce using rule 87 (MUL_OP -> MOD .)
    USIZE           reduce using rule 87 (MUL_OP -> MOD .)
    U64             reduce using rule 87 (MUL_OP -> MOD .)
    U32             reduce using rule 87 (MUL_OP -> MOD .)
    U16             reduce using rule 87 (MUL_OP -> MOD .)
    U8              reduce using rule 87 (MUL_OP -> MOD .)
    HEX_LIT         reduce using rule 87 (MUL_OP -> MOD .)
    OCTAL_LIT       reduce using rule 87 (MUL_OP -> MOD .)
    BINARY_LIT      reduce using rule 87 (MUL_OP -> MOD .)
    .               reduce using rule 87 (MUL_OP -> MOD .)


state 73

    (88) MUL_OP -> DIV .
    AND             reduce using rule 88 (MUL_OP -> DIV .)
    EXCLM           reduce using rule 88 (MUL_OP -> DIV .)
    MINUS           reduce using rule 88 (MUL_OP -> DIV .)
    (               reduce using rule 88 (MUL_OP -> DIV .)
    IDENTIFIER      reduce using rule 88 (MUL_OP -> DIV .)
    STRING          reduce using rule 88 (MUL_OP -> DIV .)
    BOOL            reduce using rule 88 (MUL_OP -> DIV .)
    RUNE            reduce using rule 88 (MUL_OP -> DIV .)
    DECIMAL_LIT     reduce using rule 88 (MUL_OP -> DIV .)
    FALSE           reduce using rule 88 (MUL_OP -> DIV .)
    TRUE            reduce using rule 88 (MUL_OP -> DIV .)
    RUNE_LIT        reduce using rule 88 (MUL_OP -> DIV .)
    STRING_LIT      reduce using rule 88 (MUL_OP -> DIV .)
    F32             reduce using rule 88 (MUL_OP -> DIV .)
    F64             reduce using rule 88 (MUL_OP -> DIV .)
    ISIZE           reduce using rule 88 (MUL_OP -> DIV .)
    I64             reduce using rule 88 (MUL_OP -> DIV .)
    I32             reduce using rule 88 (MUL_OP -> DIV .)
    I16             reduce using rule 88 (MUL_OP -> DIV .)
    I8              reduce using rule 88 (MUL_OP -> DIV .)
    USIZE           reduce using rule 88 (MUL_OP -> DIV .)
    U64             reduce using rule 88 (MUL_OP -> DIV .)
    U32             reduce using rule 88 (MUL_OP -> DIV .)
    U16             reduce using rule 88 (MUL_OP -> DIV .)
    U8              reduce using rule 88 (MUL_OP -> DIV .)
    HEX_LIT         reduce using rule 88 (MUL_OP -> DIV .)
    OCTAL_LIT       reduce using rule 88 (MUL_OP -> DIV .)
    BINARY_LIT      reduce using rule 88 (MUL_OP -> DIV .)
    .               reduce using rule 88 (MUL_OP -> DIV .)


state 74

    (89) MUL_OP -> STAR .
    AND             reduce using rule 89 (MUL_OP -> STAR .)
    EXCLM           reduce using rule 89 (MUL_OP -> STAR .)
    MINUS           reduce using rule 89 (MUL_OP -> STAR .)
    (               reduce using rule 89 (MUL_OP -> STAR .)
    IDENTIFIER      reduce using rule 89 (MUL_OP -> STAR .)
    STRING          reduce using rule 89 (MUL_OP -> STAR .)
    BOOL            reduce using rule 89 (MUL_OP -> STAR .)
    RUNE            reduce using rule 89 (MUL_OP -> STAR .)
    DECIMAL_LIT     reduce using rule 89 (MUL_OP -> STAR .)
    FALSE           reduce using rule 89 (MUL_OP -> STAR .)
    TRUE            reduce using rule 89 (MUL_OP -> STAR .)
    RUNE_LIT        reduce using rule 89 (MUL_OP -> STAR .)
    STRING_LIT      reduce using rule 89 (MUL_OP -> STAR .)
    F32             reduce using rule 89 (MUL_OP -> STAR .)
    F64             reduce using rule 89 (MUL_OP -> STAR .)
    ISIZE           reduce using rule 89 (MUL_OP -> STAR .)
    I64             reduce using rule 89 (MUL_OP -> STAR .)
    I32             reduce using rule 89 (MUL_OP -> STAR .)
    I16             reduce using rule 89 (MUL_OP -> STAR .)
    I8              reduce using rule 89 (MUL_OP -> STAR .)
    USIZE           reduce using rule 89 (MUL_OP -> STAR .)
    U64             reduce using rule 89 (MUL_OP -> STAR .)
    U32             reduce using rule 89 (MUL_OP -> STAR .)
    U16             reduce using rule 89 (MUL_OP -> STAR .)
    U8              reduce using rule 89 (MUL_OP -> STAR .)
    HEX_LIT         reduce using rule 89 (MUL_OP -> STAR .)
    OCTAL_LIT       reduce using rule 89 (MUL_OP -> STAR .)
    BINARY_LIT      reduce using rule 89 (MUL_OP -> STAR .)
    .               reduce using rule 89 (MUL_OP -> STAR .)


state 75

    (80) ADD_OP -> XOR .
    AND             reduce using rule 80 (ADD_OP -> XOR .)
    EXCLM           reduce using rule 80 (ADD_OP -> XOR .)
    MINUS           reduce using rule 80 (ADD_OP -> XOR .)
    (               reduce using rule 80 (ADD_OP -> XOR .)
    IDENTIFIER      reduce using rule 80 (ADD_OP -> XOR .)
    STRING          reduce using rule 80 (ADD_OP -> XOR .)
    BOOL            reduce using rule 80 (ADD_OP -> XOR .)
    RUNE            reduce using rule 80 (ADD_OP -> XOR .)
    DECIMAL_LIT     reduce using rule 80 (ADD_OP -> XOR .)
    FALSE           reduce using rule 80 (ADD_OP -> XOR .)
    TRUE            reduce using rule 80 (ADD_OP -> XOR .)
    RUNE_LIT        reduce using rule 80 (ADD_OP -> XOR .)
    STRING_LIT      reduce using rule 80 (ADD_OP -> XOR .)
    F32             reduce using rule 80 (ADD_OP -> XOR .)
    F64             reduce using rule 80 (ADD_OP -> XOR .)
    ISIZE           reduce using rule 80 (ADD_OP -> XOR .)
    I64             reduce using rule 80 (ADD_OP -> XOR .)
    I32             reduce using rule 80 (ADD_OP -> XOR .)
    I16             reduce using rule 80 (ADD_OP -> XOR .)
    I8              reduce using rule 80 (ADD_OP -> XOR .)
    USIZE           reduce using rule 80 (ADD_OP -> XOR .)
    U64             reduce using rule 80 (ADD_OP -> XOR .)
    U32             reduce using rule 80 (ADD_OP -> XOR .)
    U16             reduce using rule 80 (ADD_OP -> XOR .)
    U8              reduce using rule 80 (ADD_OP -> XOR .)
    HEX_LIT         reduce using rule 80 (ADD_OP -> XOR .)
    OCTAL_LIT       reduce using rule 80 (ADD_OP -> XOR .)
    BINARY_LIT      reduce using rule 80 (ADD_OP -> XOR .)
    .               reduce using rule 80 (ADD_OP -> XOR .)


state 76

    (81) ADD_OP -> OR .
    AND             reduce using rule 81 (ADD_OP -> OR .)
    EXCLM           reduce using rule 81 (ADD_OP -> OR .)
    MINUS           reduce using rule 81 (ADD_OP -> OR .)
    (               reduce using rule 81 (ADD_OP -> OR .)
    IDENTIFIER      reduce using rule 81 (ADD_OP -> OR .)
    STRING          reduce using rule 81 (ADD_OP -> OR .)
    BOOL            reduce using rule 81 (ADD_OP -> OR .)
    RUNE            reduce using rule 81 (ADD_OP -> OR .)
    DECIMAL_LIT     reduce using rule 81 (ADD_OP -> OR .)
    FALSE           reduce using rule 81 (ADD_OP -> OR .)
    TRUE            reduce using rule 81 (ADD_OP -> OR .)
    RUNE_LIT        reduce using rule 81 (ADD_OP -> OR .)
    STRING_LIT      reduce using rule 81 (ADD_OP -> OR .)
    F32             reduce using rule 81 (ADD_OP -> OR .)
    F64             reduce using rule 81 (ADD_OP -> OR .)
    ISIZE           reduce using rule 81 (ADD_OP -> OR .)
    I64             reduce using rule 81 (ADD_OP -> OR .)
    I32             reduce using rule 81 (ADD_OP -> OR .)
    I16             reduce using rule 81 (ADD_OP -> OR .)
    I8              reduce using rule 81 (ADD_OP -> OR .)
    USIZE           reduce using rule 81 (ADD_OP -> OR .)
    U64             reduce using rule 81 (ADD_OP -> OR .)
    U32             reduce using rule 81 (ADD_OP -> OR .)
    U16             reduce using rule 81 (ADD_OP -> OR .)
    U8              reduce using rule 81 (ADD_OP -> OR .)
    HEX_LIT         reduce using rule 81 (ADD_OP -> OR .)
    OCTAL_LIT       reduce using rule 81 (ADD_OP -> OR .)
    BINARY_LIT      reduce using rule 81 (ADD_OP -> OR .)
    .               reduce using rule 81 (ADD_OP -> OR .)


state 77

    (82) ADD_OP -> MINUS .
    AND             reduce using rule 82 (ADD_OP -> MINUS .)
    EXCLM           reduce using rule 82 (ADD_OP -> MINUS .)
    MINUS           reduce using rule 82 (ADD_OP -> MINUS .)
    (               reduce using rule 82 (ADD_OP -> MINUS .)
    IDENTIFIER      reduce using rule 82 (ADD_OP -> MINUS .)
    STRING          reduce using rule 82 (ADD_OP -> MINUS .)
    BOOL            reduce using rule 82 (ADD_OP -> MINUS .)
    RUNE            reduce using rule 82 (ADD_OP -> MINUS .)
    DECIMAL_LIT     reduce using rule 82 (ADD_OP -> MINUS .)
    FALSE           reduce using rule 82 (ADD_OP -> MINUS .)
    TRUE            reduce using rule 82 (ADD_OP -> MINUS .)
    RUNE_LIT        reduce using rule 82 (ADD_OP -> MINUS .)
    STRING_LIT      reduce using rule 82 (ADD_OP -> MINUS .)
    F32             reduce using rule 82 (ADD_OP -> MINUS .)
    F64             reduce using rule 82 (ADD_OP -> MINUS .)
    ISIZE           reduce using rule 82 (ADD_OP -> MINUS .)
    I64             reduce using rule 82 (ADD_OP -> MINUS .)
    I32             reduce using rule 82 (ADD_OP -> MINUS .)
    I16             reduce using rule 82 (ADD_OP -> MINUS .)
    I8              reduce using rule 82 (ADD_OP -> MINUS .)
    USIZE           reduce using rule 82 (ADD_OP -> MINUS .)
    U64             reduce using rule 82 (ADD_OP -> MINUS .)
    U32             reduce using rule 82 (ADD_OP -> MINUS .)
    U16             reduce using rule 82 (ADD_OP -> MINUS .)
    U8              reduce using rule 82 (ADD_OP -> MINUS .)
    HEX_LIT         reduce using rule 82 (ADD_OP -> MINUS .)
    OCTAL_LIT       reduce using rule 82 (ADD_OP -> MINUS .)
    BINARY_LIT      reduce using rule 82 (ADD_OP -> MINUS .)
    .               reduce using rule 82 (ADD_OP -> MINUS .)


state 78

    (83) ADD_OP -> PLUS .
    AND             reduce using rule 83 (ADD_OP -> PLUS .)
    EXCLM           reduce using rule 83 (ADD_OP -> PLUS .)
    MINUS           reduce using rule 83 (ADD_OP -> PLUS .)
    (               reduce using rule 83 (ADD_OP -> PLUS .)
    IDENTIFIER      reduce using rule 83 (ADD_OP -> PLUS .)
    STRING          reduce using rule 83 (ADD_OP -> PLUS .)
    BOOL            reduce using rule 83 (ADD_OP -> PLUS .)
    RUNE            reduce using rule 83 (ADD_OP -> PLUS .)
    DECIMAL_LIT     reduce using rule 83 (ADD_OP -> PLUS .)
    FALSE           reduce using rule 83 (ADD_OP -> PLUS .)
    TRUE            reduce using rule 83 (ADD_OP -> PLUS .)
    RUNE_LIT        reduce using rule 83 (ADD_OP -> PLUS .)
    STRING_LIT      reduce using rule 83 (ADD_OP -> PLUS .)
    F32             reduce using rule 83 (ADD_OP -> PLUS .)
    F64             reduce using rule 83 (ADD_OP -> PLUS .)
    ISIZE           reduce using rule 83 (ADD_OP -> PLUS .)
    I64             reduce using rule 83 (ADD_OP -> PLUS .)
    I32             reduce using rule 83 (ADD_OP -> PLUS .)
    I16             reduce using rule 83 (ADD_OP -> PLUS .)
    I8              reduce using rule 83 (ADD_OP -> PLUS .)
    USIZE           reduce using rule 83 (ADD_OP -> PLUS .)
    U64             reduce using rule 83 (ADD_OP -> PLUS .)
    U32             reduce using rule 83 (ADD_OP -> PLUS .)
    U16             reduce using rule 83 (ADD_OP -> PLUS .)
    U8              reduce using rule 83 (ADD_OP -> PLUS .)
    HEX_LIT         reduce using rule 83 (ADD_OP -> PLUS .)
    OCTAL_LIT       reduce using rule 83 (ADD_OP -> PLUS .)
    BINARY_LIT      reduce using rule 83 (ADD_OP -> PLUS .)
    .               reduce using rule 83 (ADD_OP -> PLUS .)


state 79

    (74) REL_OP -> GE .
    AND             reduce using rule 74 (REL_OP -> GE .)
    EXCLM           reduce using rule 74 (REL_OP -> GE .)
    MINUS           reduce using rule 74 (REL_OP -> GE .)
    (               reduce using rule 74 (REL_OP -> GE .)
    IDENTIFIER      reduce using rule 74 (REL_OP -> GE .)
    STRING          reduce using rule 74 (REL_OP -> GE .)
    BOOL            reduce using rule 74 (REL_OP -> GE .)
    RUNE            reduce using rule 74 (REL_OP -> GE .)
    DECIMAL_LIT     reduce using rule 74 (REL_OP -> GE .)
    FALSE           reduce using rule 74 (REL_OP -> GE .)
    TRUE            reduce using rule 74 (REL_OP -> GE .)
    RUNE_LIT        reduce using rule 74 (REL_OP -> GE .)
    STRING_LIT      reduce using rule 74 (REL_OP -> GE .)
    F32             reduce using rule 74 (REL_OP -> GE .)
    F64             reduce using rule 74 (REL_OP -> GE .)
    ISIZE           reduce using rule 74 (REL_OP -> GE .)
    I64             reduce using rule 74 (REL_OP -> GE .)
    I32             reduce using rule 74 (REL_OP -> GE .)
    I16             reduce using rule 74 (REL_OP -> GE .)
    I8              reduce using rule 74 (REL_OP -> GE .)
    USIZE           reduce using rule 74 (REL_OP -> GE .)
    U64             reduce using rule 74 (REL_OP -> GE .)
    U32             reduce using rule 74 (REL_OP -> GE .)
    U16             reduce using rule 74 (REL_OP -> GE .)
    U8              reduce using rule 74 (REL_OP -> GE .)
    HEX_LIT         reduce using rule 74 (REL_OP -> GE .)
    OCTAL_LIT       reduce using rule 74 (REL_OP -> GE .)
    BINARY_LIT      reduce using rule 74 (REL_OP -> GE .)
    .               reduce using rule 74 (REL_OP -> GE .)


state 80

    (75) REL_OP -> GT .
    AND             reduce using rule 75 (REL_OP -> GT .)
    EXCLM           reduce using rule 75 (REL_OP -> GT .)
    MINUS           reduce using rule 75 (REL_OP -> GT .)
    (               reduce using rule 75 (REL_OP -> GT .)
    IDENTIFIER      reduce using rule 75 (REL_OP -> GT .)
    STRING          reduce using rule 75 (REL_OP -> GT .)
    BOOL            reduce using rule 75 (REL_OP -> GT .)
    RUNE            reduce using rule 75 (REL_OP -> GT .)
    DECIMAL_LIT     reduce using rule 75 (REL_OP -> GT .)
    FALSE           reduce using rule 75 (REL_OP -> GT .)
    TRUE            reduce using rule 75 (REL_OP -> GT .)
    RUNE_LIT        reduce using rule 75 (REL_OP -> GT .)
    STRING_LIT      reduce using rule 75 (REL_OP -> GT .)
    F32             reduce using rule 75 (REL_OP -> GT .)
    F64             reduce using rule 75 (REL_OP -> GT .)
    ISIZE           reduce using rule 75 (REL_OP -> GT .)
    I64             reduce using rule 75 (REL_OP -> GT .)
    I32             reduce using rule 75 (REL_OP -> GT .)
    I16             reduce using rule 75 (REL_OP -> GT .)
    I8              reduce using rule 75 (REL_OP -> GT .)
    USIZE           reduce using rule 75 (REL_OP -> GT .)
    U64             reduce using rule 75 (REL_OP -> GT .)
    U32             reduce using rule 75 (REL_OP -> GT .)
    U16             reduce using rule 75 (REL_OP -> GT .)
    U8              reduce using rule 75 (REL_OP -> GT .)
    HEX_LIT         reduce using rule 75 (REL_OP -> GT .)
    OCTAL_LIT       reduce using rule 75 (REL_OP -> GT .)
    BINARY_LIT      reduce using rule 75 (REL_OP -> GT .)
    .               reduce using rule 75 (REL_OP -> GT .)


state 81

    (76) REL_OP -> LE .
    AND             reduce using rule 76 (REL_OP -> LE .)
    EXCLM           reduce using rule 76 (REL_OP -> LE .)
    MINUS           reduce using rule 76 (REL_OP -> LE .)
    (               reduce using rule 76 (REL_OP -> LE .)
    IDENTIFIER      reduce using rule 76 (REL_OP -> LE .)
    STRING          reduce using rule 76 (REL_OP -> LE .)
    BOOL            reduce using rule 76 (REL_OP -> LE .)
    RUNE            reduce using rule 76 (REL_OP -> LE .)
    DECIMAL_LIT     reduce using rule 76 (REL_OP -> LE .)
    FALSE           reduce using rule 76 (REL_OP -> LE .)
    TRUE            reduce using rule 76 (REL_OP -> LE .)
    RUNE_LIT        reduce using rule 76 (REL_OP -> LE .)
    STRING_LIT      reduce using rule 76 (REL_OP -> LE .)
    F32             reduce using rule 76 (REL_OP -> LE .)
    F64             reduce using rule 76 (REL_OP -> LE .)
    ISIZE           reduce using rule 76 (REL_OP -> LE .)
    I64             reduce using rule 76 (REL_OP -> LE .)
    I32             reduce using rule 76 (REL_OP -> LE .)
    I16             reduce using rule 76 (REL_OP -> LE .)
    I8              reduce using rule 76 (REL_OP -> LE .)
    USIZE           reduce using rule 76 (REL_OP -> LE .)
    U64             reduce using rule 76 (REL_OP -> LE .)
    U32             reduce using rule 76 (REL_OP -> LE .)
    U16             reduce using rule 76 (REL_OP -> LE .)
    U8              reduce using rule 76 (REL_OP -> LE .)
    HEX_LIT         reduce using rule 76 (REL_OP -> LE .)
    OCTAL_LIT       reduce using rule 76 (REL_OP -> LE .)
    BINARY_LIT      reduce using rule 76 (REL_OP -> LE .)
    .               reduce using rule 76 (REL_OP -> LE .)


state 82

    (77) REL_OP -> LT .
    AND             reduce using rule 77 (REL_OP -> LT .)
    EXCLM           reduce using rule 77 (REL_OP -> LT .)
    MINUS           reduce using rule 77 (REL_OP -> LT .)
    (               reduce using rule 77 (REL_OP -> LT .)
    IDENTIFIER      reduce using rule 77 (REL_OP -> LT .)
    STRING          reduce using rule 77 (REL_OP -> LT .)
    BOOL            reduce using rule 77 (REL_OP -> LT .)
    RUNE            reduce using rule 77 (REL_OP -> LT .)
    DECIMAL_LIT     reduce using rule 77 (REL_OP -> LT .)
    FALSE           reduce using rule 77 (REL_OP -> LT .)
    TRUE            reduce using rule 77 (REL_OP -> LT .)
    RUNE_LIT        reduce using rule 77 (REL_OP -> LT .)
    STRING_LIT      reduce using rule 77 (REL_OP -> LT .)
    F32             reduce using rule 77 (REL_OP -> LT .)
    F64             reduce using rule 77 (REL_OP -> LT .)
    ISIZE           reduce using rule 77 (REL_OP -> LT .)
    I64             reduce using rule 77 (REL_OP -> LT .)
    I32             reduce using rule 77 (REL_OP -> LT .)
    I16             reduce using rule 77 (REL_OP -> LT .)
    I8              reduce using rule 77 (REL_OP -> LT .)
    USIZE           reduce using rule 77 (REL_OP -> LT .)
    U64             reduce using rule 77 (REL_OP -> LT .)
    U32             reduce using rule 77 (REL_OP -> LT .)
    U16             reduce using rule 77 (REL_OP -> LT .)
    U8              reduce using rule 77 (REL_OP -> LT .)
    HEX_LIT         reduce using rule 77 (REL_OP -> LT .)
    OCTAL_LIT       reduce using rule 77 (REL_OP -> LT .)
    BINARY_LIT      reduce using rule 77 (REL_OP -> LT .)
    .               reduce using rule 77 (REL_OP -> LT .)


state 83

    (78) REL_OP -> NE .
    AND             reduce using rule 78 (REL_OP -> NE .)
    EXCLM           reduce using rule 78 (REL_OP -> NE .)
    MINUS           reduce using rule 78 (REL_OP -> NE .)
    (               reduce using rule 78 (REL_OP -> NE .)
    IDENTIFIER      reduce using rule 78 (REL_OP -> NE .)
    STRING          reduce using rule 78 (REL_OP -> NE .)
    BOOL            reduce using rule 78 (REL_OP -> NE .)
    RUNE            reduce using rule 78 (REL_OP -> NE .)
    DECIMAL_LIT     reduce using rule 78 (REL_OP -> NE .)
    FALSE           reduce using rule 78 (REL_OP -> NE .)
    TRUE            reduce using rule 78 (REL_OP -> NE .)
    RUNE_LIT        reduce using rule 78 (REL_OP -> NE .)
    STRING_LIT      reduce using rule 78 (REL_OP -> NE .)
    F32             reduce using rule 78 (REL_OP -> NE .)
    F64             reduce using rule 78 (REL_OP -> NE .)
    ISIZE           reduce using rule 78 (REL_OP -> NE .)
    I64             reduce using rule 78 (REL_OP -> NE .)
    I32             reduce using rule 78 (REL_OP -> NE .)
    I16             reduce using rule 78 (REL_OP -> NE .)
    I8              reduce using rule 78 (REL_OP -> NE .)
    USIZE           reduce using rule 78 (REL_OP -> NE .)
    U64             reduce using rule 78 (REL_OP -> NE .)
    U32             reduce using rule 78 (REL_OP -> NE .)
    U16             reduce using rule 78 (REL_OP -> NE .)
    U8              reduce using rule 78 (REL_OP -> NE .)
    HEX_LIT         reduce using rule 78 (REL_OP -> NE .)
    OCTAL_LIT       reduce using rule 78 (REL_OP -> NE .)
    BINARY_LIT      reduce using rule 78 (REL_OP -> NE .)
    .               reduce using rule 78 (REL_OP -> NE .)


state 84

    (79) REL_OP -> EQ .
    AND             reduce using rule 79 (REL_OP -> EQ .)
    EXCLM           reduce using rule 79 (REL_OP -> EQ .)
    MINUS           reduce using rule 79 (REL_OP -> EQ .)
    (               reduce using rule 79 (REL_OP -> EQ .)
    IDENTIFIER      reduce using rule 79 (REL_OP -> EQ .)
    STRING          reduce using rule 79 (REL_OP -> EQ .)
    BOOL            reduce using rule 79 (REL_OP -> EQ .)
    RUNE            reduce using rule 79 (REL_OP -> EQ .)
    DECIMAL_LIT     reduce using rule 79 (REL_OP -> EQ .)
    FALSE           reduce using rule 79 (REL_OP -> EQ .)
    TRUE            reduce using rule 79 (REL_OP -> EQ .)
    RUNE_LIT        reduce using rule 79 (REL_OP -> EQ .)
    STRING_LIT      reduce using rule 79 (REL_OP -> EQ .)
    F32             reduce using rule 79 (REL_OP -> EQ .)
    F64             reduce using rule 79 (REL_OP -> EQ .)
    ISIZE           reduce using rule 79 (REL_OP -> EQ .)
    I64             reduce using rule 79 (REL_OP -> EQ .)
    I32             reduce using rule 79 (REL_OP -> EQ .)
    I16             reduce using rule 79 (REL_OP -> EQ .)
    I8              reduce using rule 79 (REL_OP -> EQ .)
    USIZE           reduce using rule 79 (REL_OP -> EQ .)
    U64             reduce using rule 79 (REL_OP -> EQ .)
    U32             reduce using rule 79 (REL_OP -> EQ .)
    U16             reduce using rule 79 (REL_OP -> EQ .)
    U8              reduce using rule 79 (REL_OP -> EQ .)
    HEX_LIT         reduce using rule 79 (REL_OP -> EQ .)
    OCTAL_LIT       reduce using rule 79 (REL_OP -> EQ .)
    BINARY_LIT      reduce using rule 79 (REL_OP -> EQ .)
    .               reduce using rule 79 (REL_OP -> EQ .)


state 85

    (23) unaryExpr -> UNARY_OP unaryExpr .
    LOGIC_AND       reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    LOGIC_OR        reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    SHR             reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    SHL             reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    AND             reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    MOD             reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    DIV             reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    STAR            reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    XOR             reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    OR              reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    MINUS           reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    PLUS            reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    GE              reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    GT              reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    LE              reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    LT              reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    NE              reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    EQ              reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    ,               reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    NEWL            reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    ;               reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)
    )               reduce using rule 23 (unaryExpr -> UNARY_OP unaryExpr .)


state 86

    (32) conversion -> type_ ( . expression )
    (21) expression -> . expression BINARY_OP unaryExpr
    (22) expression -> . unaryExpr
    (23) unaryExpr -> . UNARY_OP unaryExpr
    (24) unaryExpr -> . primaryExpr
    (90) UNARY_OP -> . AND
    (91) UNARY_OP -> . EXCLM
    (92) UNARY_OP -> . MINUS
    (25) primaryExpr -> . conversion
    (26) primaryExpr -> . operand
    (32) conversion -> . type_ ( expression )
    (27) operand -> . ( expression )
    (28) operand -> . operandName
    (29) operand -> . literal
    (33) type_ -> . typeName
    (30) operandName -> . IDENTIFIER
    (31) literal -> . basicLit
    (34) typeName -> . numericType
    (35) typeName -> . STRING
    (36) typeName -> . BOOL
    (37) typeName -> . RUNE
    (50) basicLit -> . INT_LIT
    (51) basicLit -> . FLOAT_LIT
    (52) basicLit -> . DECIMAL_LIT EXPONENT
    (53) basicLit -> . FLOAT_LIT EXPONENT
    (54) basicLit -> . FALSE
    (55) basicLit -> . TRUE
    (56) basicLit -> . RUNE_LIT
    (57) basicLit -> . STRING_LIT
    (38) numericType -> . F32
    (39) numericType -> . F64
    (40) numericType -> . ISIZE
    (41) numericType -> . I64
    (42) numericType -> . I32
    (43) numericType -> . I16
    (44) numericType -> . I8
    (45) numericType -> . USIZE
    (46) numericType -> . U64
    (47) numericType -> . U32
    (48) numericType -> . U16
    (49) numericType -> . U8
    (61) INT_LIT -> . HEX_LIT
    (62) INT_LIT -> . OCTAL_LIT
    (63) INT_LIT -> . BINARY_LIT
    (64) INT_LIT -> . DECIMAL_LIT
    (58) FLOAT_LIT -> . . DECIMAL_LIT
    (59) FLOAT_LIT -> . DECIMAL_LIT .
    (60) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 22
    EXCLM           shift and go to state 23
    MINUS           shift and go to state 24
    (               shift and go to state 28
    IDENTIFIER      shift and go to state 32
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    ISIZE           shift and go to state 47
    I64             shift and go to state 48
    I32             shift and go to state 49
    I16             shift and go to state 50
    I8              shift and go to state 51
    USIZE           shift and go to state 52
    U64             shift and go to state 53
    U32             shift and go to state 54
    U16             shift and go to state 55
    U8              shift and go to state 56
    HEX_LIT         shift and go to state 57
    OCTAL_LIT       shift and go to state 58
    BINARY_LIT      shift and go to state 59
    .               shift and go to state 60

    type_                          shift and go to state 27
    expression                     shift and go to state 94
    unaryExpr                      shift and go to state 19
    UNARY_OP                       shift and go to state 20
    primaryExpr                    shift and go to state 21
    conversion                     shift and go to state 25
    operand                        shift and go to state 26
    operandName                    shift and go to state 29
    literal                        shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 33
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 87

    (27) operand -> ( expression . )
    (21) expression -> expression . BINARY_OP unaryExpr
    (69) BINARY_OP -> . MUL_OP
    (70) BINARY_OP -> . ADD_OP
    (71) BINARY_OP -> . REL_OP
    (72) BINARY_OP -> . LOGIC_AND
    (73) BINARY_OP -> . LOGIC_OR
    (84) MUL_OP -> . SHR
    (85) MUL_OP -> . SHL
    (86) MUL_OP -> . AND
    (87) MUL_OP -> . MOD
    (88) MUL_OP -> . DIV
    (89) MUL_OP -> . STAR
    (80) ADD_OP -> . XOR
    (81) ADD_OP -> . OR
    (82) ADD_OP -> . MINUS
    (83) ADD_OP -> . PLUS
    (74) REL_OP -> . GE
    (75) REL_OP -> . GT
    (76) REL_OP -> . LE
    (77) REL_OP -> . LT
    (78) REL_OP -> . NE
    (79) REL_OP -> . EQ
    )               shift and go to state 95
    LOGIC_AND       shift and go to state 67
    LOGIC_OR        shift and go to state 68
    SHR             shift and go to state 69
    SHL             shift and go to state 70
    AND             shift and go to state 71
    MOD             shift and go to state 72
    DIV             shift and go to state 73
    STAR            shift and go to state 74
    XOR             shift and go to state 75
    OR              shift and go to state 76
    MINUS           shift and go to state 77
    PLUS            shift and go to state 78
    GE              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    LT              shift and go to state 82
    NE              shift and go to state 83
    EQ              shift and go to state 84

    BINARY_OP                      shift and go to state 63
    MUL_OP                         shift and go to state 64
    ADD_OP                         shift and go to state 65
    REL_OP                         shift and go to state 66

state 88

    (53) basicLit -> FLOAT_LIT EXPONENT .
    LOGIC_AND       reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    LOGIC_OR        reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    SHR             reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    SHL             reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    AND             reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    MOD             reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    DIV             reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    STAR            reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    XOR             reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    OR              reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    MINUS           reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    PLUS            reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    GE              reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    GT              reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    LE              reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    LT              reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    NE              reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    EQ              reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    ,               reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    NEWL            reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    ;               reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)
    )               reduce using rule 53 (basicLit -> FLOAT_LIT EXPONENT .)


state 89

    (52) basicLit -> DECIMAL_LIT EXPONENT .
    LOGIC_AND       reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    LOGIC_OR        reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    SHR             reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    SHL             reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    AND             reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    MOD             reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    DIV             reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    STAR            reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    XOR             reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    OR              reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    MINUS           reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    PLUS            reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    GE              reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    GT              reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    LE              reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    LT              reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    NE              reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    EQ              reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    ,               reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    NEWL            reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    ;               reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)
    )               reduce using rule 52 (basicLit -> DECIMAL_LIT EXPONENT .)


state 90

    (59) FLOAT_LIT -> DECIMAL_LIT . .
    (60) FLOAT_LIT -> DECIMAL_LIT . . DECIMAL_LIT
    EXPONENT        reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    LOGIC_AND       reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    LOGIC_OR        reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    SHR             reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    SHL             reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    AND             reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    MOD             reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    DIV             reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    STAR            reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    XOR             reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    OR              reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    MINUS           reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    PLUS            reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    GE              reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    GT              reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    LE              reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    LT              reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    NE              reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    EQ              reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    ,               reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    NEWL            reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    ;               reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    )               reduce using rule 59 (FLOAT_LIT -> DECIMAL_LIT . .)
    DECIMAL_LIT     shift and go to state 96


state 91

    (58) FLOAT_LIT -> . DECIMAL_LIT .
    EXPONENT        reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    SHR             reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    SHL             reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    AND             reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    MOD             reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    DIV             reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    STAR            reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    XOR             reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    OR              reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    MINUS           reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    PLUS            reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    GE              reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    GT              reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    LE              reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    LT              reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    NE              reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    EQ              reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    ,               reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    NEWL            reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    ;               reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)
    )               reduce using rule 58 (FLOAT_LIT -> . DECIMAL_LIT .)


state 92

    (9) expressionList -> expressionList , expression .
    (21) expression -> expression . BINARY_OP unaryExpr
    (69) BINARY_OP -> . MUL_OP
    (70) BINARY_OP -> . ADD_OP
    (71) BINARY_OP -> . REL_OP
    (72) BINARY_OP -> . LOGIC_AND
    (73) BINARY_OP -> . LOGIC_OR
    (84) MUL_OP -> . SHR
    (85) MUL_OP -> . SHL
    (86) MUL_OP -> . AND
    (87) MUL_OP -> . MOD
    (88) MUL_OP -> . DIV
    (89) MUL_OP -> . STAR
    (80) ADD_OP -> . XOR
    (81) ADD_OP -> . OR
    (82) ADD_OP -> . MINUS
    (83) ADD_OP -> . PLUS
    (74) REL_OP -> . GE
    (75) REL_OP -> . GT
    (76) REL_OP -> . LE
    (77) REL_OP -> . LT
    (78) REL_OP -> . NE
    (79) REL_OP -> . EQ
    ,               reduce using rule 9 (expressionList -> expressionList , expression .)
    NEWL            reduce using rule 9 (expressionList -> expressionList , expression .)
    ;               reduce using rule 9 (expressionList -> expressionList , expression .)
    LOGIC_AND       shift and go to state 67
    LOGIC_OR        shift and go to state 68
    SHR             shift and go to state 69
    SHL             shift and go to state 70
    AND             shift and go to state 71
    MOD             shift and go to state 72
    DIV             shift and go to state 73
    STAR            shift and go to state 74
    XOR             shift and go to state 75
    OR              shift and go to state 76
    MINUS           shift and go to state 77
    PLUS            shift and go to state 78
    GE              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    LT              shift and go to state 82
    NE              shift and go to state 83
    EQ              shift and go to state 84

    BINARY_OP                      shift and go to state 63
    MUL_OP                         shift and go to state 64
    ADD_OP                         shift and go to state 65
    REL_OP                         shift and go to state 66

state 93

    (21) expression -> expression BINARY_OP unaryExpr .
    LOGIC_AND       reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    LOGIC_OR        reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    SHR             reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    SHL             reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    AND             reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    MOD             reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    DIV             reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    STAR            reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    XOR             reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    OR              reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    MINUS           reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    PLUS            reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    GE              reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    GT              reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    LE              reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    LT              reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    NE              reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    EQ              reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    ,               reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    NEWL            reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    ;               reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)
    )               reduce using rule 21 (expression -> expression BINARY_OP unaryExpr .)


state 94

    (32) conversion -> type_ ( expression . )
    (21) expression -> expression . BINARY_OP unaryExpr
    (69) BINARY_OP -> . MUL_OP
    (70) BINARY_OP -> . ADD_OP
    (71) BINARY_OP -> . REL_OP
    (72) BINARY_OP -> . LOGIC_AND
    (73) BINARY_OP -> . LOGIC_OR
    (84) MUL_OP -> . SHR
    (85) MUL_OP -> . SHL
    (86) MUL_OP -> . AND
    (87) MUL_OP -> . MOD
    (88) MUL_OP -> . DIV
    (89) MUL_OP -> . STAR
    (80) ADD_OP -> . XOR
    (81) ADD_OP -> . OR
    (82) ADD_OP -> . MINUS
    (83) ADD_OP -> . PLUS
    (74) REL_OP -> . GE
    (75) REL_OP -> . GT
    (76) REL_OP -> . LE
    (77) REL_OP -> . LT
    (78) REL_OP -> . NE
    (79) REL_OP -> . EQ
    )               shift and go to state 97
    LOGIC_AND       shift and go to state 67
    LOGIC_OR        shift and go to state 68
    SHR             shift and go to state 69
    SHL             shift and go to state 70
    AND             shift and go to state 71
    MOD             shift and go to state 72
    DIV             shift and go to state 73
    STAR            shift and go to state 74
    XOR             shift and go to state 75
    OR              shift and go to state 76
    MINUS           shift and go to state 77
    PLUS            shift and go to state 78
    GE              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    LT              shift and go to state 82
    NE              shift and go to state 83
    EQ              shift and go to state 84

    BINARY_OP                      shift and go to state 63
    MUL_OP                         shift and go to state 64
    ADD_OP                         shift and go to state 65
    REL_OP                         shift and go to state 66

state 95

    (27) operand -> ( expression ) .
    LOGIC_AND       reduce using rule 27 (operand -> ( expression ) .)
    LOGIC_OR        reduce using rule 27 (operand -> ( expression ) .)
    SHR             reduce using rule 27 (operand -> ( expression ) .)
    SHL             reduce using rule 27 (operand -> ( expression ) .)
    AND             reduce using rule 27 (operand -> ( expression ) .)
    MOD             reduce using rule 27 (operand -> ( expression ) .)
    DIV             reduce using rule 27 (operand -> ( expression ) .)
    STAR            reduce using rule 27 (operand -> ( expression ) .)
    XOR             reduce using rule 27 (operand -> ( expression ) .)
    OR              reduce using rule 27 (operand -> ( expression ) .)
    MINUS           reduce using rule 27 (operand -> ( expression ) .)
    PLUS            reduce using rule 27 (operand -> ( expression ) .)
    GE              reduce using rule 27 (operand -> ( expression ) .)
    GT              reduce using rule 27 (operand -> ( expression ) .)
    LE              reduce using rule 27 (operand -> ( expression ) .)
    LT              reduce using rule 27 (operand -> ( expression ) .)
    NE              reduce using rule 27 (operand -> ( expression ) .)
    EQ              reduce using rule 27 (operand -> ( expression ) .)
    ,               reduce using rule 27 (operand -> ( expression ) .)
    NEWL            reduce using rule 27 (operand -> ( expression ) .)
    ;               reduce using rule 27 (operand -> ( expression ) .)
    )               reduce using rule 27 (operand -> ( expression ) .)


state 96

    (60) FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .
    EXPONENT        reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    SHR             reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    SHL             reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    AND             reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    MOD             reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    DIV             reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    STAR            reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    XOR             reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    OR              reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    MINUS           reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    PLUS            reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    GE              reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    GT              reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LE              reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LT              reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    NE              reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    EQ              reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    ,               reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    NEWL            reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    ;               reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    )               reduce using rule 60 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)


state 97

    (32) conversion -> type_ ( expression ) .
    LOGIC_AND       reduce using rule 32 (conversion -> type_ ( expression ) .)
    LOGIC_OR        reduce using rule 32 (conversion -> type_ ( expression ) .)
    SHR             reduce using rule 32 (conversion -> type_ ( expression ) .)
    SHL             reduce using rule 32 (conversion -> type_ ( expression ) .)
    AND             reduce using rule 32 (conversion -> type_ ( expression ) .)
    MOD             reduce using rule 32 (conversion -> type_ ( expression ) .)
    DIV             reduce using rule 32 (conversion -> type_ ( expression ) .)
    STAR            reduce using rule 32 (conversion -> type_ ( expression ) .)
    XOR             reduce using rule 32 (conversion -> type_ ( expression ) .)
    OR              reduce using rule 32 (conversion -> type_ ( expression ) .)
    MINUS           reduce using rule 32 (conversion -> type_ ( expression ) .)
    PLUS            reduce using rule 32 (conversion -> type_ ( expression ) .)
    GE              reduce using rule 32 (conversion -> type_ ( expression ) .)
    GT              reduce using rule 32 (conversion -> type_ ( expression ) .)
    LE              reduce using rule 32 (conversion -> type_ ( expression ) .)
    LT              reduce using rule 32 (conversion -> type_ ( expression ) .)
    NE              reduce using rule 32 (conversion -> type_ ( expression ) .)
    EQ              reduce using rule 32 (conversion -> type_ ( expression ) .)
    ,               reduce using rule 32 (conversion -> type_ ( expression ) .)
    NEWL            reduce using rule 32 (conversion -> type_ ( expression ) .)
    ;               reduce using rule 32 (conversion -> type_ ( expression ) .)
    )               reduce using rule 32 (conversion -> type_ ( expression ) .)
