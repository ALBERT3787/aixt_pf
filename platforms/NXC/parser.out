Grammar:

Rule 0     S' -> sourceFile
Rule 1     sourceFile -> topLevelDecls orphanStmtList
Rule 2     sourceFile -> orphanStmtList
Rule 3     sourceFile -> importDecls topLevelDecls orphanStmtList
Rule 4     sourceFile -> importDecls orphanStmtList
Rule 5     importDecls -> importDecls importDecl eos
Rule 6     importDecls -> importDecl eos
Rule 7     importDecl -> IMPORT importSpec
Rule 8     importSpec -> importPath
Rule 9     importSpec -> IDENTIFIER importPath
Rule 10    importSpec -> . importPath
Rule 11    importPath -> STRING_LIT
Rule 12    importPath -> IDENTIFIER
Rule 13    topLevelDecls -> topLevelDecls topLevelDecl eos
Rule 14    topLevelDecls -> topLevelDecl eos
Rule 15    orphanStmtList -> statementList eos
Rule 16    topLevelDecl -> functionDecl
Rule 17    topLevelDecl -> declaration
Rule 18    declaration -> varDecl
Rule 19    varDecl -> identifierList DECL_ASGN expressionList
Rule 20    identifierList -> identifierList , IDENTIFIER
Rule 21    identifierList -> IDENTIFIER
Rule 22    functionDecl -> FN IDENTIFIER signature
Rule 23    functionDecl -> FN IDENTIFIER function_
Rule 24    function_ -> signature block
Rule 25    signature -> parameters
Rule 26    signature -> parameters result
Rule 27    result -> type_
Rule 28    result -> parameters
Rule 29    parameters -> ( parameterList , )
Rule 30    parameters -> ( parameterList )
Rule 31    parameters -> ( )
Rule 32    parameterList -> parameterList , parameterDecl
Rule 33    parameterList -> parameterDecl
Rule 34    parameterDecl -> type_
Rule 35    parameterDecl -> identifierList type_
Rule 36    functionLit -> FN function_
Rule 37    expressionList -> expressionList , expression
Rule 38    expressionList -> expression
Rule 39    statementList -> statementList eos statement
Rule 40    statementList -> statement
Rule 41    block -> { statementList }
Rule 42    statement -> simpleStmt
Rule 43    simpleStmt -> assignment
Rule 44    simpleStmt -> expressionStmt
Rule 45    expressionStmt -> expression
Rule 46    assignment -> identifierList assign_op expressionList
Rule 47    arguments -> ( type_ , expressionList , )
Rule 48    arguments -> ( type_ , expressionList )
Rule 49    arguments -> ( type_ , )
Rule 50    arguments -> ( type_ )
Rule 51    arguments -> ( expressionList , )
Rule 52    arguments -> ( expressionList )
Rule 53    arguments -> ( )
Rule 54    expression -> expression BINARY_OP unaryExpr
Rule 55    expression -> unaryExpr
Rule 56    unaryExpr -> UNARY_OP unaryExpr  [precedence=right, level=7]
Rule 57    unaryExpr -> primaryExpr
Rule 58    primaryExpr -> primaryExpr arguments
Rule 59    primaryExpr -> conversion
Rule 60    primaryExpr -> operand
Rule 61    operand -> ( expression )
Rule 62    operand -> operandName
Rule 63    operand -> literal
Rule 64    operandName -> qualifiedIdent
Rule 65    operandName -> IDENTIFIER
Rule 66    literal -> functionLit
Rule 67    literal -> basicLit
Rule 68    conversion -> type_ ( expression )
Rule 69    type_ -> qualifiedIdent
Rule 70    type_ -> typeName
Rule 71    qualifiedIdent -> IDENTIFIER . IDENTIFIER
Rule 72    typeName -> numericType
Rule 73    typeName -> STRING
Rule 74    typeName -> BOOL
Rule 75    typeName -> RUNE
Rule 76    numericType -> F32
Rule 77    numericType -> F64
Rule 78    numericType -> INT
Rule 79    numericType -> ISIZE
Rule 80    numericType -> I64
Rule 81    numericType -> I32
Rule 82    numericType -> I16
Rule 83    numericType -> I8
Rule 84    numericType -> UINT
Rule 85    numericType -> USIZE
Rule 86    numericType -> U64
Rule 87    numericType -> U32
Rule 88    numericType -> U16
Rule 89    numericType -> U8
Rule 90    basicLit -> INT_LIT
Rule 91    basicLit -> FLOAT_LIT
Rule 92    basicLit -> DECIMAL_LIT EXPONENT
Rule 93    basicLit -> FLOAT_LIT EXPONENT
Rule 94    basicLit -> FALSE
Rule 95    basicLit -> TRUE
Rule 96    basicLit -> RUNE_LIT
Rule 97    basicLit -> STRING_LIT
Rule 98    FLOAT_LIT -> . DECIMAL_LIT
Rule 99    FLOAT_LIT -> DECIMAL_LIT .
Rule 100   FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT
Rule 101   INT_LIT -> HEX_LIT
Rule 102   INT_LIT -> OCTAL_LIT
Rule 103   INT_LIT -> BINARY_LIT
Rule 104   INT_LIT -> DECIMAL_LIT
Rule 105   eos -> eos NEWL
Rule 106   eos -> NEWL
Rule 107   eos -> eos ;
Rule 108   eos -> ;
Rule 109   assign_op -> SHR_ASGN  [precedence=right, level=8]
Rule 110   assign_op -> SHL_ASGN  [precedence=right, level=8]
Rule 111   assign_op -> MOD_ASGN  [precedence=right, level=8]
Rule 112   assign_op -> DIV_ASGN  [precedence=right, level=8]
Rule 113   assign_op -> OR_ASGN  [precedence=right, level=8]
Rule 114   assign_op -> AND_ASGN  [precedence=right, level=8]
Rule 115   assign_op -> STAR_ASGN  [precedence=right, level=8]
Rule 116   assign_op -> XOR_ASGN  [precedence=right, level=8]
Rule 117   assign_op -> MINUS_ASGN  [precedence=right, level=8]
Rule 118   assign_op -> PLUS_ASGN  [precedence=right, level=8]
Rule 119   assign_op -> ASSIGN  [precedence=right, level=8]
Rule 120   BINARY_OP -> MUL_OP
Rule 121   BINARY_OP -> ADD_OP
Rule 122   BINARY_OP -> REL_OP
Rule 123   BINARY_OP -> LOGIC_AND  [precedence=left, level=2]
Rule 124   BINARY_OP -> LOGIC_OR  [precedence=left, level=1]
Rule 125   REL_OP -> GE  [precedence=left, level=3]
Rule 126   REL_OP -> GT  [precedence=left, level=3]
Rule 127   REL_OP -> LE  [precedence=left, level=3]
Rule 128   REL_OP -> LT  [precedence=left, level=3]
Rule 129   REL_OP -> NE  [precedence=left, level=3]
Rule 130   REL_OP -> EQ  [precedence=left, level=3]
Rule 131   ADD_OP -> XOR  [precedence=left, level=4]
Rule 132   ADD_OP -> OR  [precedence=left, level=4]
Rule 133   ADD_OP -> MINUS  [precedence=left, level=4]
Rule 134   ADD_OP -> PLUS  [precedence=left, level=4]
Rule 135   MUL_OP -> SHR  [precedence=left, level=5]
Rule 136   MUL_OP -> SHL  [precedence=left, level=5]
Rule 137   MUL_OP -> AND  [precedence=left, level=5]
Rule 138   MUL_OP -> MOD  [precedence=left, level=5]
Rule 139   MUL_OP -> DIV  [precedence=left, level=5]
Rule 140   MUL_OP -> STAR  [precedence=left, level=5]
Rule 141   UNARY_OP -> AND  [precedence=left, level=5]
Rule 142   UNARY_OP -> EXCLM
Rule 143   UNARY_OP -> MINUS  [precedence=left, level=4]

Unused terminals:

    TYPE
    ELSE
    PLUS_PLUS
    FOR
    STATIC
    CONST
    AS
    STRUCT
    MINUS_MINUS
    MAP
    MATCH
    IF
    CONTINUE
    BREAK
    IN
    ENUM
    RETURN

Terminals, with rules where they appear:

(                    : 29 30 31 47 48 49 50 51 52 53 61 68
)                    : 29 30 31 47 48 49 50 51 52 53 61 68
,                    : 20 29 32 37 47 47 48 49 51
.                    : 10 71 98 99 100
;                    : 107 108
AND                  : 137 141
AND_ASGN             : 114
AS                   : 
ASSIGN               : 119
BINARY_LIT           : 103
BOOL                 : 74
BREAK                : 
CONST                : 
CONTINUE             : 
DECIMAL_LIT          : 92 98 99 100 100 104
DECL_ASGN            : 19
DIV                  : 139
DIV_ASGN             : 112
ELSE                 : 
ENUM                 : 
EQ                   : 130
EXCLM                : 142
EXPONENT             : 92 93
F32                  : 76
F64                  : 77
FALSE                : 94
FN                   : 22 23 36
FOR                  : 
GE                   : 125
GT                   : 126
HEX_LIT              : 101
I16                  : 82
I32                  : 81
I64                  : 80
I8                   : 83
IDENTIFIER           : 9 12 20 21 22 23 65 71 71
IF                   : 
IMPORT               : 7
IN                   : 
INT                  : 78
ISIZE                : 79
LE                   : 127
LOGIC_AND            : 123
LOGIC_OR             : 124
LT                   : 128
MAP                  : 
MATCH                : 
MINUS                : 133 143
MINUS_ASGN           : 117
MINUS_MINUS          : 
MOD                  : 138
MOD_ASGN             : 111
NE                   : 129
NEWL                 : 105 106
OCTAL_LIT            : 102
OR                   : 132
OR_ASGN              : 113
PLUS                 : 134
PLUS_ASGN            : 118
PLUS_PLUS            : 
RETURN               : 
RUNE                 : 75
RUNE_LIT             : 96
SHL                  : 136
SHL_ASGN             : 110
SHR                  : 135
SHR_ASGN             : 109
STAR                 : 140
STAR_ASGN            : 115
STATIC               : 
STRING               : 73
STRING_LIT           : 11 97
STRUCT               : 
TRUE                 : 95
TYPE                 : 
U16                  : 88
U32                  : 87
U64                  : 86
U8                   : 89
UINT                 : 84
USIZE                : 85
XOR                  : 131
XOR_ASGN             : 116
error                : 
{                    : 41
}                    : 41

Nonterminals, with rules where they appear:

ADD_OP               : 121
BINARY_OP            : 54
FLOAT_LIT            : 91 93
INT_LIT              : 90
MUL_OP               : 120
REL_OP               : 122
UNARY_OP             : 56
arguments            : 58
assign_op            : 46
assignment           : 43
basicLit             : 67
block                : 24
conversion           : 59
declaration          : 17
eos                  : 5 6 13 14 15 39 105 107
expression           : 37 38 45 54 61 68
expressionList       : 19 37 46 47 48 51 52
expressionStmt       : 44
functionDecl         : 16
functionLit          : 66
function_            : 23 36
identifierList       : 19 20 35 46
importDecl           : 5 6
importDecls          : 3 4 5
importPath           : 8 9 10
importSpec           : 7
literal              : 63
numericType          : 72
operand              : 60
operandName          : 62
orphanStmtList       : 1 2 3 4
parameterDecl        : 32 33
parameterList        : 29 30 32
parameters           : 25 26 28
primaryExpr          : 57 58
qualifiedIdent       : 64 69
result               : 26
signature            : 22 24
simpleStmt           : 42
sourceFile           : 0
statement            : 39 40
statementList        : 15 39 41
topLevelDecl         : 13 14
topLevelDecls        : 1 3 13
typeName             : 70
type_                : 27 34 35 47 48 49 50 68
unaryExpr            : 54 55 56
varDecl              : 18


state 0

    (0) S' -> . sourceFile
    (1) sourceFile -> . topLevelDecls orphanStmtList
    (2) sourceFile -> . orphanStmtList
    (3) sourceFile -> . importDecls topLevelDecls orphanStmtList
    (4) sourceFile -> . importDecls orphanStmtList
    (13) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (14) topLevelDecls -> . topLevelDecl eos
    (15) orphanStmtList -> . statementList eos
    (5) importDecls -> . importDecls importDecl eos
    (6) importDecls -> . importDecl eos
    (16) topLevelDecl -> . functionDecl
    (17) topLevelDecl -> . declaration
    (39) statementList -> . statementList eos statement
    (40) statementList -> . statement
    (7) importDecl -> . IMPORT importSpec
    (22) functionDecl -> . FN IDENTIFIER signature
    (23) functionDecl -> . FN IDENTIFIER function_
    (18) declaration -> . varDecl
    (42) statement -> . simpleStmt
    (19) varDecl -> . identifierList DECL_ASGN expressionList
    (43) simpleStmt -> . assignment
    (44) simpleStmt -> . expressionStmt
    (20) identifierList -> . identifierList , IDENTIFIER
    (21) identifierList -> . IDENTIFIER
    (46) assignment -> . identifierList assign_op expressionList
    (45) expressionStmt -> . expression
    (54) expression -> . expression BINARY_OP unaryExpr
    (55) expression -> . unaryExpr
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IMPORT          shift and go to state 11
    FN              shift and go to state 12
    IDENTIFIER      shift and go to state 13
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    sourceFile                     shift and go to state 1
    topLevelDecls                  shift and go to state 2
    orphanStmtList                 shift and go to state 3
    importDecls                    shift and go to state 4
    topLevelDecl                   shift and go to state 5
    statementList                  shift and go to state 6
    importDecl                     shift and go to state 7
    functionDecl                   shift and go to state 8
    declaration                    shift and go to state 9
    statement                      shift and go to state 10
    varDecl                        shift and go to state 14
    simpleStmt                     shift and go to state 15
    identifierList                 shift and go to state 16
    assignment                     shift and go to state 17
    expressionStmt                 shift and go to state 18
    expression                     shift and go to state 19
    unaryExpr                      shift and go to state 20
    UNARY_OP                       shift and go to state 21
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    type_                          shift and go to state 28
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    numericType                    shift and go to state 37
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 1

    (0) S' -> sourceFile .


state 2

    (1) sourceFile -> topLevelDecls . orphanStmtList
    (13) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (15) orphanStmtList -> . statementList eos
    (16) topLevelDecl -> . functionDecl
    (17) topLevelDecl -> . declaration
    (39) statementList -> . statementList eos statement
    (40) statementList -> . statement
    (22) functionDecl -> . FN IDENTIFIER signature
    (23) functionDecl -> . FN IDENTIFIER function_
    (18) declaration -> . varDecl
    (42) statement -> . simpleStmt
    (19) varDecl -> . identifierList DECL_ASGN expressionList
    (43) simpleStmt -> . assignment
    (44) simpleStmt -> . expressionStmt
    (20) identifierList -> . identifierList , IDENTIFIER
    (21) identifierList -> . IDENTIFIER
    (46) assignment -> . identifierList assign_op expressionList
    (45) expressionStmt -> . expression
    (54) expression -> . expression BINARY_OP unaryExpr
    (55) expression -> . unaryExpr
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    FN              shift and go to state 12
    IDENTIFIER      shift and go to state 13
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    orphanStmtList                 shift and go to state 65
    topLevelDecl                   shift and go to state 66
    statementList                  shift and go to state 6
    functionDecl                   shift and go to state 8
    declaration                    shift and go to state 9
    statement                      shift and go to state 10
    varDecl                        shift and go to state 14
    simpleStmt                     shift and go to state 15
    identifierList                 shift and go to state 16
    assignment                     shift and go to state 17
    expressionStmt                 shift and go to state 18
    expression                     shift and go to state 19
    unaryExpr                      shift and go to state 20
    UNARY_OP                       shift and go to state 21
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    type_                          shift and go to state 28
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    numericType                    shift and go to state 37
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 3

    (2) sourceFile -> orphanStmtList .
    $end            reduce using rule 2 (sourceFile -> orphanStmtList .)


state 4

    (3) sourceFile -> importDecls . topLevelDecls orphanStmtList
    (4) sourceFile -> importDecls . orphanStmtList
    (5) importDecls -> importDecls . importDecl eos
    (13) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (14) topLevelDecls -> . topLevelDecl eos
    (15) orphanStmtList -> . statementList eos
    (7) importDecl -> . IMPORT importSpec
    (16) topLevelDecl -> . functionDecl
    (17) topLevelDecl -> . declaration
    (39) statementList -> . statementList eos statement
    (40) statementList -> . statement
    (22) functionDecl -> . FN IDENTIFIER signature
    (23) functionDecl -> . FN IDENTIFIER function_
    (18) declaration -> . varDecl
    (42) statement -> . simpleStmt
    (19) varDecl -> . identifierList DECL_ASGN expressionList
    (43) simpleStmt -> . assignment
    (44) simpleStmt -> . expressionStmt
    (20) identifierList -> . identifierList , IDENTIFIER
    (21) identifierList -> . IDENTIFIER
    (46) assignment -> . identifierList assign_op expressionList
    (45) expressionStmt -> . expression
    (54) expression -> . expression BINARY_OP unaryExpr
    (55) expression -> . unaryExpr
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IMPORT          shift and go to state 11
    FN              shift and go to state 12
    IDENTIFIER      shift and go to state 13
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    topLevelDecls                  shift and go to state 67
    orphanStmtList                 shift and go to state 68
    importDecl                     shift and go to state 69
    topLevelDecl                   shift and go to state 5
    statementList                  shift and go to state 6
    functionDecl                   shift and go to state 8
    declaration                    shift and go to state 9
    statement                      shift and go to state 10
    varDecl                        shift and go to state 14
    simpleStmt                     shift and go to state 15
    identifierList                 shift and go to state 16
    assignment                     shift and go to state 17
    expressionStmt                 shift and go to state 18
    expression                     shift and go to state 19
    unaryExpr                      shift and go to state 20
    UNARY_OP                       shift and go to state 21
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    type_                          shift and go to state 28
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    numericType                    shift and go to state 37
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 5

    (14) topLevelDecls -> topLevelDecl . eos
    (105) eos -> . eos NEWL
    (106) eos -> . NEWL
    (107) eos -> . eos ;
    (108) eos -> . ;
    NEWL            shift and go to state 71
    ;               shift and go to state 72

    eos                            shift and go to state 70

state 6

    (15) orphanStmtList -> statementList . eos
    (39) statementList -> statementList . eos statement
    (105) eos -> . eos NEWL
    (106) eos -> . NEWL
    (107) eos -> . eos ;
    (108) eos -> . ;
    NEWL            shift and go to state 71
    ;               shift and go to state 72

    eos                            shift and go to state 73

state 7

    (6) importDecls -> importDecl . eos
    (105) eos -> . eos NEWL
    (106) eos -> . NEWL
    (107) eos -> . eos ;
    (108) eos -> . ;
    NEWL            shift and go to state 71
    ;               shift and go to state 72

    eos                            shift and go to state 74

state 8

    (16) topLevelDecl -> functionDecl .
    NEWL            reduce using rule 16 (topLevelDecl -> functionDecl .)
    ;               reduce using rule 16 (topLevelDecl -> functionDecl .)


state 9

    (17) topLevelDecl -> declaration .
    NEWL            reduce using rule 17 (topLevelDecl -> declaration .)
    ;               reduce using rule 17 (topLevelDecl -> declaration .)


state 10

    (40) statementList -> statement .
    NEWL            reduce using rule 40 (statementList -> statement .)
    ;               reduce using rule 40 (statementList -> statement .)
    }               reduce using rule 40 (statementList -> statement .)


state 11

    (7) importDecl -> IMPORT . importSpec
    (8) importSpec -> . importPath
    (9) importSpec -> . IDENTIFIER importPath
    (10) importSpec -> . . importPath
    (11) importPath -> . STRING_LIT
    (12) importPath -> . IDENTIFIER
    IDENTIFIER      shift and go to state 77
    .               shift and go to state 78
    STRING_LIT      shift and go to state 79

    importSpec                     shift and go to state 75
    importPath                     shift and go to state 76

state 12

    (22) functionDecl -> FN . IDENTIFIER signature
    (23) functionDecl -> FN . IDENTIFIER function_
    (36) functionLit -> FN . function_
    (24) function_ -> . signature block
    (25) signature -> . parameters
    (26) signature -> . parameters result
    (29) parameters -> . ( parameterList , )
    (30) parameters -> . ( parameterList )
    (31) parameters -> . ( )
    IDENTIFIER      shift and go to state 80
    (               shift and go to state 84

    signature                      shift and go to state 81
    function_                      shift and go to state 82
    parameters                     shift and go to state 83

state 13

    (21) identifierList -> IDENTIFIER .
    (65) operandName -> IDENTIFIER .
    (71) qualifiedIdent -> IDENTIFIER . . IDENTIFIER
    DECL_ASGN       reduce using rule 21 (identifierList -> IDENTIFIER .)
    ,               reduce using rule 21 (identifierList -> IDENTIFIER .)
    SHR_ASGN        reduce using rule 21 (identifierList -> IDENTIFIER .)
    SHL_ASGN        reduce using rule 21 (identifierList -> IDENTIFIER .)
    MOD_ASGN        reduce using rule 21 (identifierList -> IDENTIFIER .)
    DIV_ASGN        reduce using rule 21 (identifierList -> IDENTIFIER .)
    OR_ASGN         reduce using rule 21 (identifierList -> IDENTIFIER .)
    AND_ASGN        reduce using rule 21 (identifierList -> IDENTIFIER .)
    STAR_ASGN       reduce using rule 21 (identifierList -> IDENTIFIER .)
    XOR_ASGN        reduce using rule 21 (identifierList -> IDENTIFIER .)
    MINUS_ASGN      reduce using rule 21 (identifierList -> IDENTIFIER .)
    PLUS_ASGN       reduce using rule 21 (identifierList -> IDENTIFIER .)
    ASSIGN          reduce using rule 21 (identifierList -> IDENTIFIER .)
    (               reduce using rule 65 (operandName -> IDENTIFIER .)
    LOGIC_AND       reduce using rule 65 (operandName -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 65 (operandName -> IDENTIFIER .)
    SHR             reduce using rule 65 (operandName -> IDENTIFIER .)
    SHL             reduce using rule 65 (operandName -> IDENTIFIER .)
    AND             reduce using rule 65 (operandName -> IDENTIFIER .)
    MOD             reduce using rule 65 (operandName -> IDENTIFIER .)
    DIV             reduce using rule 65 (operandName -> IDENTIFIER .)
    STAR            reduce using rule 65 (operandName -> IDENTIFIER .)
    XOR             reduce using rule 65 (operandName -> IDENTIFIER .)
    OR              reduce using rule 65 (operandName -> IDENTIFIER .)
    MINUS           reduce using rule 65 (operandName -> IDENTIFIER .)
    PLUS            reduce using rule 65 (operandName -> IDENTIFIER .)
    GE              reduce using rule 65 (operandName -> IDENTIFIER .)
    GT              reduce using rule 65 (operandName -> IDENTIFIER .)
    LE              reduce using rule 65 (operandName -> IDENTIFIER .)
    LT              reduce using rule 65 (operandName -> IDENTIFIER .)
    NE              reduce using rule 65 (operandName -> IDENTIFIER .)
    EQ              reduce using rule 65 (operandName -> IDENTIFIER .)
    NEWL            reduce using rule 65 (operandName -> IDENTIFIER .)
    ;               reduce using rule 65 (operandName -> IDENTIFIER .)
    }               reduce using rule 65 (operandName -> IDENTIFIER .)
    .               shift and go to state 85


state 14

    (18) declaration -> varDecl .
    NEWL            reduce using rule 18 (declaration -> varDecl .)
    ;               reduce using rule 18 (declaration -> varDecl .)


state 15

    (42) statement -> simpleStmt .
    NEWL            reduce using rule 42 (statement -> simpleStmt .)
    ;               reduce using rule 42 (statement -> simpleStmt .)
    }               reduce using rule 42 (statement -> simpleStmt .)


state 16

    (19) varDecl -> identifierList . DECL_ASGN expressionList
    (20) identifierList -> identifierList . , IDENTIFIER
    (46) assignment -> identifierList . assign_op expressionList
    (109) assign_op -> . SHR_ASGN
    (110) assign_op -> . SHL_ASGN
    (111) assign_op -> . MOD_ASGN
    (112) assign_op -> . DIV_ASGN
    (113) assign_op -> . OR_ASGN
    (114) assign_op -> . AND_ASGN
    (115) assign_op -> . STAR_ASGN
    (116) assign_op -> . XOR_ASGN
    (117) assign_op -> . MINUS_ASGN
    (118) assign_op -> . PLUS_ASGN
    (119) assign_op -> . ASSIGN
    DECL_ASGN       shift and go to state 86
    ,               shift and go to state 87
    SHR_ASGN        shift and go to state 89
    SHL_ASGN        shift and go to state 90
    MOD_ASGN        shift and go to state 91
    DIV_ASGN        shift and go to state 92
    OR_ASGN         shift and go to state 93
    AND_ASGN        shift and go to state 94
    STAR_ASGN       shift and go to state 95
    XOR_ASGN        shift and go to state 96
    MINUS_ASGN      shift and go to state 97
    PLUS_ASGN       shift and go to state 98
    ASSIGN          shift and go to state 99

    assign_op                      shift and go to state 88

state 17

    (43) simpleStmt -> assignment .
    NEWL            reduce using rule 43 (simpleStmt -> assignment .)
    ;               reduce using rule 43 (simpleStmt -> assignment .)
    }               reduce using rule 43 (simpleStmt -> assignment .)


state 18

    (44) simpleStmt -> expressionStmt .
    NEWL            reduce using rule 44 (simpleStmt -> expressionStmt .)
    ;               reduce using rule 44 (simpleStmt -> expressionStmt .)
    }               reduce using rule 44 (simpleStmt -> expressionStmt .)


state 19

    (45) expressionStmt -> expression .
    (54) expression -> expression . BINARY_OP unaryExpr
    (120) BINARY_OP -> . MUL_OP
    (121) BINARY_OP -> . ADD_OP
    (122) BINARY_OP -> . REL_OP
    (123) BINARY_OP -> . LOGIC_AND
    (124) BINARY_OP -> . LOGIC_OR
    (135) MUL_OP -> . SHR
    (136) MUL_OP -> . SHL
    (137) MUL_OP -> . AND
    (138) MUL_OP -> . MOD
    (139) MUL_OP -> . DIV
    (140) MUL_OP -> . STAR
    (131) ADD_OP -> . XOR
    (132) ADD_OP -> . OR
    (133) ADD_OP -> . MINUS
    (134) ADD_OP -> . PLUS
    (125) REL_OP -> . GE
    (126) REL_OP -> . GT
    (127) REL_OP -> . LE
    (128) REL_OP -> . LT
    (129) REL_OP -> . NE
    (130) REL_OP -> . EQ
    NEWL            reduce using rule 45 (expressionStmt -> expression .)
    ;               reduce using rule 45 (expressionStmt -> expression .)
    }               reduce using rule 45 (expressionStmt -> expression .)
    LOGIC_AND       shift and go to state 104
    LOGIC_OR        shift and go to state 105
    SHR             shift and go to state 106
    SHL             shift and go to state 107
    AND             shift and go to state 108
    MOD             shift and go to state 109
    DIV             shift and go to state 110
    STAR            shift and go to state 111
    XOR             shift and go to state 112
    OR              shift and go to state 113
    MINUS           shift and go to state 114
    PLUS            shift and go to state 115
    GE              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    LT              shift and go to state 119
    NE              shift and go to state 120
    EQ              shift and go to state 121

    BINARY_OP                      shift and go to state 100
    MUL_OP                         shift and go to state 101
    ADD_OP                         shift and go to state 102
    REL_OP                         shift and go to state 103

state 20

    (55) expression -> unaryExpr .
    LOGIC_AND       reduce using rule 55 (expression -> unaryExpr .)
    LOGIC_OR        reduce using rule 55 (expression -> unaryExpr .)
    SHR             reduce using rule 55 (expression -> unaryExpr .)
    SHL             reduce using rule 55 (expression -> unaryExpr .)
    AND             reduce using rule 55 (expression -> unaryExpr .)
    MOD             reduce using rule 55 (expression -> unaryExpr .)
    DIV             reduce using rule 55 (expression -> unaryExpr .)
    STAR            reduce using rule 55 (expression -> unaryExpr .)
    XOR             reduce using rule 55 (expression -> unaryExpr .)
    OR              reduce using rule 55 (expression -> unaryExpr .)
    MINUS           reduce using rule 55 (expression -> unaryExpr .)
    PLUS            reduce using rule 55 (expression -> unaryExpr .)
    GE              reduce using rule 55 (expression -> unaryExpr .)
    GT              reduce using rule 55 (expression -> unaryExpr .)
    LE              reduce using rule 55 (expression -> unaryExpr .)
    LT              reduce using rule 55 (expression -> unaryExpr .)
    NE              reduce using rule 55 (expression -> unaryExpr .)
    EQ              reduce using rule 55 (expression -> unaryExpr .)
    NEWL            reduce using rule 55 (expression -> unaryExpr .)
    ;               reduce using rule 55 (expression -> unaryExpr .)
    )               reduce using rule 55 (expression -> unaryExpr .)
    ,               reduce using rule 55 (expression -> unaryExpr .)
    }               reduce using rule 55 (expression -> unaryExpr .)


state 21

    (56) unaryExpr -> UNARY_OP . unaryExpr
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    IDENTIFIER      shift and go to state 123
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    FN              shift and go to state 124
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    UNARY_OP                       shift and go to state 21
    unaryExpr                      shift and go to state 122
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    type_                          shift and go to state 28
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    numericType                    shift and go to state 37
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 22

    (57) unaryExpr -> primaryExpr .
    (58) primaryExpr -> primaryExpr . arguments
    (47) arguments -> . ( type_ , expressionList , )
    (48) arguments -> . ( type_ , expressionList )
    (49) arguments -> . ( type_ , )
    (50) arguments -> . ( type_ )
    (51) arguments -> . ( expressionList , )
    (52) arguments -> . ( expressionList )
    (53) arguments -> . ( )
    LOGIC_AND       reduce using rule 57 (unaryExpr -> primaryExpr .)
    LOGIC_OR        reduce using rule 57 (unaryExpr -> primaryExpr .)
    SHR             reduce using rule 57 (unaryExpr -> primaryExpr .)
    SHL             reduce using rule 57 (unaryExpr -> primaryExpr .)
    AND             reduce using rule 57 (unaryExpr -> primaryExpr .)
    MOD             reduce using rule 57 (unaryExpr -> primaryExpr .)
    DIV             reduce using rule 57 (unaryExpr -> primaryExpr .)
    STAR            reduce using rule 57 (unaryExpr -> primaryExpr .)
    XOR             reduce using rule 57 (unaryExpr -> primaryExpr .)
    OR              reduce using rule 57 (unaryExpr -> primaryExpr .)
    MINUS           reduce using rule 57 (unaryExpr -> primaryExpr .)
    PLUS            reduce using rule 57 (unaryExpr -> primaryExpr .)
    GE              reduce using rule 57 (unaryExpr -> primaryExpr .)
    GT              reduce using rule 57 (unaryExpr -> primaryExpr .)
    LE              reduce using rule 57 (unaryExpr -> primaryExpr .)
    LT              reduce using rule 57 (unaryExpr -> primaryExpr .)
    NE              reduce using rule 57 (unaryExpr -> primaryExpr .)
    EQ              reduce using rule 57 (unaryExpr -> primaryExpr .)
    NEWL            reduce using rule 57 (unaryExpr -> primaryExpr .)
    ;               reduce using rule 57 (unaryExpr -> primaryExpr .)
    )               reduce using rule 57 (unaryExpr -> primaryExpr .)
    ,               reduce using rule 57 (unaryExpr -> primaryExpr .)
    }               reduce using rule 57 (unaryExpr -> primaryExpr .)
    (               shift and go to state 126

    arguments                      shift and go to state 125

state 23

    (141) UNARY_OP -> AND .
    AND             reduce using rule 141 (UNARY_OP -> AND .)
    EXCLM           reduce using rule 141 (UNARY_OP -> AND .)
    MINUS           reduce using rule 141 (UNARY_OP -> AND .)
    (               reduce using rule 141 (UNARY_OP -> AND .)
    IDENTIFIER      reduce using rule 141 (UNARY_OP -> AND .)
    STRING          reduce using rule 141 (UNARY_OP -> AND .)
    BOOL            reduce using rule 141 (UNARY_OP -> AND .)
    RUNE            reduce using rule 141 (UNARY_OP -> AND .)
    FN              reduce using rule 141 (UNARY_OP -> AND .)
    DECIMAL_LIT     reduce using rule 141 (UNARY_OP -> AND .)
    FALSE           reduce using rule 141 (UNARY_OP -> AND .)
    TRUE            reduce using rule 141 (UNARY_OP -> AND .)
    RUNE_LIT        reduce using rule 141 (UNARY_OP -> AND .)
    STRING_LIT      reduce using rule 141 (UNARY_OP -> AND .)
    F32             reduce using rule 141 (UNARY_OP -> AND .)
    F64             reduce using rule 141 (UNARY_OP -> AND .)
    INT             reduce using rule 141 (UNARY_OP -> AND .)
    ISIZE           reduce using rule 141 (UNARY_OP -> AND .)
    I64             reduce using rule 141 (UNARY_OP -> AND .)
    I32             reduce using rule 141 (UNARY_OP -> AND .)
    I16             reduce using rule 141 (UNARY_OP -> AND .)
    I8              reduce using rule 141 (UNARY_OP -> AND .)
    UINT            reduce using rule 141 (UNARY_OP -> AND .)
    USIZE           reduce using rule 141 (UNARY_OP -> AND .)
    U64             reduce using rule 141 (UNARY_OP -> AND .)
    U32             reduce using rule 141 (UNARY_OP -> AND .)
    U16             reduce using rule 141 (UNARY_OP -> AND .)
    U8              reduce using rule 141 (UNARY_OP -> AND .)
    HEX_LIT         reduce using rule 141 (UNARY_OP -> AND .)
    OCTAL_LIT       reduce using rule 141 (UNARY_OP -> AND .)
    BINARY_LIT      reduce using rule 141 (UNARY_OP -> AND .)
    .               reduce using rule 141 (UNARY_OP -> AND .)


state 24

    (142) UNARY_OP -> EXCLM .
    AND             reduce using rule 142 (UNARY_OP -> EXCLM .)
    EXCLM           reduce using rule 142 (UNARY_OP -> EXCLM .)
    MINUS           reduce using rule 142 (UNARY_OP -> EXCLM .)
    (               reduce using rule 142 (UNARY_OP -> EXCLM .)
    IDENTIFIER      reduce using rule 142 (UNARY_OP -> EXCLM .)
    STRING          reduce using rule 142 (UNARY_OP -> EXCLM .)
    BOOL            reduce using rule 142 (UNARY_OP -> EXCLM .)
    RUNE            reduce using rule 142 (UNARY_OP -> EXCLM .)
    FN              reduce using rule 142 (UNARY_OP -> EXCLM .)
    DECIMAL_LIT     reduce using rule 142 (UNARY_OP -> EXCLM .)
    FALSE           reduce using rule 142 (UNARY_OP -> EXCLM .)
    TRUE            reduce using rule 142 (UNARY_OP -> EXCLM .)
    RUNE_LIT        reduce using rule 142 (UNARY_OP -> EXCLM .)
    STRING_LIT      reduce using rule 142 (UNARY_OP -> EXCLM .)
    F32             reduce using rule 142 (UNARY_OP -> EXCLM .)
    F64             reduce using rule 142 (UNARY_OP -> EXCLM .)
    INT             reduce using rule 142 (UNARY_OP -> EXCLM .)
    ISIZE           reduce using rule 142 (UNARY_OP -> EXCLM .)
    I64             reduce using rule 142 (UNARY_OP -> EXCLM .)
    I32             reduce using rule 142 (UNARY_OP -> EXCLM .)
    I16             reduce using rule 142 (UNARY_OP -> EXCLM .)
    I8              reduce using rule 142 (UNARY_OP -> EXCLM .)
    UINT            reduce using rule 142 (UNARY_OP -> EXCLM .)
    USIZE           reduce using rule 142 (UNARY_OP -> EXCLM .)
    U64             reduce using rule 142 (UNARY_OP -> EXCLM .)
    U32             reduce using rule 142 (UNARY_OP -> EXCLM .)
    U16             reduce using rule 142 (UNARY_OP -> EXCLM .)
    U8              reduce using rule 142 (UNARY_OP -> EXCLM .)
    HEX_LIT         reduce using rule 142 (UNARY_OP -> EXCLM .)
    OCTAL_LIT       reduce using rule 142 (UNARY_OP -> EXCLM .)
    BINARY_LIT      reduce using rule 142 (UNARY_OP -> EXCLM .)
    .               reduce using rule 142 (UNARY_OP -> EXCLM .)


state 25

    (143) UNARY_OP -> MINUS .
    AND             reduce using rule 143 (UNARY_OP -> MINUS .)
    EXCLM           reduce using rule 143 (UNARY_OP -> MINUS .)
    MINUS           reduce using rule 143 (UNARY_OP -> MINUS .)
    (               reduce using rule 143 (UNARY_OP -> MINUS .)
    IDENTIFIER      reduce using rule 143 (UNARY_OP -> MINUS .)
    STRING          reduce using rule 143 (UNARY_OP -> MINUS .)
    BOOL            reduce using rule 143 (UNARY_OP -> MINUS .)
    RUNE            reduce using rule 143 (UNARY_OP -> MINUS .)
    FN              reduce using rule 143 (UNARY_OP -> MINUS .)
    DECIMAL_LIT     reduce using rule 143 (UNARY_OP -> MINUS .)
    FALSE           reduce using rule 143 (UNARY_OP -> MINUS .)
    TRUE            reduce using rule 143 (UNARY_OP -> MINUS .)
    RUNE_LIT        reduce using rule 143 (UNARY_OP -> MINUS .)
    STRING_LIT      reduce using rule 143 (UNARY_OP -> MINUS .)
    F32             reduce using rule 143 (UNARY_OP -> MINUS .)
    F64             reduce using rule 143 (UNARY_OP -> MINUS .)
    INT             reduce using rule 143 (UNARY_OP -> MINUS .)
    ISIZE           reduce using rule 143 (UNARY_OP -> MINUS .)
    I64             reduce using rule 143 (UNARY_OP -> MINUS .)
    I32             reduce using rule 143 (UNARY_OP -> MINUS .)
    I16             reduce using rule 143 (UNARY_OP -> MINUS .)
    I8              reduce using rule 143 (UNARY_OP -> MINUS .)
    UINT            reduce using rule 143 (UNARY_OP -> MINUS .)
    USIZE           reduce using rule 143 (UNARY_OP -> MINUS .)
    U64             reduce using rule 143 (UNARY_OP -> MINUS .)
    U32             reduce using rule 143 (UNARY_OP -> MINUS .)
    U16             reduce using rule 143 (UNARY_OP -> MINUS .)
    U8              reduce using rule 143 (UNARY_OP -> MINUS .)
    HEX_LIT         reduce using rule 143 (UNARY_OP -> MINUS .)
    OCTAL_LIT       reduce using rule 143 (UNARY_OP -> MINUS .)
    BINARY_LIT      reduce using rule 143 (UNARY_OP -> MINUS .)
    .               reduce using rule 143 (UNARY_OP -> MINUS .)


state 26

    (59) primaryExpr -> conversion .
    (               reduce using rule 59 (primaryExpr -> conversion .)
    LOGIC_AND       reduce using rule 59 (primaryExpr -> conversion .)
    LOGIC_OR        reduce using rule 59 (primaryExpr -> conversion .)
    SHR             reduce using rule 59 (primaryExpr -> conversion .)
    SHL             reduce using rule 59 (primaryExpr -> conversion .)
    AND             reduce using rule 59 (primaryExpr -> conversion .)
    MOD             reduce using rule 59 (primaryExpr -> conversion .)
    DIV             reduce using rule 59 (primaryExpr -> conversion .)
    STAR            reduce using rule 59 (primaryExpr -> conversion .)
    XOR             reduce using rule 59 (primaryExpr -> conversion .)
    OR              reduce using rule 59 (primaryExpr -> conversion .)
    MINUS           reduce using rule 59 (primaryExpr -> conversion .)
    PLUS            reduce using rule 59 (primaryExpr -> conversion .)
    GE              reduce using rule 59 (primaryExpr -> conversion .)
    GT              reduce using rule 59 (primaryExpr -> conversion .)
    LE              reduce using rule 59 (primaryExpr -> conversion .)
    LT              reduce using rule 59 (primaryExpr -> conversion .)
    NE              reduce using rule 59 (primaryExpr -> conversion .)
    EQ              reduce using rule 59 (primaryExpr -> conversion .)
    NEWL            reduce using rule 59 (primaryExpr -> conversion .)
    ;               reduce using rule 59 (primaryExpr -> conversion .)
    )               reduce using rule 59 (primaryExpr -> conversion .)
    ,               reduce using rule 59 (primaryExpr -> conversion .)
    }               reduce using rule 59 (primaryExpr -> conversion .)


state 27

    (60) primaryExpr -> operand .
    (               reduce using rule 60 (primaryExpr -> operand .)
    LOGIC_AND       reduce using rule 60 (primaryExpr -> operand .)
    LOGIC_OR        reduce using rule 60 (primaryExpr -> operand .)
    SHR             reduce using rule 60 (primaryExpr -> operand .)
    SHL             reduce using rule 60 (primaryExpr -> operand .)
    AND             reduce using rule 60 (primaryExpr -> operand .)
    MOD             reduce using rule 60 (primaryExpr -> operand .)
    DIV             reduce using rule 60 (primaryExpr -> operand .)
    STAR            reduce using rule 60 (primaryExpr -> operand .)
    XOR             reduce using rule 60 (primaryExpr -> operand .)
    OR              reduce using rule 60 (primaryExpr -> operand .)
    MINUS           reduce using rule 60 (primaryExpr -> operand .)
    PLUS            reduce using rule 60 (primaryExpr -> operand .)
    GE              reduce using rule 60 (primaryExpr -> operand .)
    GT              reduce using rule 60 (primaryExpr -> operand .)
    LE              reduce using rule 60 (primaryExpr -> operand .)
    LT              reduce using rule 60 (primaryExpr -> operand .)
    NE              reduce using rule 60 (primaryExpr -> operand .)
    EQ              reduce using rule 60 (primaryExpr -> operand .)
    NEWL            reduce using rule 60 (primaryExpr -> operand .)
    ;               reduce using rule 60 (primaryExpr -> operand .)
    )               reduce using rule 60 (primaryExpr -> operand .)
    ,               reduce using rule 60 (primaryExpr -> operand .)
    }               reduce using rule 60 (primaryExpr -> operand .)


state 28

    (68) conversion -> type_ . ( expression )
    (               shift and go to state 127


state 29

    (61) operand -> ( . expression )
    (54) expression -> . expression BINARY_OP unaryExpr
    (55) expression -> . unaryExpr
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    IDENTIFIER      shift and go to state 123
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    FN              shift and go to state 124
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    expression                     shift and go to state 128
    unaryExpr                      shift and go to state 20
    UNARY_OP                       shift and go to state 21
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    type_                          shift and go to state 28
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    numericType                    shift and go to state 37
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 30

    (62) operand -> operandName .
    (               reduce using rule 62 (operand -> operandName .)
    LOGIC_AND       reduce using rule 62 (operand -> operandName .)
    LOGIC_OR        reduce using rule 62 (operand -> operandName .)
    SHR             reduce using rule 62 (operand -> operandName .)
    SHL             reduce using rule 62 (operand -> operandName .)
    AND             reduce using rule 62 (operand -> operandName .)
    MOD             reduce using rule 62 (operand -> operandName .)
    DIV             reduce using rule 62 (operand -> operandName .)
    STAR            reduce using rule 62 (operand -> operandName .)
    XOR             reduce using rule 62 (operand -> operandName .)
    OR              reduce using rule 62 (operand -> operandName .)
    MINUS           reduce using rule 62 (operand -> operandName .)
    PLUS            reduce using rule 62 (operand -> operandName .)
    GE              reduce using rule 62 (operand -> operandName .)
    GT              reduce using rule 62 (operand -> operandName .)
    LE              reduce using rule 62 (operand -> operandName .)
    LT              reduce using rule 62 (operand -> operandName .)
    NE              reduce using rule 62 (operand -> operandName .)
    EQ              reduce using rule 62 (operand -> operandName .)
    NEWL            reduce using rule 62 (operand -> operandName .)
    ;               reduce using rule 62 (operand -> operandName .)
    )               reduce using rule 62 (operand -> operandName .)
    ,               reduce using rule 62 (operand -> operandName .)
    }               reduce using rule 62 (operand -> operandName .)


state 31

    (63) operand -> literal .
    (               reduce using rule 63 (operand -> literal .)
    LOGIC_AND       reduce using rule 63 (operand -> literal .)
    LOGIC_OR        reduce using rule 63 (operand -> literal .)
    SHR             reduce using rule 63 (operand -> literal .)
    SHL             reduce using rule 63 (operand -> literal .)
    AND             reduce using rule 63 (operand -> literal .)
    MOD             reduce using rule 63 (operand -> literal .)
    DIV             reduce using rule 63 (operand -> literal .)
    STAR            reduce using rule 63 (operand -> literal .)
    XOR             reduce using rule 63 (operand -> literal .)
    OR              reduce using rule 63 (operand -> literal .)
    MINUS           reduce using rule 63 (operand -> literal .)
    PLUS            reduce using rule 63 (operand -> literal .)
    GE              reduce using rule 63 (operand -> literal .)
    GT              reduce using rule 63 (operand -> literal .)
    LE              reduce using rule 63 (operand -> literal .)
    LT              reduce using rule 63 (operand -> literal .)
    NE              reduce using rule 63 (operand -> literal .)
    EQ              reduce using rule 63 (operand -> literal .)
    NEWL            reduce using rule 63 (operand -> literal .)
    ;               reduce using rule 63 (operand -> literal .)
    )               reduce using rule 63 (operand -> literal .)
    ,               reduce using rule 63 (operand -> literal .)
    }               reduce using rule 63 (operand -> literal .)


state 32

    (69) type_ -> qualifiedIdent .
    (64) operandName -> qualifiedIdent .
  ! reduce/reduce conflict for ( resolved using rule 64 (operandName -> qualifiedIdent .)
  ! reduce/reduce conflict for ) resolved using rule 64 (operandName -> qualifiedIdent .)
  ! reduce/reduce conflict for , resolved using rule 64 (operandName -> qualifiedIdent .)
    (               reduce using rule 64 (operandName -> qualifiedIdent .)
    LOGIC_AND       reduce using rule 64 (operandName -> qualifiedIdent .)
    LOGIC_OR        reduce using rule 64 (operandName -> qualifiedIdent .)
    SHR             reduce using rule 64 (operandName -> qualifiedIdent .)
    SHL             reduce using rule 64 (operandName -> qualifiedIdent .)
    AND             reduce using rule 64 (operandName -> qualifiedIdent .)
    MOD             reduce using rule 64 (operandName -> qualifiedIdent .)
    DIV             reduce using rule 64 (operandName -> qualifiedIdent .)
    STAR            reduce using rule 64 (operandName -> qualifiedIdent .)
    XOR             reduce using rule 64 (operandName -> qualifiedIdent .)
    OR              reduce using rule 64 (operandName -> qualifiedIdent .)
    MINUS           reduce using rule 64 (operandName -> qualifiedIdent .)
    PLUS            reduce using rule 64 (operandName -> qualifiedIdent .)
    GE              reduce using rule 64 (operandName -> qualifiedIdent .)
    GT              reduce using rule 64 (operandName -> qualifiedIdent .)
    LE              reduce using rule 64 (operandName -> qualifiedIdent .)
    LT              reduce using rule 64 (operandName -> qualifiedIdent .)
    NE              reduce using rule 64 (operandName -> qualifiedIdent .)
    EQ              reduce using rule 64 (operandName -> qualifiedIdent .)
    NEWL            reduce using rule 64 (operandName -> qualifiedIdent .)
    ;               reduce using rule 64 (operandName -> qualifiedIdent .)
    )               reduce using rule 64 (operandName -> qualifiedIdent .)
    ,               reduce using rule 64 (operandName -> qualifiedIdent .)
    }               reduce using rule 64 (operandName -> qualifiedIdent .)


state 33

    (70) type_ -> typeName .
    (               reduce using rule 70 (type_ -> typeName .)
    {               reduce using rule 70 (type_ -> typeName .)
    NEWL            reduce using rule 70 (type_ -> typeName .)
    ;               reduce using rule 70 (type_ -> typeName .)
    ,               reduce using rule 70 (type_ -> typeName .)
    )               reduce using rule 70 (type_ -> typeName .)


state 34

    (66) literal -> functionLit .
    (               reduce using rule 66 (literal -> functionLit .)
    LOGIC_AND       reduce using rule 66 (literal -> functionLit .)
    LOGIC_OR        reduce using rule 66 (literal -> functionLit .)
    SHR             reduce using rule 66 (literal -> functionLit .)
    SHL             reduce using rule 66 (literal -> functionLit .)
    AND             reduce using rule 66 (literal -> functionLit .)
    MOD             reduce using rule 66 (literal -> functionLit .)
    DIV             reduce using rule 66 (literal -> functionLit .)
    STAR            reduce using rule 66 (literal -> functionLit .)
    XOR             reduce using rule 66 (literal -> functionLit .)
    OR              reduce using rule 66 (literal -> functionLit .)
    MINUS           reduce using rule 66 (literal -> functionLit .)
    PLUS            reduce using rule 66 (literal -> functionLit .)
    GE              reduce using rule 66 (literal -> functionLit .)
    GT              reduce using rule 66 (literal -> functionLit .)
    LE              reduce using rule 66 (literal -> functionLit .)
    LT              reduce using rule 66 (literal -> functionLit .)
    NE              reduce using rule 66 (literal -> functionLit .)
    EQ              reduce using rule 66 (literal -> functionLit .)
    NEWL            reduce using rule 66 (literal -> functionLit .)
    ;               reduce using rule 66 (literal -> functionLit .)
    )               reduce using rule 66 (literal -> functionLit .)
    ,               reduce using rule 66 (literal -> functionLit .)
    }               reduce using rule 66 (literal -> functionLit .)


state 35

    (67) literal -> basicLit .
    (               reduce using rule 67 (literal -> basicLit .)
    LOGIC_AND       reduce using rule 67 (literal -> basicLit .)
    LOGIC_OR        reduce using rule 67 (literal -> basicLit .)
    SHR             reduce using rule 67 (literal -> basicLit .)
    SHL             reduce using rule 67 (literal -> basicLit .)
    AND             reduce using rule 67 (literal -> basicLit .)
    MOD             reduce using rule 67 (literal -> basicLit .)
    DIV             reduce using rule 67 (literal -> basicLit .)
    STAR            reduce using rule 67 (literal -> basicLit .)
    XOR             reduce using rule 67 (literal -> basicLit .)
    OR              reduce using rule 67 (literal -> basicLit .)
    MINUS           reduce using rule 67 (literal -> basicLit .)
    PLUS            reduce using rule 67 (literal -> basicLit .)
    GE              reduce using rule 67 (literal -> basicLit .)
    GT              reduce using rule 67 (literal -> basicLit .)
    LE              reduce using rule 67 (literal -> basicLit .)
    LT              reduce using rule 67 (literal -> basicLit .)
    NE              reduce using rule 67 (literal -> basicLit .)
    EQ              reduce using rule 67 (literal -> basicLit .)
    NEWL            reduce using rule 67 (literal -> basicLit .)
    ;               reduce using rule 67 (literal -> basicLit .)
    )               reduce using rule 67 (literal -> basicLit .)
    ,               reduce using rule 67 (literal -> basicLit .)
    }               reduce using rule 67 (literal -> basicLit .)


state 36

    (98) FLOAT_LIT -> . . DECIMAL_LIT
    DECIMAL_LIT     shift and go to state 129


state 37

    (72) typeName -> numericType .
    (               reduce using rule 72 (typeName -> numericType .)
    {               reduce using rule 72 (typeName -> numericType .)
    NEWL            reduce using rule 72 (typeName -> numericType .)
    ;               reduce using rule 72 (typeName -> numericType .)
    ,               reduce using rule 72 (typeName -> numericType .)
    )               reduce using rule 72 (typeName -> numericType .)


state 38

    (73) typeName -> STRING .
    (               reduce using rule 73 (typeName -> STRING .)
    {               reduce using rule 73 (typeName -> STRING .)
    NEWL            reduce using rule 73 (typeName -> STRING .)
    ;               reduce using rule 73 (typeName -> STRING .)
    ,               reduce using rule 73 (typeName -> STRING .)
    )               reduce using rule 73 (typeName -> STRING .)


state 39

    (74) typeName -> BOOL .
    (               reduce using rule 74 (typeName -> BOOL .)
    {               reduce using rule 74 (typeName -> BOOL .)
    NEWL            reduce using rule 74 (typeName -> BOOL .)
    ;               reduce using rule 74 (typeName -> BOOL .)
    ,               reduce using rule 74 (typeName -> BOOL .)
    )               reduce using rule 74 (typeName -> BOOL .)


state 40

    (75) typeName -> RUNE .
    (               reduce using rule 75 (typeName -> RUNE .)
    {               reduce using rule 75 (typeName -> RUNE .)
    NEWL            reduce using rule 75 (typeName -> RUNE .)
    ;               reduce using rule 75 (typeName -> RUNE .)
    ,               reduce using rule 75 (typeName -> RUNE .)
    )               reduce using rule 75 (typeName -> RUNE .)


state 41

    (90) basicLit -> INT_LIT .
    (               reduce using rule 90 (basicLit -> INT_LIT .)
    LOGIC_AND       reduce using rule 90 (basicLit -> INT_LIT .)
    LOGIC_OR        reduce using rule 90 (basicLit -> INT_LIT .)
    SHR             reduce using rule 90 (basicLit -> INT_LIT .)
    SHL             reduce using rule 90 (basicLit -> INT_LIT .)
    AND             reduce using rule 90 (basicLit -> INT_LIT .)
    MOD             reduce using rule 90 (basicLit -> INT_LIT .)
    DIV             reduce using rule 90 (basicLit -> INT_LIT .)
    STAR            reduce using rule 90 (basicLit -> INT_LIT .)
    XOR             reduce using rule 90 (basicLit -> INT_LIT .)
    OR              reduce using rule 90 (basicLit -> INT_LIT .)
    MINUS           reduce using rule 90 (basicLit -> INT_LIT .)
    PLUS            reduce using rule 90 (basicLit -> INT_LIT .)
    GE              reduce using rule 90 (basicLit -> INT_LIT .)
    GT              reduce using rule 90 (basicLit -> INT_LIT .)
    LE              reduce using rule 90 (basicLit -> INT_LIT .)
    LT              reduce using rule 90 (basicLit -> INT_LIT .)
    NE              reduce using rule 90 (basicLit -> INT_LIT .)
    EQ              reduce using rule 90 (basicLit -> INT_LIT .)
    NEWL            reduce using rule 90 (basicLit -> INT_LIT .)
    ;               reduce using rule 90 (basicLit -> INT_LIT .)
    )               reduce using rule 90 (basicLit -> INT_LIT .)
    ,               reduce using rule 90 (basicLit -> INT_LIT .)
    }               reduce using rule 90 (basicLit -> INT_LIT .)


state 42

    (91) basicLit -> FLOAT_LIT .
    (93) basicLit -> FLOAT_LIT . EXPONENT
    (               reduce using rule 91 (basicLit -> FLOAT_LIT .)
    LOGIC_AND       reduce using rule 91 (basicLit -> FLOAT_LIT .)
    LOGIC_OR        reduce using rule 91 (basicLit -> FLOAT_LIT .)
    SHR             reduce using rule 91 (basicLit -> FLOAT_LIT .)
    SHL             reduce using rule 91 (basicLit -> FLOAT_LIT .)
    AND             reduce using rule 91 (basicLit -> FLOAT_LIT .)
    MOD             reduce using rule 91 (basicLit -> FLOAT_LIT .)
    DIV             reduce using rule 91 (basicLit -> FLOAT_LIT .)
    STAR            reduce using rule 91 (basicLit -> FLOAT_LIT .)
    XOR             reduce using rule 91 (basicLit -> FLOAT_LIT .)
    OR              reduce using rule 91 (basicLit -> FLOAT_LIT .)
    MINUS           reduce using rule 91 (basicLit -> FLOAT_LIT .)
    PLUS            reduce using rule 91 (basicLit -> FLOAT_LIT .)
    GE              reduce using rule 91 (basicLit -> FLOAT_LIT .)
    GT              reduce using rule 91 (basicLit -> FLOAT_LIT .)
    LE              reduce using rule 91 (basicLit -> FLOAT_LIT .)
    LT              reduce using rule 91 (basicLit -> FLOAT_LIT .)
    NE              reduce using rule 91 (basicLit -> FLOAT_LIT .)
    EQ              reduce using rule 91 (basicLit -> FLOAT_LIT .)
    NEWL            reduce using rule 91 (basicLit -> FLOAT_LIT .)
    ;               reduce using rule 91 (basicLit -> FLOAT_LIT .)
    )               reduce using rule 91 (basicLit -> FLOAT_LIT .)
    ,               reduce using rule 91 (basicLit -> FLOAT_LIT .)
    }               reduce using rule 91 (basicLit -> FLOAT_LIT .)
    EXPONENT        shift and go to state 130


state 43

    (92) basicLit -> DECIMAL_LIT . EXPONENT
    (104) INT_LIT -> DECIMAL_LIT .
    (99) FLOAT_LIT -> DECIMAL_LIT . .
    (100) FLOAT_LIT -> DECIMAL_LIT . . DECIMAL_LIT
    EXPONENT        shift and go to state 131
    (               reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    SHR             reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    SHL             reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    AND             reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    MOD             reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    DIV             reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    STAR            reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    XOR             reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    OR              reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    MINUS           reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    PLUS            reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    GE              reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    GT              reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    LE              reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    LT              reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    NE              reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    EQ              reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    NEWL            reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    ;               reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    )               reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    ,               reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    }               reduce using rule 104 (INT_LIT -> DECIMAL_LIT .)
    .               shift and go to state 132


state 44

    (94) basicLit -> FALSE .
    (               reduce using rule 94 (basicLit -> FALSE .)
    LOGIC_AND       reduce using rule 94 (basicLit -> FALSE .)
    LOGIC_OR        reduce using rule 94 (basicLit -> FALSE .)
    SHR             reduce using rule 94 (basicLit -> FALSE .)
    SHL             reduce using rule 94 (basicLit -> FALSE .)
    AND             reduce using rule 94 (basicLit -> FALSE .)
    MOD             reduce using rule 94 (basicLit -> FALSE .)
    DIV             reduce using rule 94 (basicLit -> FALSE .)
    STAR            reduce using rule 94 (basicLit -> FALSE .)
    XOR             reduce using rule 94 (basicLit -> FALSE .)
    OR              reduce using rule 94 (basicLit -> FALSE .)
    MINUS           reduce using rule 94 (basicLit -> FALSE .)
    PLUS            reduce using rule 94 (basicLit -> FALSE .)
    GE              reduce using rule 94 (basicLit -> FALSE .)
    GT              reduce using rule 94 (basicLit -> FALSE .)
    LE              reduce using rule 94 (basicLit -> FALSE .)
    LT              reduce using rule 94 (basicLit -> FALSE .)
    NE              reduce using rule 94 (basicLit -> FALSE .)
    EQ              reduce using rule 94 (basicLit -> FALSE .)
    NEWL            reduce using rule 94 (basicLit -> FALSE .)
    ;               reduce using rule 94 (basicLit -> FALSE .)
    )               reduce using rule 94 (basicLit -> FALSE .)
    ,               reduce using rule 94 (basicLit -> FALSE .)
    }               reduce using rule 94 (basicLit -> FALSE .)


state 45

    (95) basicLit -> TRUE .
    (               reduce using rule 95 (basicLit -> TRUE .)
    LOGIC_AND       reduce using rule 95 (basicLit -> TRUE .)
    LOGIC_OR        reduce using rule 95 (basicLit -> TRUE .)
    SHR             reduce using rule 95 (basicLit -> TRUE .)
    SHL             reduce using rule 95 (basicLit -> TRUE .)
    AND             reduce using rule 95 (basicLit -> TRUE .)
    MOD             reduce using rule 95 (basicLit -> TRUE .)
    DIV             reduce using rule 95 (basicLit -> TRUE .)
    STAR            reduce using rule 95 (basicLit -> TRUE .)
    XOR             reduce using rule 95 (basicLit -> TRUE .)
    OR              reduce using rule 95 (basicLit -> TRUE .)
    MINUS           reduce using rule 95 (basicLit -> TRUE .)
    PLUS            reduce using rule 95 (basicLit -> TRUE .)
    GE              reduce using rule 95 (basicLit -> TRUE .)
    GT              reduce using rule 95 (basicLit -> TRUE .)
    LE              reduce using rule 95 (basicLit -> TRUE .)
    LT              reduce using rule 95 (basicLit -> TRUE .)
    NE              reduce using rule 95 (basicLit -> TRUE .)
    EQ              reduce using rule 95 (basicLit -> TRUE .)
    NEWL            reduce using rule 95 (basicLit -> TRUE .)
    ;               reduce using rule 95 (basicLit -> TRUE .)
    )               reduce using rule 95 (basicLit -> TRUE .)
    ,               reduce using rule 95 (basicLit -> TRUE .)
    }               reduce using rule 95 (basicLit -> TRUE .)


state 46

    (96) basicLit -> RUNE_LIT .
    (               reduce using rule 96 (basicLit -> RUNE_LIT .)
    LOGIC_AND       reduce using rule 96 (basicLit -> RUNE_LIT .)
    LOGIC_OR        reduce using rule 96 (basicLit -> RUNE_LIT .)
    SHR             reduce using rule 96 (basicLit -> RUNE_LIT .)
    SHL             reduce using rule 96 (basicLit -> RUNE_LIT .)
    AND             reduce using rule 96 (basicLit -> RUNE_LIT .)
    MOD             reduce using rule 96 (basicLit -> RUNE_LIT .)
    DIV             reduce using rule 96 (basicLit -> RUNE_LIT .)
    STAR            reduce using rule 96 (basicLit -> RUNE_LIT .)
    XOR             reduce using rule 96 (basicLit -> RUNE_LIT .)
    OR              reduce using rule 96 (basicLit -> RUNE_LIT .)
    MINUS           reduce using rule 96 (basicLit -> RUNE_LIT .)
    PLUS            reduce using rule 96 (basicLit -> RUNE_LIT .)
    GE              reduce using rule 96 (basicLit -> RUNE_LIT .)
    GT              reduce using rule 96 (basicLit -> RUNE_LIT .)
    LE              reduce using rule 96 (basicLit -> RUNE_LIT .)
    LT              reduce using rule 96 (basicLit -> RUNE_LIT .)
    NE              reduce using rule 96 (basicLit -> RUNE_LIT .)
    EQ              reduce using rule 96 (basicLit -> RUNE_LIT .)
    NEWL            reduce using rule 96 (basicLit -> RUNE_LIT .)
    ;               reduce using rule 96 (basicLit -> RUNE_LIT .)
    )               reduce using rule 96 (basicLit -> RUNE_LIT .)
    ,               reduce using rule 96 (basicLit -> RUNE_LIT .)
    }               reduce using rule 96 (basicLit -> RUNE_LIT .)


state 47

    (97) basicLit -> STRING_LIT .
    (               reduce using rule 97 (basicLit -> STRING_LIT .)
    LOGIC_AND       reduce using rule 97 (basicLit -> STRING_LIT .)
    LOGIC_OR        reduce using rule 97 (basicLit -> STRING_LIT .)
    SHR             reduce using rule 97 (basicLit -> STRING_LIT .)
    SHL             reduce using rule 97 (basicLit -> STRING_LIT .)
    AND             reduce using rule 97 (basicLit -> STRING_LIT .)
    MOD             reduce using rule 97 (basicLit -> STRING_LIT .)
    DIV             reduce using rule 97 (basicLit -> STRING_LIT .)
    STAR            reduce using rule 97 (basicLit -> STRING_LIT .)
    XOR             reduce using rule 97 (basicLit -> STRING_LIT .)
    OR              reduce using rule 97 (basicLit -> STRING_LIT .)
    MINUS           reduce using rule 97 (basicLit -> STRING_LIT .)
    PLUS            reduce using rule 97 (basicLit -> STRING_LIT .)
    GE              reduce using rule 97 (basicLit -> STRING_LIT .)
    GT              reduce using rule 97 (basicLit -> STRING_LIT .)
    LE              reduce using rule 97 (basicLit -> STRING_LIT .)
    LT              reduce using rule 97 (basicLit -> STRING_LIT .)
    NE              reduce using rule 97 (basicLit -> STRING_LIT .)
    EQ              reduce using rule 97 (basicLit -> STRING_LIT .)
    NEWL            reduce using rule 97 (basicLit -> STRING_LIT .)
    ;               reduce using rule 97 (basicLit -> STRING_LIT .)
    )               reduce using rule 97 (basicLit -> STRING_LIT .)
    ,               reduce using rule 97 (basicLit -> STRING_LIT .)
    }               reduce using rule 97 (basicLit -> STRING_LIT .)


state 48

    (76) numericType -> F32 .
    (               reduce using rule 76 (numericType -> F32 .)
    {               reduce using rule 76 (numericType -> F32 .)
    NEWL            reduce using rule 76 (numericType -> F32 .)
    ;               reduce using rule 76 (numericType -> F32 .)
    ,               reduce using rule 76 (numericType -> F32 .)
    )               reduce using rule 76 (numericType -> F32 .)


state 49

    (77) numericType -> F64 .
    (               reduce using rule 77 (numericType -> F64 .)
    {               reduce using rule 77 (numericType -> F64 .)
    NEWL            reduce using rule 77 (numericType -> F64 .)
    ;               reduce using rule 77 (numericType -> F64 .)
    ,               reduce using rule 77 (numericType -> F64 .)
    )               reduce using rule 77 (numericType -> F64 .)


state 50

    (78) numericType -> INT .
    (               reduce using rule 78 (numericType -> INT .)
    {               reduce using rule 78 (numericType -> INT .)
    NEWL            reduce using rule 78 (numericType -> INT .)
    ;               reduce using rule 78 (numericType -> INT .)
    ,               reduce using rule 78 (numericType -> INT .)
    )               reduce using rule 78 (numericType -> INT .)


state 51

    (79) numericType -> ISIZE .
    (               reduce using rule 79 (numericType -> ISIZE .)
    {               reduce using rule 79 (numericType -> ISIZE .)
    NEWL            reduce using rule 79 (numericType -> ISIZE .)
    ;               reduce using rule 79 (numericType -> ISIZE .)
    ,               reduce using rule 79 (numericType -> ISIZE .)
    )               reduce using rule 79 (numericType -> ISIZE .)


state 52

    (80) numericType -> I64 .
    (               reduce using rule 80 (numericType -> I64 .)
    {               reduce using rule 80 (numericType -> I64 .)
    NEWL            reduce using rule 80 (numericType -> I64 .)
    ;               reduce using rule 80 (numericType -> I64 .)
    ,               reduce using rule 80 (numericType -> I64 .)
    )               reduce using rule 80 (numericType -> I64 .)


state 53

    (81) numericType -> I32 .
    (               reduce using rule 81 (numericType -> I32 .)
    {               reduce using rule 81 (numericType -> I32 .)
    NEWL            reduce using rule 81 (numericType -> I32 .)
    ;               reduce using rule 81 (numericType -> I32 .)
    ,               reduce using rule 81 (numericType -> I32 .)
    )               reduce using rule 81 (numericType -> I32 .)


state 54

    (82) numericType -> I16 .
    (               reduce using rule 82 (numericType -> I16 .)
    {               reduce using rule 82 (numericType -> I16 .)
    NEWL            reduce using rule 82 (numericType -> I16 .)
    ;               reduce using rule 82 (numericType -> I16 .)
    ,               reduce using rule 82 (numericType -> I16 .)
    )               reduce using rule 82 (numericType -> I16 .)


state 55

    (83) numericType -> I8 .
    (               reduce using rule 83 (numericType -> I8 .)
    {               reduce using rule 83 (numericType -> I8 .)
    NEWL            reduce using rule 83 (numericType -> I8 .)
    ;               reduce using rule 83 (numericType -> I8 .)
    ,               reduce using rule 83 (numericType -> I8 .)
    )               reduce using rule 83 (numericType -> I8 .)


state 56

    (84) numericType -> UINT .
    (               reduce using rule 84 (numericType -> UINT .)
    {               reduce using rule 84 (numericType -> UINT .)
    NEWL            reduce using rule 84 (numericType -> UINT .)
    ;               reduce using rule 84 (numericType -> UINT .)
    ,               reduce using rule 84 (numericType -> UINT .)
    )               reduce using rule 84 (numericType -> UINT .)


state 57

    (85) numericType -> USIZE .
    (               reduce using rule 85 (numericType -> USIZE .)
    {               reduce using rule 85 (numericType -> USIZE .)
    NEWL            reduce using rule 85 (numericType -> USIZE .)
    ;               reduce using rule 85 (numericType -> USIZE .)
    ,               reduce using rule 85 (numericType -> USIZE .)
    )               reduce using rule 85 (numericType -> USIZE .)


state 58

    (86) numericType -> U64 .
    (               reduce using rule 86 (numericType -> U64 .)
    {               reduce using rule 86 (numericType -> U64 .)
    NEWL            reduce using rule 86 (numericType -> U64 .)
    ;               reduce using rule 86 (numericType -> U64 .)
    ,               reduce using rule 86 (numericType -> U64 .)
    )               reduce using rule 86 (numericType -> U64 .)


state 59

    (87) numericType -> U32 .
    (               reduce using rule 87 (numericType -> U32 .)
    {               reduce using rule 87 (numericType -> U32 .)
    NEWL            reduce using rule 87 (numericType -> U32 .)
    ;               reduce using rule 87 (numericType -> U32 .)
    ,               reduce using rule 87 (numericType -> U32 .)
    )               reduce using rule 87 (numericType -> U32 .)


state 60

    (88) numericType -> U16 .
    (               reduce using rule 88 (numericType -> U16 .)
    {               reduce using rule 88 (numericType -> U16 .)
    NEWL            reduce using rule 88 (numericType -> U16 .)
    ;               reduce using rule 88 (numericType -> U16 .)
    ,               reduce using rule 88 (numericType -> U16 .)
    )               reduce using rule 88 (numericType -> U16 .)


state 61

    (89) numericType -> U8 .
    (               reduce using rule 89 (numericType -> U8 .)
    {               reduce using rule 89 (numericType -> U8 .)
    NEWL            reduce using rule 89 (numericType -> U8 .)
    ;               reduce using rule 89 (numericType -> U8 .)
    ,               reduce using rule 89 (numericType -> U8 .)
    )               reduce using rule 89 (numericType -> U8 .)


state 62

    (101) INT_LIT -> HEX_LIT .
    (               reduce using rule 101 (INT_LIT -> HEX_LIT .)
    LOGIC_AND       reduce using rule 101 (INT_LIT -> HEX_LIT .)
    LOGIC_OR        reduce using rule 101 (INT_LIT -> HEX_LIT .)
    SHR             reduce using rule 101 (INT_LIT -> HEX_LIT .)
    SHL             reduce using rule 101 (INT_LIT -> HEX_LIT .)
    AND             reduce using rule 101 (INT_LIT -> HEX_LIT .)
    MOD             reduce using rule 101 (INT_LIT -> HEX_LIT .)
    DIV             reduce using rule 101 (INT_LIT -> HEX_LIT .)
    STAR            reduce using rule 101 (INT_LIT -> HEX_LIT .)
    XOR             reduce using rule 101 (INT_LIT -> HEX_LIT .)
    OR              reduce using rule 101 (INT_LIT -> HEX_LIT .)
    MINUS           reduce using rule 101 (INT_LIT -> HEX_LIT .)
    PLUS            reduce using rule 101 (INT_LIT -> HEX_LIT .)
    GE              reduce using rule 101 (INT_LIT -> HEX_LIT .)
    GT              reduce using rule 101 (INT_LIT -> HEX_LIT .)
    LE              reduce using rule 101 (INT_LIT -> HEX_LIT .)
    LT              reduce using rule 101 (INT_LIT -> HEX_LIT .)
    NE              reduce using rule 101 (INT_LIT -> HEX_LIT .)
    EQ              reduce using rule 101 (INT_LIT -> HEX_LIT .)
    NEWL            reduce using rule 101 (INT_LIT -> HEX_LIT .)
    ;               reduce using rule 101 (INT_LIT -> HEX_LIT .)
    )               reduce using rule 101 (INT_LIT -> HEX_LIT .)
    ,               reduce using rule 101 (INT_LIT -> HEX_LIT .)
    }               reduce using rule 101 (INT_LIT -> HEX_LIT .)


state 63

    (102) INT_LIT -> OCTAL_LIT .
    (               reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    LOGIC_AND       reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    LOGIC_OR        reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    SHR             reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    SHL             reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    AND             reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    MOD             reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    DIV             reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    STAR            reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    XOR             reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    OR              reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    MINUS           reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    PLUS            reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    GE              reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    GT              reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    LE              reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    LT              reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    NE              reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    EQ              reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    NEWL            reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    ;               reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    )               reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    ,               reduce using rule 102 (INT_LIT -> OCTAL_LIT .)
    }               reduce using rule 102 (INT_LIT -> OCTAL_LIT .)


state 64

    (103) INT_LIT -> BINARY_LIT .
    (               reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    LOGIC_AND       reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    LOGIC_OR        reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    SHR             reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    SHL             reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    AND             reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    MOD             reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    DIV             reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    STAR            reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    XOR             reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    OR              reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    MINUS           reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    PLUS            reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    GE              reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    GT              reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    LE              reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    LT              reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    NE              reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    EQ              reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    NEWL            reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    ;               reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    )               reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    ,               reduce using rule 103 (INT_LIT -> BINARY_LIT .)
    }               reduce using rule 103 (INT_LIT -> BINARY_LIT .)


state 65

    (1) sourceFile -> topLevelDecls orphanStmtList .
    $end            reduce using rule 1 (sourceFile -> topLevelDecls orphanStmtList .)


state 66

    (13) topLevelDecls -> topLevelDecls topLevelDecl . eos
    (105) eos -> . eos NEWL
    (106) eos -> . NEWL
    (107) eos -> . eos ;
    (108) eos -> . ;
    NEWL            shift and go to state 71
    ;               shift and go to state 72

    eos                            shift and go to state 133

state 67

    (3) sourceFile -> importDecls topLevelDecls . orphanStmtList
    (13) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (15) orphanStmtList -> . statementList eos
    (16) topLevelDecl -> . functionDecl
    (17) topLevelDecl -> . declaration
    (39) statementList -> . statementList eos statement
    (40) statementList -> . statement
    (22) functionDecl -> . FN IDENTIFIER signature
    (23) functionDecl -> . FN IDENTIFIER function_
    (18) declaration -> . varDecl
    (42) statement -> . simpleStmt
    (19) varDecl -> . identifierList DECL_ASGN expressionList
    (43) simpleStmt -> . assignment
    (44) simpleStmt -> . expressionStmt
    (20) identifierList -> . identifierList , IDENTIFIER
    (21) identifierList -> . IDENTIFIER
    (46) assignment -> . identifierList assign_op expressionList
    (45) expressionStmt -> . expression
    (54) expression -> . expression BINARY_OP unaryExpr
    (55) expression -> . unaryExpr
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    FN              shift and go to state 12
    IDENTIFIER      shift and go to state 13
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    orphanStmtList                 shift and go to state 134
    topLevelDecl                   shift and go to state 66
    statementList                  shift and go to state 6
    functionDecl                   shift and go to state 8
    declaration                    shift and go to state 9
    statement                      shift and go to state 10
    varDecl                        shift and go to state 14
    simpleStmt                     shift and go to state 15
    identifierList                 shift and go to state 16
    assignment                     shift and go to state 17
    expressionStmt                 shift and go to state 18
    expression                     shift and go to state 19
    unaryExpr                      shift and go to state 20
    UNARY_OP                       shift and go to state 21
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    type_                          shift and go to state 28
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    numericType                    shift and go to state 37
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 68

    (4) sourceFile -> importDecls orphanStmtList .
    $end            reduce using rule 4 (sourceFile -> importDecls orphanStmtList .)


state 69

    (5) importDecls -> importDecls importDecl . eos
    (105) eos -> . eos NEWL
    (106) eos -> . NEWL
    (107) eos -> . eos ;
    (108) eos -> . ;
    NEWL            shift and go to state 71
    ;               shift and go to state 72

    eos                            shift and go to state 135

state 70

    (14) topLevelDecls -> topLevelDecl eos .
    (105) eos -> eos . NEWL
    (107) eos -> eos . ;
    FN              reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    IDENTIFIER      reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    AND             reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    EXCLM           reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    MINUS           reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    (               reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    STRING          reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    BOOL            reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    RUNE            reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    DECIMAL_LIT     reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    FALSE           reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    TRUE            reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    RUNE_LIT        reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    STRING_LIT      reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    F32             reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    F64             reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    INT             reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    ISIZE           reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    I64             reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    I32             reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    I16             reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    I8              reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    UINT            reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    USIZE           reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    U64             reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    U32             reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    U16             reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    U8              reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    HEX_LIT         reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    OCTAL_LIT       reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    BINARY_LIT      reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    .               reduce using rule 14 (topLevelDecls -> topLevelDecl eos .)
    NEWL            shift and go to state 136
    ;               shift and go to state 137


state 71

    (106) eos -> NEWL .
    NEWL            reduce using rule 106 (eos -> NEWL .)
    ;               reduce using rule 106 (eos -> NEWL .)
    FN              reduce using rule 106 (eos -> NEWL .)
    IDENTIFIER      reduce using rule 106 (eos -> NEWL .)
    AND             reduce using rule 106 (eos -> NEWL .)
    EXCLM           reduce using rule 106 (eos -> NEWL .)
    MINUS           reduce using rule 106 (eos -> NEWL .)
    (               reduce using rule 106 (eos -> NEWL .)
    STRING          reduce using rule 106 (eos -> NEWL .)
    BOOL            reduce using rule 106 (eos -> NEWL .)
    RUNE            reduce using rule 106 (eos -> NEWL .)
    DECIMAL_LIT     reduce using rule 106 (eos -> NEWL .)
    FALSE           reduce using rule 106 (eos -> NEWL .)
    TRUE            reduce using rule 106 (eos -> NEWL .)
    RUNE_LIT        reduce using rule 106 (eos -> NEWL .)
    STRING_LIT      reduce using rule 106 (eos -> NEWL .)
    F32             reduce using rule 106 (eos -> NEWL .)
    F64             reduce using rule 106 (eos -> NEWL .)
    INT             reduce using rule 106 (eos -> NEWL .)
    ISIZE           reduce using rule 106 (eos -> NEWL .)
    I64             reduce using rule 106 (eos -> NEWL .)
    I32             reduce using rule 106 (eos -> NEWL .)
    I16             reduce using rule 106 (eos -> NEWL .)
    I8              reduce using rule 106 (eos -> NEWL .)
    UINT            reduce using rule 106 (eos -> NEWL .)
    USIZE           reduce using rule 106 (eos -> NEWL .)
    U64             reduce using rule 106 (eos -> NEWL .)
    U32             reduce using rule 106 (eos -> NEWL .)
    U16             reduce using rule 106 (eos -> NEWL .)
    U8              reduce using rule 106 (eos -> NEWL .)
    HEX_LIT         reduce using rule 106 (eos -> NEWL .)
    OCTAL_LIT       reduce using rule 106 (eos -> NEWL .)
    BINARY_LIT      reduce using rule 106 (eos -> NEWL .)
    .               reduce using rule 106 (eos -> NEWL .)
    $end            reduce using rule 106 (eos -> NEWL .)
    IMPORT          reduce using rule 106 (eos -> NEWL .)


state 72

    (108) eos -> ; .
    NEWL            reduce using rule 108 (eos -> ; .)
    ;               reduce using rule 108 (eos -> ; .)
    FN              reduce using rule 108 (eos -> ; .)
    IDENTIFIER      reduce using rule 108 (eos -> ; .)
    AND             reduce using rule 108 (eos -> ; .)
    EXCLM           reduce using rule 108 (eos -> ; .)
    MINUS           reduce using rule 108 (eos -> ; .)
    (               reduce using rule 108 (eos -> ; .)
    STRING          reduce using rule 108 (eos -> ; .)
    BOOL            reduce using rule 108 (eos -> ; .)
    RUNE            reduce using rule 108 (eos -> ; .)
    DECIMAL_LIT     reduce using rule 108 (eos -> ; .)
    FALSE           reduce using rule 108 (eos -> ; .)
    TRUE            reduce using rule 108 (eos -> ; .)
    RUNE_LIT        reduce using rule 108 (eos -> ; .)
    STRING_LIT      reduce using rule 108 (eos -> ; .)
    F32             reduce using rule 108 (eos -> ; .)
    F64             reduce using rule 108 (eos -> ; .)
    INT             reduce using rule 108 (eos -> ; .)
    ISIZE           reduce using rule 108 (eos -> ; .)
    I64             reduce using rule 108 (eos -> ; .)
    I32             reduce using rule 108 (eos -> ; .)
    I16             reduce using rule 108 (eos -> ; .)
    I8              reduce using rule 108 (eos -> ; .)
    UINT            reduce using rule 108 (eos -> ; .)
    USIZE           reduce using rule 108 (eos -> ; .)
    U64             reduce using rule 108 (eos -> ; .)
    U32             reduce using rule 108 (eos -> ; .)
    U16             reduce using rule 108 (eos -> ; .)
    U8              reduce using rule 108 (eos -> ; .)
    HEX_LIT         reduce using rule 108 (eos -> ; .)
    OCTAL_LIT       reduce using rule 108 (eos -> ; .)
    BINARY_LIT      reduce using rule 108 (eos -> ; .)
    .               reduce using rule 108 (eos -> ; .)
    $end            reduce using rule 108 (eos -> ; .)
    IMPORT          reduce using rule 108 (eos -> ; .)


state 73

    (15) orphanStmtList -> statementList eos .
    (39) statementList -> statementList eos . statement
    (105) eos -> eos . NEWL
    (107) eos -> eos . ;
    (42) statement -> . simpleStmt
    (43) simpleStmt -> . assignment
    (44) simpleStmt -> . expressionStmt
    (46) assignment -> . identifierList assign_op expressionList
    (45) expressionStmt -> . expression
    (20) identifierList -> . identifierList , IDENTIFIER
    (21) identifierList -> . IDENTIFIER
    (54) expression -> . expression BINARY_OP unaryExpr
    (55) expression -> . unaryExpr
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 15 (orphanStmtList -> statementList eos .)
    NEWL            shift and go to state 136
    ;               shift and go to state 137
    IDENTIFIER      shift and go to state 13
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    FN              shift and go to state 124
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    statement                      shift and go to state 138
    simpleStmt                     shift and go to state 15
    assignment                     shift and go to state 17
    expressionStmt                 shift and go to state 18
    identifierList                 shift and go to state 139
    expression                     shift and go to state 19
    unaryExpr                      shift and go to state 20
    UNARY_OP                       shift and go to state 21
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    type_                          shift and go to state 28
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    numericType                    shift and go to state 37
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 74

    (6) importDecls -> importDecl eos .
    (105) eos -> eos . NEWL
    (107) eos -> eos . ;
    IMPORT          reduce using rule 6 (importDecls -> importDecl eos .)
    FN              reduce using rule 6 (importDecls -> importDecl eos .)
    IDENTIFIER      reduce using rule 6 (importDecls -> importDecl eos .)
    AND             reduce using rule 6 (importDecls -> importDecl eos .)
    EXCLM           reduce using rule 6 (importDecls -> importDecl eos .)
    MINUS           reduce using rule 6 (importDecls -> importDecl eos .)
    (               reduce using rule 6 (importDecls -> importDecl eos .)
    STRING          reduce using rule 6 (importDecls -> importDecl eos .)
    BOOL            reduce using rule 6 (importDecls -> importDecl eos .)
    RUNE            reduce using rule 6 (importDecls -> importDecl eos .)
    DECIMAL_LIT     reduce using rule 6 (importDecls -> importDecl eos .)
    FALSE           reduce using rule 6 (importDecls -> importDecl eos .)
    TRUE            reduce using rule 6 (importDecls -> importDecl eos .)
    RUNE_LIT        reduce using rule 6 (importDecls -> importDecl eos .)
    STRING_LIT      reduce using rule 6 (importDecls -> importDecl eos .)
    F32             reduce using rule 6 (importDecls -> importDecl eos .)
    F64             reduce using rule 6 (importDecls -> importDecl eos .)
    INT             reduce using rule 6 (importDecls -> importDecl eos .)
    ISIZE           reduce using rule 6 (importDecls -> importDecl eos .)
    I64             reduce using rule 6 (importDecls -> importDecl eos .)
    I32             reduce using rule 6 (importDecls -> importDecl eos .)
    I16             reduce using rule 6 (importDecls -> importDecl eos .)
    I8              reduce using rule 6 (importDecls -> importDecl eos .)
    UINT            reduce using rule 6 (importDecls -> importDecl eos .)
    USIZE           reduce using rule 6 (importDecls -> importDecl eos .)
    U64             reduce using rule 6 (importDecls -> importDecl eos .)
    U32             reduce using rule 6 (importDecls -> importDecl eos .)
    U16             reduce using rule 6 (importDecls -> importDecl eos .)
    U8              reduce using rule 6 (importDecls -> importDecl eos .)
    HEX_LIT         reduce using rule 6 (importDecls -> importDecl eos .)
    OCTAL_LIT       reduce using rule 6 (importDecls -> importDecl eos .)
    BINARY_LIT      reduce using rule 6 (importDecls -> importDecl eos .)
    .               reduce using rule 6 (importDecls -> importDecl eos .)
    NEWL            shift and go to state 136
    ;               shift and go to state 137


state 75

    (7) importDecl -> IMPORT importSpec .
    NEWL            reduce using rule 7 (importDecl -> IMPORT importSpec .)
    ;               reduce using rule 7 (importDecl -> IMPORT importSpec .)


state 76

    (8) importSpec -> importPath .
    NEWL            reduce using rule 8 (importSpec -> importPath .)
    ;               reduce using rule 8 (importSpec -> importPath .)


state 77

    (9) importSpec -> IDENTIFIER . importPath
    (12) importPath -> IDENTIFIER .
    (11) importPath -> . STRING_LIT
    (12) importPath -> . IDENTIFIER
    NEWL            reduce using rule 12 (importPath -> IDENTIFIER .)
    ;               reduce using rule 12 (importPath -> IDENTIFIER .)
    STRING_LIT      shift and go to state 79
    IDENTIFIER      shift and go to state 140

    importPath                     shift and go to state 141

state 78

    (10) importSpec -> . . importPath
    (11) importPath -> . STRING_LIT
    (12) importPath -> . IDENTIFIER
    STRING_LIT      shift and go to state 79
    IDENTIFIER      shift and go to state 140

    importPath                     shift and go to state 142

state 79

    (11) importPath -> STRING_LIT .
    NEWL            reduce using rule 11 (importPath -> STRING_LIT .)
    ;               reduce using rule 11 (importPath -> STRING_LIT .)


state 80

    (22) functionDecl -> FN IDENTIFIER . signature
    (23) functionDecl -> FN IDENTIFIER . function_
    (25) signature -> . parameters
    (26) signature -> . parameters result
    (24) function_ -> . signature block
    (29) parameters -> . ( parameterList , )
    (30) parameters -> . ( parameterList )
    (31) parameters -> . ( )
    (               shift and go to state 84

    signature                      shift and go to state 143
    function_                      shift and go to state 144
    parameters                     shift and go to state 83

state 81

    (24) function_ -> signature . block
    (41) block -> . { statementList }
    {               shift and go to state 146

    block                          shift and go to state 145

state 82

    (36) functionLit -> FN function_ .
    (               reduce using rule 36 (functionLit -> FN function_ .)
    LOGIC_AND       reduce using rule 36 (functionLit -> FN function_ .)
    LOGIC_OR        reduce using rule 36 (functionLit -> FN function_ .)
    SHR             reduce using rule 36 (functionLit -> FN function_ .)
    SHL             reduce using rule 36 (functionLit -> FN function_ .)
    AND             reduce using rule 36 (functionLit -> FN function_ .)
    MOD             reduce using rule 36 (functionLit -> FN function_ .)
    DIV             reduce using rule 36 (functionLit -> FN function_ .)
    STAR            reduce using rule 36 (functionLit -> FN function_ .)
    XOR             reduce using rule 36 (functionLit -> FN function_ .)
    OR              reduce using rule 36 (functionLit -> FN function_ .)
    MINUS           reduce using rule 36 (functionLit -> FN function_ .)
    PLUS            reduce using rule 36 (functionLit -> FN function_ .)
    GE              reduce using rule 36 (functionLit -> FN function_ .)
    GT              reduce using rule 36 (functionLit -> FN function_ .)
    LE              reduce using rule 36 (functionLit -> FN function_ .)
    LT              reduce using rule 36 (functionLit -> FN function_ .)
    NE              reduce using rule 36 (functionLit -> FN function_ .)
    EQ              reduce using rule 36 (functionLit -> FN function_ .)
    NEWL            reduce using rule 36 (functionLit -> FN function_ .)
    ;               reduce using rule 36 (functionLit -> FN function_ .)
    )               reduce using rule 36 (functionLit -> FN function_ .)
    ,               reduce using rule 36 (functionLit -> FN function_ .)
    }               reduce using rule 36 (functionLit -> FN function_ .)


state 83

    (25) signature -> parameters .
    (26) signature -> parameters . result
    (27) result -> . type_
    (28) result -> . parameters
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (29) parameters -> . ( parameterList , )
    (30) parameters -> . ( parameterList )
    (31) parameters -> . ( )
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    {               reduce using rule 25 (signature -> parameters .)
    NEWL            reduce using rule 25 (signature -> parameters .)
    ;               reduce using rule 25 (signature -> parameters .)
    (               shift and go to state 84
    IDENTIFIER      shift and go to state 151
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61

    parameters                     shift and go to state 147
    result                         shift and go to state 148
    type_                          shift and go to state 149
    qualifiedIdent                 shift and go to state 150
    typeName                       shift and go to state 33
    numericType                    shift and go to state 37

state 84

    (29) parameters -> ( . parameterList , )
    (30) parameters -> ( . parameterList )
    (31) parameters -> ( . )
    (32) parameterList -> . parameterList , parameterDecl
    (33) parameterList -> . parameterDecl
    (34) parameterDecl -> . type_
    (35) parameterDecl -> . identifierList type_
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (20) identifierList -> . identifierList , IDENTIFIER
    (21) identifierList -> . IDENTIFIER
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    )               shift and go to state 153
    IDENTIFIER      shift and go to state 157
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61

    parameterList                  shift and go to state 152
    parameterDecl                  shift and go to state 154
    type_                          shift and go to state 155
    identifierList                 shift and go to state 156
    qualifiedIdent                 shift and go to state 150
    typeName                       shift and go to state 33
    numericType                    shift and go to state 37

state 85

    (71) qualifiedIdent -> IDENTIFIER . . IDENTIFIER
    IDENTIFIER      shift and go to state 158


state 86

    (19) varDecl -> identifierList DECL_ASGN . expressionList
    (37) expressionList -> . expressionList , expression
    (38) expressionList -> . expression
    (54) expression -> . expression BINARY_OP unaryExpr
    (55) expression -> . unaryExpr
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    IDENTIFIER      shift and go to state 123
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    FN              shift and go to state 124
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    expressionList                 shift and go to state 159
    expression                     shift and go to state 160
    unaryExpr                      shift and go to state 20
    UNARY_OP                       shift and go to state 21
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    type_                          shift and go to state 28
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    numericType                    shift and go to state 37
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 87

    (20) identifierList -> identifierList , . IDENTIFIER
    IDENTIFIER      shift and go to state 161


state 88

    (46) assignment -> identifierList assign_op . expressionList
    (37) expressionList -> . expressionList , expression
    (38) expressionList -> . expression
    (54) expression -> . expression BINARY_OP unaryExpr
    (55) expression -> . unaryExpr
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    IDENTIFIER      shift and go to state 123
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    FN              shift and go to state 124
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    expressionList                 shift and go to state 162
    expression                     shift and go to state 160
    unaryExpr                      shift and go to state 20
    UNARY_OP                       shift and go to state 21
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    type_                          shift and go to state 28
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    numericType                    shift and go to state 37
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 89

    (109) assign_op -> SHR_ASGN .
    AND             reduce using rule 109 (assign_op -> SHR_ASGN .)
    EXCLM           reduce using rule 109 (assign_op -> SHR_ASGN .)
    MINUS           reduce using rule 109 (assign_op -> SHR_ASGN .)
    (               reduce using rule 109 (assign_op -> SHR_ASGN .)
    IDENTIFIER      reduce using rule 109 (assign_op -> SHR_ASGN .)
    STRING          reduce using rule 109 (assign_op -> SHR_ASGN .)
    BOOL            reduce using rule 109 (assign_op -> SHR_ASGN .)
    RUNE            reduce using rule 109 (assign_op -> SHR_ASGN .)
    FN              reduce using rule 109 (assign_op -> SHR_ASGN .)
    DECIMAL_LIT     reduce using rule 109 (assign_op -> SHR_ASGN .)
    FALSE           reduce using rule 109 (assign_op -> SHR_ASGN .)
    TRUE            reduce using rule 109 (assign_op -> SHR_ASGN .)
    RUNE_LIT        reduce using rule 109 (assign_op -> SHR_ASGN .)
    STRING_LIT      reduce using rule 109 (assign_op -> SHR_ASGN .)
    F32             reduce using rule 109 (assign_op -> SHR_ASGN .)
    F64             reduce using rule 109 (assign_op -> SHR_ASGN .)
    INT             reduce using rule 109 (assign_op -> SHR_ASGN .)
    ISIZE           reduce using rule 109 (assign_op -> SHR_ASGN .)
    I64             reduce using rule 109 (assign_op -> SHR_ASGN .)
    I32             reduce using rule 109 (assign_op -> SHR_ASGN .)
    I16             reduce using rule 109 (assign_op -> SHR_ASGN .)
    I8              reduce using rule 109 (assign_op -> SHR_ASGN .)
    UINT            reduce using rule 109 (assign_op -> SHR_ASGN .)
    USIZE           reduce using rule 109 (assign_op -> SHR_ASGN .)
    U64             reduce using rule 109 (assign_op -> SHR_ASGN .)
    U32             reduce using rule 109 (assign_op -> SHR_ASGN .)
    U16             reduce using rule 109 (assign_op -> SHR_ASGN .)
    U8              reduce using rule 109 (assign_op -> SHR_ASGN .)
    HEX_LIT         reduce using rule 109 (assign_op -> SHR_ASGN .)
    OCTAL_LIT       reduce using rule 109 (assign_op -> SHR_ASGN .)
    BINARY_LIT      reduce using rule 109 (assign_op -> SHR_ASGN .)
    .               reduce using rule 109 (assign_op -> SHR_ASGN .)


state 90

    (110) assign_op -> SHL_ASGN .
    AND             reduce using rule 110 (assign_op -> SHL_ASGN .)
    EXCLM           reduce using rule 110 (assign_op -> SHL_ASGN .)
    MINUS           reduce using rule 110 (assign_op -> SHL_ASGN .)
    (               reduce using rule 110 (assign_op -> SHL_ASGN .)
    IDENTIFIER      reduce using rule 110 (assign_op -> SHL_ASGN .)
    STRING          reduce using rule 110 (assign_op -> SHL_ASGN .)
    BOOL            reduce using rule 110 (assign_op -> SHL_ASGN .)
    RUNE            reduce using rule 110 (assign_op -> SHL_ASGN .)
    FN              reduce using rule 110 (assign_op -> SHL_ASGN .)
    DECIMAL_LIT     reduce using rule 110 (assign_op -> SHL_ASGN .)
    FALSE           reduce using rule 110 (assign_op -> SHL_ASGN .)
    TRUE            reduce using rule 110 (assign_op -> SHL_ASGN .)
    RUNE_LIT        reduce using rule 110 (assign_op -> SHL_ASGN .)
    STRING_LIT      reduce using rule 110 (assign_op -> SHL_ASGN .)
    F32             reduce using rule 110 (assign_op -> SHL_ASGN .)
    F64             reduce using rule 110 (assign_op -> SHL_ASGN .)
    INT             reduce using rule 110 (assign_op -> SHL_ASGN .)
    ISIZE           reduce using rule 110 (assign_op -> SHL_ASGN .)
    I64             reduce using rule 110 (assign_op -> SHL_ASGN .)
    I32             reduce using rule 110 (assign_op -> SHL_ASGN .)
    I16             reduce using rule 110 (assign_op -> SHL_ASGN .)
    I8              reduce using rule 110 (assign_op -> SHL_ASGN .)
    UINT            reduce using rule 110 (assign_op -> SHL_ASGN .)
    USIZE           reduce using rule 110 (assign_op -> SHL_ASGN .)
    U64             reduce using rule 110 (assign_op -> SHL_ASGN .)
    U32             reduce using rule 110 (assign_op -> SHL_ASGN .)
    U16             reduce using rule 110 (assign_op -> SHL_ASGN .)
    U8              reduce using rule 110 (assign_op -> SHL_ASGN .)
    HEX_LIT         reduce using rule 110 (assign_op -> SHL_ASGN .)
    OCTAL_LIT       reduce using rule 110 (assign_op -> SHL_ASGN .)
    BINARY_LIT      reduce using rule 110 (assign_op -> SHL_ASGN .)
    .               reduce using rule 110 (assign_op -> SHL_ASGN .)


state 91

    (111) assign_op -> MOD_ASGN .
    AND             reduce using rule 111 (assign_op -> MOD_ASGN .)
    EXCLM           reduce using rule 111 (assign_op -> MOD_ASGN .)
    MINUS           reduce using rule 111 (assign_op -> MOD_ASGN .)
    (               reduce using rule 111 (assign_op -> MOD_ASGN .)
    IDENTIFIER      reduce using rule 111 (assign_op -> MOD_ASGN .)
    STRING          reduce using rule 111 (assign_op -> MOD_ASGN .)
    BOOL            reduce using rule 111 (assign_op -> MOD_ASGN .)
    RUNE            reduce using rule 111 (assign_op -> MOD_ASGN .)
    FN              reduce using rule 111 (assign_op -> MOD_ASGN .)
    DECIMAL_LIT     reduce using rule 111 (assign_op -> MOD_ASGN .)
    FALSE           reduce using rule 111 (assign_op -> MOD_ASGN .)
    TRUE            reduce using rule 111 (assign_op -> MOD_ASGN .)
    RUNE_LIT        reduce using rule 111 (assign_op -> MOD_ASGN .)
    STRING_LIT      reduce using rule 111 (assign_op -> MOD_ASGN .)
    F32             reduce using rule 111 (assign_op -> MOD_ASGN .)
    F64             reduce using rule 111 (assign_op -> MOD_ASGN .)
    INT             reduce using rule 111 (assign_op -> MOD_ASGN .)
    ISIZE           reduce using rule 111 (assign_op -> MOD_ASGN .)
    I64             reduce using rule 111 (assign_op -> MOD_ASGN .)
    I32             reduce using rule 111 (assign_op -> MOD_ASGN .)
    I16             reduce using rule 111 (assign_op -> MOD_ASGN .)
    I8              reduce using rule 111 (assign_op -> MOD_ASGN .)
    UINT            reduce using rule 111 (assign_op -> MOD_ASGN .)
    USIZE           reduce using rule 111 (assign_op -> MOD_ASGN .)
    U64             reduce using rule 111 (assign_op -> MOD_ASGN .)
    U32             reduce using rule 111 (assign_op -> MOD_ASGN .)
    U16             reduce using rule 111 (assign_op -> MOD_ASGN .)
    U8              reduce using rule 111 (assign_op -> MOD_ASGN .)
    HEX_LIT         reduce using rule 111 (assign_op -> MOD_ASGN .)
    OCTAL_LIT       reduce using rule 111 (assign_op -> MOD_ASGN .)
    BINARY_LIT      reduce using rule 111 (assign_op -> MOD_ASGN .)
    .               reduce using rule 111 (assign_op -> MOD_ASGN .)


state 92

    (112) assign_op -> DIV_ASGN .
    AND             reduce using rule 112 (assign_op -> DIV_ASGN .)
    EXCLM           reduce using rule 112 (assign_op -> DIV_ASGN .)
    MINUS           reduce using rule 112 (assign_op -> DIV_ASGN .)
    (               reduce using rule 112 (assign_op -> DIV_ASGN .)
    IDENTIFIER      reduce using rule 112 (assign_op -> DIV_ASGN .)
    STRING          reduce using rule 112 (assign_op -> DIV_ASGN .)
    BOOL            reduce using rule 112 (assign_op -> DIV_ASGN .)
    RUNE            reduce using rule 112 (assign_op -> DIV_ASGN .)
    FN              reduce using rule 112 (assign_op -> DIV_ASGN .)
    DECIMAL_LIT     reduce using rule 112 (assign_op -> DIV_ASGN .)
    FALSE           reduce using rule 112 (assign_op -> DIV_ASGN .)
    TRUE            reduce using rule 112 (assign_op -> DIV_ASGN .)
    RUNE_LIT        reduce using rule 112 (assign_op -> DIV_ASGN .)
    STRING_LIT      reduce using rule 112 (assign_op -> DIV_ASGN .)
    F32             reduce using rule 112 (assign_op -> DIV_ASGN .)
    F64             reduce using rule 112 (assign_op -> DIV_ASGN .)
    INT             reduce using rule 112 (assign_op -> DIV_ASGN .)
    ISIZE           reduce using rule 112 (assign_op -> DIV_ASGN .)
    I64             reduce using rule 112 (assign_op -> DIV_ASGN .)
    I32             reduce using rule 112 (assign_op -> DIV_ASGN .)
    I16             reduce using rule 112 (assign_op -> DIV_ASGN .)
    I8              reduce using rule 112 (assign_op -> DIV_ASGN .)
    UINT            reduce using rule 112 (assign_op -> DIV_ASGN .)
    USIZE           reduce using rule 112 (assign_op -> DIV_ASGN .)
    U64             reduce using rule 112 (assign_op -> DIV_ASGN .)
    U32             reduce using rule 112 (assign_op -> DIV_ASGN .)
    U16             reduce using rule 112 (assign_op -> DIV_ASGN .)
    U8              reduce using rule 112 (assign_op -> DIV_ASGN .)
    HEX_LIT         reduce using rule 112 (assign_op -> DIV_ASGN .)
    OCTAL_LIT       reduce using rule 112 (assign_op -> DIV_ASGN .)
    BINARY_LIT      reduce using rule 112 (assign_op -> DIV_ASGN .)
    .               reduce using rule 112 (assign_op -> DIV_ASGN .)


state 93

    (113) assign_op -> OR_ASGN .
    AND             reduce using rule 113 (assign_op -> OR_ASGN .)
    EXCLM           reduce using rule 113 (assign_op -> OR_ASGN .)
    MINUS           reduce using rule 113 (assign_op -> OR_ASGN .)
    (               reduce using rule 113 (assign_op -> OR_ASGN .)
    IDENTIFIER      reduce using rule 113 (assign_op -> OR_ASGN .)
    STRING          reduce using rule 113 (assign_op -> OR_ASGN .)
    BOOL            reduce using rule 113 (assign_op -> OR_ASGN .)
    RUNE            reduce using rule 113 (assign_op -> OR_ASGN .)
    FN              reduce using rule 113 (assign_op -> OR_ASGN .)
    DECIMAL_LIT     reduce using rule 113 (assign_op -> OR_ASGN .)
    FALSE           reduce using rule 113 (assign_op -> OR_ASGN .)
    TRUE            reduce using rule 113 (assign_op -> OR_ASGN .)
    RUNE_LIT        reduce using rule 113 (assign_op -> OR_ASGN .)
    STRING_LIT      reduce using rule 113 (assign_op -> OR_ASGN .)
    F32             reduce using rule 113 (assign_op -> OR_ASGN .)
    F64             reduce using rule 113 (assign_op -> OR_ASGN .)
    INT             reduce using rule 113 (assign_op -> OR_ASGN .)
    ISIZE           reduce using rule 113 (assign_op -> OR_ASGN .)
    I64             reduce using rule 113 (assign_op -> OR_ASGN .)
    I32             reduce using rule 113 (assign_op -> OR_ASGN .)
    I16             reduce using rule 113 (assign_op -> OR_ASGN .)
    I8              reduce using rule 113 (assign_op -> OR_ASGN .)
    UINT            reduce using rule 113 (assign_op -> OR_ASGN .)
    USIZE           reduce using rule 113 (assign_op -> OR_ASGN .)
    U64             reduce using rule 113 (assign_op -> OR_ASGN .)
    U32             reduce using rule 113 (assign_op -> OR_ASGN .)
    U16             reduce using rule 113 (assign_op -> OR_ASGN .)
    U8              reduce using rule 113 (assign_op -> OR_ASGN .)
    HEX_LIT         reduce using rule 113 (assign_op -> OR_ASGN .)
    OCTAL_LIT       reduce using rule 113 (assign_op -> OR_ASGN .)
    BINARY_LIT      reduce using rule 113 (assign_op -> OR_ASGN .)
    .               reduce using rule 113 (assign_op -> OR_ASGN .)


state 94

    (114) assign_op -> AND_ASGN .
    AND             reduce using rule 114 (assign_op -> AND_ASGN .)
    EXCLM           reduce using rule 114 (assign_op -> AND_ASGN .)
    MINUS           reduce using rule 114 (assign_op -> AND_ASGN .)
    (               reduce using rule 114 (assign_op -> AND_ASGN .)
    IDENTIFIER      reduce using rule 114 (assign_op -> AND_ASGN .)
    STRING          reduce using rule 114 (assign_op -> AND_ASGN .)
    BOOL            reduce using rule 114 (assign_op -> AND_ASGN .)
    RUNE            reduce using rule 114 (assign_op -> AND_ASGN .)
    FN              reduce using rule 114 (assign_op -> AND_ASGN .)
    DECIMAL_LIT     reduce using rule 114 (assign_op -> AND_ASGN .)
    FALSE           reduce using rule 114 (assign_op -> AND_ASGN .)
    TRUE            reduce using rule 114 (assign_op -> AND_ASGN .)
    RUNE_LIT        reduce using rule 114 (assign_op -> AND_ASGN .)
    STRING_LIT      reduce using rule 114 (assign_op -> AND_ASGN .)
    F32             reduce using rule 114 (assign_op -> AND_ASGN .)
    F64             reduce using rule 114 (assign_op -> AND_ASGN .)
    INT             reduce using rule 114 (assign_op -> AND_ASGN .)
    ISIZE           reduce using rule 114 (assign_op -> AND_ASGN .)
    I64             reduce using rule 114 (assign_op -> AND_ASGN .)
    I32             reduce using rule 114 (assign_op -> AND_ASGN .)
    I16             reduce using rule 114 (assign_op -> AND_ASGN .)
    I8              reduce using rule 114 (assign_op -> AND_ASGN .)
    UINT            reduce using rule 114 (assign_op -> AND_ASGN .)
    USIZE           reduce using rule 114 (assign_op -> AND_ASGN .)
    U64             reduce using rule 114 (assign_op -> AND_ASGN .)
    U32             reduce using rule 114 (assign_op -> AND_ASGN .)
    U16             reduce using rule 114 (assign_op -> AND_ASGN .)
    U8              reduce using rule 114 (assign_op -> AND_ASGN .)
    HEX_LIT         reduce using rule 114 (assign_op -> AND_ASGN .)
    OCTAL_LIT       reduce using rule 114 (assign_op -> AND_ASGN .)
    BINARY_LIT      reduce using rule 114 (assign_op -> AND_ASGN .)
    .               reduce using rule 114 (assign_op -> AND_ASGN .)


state 95

    (115) assign_op -> STAR_ASGN .
    AND             reduce using rule 115 (assign_op -> STAR_ASGN .)
    EXCLM           reduce using rule 115 (assign_op -> STAR_ASGN .)
    MINUS           reduce using rule 115 (assign_op -> STAR_ASGN .)
    (               reduce using rule 115 (assign_op -> STAR_ASGN .)
    IDENTIFIER      reduce using rule 115 (assign_op -> STAR_ASGN .)
    STRING          reduce using rule 115 (assign_op -> STAR_ASGN .)
    BOOL            reduce using rule 115 (assign_op -> STAR_ASGN .)
    RUNE            reduce using rule 115 (assign_op -> STAR_ASGN .)
    FN              reduce using rule 115 (assign_op -> STAR_ASGN .)
    DECIMAL_LIT     reduce using rule 115 (assign_op -> STAR_ASGN .)
    FALSE           reduce using rule 115 (assign_op -> STAR_ASGN .)
    TRUE            reduce using rule 115 (assign_op -> STAR_ASGN .)
    RUNE_LIT        reduce using rule 115 (assign_op -> STAR_ASGN .)
    STRING_LIT      reduce using rule 115 (assign_op -> STAR_ASGN .)
    F32             reduce using rule 115 (assign_op -> STAR_ASGN .)
    F64             reduce using rule 115 (assign_op -> STAR_ASGN .)
    INT             reduce using rule 115 (assign_op -> STAR_ASGN .)
    ISIZE           reduce using rule 115 (assign_op -> STAR_ASGN .)
    I64             reduce using rule 115 (assign_op -> STAR_ASGN .)
    I32             reduce using rule 115 (assign_op -> STAR_ASGN .)
    I16             reduce using rule 115 (assign_op -> STAR_ASGN .)
    I8              reduce using rule 115 (assign_op -> STAR_ASGN .)
    UINT            reduce using rule 115 (assign_op -> STAR_ASGN .)
    USIZE           reduce using rule 115 (assign_op -> STAR_ASGN .)
    U64             reduce using rule 115 (assign_op -> STAR_ASGN .)
    U32             reduce using rule 115 (assign_op -> STAR_ASGN .)
    U16             reduce using rule 115 (assign_op -> STAR_ASGN .)
    U8              reduce using rule 115 (assign_op -> STAR_ASGN .)
    HEX_LIT         reduce using rule 115 (assign_op -> STAR_ASGN .)
    OCTAL_LIT       reduce using rule 115 (assign_op -> STAR_ASGN .)
    BINARY_LIT      reduce using rule 115 (assign_op -> STAR_ASGN .)
    .               reduce using rule 115 (assign_op -> STAR_ASGN .)


state 96

    (116) assign_op -> XOR_ASGN .
    AND             reduce using rule 116 (assign_op -> XOR_ASGN .)
    EXCLM           reduce using rule 116 (assign_op -> XOR_ASGN .)
    MINUS           reduce using rule 116 (assign_op -> XOR_ASGN .)
    (               reduce using rule 116 (assign_op -> XOR_ASGN .)
    IDENTIFIER      reduce using rule 116 (assign_op -> XOR_ASGN .)
    STRING          reduce using rule 116 (assign_op -> XOR_ASGN .)
    BOOL            reduce using rule 116 (assign_op -> XOR_ASGN .)
    RUNE            reduce using rule 116 (assign_op -> XOR_ASGN .)
    FN              reduce using rule 116 (assign_op -> XOR_ASGN .)
    DECIMAL_LIT     reduce using rule 116 (assign_op -> XOR_ASGN .)
    FALSE           reduce using rule 116 (assign_op -> XOR_ASGN .)
    TRUE            reduce using rule 116 (assign_op -> XOR_ASGN .)
    RUNE_LIT        reduce using rule 116 (assign_op -> XOR_ASGN .)
    STRING_LIT      reduce using rule 116 (assign_op -> XOR_ASGN .)
    F32             reduce using rule 116 (assign_op -> XOR_ASGN .)
    F64             reduce using rule 116 (assign_op -> XOR_ASGN .)
    INT             reduce using rule 116 (assign_op -> XOR_ASGN .)
    ISIZE           reduce using rule 116 (assign_op -> XOR_ASGN .)
    I64             reduce using rule 116 (assign_op -> XOR_ASGN .)
    I32             reduce using rule 116 (assign_op -> XOR_ASGN .)
    I16             reduce using rule 116 (assign_op -> XOR_ASGN .)
    I8              reduce using rule 116 (assign_op -> XOR_ASGN .)
    UINT            reduce using rule 116 (assign_op -> XOR_ASGN .)
    USIZE           reduce using rule 116 (assign_op -> XOR_ASGN .)
    U64             reduce using rule 116 (assign_op -> XOR_ASGN .)
    U32             reduce using rule 116 (assign_op -> XOR_ASGN .)
    U16             reduce using rule 116 (assign_op -> XOR_ASGN .)
    U8              reduce using rule 116 (assign_op -> XOR_ASGN .)
    HEX_LIT         reduce using rule 116 (assign_op -> XOR_ASGN .)
    OCTAL_LIT       reduce using rule 116 (assign_op -> XOR_ASGN .)
    BINARY_LIT      reduce using rule 116 (assign_op -> XOR_ASGN .)
    .               reduce using rule 116 (assign_op -> XOR_ASGN .)


state 97

    (117) assign_op -> MINUS_ASGN .
    AND             reduce using rule 117 (assign_op -> MINUS_ASGN .)
    EXCLM           reduce using rule 117 (assign_op -> MINUS_ASGN .)
    MINUS           reduce using rule 117 (assign_op -> MINUS_ASGN .)
    (               reduce using rule 117 (assign_op -> MINUS_ASGN .)
    IDENTIFIER      reduce using rule 117 (assign_op -> MINUS_ASGN .)
    STRING          reduce using rule 117 (assign_op -> MINUS_ASGN .)
    BOOL            reduce using rule 117 (assign_op -> MINUS_ASGN .)
    RUNE            reduce using rule 117 (assign_op -> MINUS_ASGN .)
    FN              reduce using rule 117 (assign_op -> MINUS_ASGN .)
    DECIMAL_LIT     reduce using rule 117 (assign_op -> MINUS_ASGN .)
    FALSE           reduce using rule 117 (assign_op -> MINUS_ASGN .)
    TRUE            reduce using rule 117 (assign_op -> MINUS_ASGN .)
    RUNE_LIT        reduce using rule 117 (assign_op -> MINUS_ASGN .)
    STRING_LIT      reduce using rule 117 (assign_op -> MINUS_ASGN .)
    F32             reduce using rule 117 (assign_op -> MINUS_ASGN .)
    F64             reduce using rule 117 (assign_op -> MINUS_ASGN .)
    INT             reduce using rule 117 (assign_op -> MINUS_ASGN .)
    ISIZE           reduce using rule 117 (assign_op -> MINUS_ASGN .)
    I64             reduce using rule 117 (assign_op -> MINUS_ASGN .)
    I32             reduce using rule 117 (assign_op -> MINUS_ASGN .)
    I16             reduce using rule 117 (assign_op -> MINUS_ASGN .)
    I8              reduce using rule 117 (assign_op -> MINUS_ASGN .)
    UINT            reduce using rule 117 (assign_op -> MINUS_ASGN .)
    USIZE           reduce using rule 117 (assign_op -> MINUS_ASGN .)
    U64             reduce using rule 117 (assign_op -> MINUS_ASGN .)
    U32             reduce using rule 117 (assign_op -> MINUS_ASGN .)
    U16             reduce using rule 117 (assign_op -> MINUS_ASGN .)
    U8              reduce using rule 117 (assign_op -> MINUS_ASGN .)
    HEX_LIT         reduce using rule 117 (assign_op -> MINUS_ASGN .)
    OCTAL_LIT       reduce using rule 117 (assign_op -> MINUS_ASGN .)
    BINARY_LIT      reduce using rule 117 (assign_op -> MINUS_ASGN .)
    .               reduce using rule 117 (assign_op -> MINUS_ASGN .)


state 98

    (118) assign_op -> PLUS_ASGN .
    AND             reduce using rule 118 (assign_op -> PLUS_ASGN .)
    EXCLM           reduce using rule 118 (assign_op -> PLUS_ASGN .)
    MINUS           reduce using rule 118 (assign_op -> PLUS_ASGN .)
    (               reduce using rule 118 (assign_op -> PLUS_ASGN .)
    IDENTIFIER      reduce using rule 118 (assign_op -> PLUS_ASGN .)
    STRING          reduce using rule 118 (assign_op -> PLUS_ASGN .)
    BOOL            reduce using rule 118 (assign_op -> PLUS_ASGN .)
    RUNE            reduce using rule 118 (assign_op -> PLUS_ASGN .)
    FN              reduce using rule 118 (assign_op -> PLUS_ASGN .)
    DECIMAL_LIT     reduce using rule 118 (assign_op -> PLUS_ASGN .)
    FALSE           reduce using rule 118 (assign_op -> PLUS_ASGN .)
    TRUE            reduce using rule 118 (assign_op -> PLUS_ASGN .)
    RUNE_LIT        reduce using rule 118 (assign_op -> PLUS_ASGN .)
    STRING_LIT      reduce using rule 118 (assign_op -> PLUS_ASGN .)
    F32             reduce using rule 118 (assign_op -> PLUS_ASGN .)
    F64             reduce using rule 118 (assign_op -> PLUS_ASGN .)
    INT             reduce using rule 118 (assign_op -> PLUS_ASGN .)
    ISIZE           reduce using rule 118 (assign_op -> PLUS_ASGN .)
    I64             reduce using rule 118 (assign_op -> PLUS_ASGN .)
    I32             reduce using rule 118 (assign_op -> PLUS_ASGN .)
    I16             reduce using rule 118 (assign_op -> PLUS_ASGN .)
    I8              reduce using rule 118 (assign_op -> PLUS_ASGN .)
    UINT            reduce using rule 118 (assign_op -> PLUS_ASGN .)
    USIZE           reduce using rule 118 (assign_op -> PLUS_ASGN .)
    U64             reduce using rule 118 (assign_op -> PLUS_ASGN .)
    U32             reduce using rule 118 (assign_op -> PLUS_ASGN .)
    U16             reduce using rule 118 (assign_op -> PLUS_ASGN .)
    U8              reduce using rule 118 (assign_op -> PLUS_ASGN .)
    HEX_LIT         reduce using rule 118 (assign_op -> PLUS_ASGN .)
    OCTAL_LIT       reduce using rule 118 (assign_op -> PLUS_ASGN .)
    BINARY_LIT      reduce using rule 118 (assign_op -> PLUS_ASGN .)
    .               reduce using rule 118 (assign_op -> PLUS_ASGN .)


state 99

    (119) assign_op -> ASSIGN .
    AND             reduce using rule 119 (assign_op -> ASSIGN .)
    EXCLM           reduce using rule 119 (assign_op -> ASSIGN .)
    MINUS           reduce using rule 119 (assign_op -> ASSIGN .)
    (               reduce using rule 119 (assign_op -> ASSIGN .)
    IDENTIFIER      reduce using rule 119 (assign_op -> ASSIGN .)
    STRING          reduce using rule 119 (assign_op -> ASSIGN .)
    BOOL            reduce using rule 119 (assign_op -> ASSIGN .)
    RUNE            reduce using rule 119 (assign_op -> ASSIGN .)
    FN              reduce using rule 119 (assign_op -> ASSIGN .)
    DECIMAL_LIT     reduce using rule 119 (assign_op -> ASSIGN .)
    FALSE           reduce using rule 119 (assign_op -> ASSIGN .)
    TRUE            reduce using rule 119 (assign_op -> ASSIGN .)
    RUNE_LIT        reduce using rule 119 (assign_op -> ASSIGN .)
    STRING_LIT      reduce using rule 119 (assign_op -> ASSIGN .)
    F32             reduce using rule 119 (assign_op -> ASSIGN .)
    F64             reduce using rule 119 (assign_op -> ASSIGN .)
    INT             reduce using rule 119 (assign_op -> ASSIGN .)
    ISIZE           reduce using rule 119 (assign_op -> ASSIGN .)
    I64             reduce using rule 119 (assign_op -> ASSIGN .)
    I32             reduce using rule 119 (assign_op -> ASSIGN .)
    I16             reduce using rule 119 (assign_op -> ASSIGN .)
    I8              reduce using rule 119 (assign_op -> ASSIGN .)
    UINT            reduce using rule 119 (assign_op -> ASSIGN .)
    USIZE           reduce using rule 119 (assign_op -> ASSIGN .)
    U64             reduce using rule 119 (assign_op -> ASSIGN .)
    U32             reduce using rule 119 (assign_op -> ASSIGN .)
    U16             reduce using rule 119 (assign_op -> ASSIGN .)
    U8              reduce using rule 119 (assign_op -> ASSIGN .)
    HEX_LIT         reduce using rule 119 (assign_op -> ASSIGN .)
    OCTAL_LIT       reduce using rule 119 (assign_op -> ASSIGN .)
    BINARY_LIT      reduce using rule 119 (assign_op -> ASSIGN .)
    .               reduce using rule 119 (assign_op -> ASSIGN .)


state 100

    (54) expression -> expression BINARY_OP . unaryExpr
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    IDENTIFIER      shift and go to state 123
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    FN              shift and go to state 124
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    unaryExpr                      shift and go to state 163
    UNARY_OP                       shift and go to state 21
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    type_                          shift and go to state 28
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    numericType                    shift and go to state 37
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 101

    (120) BINARY_OP -> MUL_OP .
    AND             reduce using rule 120 (BINARY_OP -> MUL_OP .)
    EXCLM           reduce using rule 120 (BINARY_OP -> MUL_OP .)
    MINUS           reduce using rule 120 (BINARY_OP -> MUL_OP .)
    (               reduce using rule 120 (BINARY_OP -> MUL_OP .)
    IDENTIFIER      reduce using rule 120 (BINARY_OP -> MUL_OP .)
    STRING          reduce using rule 120 (BINARY_OP -> MUL_OP .)
    BOOL            reduce using rule 120 (BINARY_OP -> MUL_OP .)
    RUNE            reduce using rule 120 (BINARY_OP -> MUL_OP .)
    FN              reduce using rule 120 (BINARY_OP -> MUL_OP .)
    DECIMAL_LIT     reduce using rule 120 (BINARY_OP -> MUL_OP .)
    FALSE           reduce using rule 120 (BINARY_OP -> MUL_OP .)
    TRUE            reduce using rule 120 (BINARY_OP -> MUL_OP .)
    RUNE_LIT        reduce using rule 120 (BINARY_OP -> MUL_OP .)
    STRING_LIT      reduce using rule 120 (BINARY_OP -> MUL_OP .)
    F32             reduce using rule 120 (BINARY_OP -> MUL_OP .)
    F64             reduce using rule 120 (BINARY_OP -> MUL_OP .)
    INT             reduce using rule 120 (BINARY_OP -> MUL_OP .)
    ISIZE           reduce using rule 120 (BINARY_OP -> MUL_OP .)
    I64             reduce using rule 120 (BINARY_OP -> MUL_OP .)
    I32             reduce using rule 120 (BINARY_OP -> MUL_OP .)
    I16             reduce using rule 120 (BINARY_OP -> MUL_OP .)
    I8              reduce using rule 120 (BINARY_OP -> MUL_OP .)
    UINT            reduce using rule 120 (BINARY_OP -> MUL_OP .)
    USIZE           reduce using rule 120 (BINARY_OP -> MUL_OP .)
    U64             reduce using rule 120 (BINARY_OP -> MUL_OP .)
    U32             reduce using rule 120 (BINARY_OP -> MUL_OP .)
    U16             reduce using rule 120 (BINARY_OP -> MUL_OP .)
    U8              reduce using rule 120 (BINARY_OP -> MUL_OP .)
    HEX_LIT         reduce using rule 120 (BINARY_OP -> MUL_OP .)
    OCTAL_LIT       reduce using rule 120 (BINARY_OP -> MUL_OP .)
    BINARY_LIT      reduce using rule 120 (BINARY_OP -> MUL_OP .)
    .               reduce using rule 120 (BINARY_OP -> MUL_OP .)


state 102

    (121) BINARY_OP -> ADD_OP .
    AND             reduce using rule 121 (BINARY_OP -> ADD_OP .)
    EXCLM           reduce using rule 121 (BINARY_OP -> ADD_OP .)
    MINUS           reduce using rule 121 (BINARY_OP -> ADD_OP .)
    (               reduce using rule 121 (BINARY_OP -> ADD_OP .)
    IDENTIFIER      reduce using rule 121 (BINARY_OP -> ADD_OP .)
    STRING          reduce using rule 121 (BINARY_OP -> ADD_OP .)
    BOOL            reduce using rule 121 (BINARY_OP -> ADD_OP .)
    RUNE            reduce using rule 121 (BINARY_OP -> ADD_OP .)
    FN              reduce using rule 121 (BINARY_OP -> ADD_OP .)
    DECIMAL_LIT     reduce using rule 121 (BINARY_OP -> ADD_OP .)
    FALSE           reduce using rule 121 (BINARY_OP -> ADD_OP .)
    TRUE            reduce using rule 121 (BINARY_OP -> ADD_OP .)
    RUNE_LIT        reduce using rule 121 (BINARY_OP -> ADD_OP .)
    STRING_LIT      reduce using rule 121 (BINARY_OP -> ADD_OP .)
    F32             reduce using rule 121 (BINARY_OP -> ADD_OP .)
    F64             reduce using rule 121 (BINARY_OP -> ADD_OP .)
    INT             reduce using rule 121 (BINARY_OP -> ADD_OP .)
    ISIZE           reduce using rule 121 (BINARY_OP -> ADD_OP .)
    I64             reduce using rule 121 (BINARY_OP -> ADD_OP .)
    I32             reduce using rule 121 (BINARY_OP -> ADD_OP .)
    I16             reduce using rule 121 (BINARY_OP -> ADD_OP .)
    I8              reduce using rule 121 (BINARY_OP -> ADD_OP .)
    UINT            reduce using rule 121 (BINARY_OP -> ADD_OP .)
    USIZE           reduce using rule 121 (BINARY_OP -> ADD_OP .)
    U64             reduce using rule 121 (BINARY_OP -> ADD_OP .)
    U32             reduce using rule 121 (BINARY_OP -> ADD_OP .)
    U16             reduce using rule 121 (BINARY_OP -> ADD_OP .)
    U8              reduce using rule 121 (BINARY_OP -> ADD_OP .)
    HEX_LIT         reduce using rule 121 (BINARY_OP -> ADD_OP .)
    OCTAL_LIT       reduce using rule 121 (BINARY_OP -> ADD_OP .)
    BINARY_LIT      reduce using rule 121 (BINARY_OP -> ADD_OP .)
    .               reduce using rule 121 (BINARY_OP -> ADD_OP .)


state 103

    (122) BINARY_OP -> REL_OP .
    AND             reduce using rule 122 (BINARY_OP -> REL_OP .)
    EXCLM           reduce using rule 122 (BINARY_OP -> REL_OP .)
    MINUS           reduce using rule 122 (BINARY_OP -> REL_OP .)
    (               reduce using rule 122 (BINARY_OP -> REL_OP .)
    IDENTIFIER      reduce using rule 122 (BINARY_OP -> REL_OP .)
    STRING          reduce using rule 122 (BINARY_OP -> REL_OP .)
    BOOL            reduce using rule 122 (BINARY_OP -> REL_OP .)
    RUNE            reduce using rule 122 (BINARY_OP -> REL_OP .)
    FN              reduce using rule 122 (BINARY_OP -> REL_OP .)
    DECIMAL_LIT     reduce using rule 122 (BINARY_OP -> REL_OP .)
    FALSE           reduce using rule 122 (BINARY_OP -> REL_OP .)
    TRUE            reduce using rule 122 (BINARY_OP -> REL_OP .)
    RUNE_LIT        reduce using rule 122 (BINARY_OP -> REL_OP .)
    STRING_LIT      reduce using rule 122 (BINARY_OP -> REL_OP .)
    F32             reduce using rule 122 (BINARY_OP -> REL_OP .)
    F64             reduce using rule 122 (BINARY_OP -> REL_OP .)
    INT             reduce using rule 122 (BINARY_OP -> REL_OP .)
    ISIZE           reduce using rule 122 (BINARY_OP -> REL_OP .)
    I64             reduce using rule 122 (BINARY_OP -> REL_OP .)
    I32             reduce using rule 122 (BINARY_OP -> REL_OP .)
    I16             reduce using rule 122 (BINARY_OP -> REL_OP .)
    I8              reduce using rule 122 (BINARY_OP -> REL_OP .)
    UINT            reduce using rule 122 (BINARY_OP -> REL_OP .)
    USIZE           reduce using rule 122 (BINARY_OP -> REL_OP .)
    U64             reduce using rule 122 (BINARY_OP -> REL_OP .)
    U32             reduce using rule 122 (BINARY_OP -> REL_OP .)
    U16             reduce using rule 122 (BINARY_OP -> REL_OP .)
    U8              reduce using rule 122 (BINARY_OP -> REL_OP .)
    HEX_LIT         reduce using rule 122 (BINARY_OP -> REL_OP .)
    OCTAL_LIT       reduce using rule 122 (BINARY_OP -> REL_OP .)
    BINARY_LIT      reduce using rule 122 (BINARY_OP -> REL_OP .)
    .               reduce using rule 122 (BINARY_OP -> REL_OP .)


state 104

    (123) BINARY_OP -> LOGIC_AND .
    AND             reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    EXCLM           reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    MINUS           reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    (               reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    IDENTIFIER      reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    STRING          reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    BOOL            reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    RUNE            reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    FN              reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    DECIMAL_LIT     reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    FALSE           reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    TRUE            reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    RUNE_LIT        reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    STRING_LIT      reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    F32             reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    F64             reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    INT             reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    ISIZE           reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    I64             reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    I32             reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    I16             reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    I8              reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    UINT            reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    USIZE           reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    U64             reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    U32             reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    U16             reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    U8              reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    HEX_LIT         reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    OCTAL_LIT       reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    BINARY_LIT      reduce using rule 123 (BINARY_OP -> LOGIC_AND .)
    .               reduce using rule 123 (BINARY_OP -> LOGIC_AND .)


state 105

    (124) BINARY_OP -> LOGIC_OR .
    AND             reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    EXCLM           reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    MINUS           reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    (               reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    IDENTIFIER      reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    STRING          reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    BOOL            reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    RUNE            reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    FN              reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    DECIMAL_LIT     reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    FALSE           reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    TRUE            reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    RUNE_LIT        reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    STRING_LIT      reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    F32             reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    F64             reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    INT             reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    ISIZE           reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    I64             reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    I32             reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    I16             reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    I8              reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    UINT            reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    USIZE           reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    U64             reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    U32             reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    U16             reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    U8              reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    HEX_LIT         reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    OCTAL_LIT       reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    BINARY_LIT      reduce using rule 124 (BINARY_OP -> LOGIC_OR .)
    .               reduce using rule 124 (BINARY_OP -> LOGIC_OR .)


state 106

    (135) MUL_OP -> SHR .
    AND             reduce using rule 135 (MUL_OP -> SHR .)
    EXCLM           reduce using rule 135 (MUL_OP -> SHR .)
    MINUS           reduce using rule 135 (MUL_OP -> SHR .)
    (               reduce using rule 135 (MUL_OP -> SHR .)
    IDENTIFIER      reduce using rule 135 (MUL_OP -> SHR .)
    STRING          reduce using rule 135 (MUL_OP -> SHR .)
    BOOL            reduce using rule 135 (MUL_OP -> SHR .)
    RUNE            reduce using rule 135 (MUL_OP -> SHR .)
    FN              reduce using rule 135 (MUL_OP -> SHR .)
    DECIMAL_LIT     reduce using rule 135 (MUL_OP -> SHR .)
    FALSE           reduce using rule 135 (MUL_OP -> SHR .)
    TRUE            reduce using rule 135 (MUL_OP -> SHR .)
    RUNE_LIT        reduce using rule 135 (MUL_OP -> SHR .)
    STRING_LIT      reduce using rule 135 (MUL_OP -> SHR .)
    F32             reduce using rule 135 (MUL_OP -> SHR .)
    F64             reduce using rule 135 (MUL_OP -> SHR .)
    INT             reduce using rule 135 (MUL_OP -> SHR .)
    ISIZE           reduce using rule 135 (MUL_OP -> SHR .)
    I64             reduce using rule 135 (MUL_OP -> SHR .)
    I32             reduce using rule 135 (MUL_OP -> SHR .)
    I16             reduce using rule 135 (MUL_OP -> SHR .)
    I8              reduce using rule 135 (MUL_OP -> SHR .)
    UINT            reduce using rule 135 (MUL_OP -> SHR .)
    USIZE           reduce using rule 135 (MUL_OP -> SHR .)
    U64             reduce using rule 135 (MUL_OP -> SHR .)
    U32             reduce using rule 135 (MUL_OP -> SHR .)
    U16             reduce using rule 135 (MUL_OP -> SHR .)
    U8              reduce using rule 135 (MUL_OP -> SHR .)
    HEX_LIT         reduce using rule 135 (MUL_OP -> SHR .)
    OCTAL_LIT       reduce using rule 135 (MUL_OP -> SHR .)
    BINARY_LIT      reduce using rule 135 (MUL_OP -> SHR .)
    .               reduce using rule 135 (MUL_OP -> SHR .)


state 107

    (136) MUL_OP -> SHL .
    AND             reduce using rule 136 (MUL_OP -> SHL .)
    EXCLM           reduce using rule 136 (MUL_OP -> SHL .)
    MINUS           reduce using rule 136 (MUL_OP -> SHL .)
    (               reduce using rule 136 (MUL_OP -> SHL .)
    IDENTIFIER      reduce using rule 136 (MUL_OP -> SHL .)
    STRING          reduce using rule 136 (MUL_OP -> SHL .)
    BOOL            reduce using rule 136 (MUL_OP -> SHL .)
    RUNE            reduce using rule 136 (MUL_OP -> SHL .)
    FN              reduce using rule 136 (MUL_OP -> SHL .)
    DECIMAL_LIT     reduce using rule 136 (MUL_OP -> SHL .)
    FALSE           reduce using rule 136 (MUL_OP -> SHL .)
    TRUE            reduce using rule 136 (MUL_OP -> SHL .)
    RUNE_LIT        reduce using rule 136 (MUL_OP -> SHL .)
    STRING_LIT      reduce using rule 136 (MUL_OP -> SHL .)
    F32             reduce using rule 136 (MUL_OP -> SHL .)
    F64             reduce using rule 136 (MUL_OP -> SHL .)
    INT             reduce using rule 136 (MUL_OP -> SHL .)
    ISIZE           reduce using rule 136 (MUL_OP -> SHL .)
    I64             reduce using rule 136 (MUL_OP -> SHL .)
    I32             reduce using rule 136 (MUL_OP -> SHL .)
    I16             reduce using rule 136 (MUL_OP -> SHL .)
    I8              reduce using rule 136 (MUL_OP -> SHL .)
    UINT            reduce using rule 136 (MUL_OP -> SHL .)
    USIZE           reduce using rule 136 (MUL_OP -> SHL .)
    U64             reduce using rule 136 (MUL_OP -> SHL .)
    U32             reduce using rule 136 (MUL_OP -> SHL .)
    U16             reduce using rule 136 (MUL_OP -> SHL .)
    U8              reduce using rule 136 (MUL_OP -> SHL .)
    HEX_LIT         reduce using rule 136 (MUL_OP -> SHL .)
    OCTAL_LIT       reduce using rule 136 (MUL_OP -> SHL .)
    BINARY_LIT      reduce using rule 136 (MUL_OP -> SHL .)
    .               reduce using rule 136 (MUL_OP -> SHL .)


state 108

    (137) MUL_OP -> AND .
    AND             reduce using rule 137 (MUL_OP -> AND .)
    EXCLM           reduce using rule 137 (MUL_OP -> AND .)
    MINUS           reduce using rule 137 (MUL_OP -> AND .)
    (               reduce using rule 137 (MUL_OP -> AND .)
    IDENTIFIER      reduce using rule 137 (MUL_OP -> AND .)
    STRING          reduce using rule 137 (MUL_OP -> AND .)
    BOOL            reduce using rule 137 (MUL_OP -> AND .)
    RUNE            reduce using rule 137 (MUL_OP -> AND .)
    FN              reduce using rule 137 (MUL_OP -> AND .)
    DECIMAL_LIT     reduce using rule 137 (MUL_OP -> AND .)
    FALSE           reduce using rule 137 (MUL_OP -> AND .)
    TRUE            reduce using rule 137 (MUL_OP -> AND .)
    RUNE_LIT        reduce using rule 137 (MUL_OP -> AND .)
    STRING_LIT      reduce using rule 137 (MUL_OP -> AND .)
    F32             reduce using rule 137 (MUL_OP -> AND .)
    F64             reduce using rule 137 (MUL_OP -> AND .)
    INT             reduce using rule 137 (MUL_OP -> AND .)
    ISIZE           reduce using rule 137 (MUL_OP -> AND .)
    I64             reduce using rule 137 (MUL_OP -> AND .)
    I32             reduce using rule 137 (MUL_OP -> AND .)
    I16             reduce using rule 137 (MUL_OP -> AND .)
    I8              reduce using rule 137 (MUL_OP -> AND .)
    UINT            reduce using rule 137 (MUL_OP -> AND .)
    USIZE           reduce using rule 137 (MUL_OP -> AND .)
    U64             reduce using rule 137 (MUL_OP -> AND .)
    U32             reduce using rule 137 (MUL_OP -> AND .)
    U16             reduce using rule 137 (MUL_OP -> AND .)
    U8              reduce using rule 137 (MUL_OP -> AND .)
    HEX_LIT         reduce using rule 137 (MUL_OP -> AND .)
    OCTAL_LIT       reduce using rule 137 (MUL_OP -> AND .)
    BINARY_LIT      reduce using rule 137 (MUL_OP -> AND .)
    .               reduce using rule 137 (MUL_OP -> AND .)


state 109

    (138) MUL_OP -> MOD .
    AND             reduce using rule 138 (MUL_OP -> MOD .)
    EXCLM           reduce using rule 138 (MUL_OP -> MOD .)
    MINUS           reduce using rule 138 (MUL_OP -> MOD .)
    (               reduce using rule 138 (MUL_OP -> MOD .)
    IDENTIFIER      reduce using rule 138 (MUL_OP -> MOD .)
    STRING          reduce using rule 138 (MUL_OP -> MOD .)
    BOOL            reduce using rule 138 (MUL_OP -> MOD .)
    RUNE            reduce using rule 138 (MUL_OP -> MOD .)
    FN              reduce using rule 138 (MUL_OP -> MOD .)
    DECIMAL_LIT     reduce using rule 138 (MUL_OP -> MOD .)
    FALSE           reduce using rule 138 (MUL_OP -> MOD .)
    TRUE            reduce using rule 138 (MUL_OP -> MOD .)
    RUNE_LIT        reduce using rule 138 (MUL_OP -> MOD .)
    STRING_LIT      reduce using rule 138 (MUL_OP -> MOD .)
    F32             reduce using rule 138 (MUL_OP -> MOD .)
    F64             reduce using rule 138 (MUL_OP -> MOD .)
    INT             reduce using rule 138 (MUL_OP -> MOD .)
    ISIZE           reduce using rule 138 (MUL_OP -> MOD .)
    I64             reduce using rule 138 (MUL_OP -> MOD .)
    I32             reduce using rule 138 (MUL_OP -> MOD .)
    I16             reduce using rule 138 (MUL_OP -> MOD .)
    I8              reduce using rule 138 (MUL_OP -> MOD .)
    UINT            reduce using rule 138 (MUL_OP -> MOD .)
    USIZE           reduce using rule 138 (MUL_OP -> MOD .)
    U64             reduce using rule 138 (MUL_OP -> MOD .)
    U32             reduce using rule 138 (MUL_OP -> MOD .)
    U16             reduce using rule 138 (MUL_OP -> MOD .)
    U8              reduce using rule 138 (MUL_OP -> MOD .)
    HEX_LIT         reduce using rule 138 (MUL_OP -> MOD .)
    OCTAL_LIT       reduce using rule 138 (MUL_OP -> MOD .)
    BINARY_LIT      reduce using rule 138 (MUL_OP -> MOD .)
    .               reduce using rule 138 (MUL_OP -> MOD .)


state 110

    (139) MUL_OP -> DIV .
    AND             reduce using rule 139 (MUL_OP -> DIV .)
    EXCLM           reduce using rule 139 (MUL_OP -> DIV .)
    MINUS           reduce using rule 139 (MUL_OP -> DIV .)
    (               reduce using rule 139 (MUL_OP -> DIV .)
    IDENTIFIER      reduce using rule 139 (MUL_OP -> DIV .)
    STRING          reduce using rule 139 (MUL_OP -> DIV .)
    BOOL            reduce using rule 139 (MUL_OP -> DIV .)
    RUNE            reduce using rule 139 (MUL_OP -> DIV .)
    FN              reduce using rule 139 (MUL_OP -> DIV .)
    DECIMAL_LIT     reduce using rule 139 (MUL_OP -> DIV .)
    FALSE           reduce using rule 139 (MUL_OP -> DIV .)
    TRUE            reduce using rule 139 (MUL_OP -> DIV .)
    RUNE_LIT        reduce using rule 139 (MUL_OP -> DIV .)
    STRING_LIT      reduce using rule 139 (MUL_OP -> DIV .)
    F32             reduce using rule 139 (MUL_OP -> DIV .)
    F64             reduce using rule 139 (MUL_OP -> DIV .)
    INT             reduce using rule 139 (MUL_OP -> DIV .)
    ISIZE           reduce using rule 139 (MUL_OP -> DIV .)
    I64             reduce using rule 139 (MUL_OP -> DIV .)
    I32             reduce using rule 139 (MUL_OP -> DIV .)
    I16             reduce using rule 139 (MUL_OP -> DIV .)
    I8              reduce using rule 139 (MUL_OP -> DIV .)
    UINT            reduce using rule 139 (MUL_OP -> DIV .)
    USIZE           reduce using rule 139 (MUL_OP -> DIV .)
    U64             reduce using rule 139 (MUL_OP -> DIV .)
    U32             reduce using rule 139 (MUL_OP -> DIV .)
    U16             reduce using rule 139 (MUL_OP -> DIV .)
    U8              reduce using rule 139 (MUL_OP -> DIV .)
    HEX_LIT         reduce using rule 139 (MUL_OP -> DIV .)
    OCTAL_LIT       reduce using rule 139 (MUL_OP -> DIV .)
    BINARY_LIT      reduce using rule 139 (MUL_OP -> DIV .)
    .               reduce using rule 139 (MUL_OP -> DIV .)


state 111

    (140) MUL_OP -> STAR .
    AND             reduce using rule 140 (MUL_OP -> STAR .)
    EXCLM           reduce using rule 140 (MUL_OP -> STAR .)
    MINUS           reduce using rule 140 (MUL_OP -> STAR .)
    (               reduce using rule 140 (MUL_OP -> STAR .)
    IDENTIFIER      reduce using rule 140 (MUL_OP -> STAR .)
    STRING          reduce using rule 140 (MUL_OP -> STAR .)
    BOOL            reduce using rule 140 (MUL_OP -> STAR .)
    RUNE            reduce using rule 140 (MUL_OP -> STAR .)
    FN              reduce using rule 140 (MUL_OP -> STAR .)
    DECIMAL_LIT     reduce using rule 140 (MUL_OP -> STAR .)
    FALSE           reduce using rule 140 (MUL_OP -> STAR .)
    TRUE            reduce using rule 140 (MUL_OP -> STAR .)
    RUNE_LIT        reduce using rule 140 (MUL_OP -> STAR .)
    STRING_LIT      reduce using rule 140 (MUL_OP -> STAR .)
    F32             reduce using rule 140 (MUL_OP -> STAR .)
    F64             reduce using rule 140 (MUL_OP -> STAR .)
    INT             reduce using rule 140 (MUL_OP -> STAR .)
    ISIZE           reduce using rule 140 (MUL_OP -> STAR .)
    I64             reduce using rule 140 (MUL_OP -> STAR .)
    I32             reduce using rule 140 (MUL_OP -> STAR .)
    I16             reduce using rule 140 (MUL_OP -> STAR .)
    I8              reduce using rule 140 (MUL_OP -> STAR .)
    UINT            reduce using rule 140 (MUL_OP -> STAR .)
    USIZE           reduce using rule 140 (MUL_OP -> STAR .)
    U64             reduce using rule 140 (MUL_OP -> STAR .)
    U32             reduce using rule 140 (MUL_OP -> STAR .)
    U16             reduce using rule 140 (MUL_OP -> STAR .)
    U8              reduce using rule 140 (MUL_OP -> STAR .)
    HEX_LIT         reduce using rule 140 (MUL_OP -> STAR .)
    OCTAL_LIT       reduce using rule 140 (MUL_OP -> STAR .)
    BINARY_LIT      reduce using rule 140 (MUL_OP -> STAR .)
    .               reduce using rule 140 (MUL_OP -> STAR .)


state 112

    (131) ADD_OP -> XOR .
    AND             reduce using rule 131 (ADD_OP -> XOR .)
    EXCLM           reduce using rule 131 (ADD_OP -> XOR .)
    MINUS           reduce using rule 131 (ADD_OP -> XOR .)
    (               reduce using rule 131 (ADD_OP -> XOR .)
    IDENTIFIER      reduce using rule 131 (ADD_OP -> XOR .)
    STRING          reduce using rule 131 (ADD_OP -> XOR .)
    BOOL            reduce using rule 131 (ADD_OP -> XOR .)
    RUNE            reduce using rule 131 (ADD_OP -> XOR .)
    FN              reduce using rule 131 (ADD_OP -> XOR .)
    DECIMAL_LIT     reduce using rule 131 (ADD_OP -> XOR .)
    FALSE           reduce using rule 131 (ADD_OP -> XOR .)
    TRUE            reduce using rule 131 (ADD_OP -> XOR .)
    RUNE_LIT        reduce using rule 131 (ADD_OP -> XOR .)
    STRING_LIT      reduce using rule 131 (ADD_OP -> XOR .)
    F32             reduce using rule 131 (ADD_OP -> XOR .)
    F64             reduce using rule 131 (ADD_OP -> XOR .)
    INT             reduce using rule 131 (ADD_OP -> XOR .)
    ISIZE           reduce using rule 131 (ADD_OP -> XOR .)
    I64             reduce using rule 131 (ADD_OP -> XOR .)
    I32             reduce using rule 131 (ADD_OP -> XOR .)
    I16             reduce using rule 131 (ADD_OP -> XOR .)
    I8              reduce using rule 131 (ADD_OP -> XOR .)
    UINT            reduce using rule 131 (ADD_OP -> XOR .)
    USIZE           reduce using rule 131 (ADD_OP -> XOR .)
    U64             reduce using rule 131 (ADD_OP -> XOR .)
    U32             reduce using rule 131 (ADD_OP -> XOR .)
    U16             reduce using rule 131 (ADD_OP -> XOR .)
    U8              reduce using rule 131 (ADD_OP -> XOR .)
    HEX_LIT         reduce using rule 131 (ADD_OP -> XOR .)
    OCTAL_LIT       reduce using rule 131 (ADD_OP -> XOR .)
    BINARY_LIT      reduce using rule 131 (ADD_OP -> XOR .)
    .               reduce using rule 131 (ADD_OP -> XOR .)


state 113

    (132) ADD_OP -> OR .
    AND             reduce using rule 132 (ADD_OP -> OR .)
    EXCLM           reduce using rule 132 (ADD_OP -> OR .)
    MINUS           reduce using rule 132 (ADD_OP -> OR .)
    (               reduce using rule 132 (ADD_OP -> OR .)
    IDENTIFIER      reduce using rule 132 (ADD_OP -> OR .)
    STRING          reduce using rule 132 (ADD_OP -> OR .)
    BOOL            reduce using rule 132 (ADD_OP -> OR .)
    RUNE            reduce using rule 132 (ADD_OP -> OR .)
    FN              reduce using rule 132 (ADD_OP -> OR .)
    DECIMAL_LIT     reduce using rule 132 (ADD_OP -> OR .)
    FALSE           reduce using rule 132 (ADD_OP -> OR .)
    TRUE            reduce using rule 132 (ADD_OP -> OR .)
    RUNE_LIT        reduce using rule 132 (ADD_OP -> OR .)
    STRING_LIT      reduce using rule 132 (ADD_OP -> OR .)
    F32             reduce using rule 132 (ADD_OP -> OR .)
    F64             reduce using rule 132 (ADD_OP -> OR .)
    INT             reduce using rule 132 (ADD_OP -> OR .)
    ISIZE           reduce using rule 132 (ADD_OP -> OR .)
    I64             reduce using rule 132 (ADD_OP -> OR .)
    I32             reduce using rule 132 (ADD_OP -> OR .)
    I16             reduce using rule 132 (ADD_OP -> OR .)
    I8              reduce using rule 132 (ADD_OP -> OR .)
    UINT            reduce using rule 132 (ADD_OP -> OR .)
    USIZE           reduce using rule 132 (ADD_OP -> OR .)
    U64             reduce using rule 132 (ADD_OP -> OR .)
    U32             reduce using rule 132 (ADD_OP -> OR .)
    U16             reduce using rule 132 (ADD_OP -> OR .)
    U8              reduce using rule 132 (ADD_OP -> OR .)
    HEX_LIT         reduce using rule 132 (ADD_OP -> OR .)
    OCTAL_LIT       reduce using rule 132 (ADD_OP -> OR .)
    BINARY_LIT      reduce using rule 132 (ADD_OP -> OR .)
    .               reduce using rule 132 (ADD_OP -> OR .)


state 114

    (133) ADD_OP -> MINUS .
    AND             reduce using rule 133 (ADD_OP -> MINUS .)
    EXCLM           reduce using rule 133 (ADD_OP -> MINUS .)
    MINUS           reduce using rule 133 (ADD_OP -> MINUS .)
    (               reduce using rule 133 (ADD_OP -> MINUS .)
    IDENTIFIER      reduce using rule 133 (ADD_OP -> MINUS .)
    STRING          reduce using rule 133 (ADD_OP -> MINUS .)
    BOOL            reduce using rule 133 (ADD_OP -> MINUS .)
    RUNE            reduce using rule 133 (ADD_OP -> MINUS .)
    FN              reduce using rule 133 (ADD_OP -> MINUS .)
    DECIMAL_LIT     reduce using rule 133 (ADD_OP -> MINUS .)
    FALSE           reduce using rule 133 (ADD_OP -> MINUS .)
    TRUE            reduce using rule 133 (ADD_OP -> MINUS .)
    RUNE_LIT        reduce using rule 133 (ADD_OP -> MINUS .)
    STRING_LIT      reduce using rule 133 (ADD_OP -> MINUS .)
    F32             reduce using rule 133 (ADD_OP -> MINUS .)
    F64             reduce using rule 133 (ADD_OP -> MINUS .)
    INT             reduce using rule 133 (ADD_OP -> MINUS .)
    ISIZE           reduce using rule 133 (ADD_OP -> MINUS .)
    I64             reduce using rule 133 (ADD_OP -> MINUS .)
    I32             reduce using rule 133 (ADD_OP -> MINUS .)
    I16             reduce using rule 133 (ADD_OP -> MINUS .)
    I8              reduce using rule 133 (ADD_OP -> MINUS .)
    UINT            reduce using rule 133 (ADD_OP -> MINUS .)
    USIZE           reduce using rule 133 (ADD_OP -> MINUS .)
    U64             reduce using rule 133 (ADD_OP -> MINUS .)
    U32             reduce using rule 133 (ADD_OP -> MINUS .)
    U16             reduce using rule 133 (ADD_OP -> MINUS .)
    U8              reduce using rule 133 (ADD_OP -> MINUS .)
    HEX_LIT         reduce using rule 133 (ADD_OP -> MINUS .)
    OCTAL_LIT       reduce using rule 133 (ADD_OP -> MINUS .)
    BINARY_LIT      reduce using rule 133 (ADD_OP -> MINUS .)
    .               reduce using rule 133 (ADD_OP -> MINUS .)


state 115

    (134) ADD_OP -> PLUS .
    AND             reduce using rule 134 (ADD_OP -> PLUS .)
    EXCLM           reduce using rule 134 (ADD_OP -> PLUS .)
    MINUS           reduce using rule 134 (ADD_OP -> PLUS .)
    (               reduce using rule 134 (ADD_OP -> PLUS .)
    IDENTIFIER      reduce using rule 134 (ADD_OP -> PLUS .)
    STRING          reduce using rule 134 (ADD_OP -> PLUS .)
    BOOL            reduce using rule 134 (ADD_OP -> PLUS .)
    RUNE            reduce using rule 134 (ADD_OP -> PLUS .)
    FN              reduce using rule 134 (ADD_OP -> PLUS .)
    DECIMAL_LIT     reduce using rule 134 (ADD_OP -> PLUS .)
    FALSE           reduce using rule 134 (ADD_OP -> PLUS .)
    TRUE            reduce using rule 134 (ADD_OP -> PLUS .)
    RUNE_LIT        reduce using rule 134 (ADD_OP -> PLUS .)
    STRING_LIT      reduce using rule 134 (ADD_OP -> PLUS .)
    F32             reduce using rule 134 (ADD_OP -> PLUS .)
    F64             reduce using rule 134 (ADD_OP -> PLUS .)
    INT             reduce using rule 134 (ADD_OP -> PLUS .)
    ISIZE           reduce using rule 134 (ADD_OP -> PLUS .)
    I64             reduce using rule 134 (ADD_OP -> PLUS .)
    I32             reduce using rule 134 (ADD_OP -> PLUS .)
    I16             reduce using rule 134 (ADD_OP -> PLUS .)
    I8              reduce using rule 134 (ADD_OP -> PLUS .)
    UINT            reduce using rule 134 (ADD_OP -> PLUS .)
    USIZE           reduce using rule 134 (ADD_OP -> PLUS .)
    U64             reduce using rule 134 (ADD_OP -> PLUS .)
    U32             reduce using rule 134 (ADD_OP -> PLUS .)
    U16             reduce using rule 134 (ADD_OP -> PLUS .)
    U8              reduce using rule 134 (ADD_OP -> PLUS .)
    HEX_LIT         reduce using rule 134 (ADD_OP -> PLUS .)
    OCTAL_LIT       reduce using rule 134 (ADD_OP -> PLUS .)
    BINARY_LIT      reduce using rule 134 (ADD_OP -> PLUS .)
    .               reduce using rule 134 (ADD_OP -> PLUS .)


state 116

    (125) REL_OP -> GE .
    AND             reduce using rule 125 (REL_OP -> GE .)
    EXCLM           reduce using rule 125 (REL_OP -> GE .)
    MINUS           reduce using rule 125 (REL_OP -> GE .)
    (               reduce using rule 125 (REL_OP -> GE .)
    IDENTIFIER      reduce using rule 125 (REL_OP -> GE .)
    STRING          reduce using rule 125 (REL_OP -> GE .)
    BOOL            reduce using rule 125 (REL_OP -> GE .)
    RUNE            reduce using rule 125 (REL_OP -> GE .)
    FN              reduce using rule 125 (REL_OP -> GE .)
    DECIMAL_LIT     reduce using rule 125 (REL_OP -> GE .)
    FALSE           reduce using rule 125 (REL_OP -> GE .)
    TRUE            reduce using rule 125 (REL_OP -> GE .)
    RUNE_LIT        reduce using rule 125 (REL_OP -> GE .)
    STRING_LIT      reduce using rule 125 (REL_OP -> GE .)
    F32             reduce using rule 125 (REL_OP -> GE .)
    F64             reduce using rule 125 (REL_OP -> GE .)
    INT             reduce using rule 125 (REL_OP -> GE .)
    ISIZE           reduce using rule 125 (REL_OP -> GE .)
    I64             reduce using rule 125 (REL_OP -> GE .)
    I32             reduce using rule 125 (REL_OP -> GE .)
    I16             reduce using rule 125 (REL_OP -> GE .)
    I8              reduce using rule 125 (REL_OP -> GE .)
    UINT            reduce using rule 125 (REL_OP -> GE .)
    USIZE           reduce using rule 125 (REL_OP -> GE .)
    U64             reduce using rule 125 (REL_OP -> GE .)
    U32             reduce using rule 125 (REL_OP -> GE .)
    U16             reduce using rule 125 (REL_OP -> GE .)
    U8              reduce using rule 125 (REL_OP -> GE .)
    HEX_LIT         reduce using rule 125 (REL_OP -> GE .)
    OCTAL_LIT       reduce using rule 125 (REL_OP -> GE .)
    BINARY_LIT      reduce using rule 125 (REL_OP -> GE .)
    .               reduce using rule 125 (REL_OP -> GE .)


state 117

    (126) REL_OP -> GT .
    AND             reduce using rule 126 (REL_OP -> GT .)
    EXCLM           reduce using rule 126 (REL_OP -> GT .)
    MINUS           reduce using rule 126 (REL_OP -> GT .)
    (               reduce using rule 126 (REL_OP -> GT .)
    IDENTIFIER      reduce using rule 126 (REL_OP -> GT .)
    STRING          reduce using rule 126 (REL_OP -> GT .)
    BOOL            reduce using rule 126 (REL_OP -> GT .)
    RUNE            reduce using rule 126 (REL_OP -> GT .)
    FN              reduce using rule 126 (REL_OP -> GT .)
    DECIMAL_LIT     reduce using rule 126 (REL_OP -> GT .)
    FALSE           reduce using rule 126 (REL_OP -> GT .)
    TRUE            reduce using rule 126 (REL_OP -> GT .)
    RUNE_LIT        reduce using rule 126 (REL_OP -> GT .)
    STRING_LIT      reduce using rule 126 (REL_OP -> GT .)
    F32             reduce using rule 126 (REL_OP -> GT .)
    F64             reduce using rule 126 (REL_OP -> GT .)
    INT             reduce using rule 126 (REL_OP -> GT .)
    ISIZE           reduce using rule 126 (REL_OP -> GT .)
    I64             reduce using rule 126 (REL_OP -> GT .)
    I32             reduce using rule 126 (REL_OP -> GT .)
    I16             reduce using rule 126 (REL_OP -> GT .)
    I8              reduce using rule 126 (REL_OP -> GT .)
    UINT            reduce using rule 126 (REL_OP -> GT .)
    USIZE           reduce using rule 126 (REL_OP -> GT .)
    U64             reduce using rule 126 (REL_OP -> GT .)
    U32             reduce using rule 126 (REL_OP -> GT .)
    U16             reduce using rule 126 (REL_OP -> GT .)
    U8              reduce using rule 126 (REL_OP -> GT .)
    HEX_LIT         reduce using rule 126 (REL_OP -> GT .)
    OCTAL_LIT       reduce using rule 126 (REL_OP -> GT .)
    BINARY_LIT      reduce using rule 126 (REL_OP -> GT .)
    .               reduce using rule 126 (REL_OP -> GT .)


state 118

    (127) REL_OP -> LE .
    AND             reduce using rule 127 (REL_OP -> LE .)
    EXCLM           reduce using rule 127 (REL_OP -> LE .)
    MINUS           reduce using rule 127 (REL_OP -> LE .)
    (               reduce using rule 127 (REL_OP -> LE .)
    IDENTIFIER      reduce using rule 127 (REL_OP -> LE .)
    STRING          reduce using rule 127 (REL_OP -> LE .)
    BOOL            reduce using rule 127 (REL_OP -> LE .)
    RUNE            reduce using rule 127 (REL_OP -> LE .)
    FN              reduce using rule 127 (REL_OP -> LE .)
    DECIMAL_LIT     reduce using rule 127 (REL_OP -> LE .)
    FALSE           reduce using rule 127 (REL_OP -> LE .)
    TRUE            reduce using rule 127 (REL_OP -> LE .)
    RUNE_LIT        reduce using rule 127 (REL_OP -> LE .)
    STRING_LIT      reduce using rule 127 (REL_OP -> LE .)
    F32             reduce using rule 127 (REL_OP -> LE .)
    F64             reduce using rule 127 (REL_OP -> LE .)
    INT             reduce using rule 127 (REL_OP -> LE .)
    ISIZE           reduce using rule 127 (REL_OP -> LE .)
    I64             reduce using rule 127 (REL_OP -> LE .)
    I32             reduce using rule 127 (REL_OP -> LE .)
    I16             reduce using rule 127 (REL_OP -> LE .)
    I8              reduce using rule 127 (REL_OP -> LE .)
    UINT            reduce using rule 127 (REL_OP -> LE .)
    USIZE           reduce using rule 127 (REL_OP -> LE .)
    U64             reduce using rule 127 (REL_OP -> LE .)
    U32             reduce using rule 127 (REL_OP -> LE .)
    U16             reduce using rule 127 (REL_OP -> LE .)
    U8              reduce using rule 127 (REL_OP -> LE .)
    HEX_LIT         reduce using rule 127 (REL_OP -> LE .)
    OCTAL_LIT       reduce using rule 127 (REL_OP -> LE .)
    BINARY_LIT      reduce using rule 127 (REL_OP -> LE .)
    .               reduce using rule 127 (REL_OP -> LE .)


state 119

    (128) REL_OP -> LT .
    AND             reduce using rule 128 (REL_OP -> LT .)
    EXCLM           reduce using rule 128 (REL_OP -> LT .)
    MINUS           reduce using rule 128 (REL_OP -> LT .)
    (               reduce using rule 128 (REL_OP -> LT .)
    IDENTIFIER      reduce using rule 128 (REL_OP -> LT .)
    STRING          reduce using rule 128 (REL_OP -> LT .)
    BOOL            reduce using rule 128 (REL_OP -> LT .)
    RUNE            reduce using rule 128 (REL_OP -> LT .)
    FN              reduce using rule 128 (REL_OP -> LT .)
    DECIMAL_LIT     reduce using rule 128 (REL_OP -> LT .)
    FALSE           reduce using rule 128 (REL_OP -> LT .)
    TRUE            reduce using rule 128 (REL_OP -> LT .)
    RUNE_LIT        reduce using rule 128 (REL_OP -> LT .)
    STRING_LIT      reduce using rule 128 (REL_OP -> LT .)
    F32             reduce using rule 128 (REL_OP -> LT .)
    F64             reduce using rule 128 (REL_OP -> LT .)
    INT             reduce using rule 128 (REL_OP -> LT .)
    ISIZE           reduce using rule 128 (REL_OP -> LT .)
    I64             reduce using rule 128 (REL_OP -> LT .)
    I32             reduce using rule 128 (REL_OP -> LT .)
    I16             reduce using rule 128 (REL_OP -> LT .)
    I8              reduce using rule 128 (REL_OP -> LT .)
    UINT            reduce using rule 128 (REL_OP -> LT .)
    USIZE           reduce using rule 128 (REL_OP -> LT .)
    U64             reduce using rule 128 (REL_OP -> LT .)
    U32             reduce using rule 128 (REL_OP -> LT .)
    U16             reduce using rule 128 (REL_OP -> LT .)
    U8              reduce using rule 128 (REL_OP -> LT .)
    HEX_LIT         reduce using rule 128 (REL_OP -> LT .)
    OCTAL_LIT       reduce using rule 128 (REL_OP -> LT .)
    BINARY_LIT      reduce using rule 128 (REL_OP -> LT .)
    .               reduce using rule 128 (REL_OP -> LT .)


state 120

    (129) REL_OP -> NE .
    AND             reduce using rule 129 (REL_OP -> NE .)
    EXCLM           reduce using rule 129 (REL_OP -> NE .)
    MINUS           reduce using rule 129 (REL_OP -> NE .)
    (               reduce using rule 129 (REL_OP -> NE .)
    IDENTIFIER      reduce using rule 129 (REL_OP -> NE .)
    STRING          reduce using rule 129 (REL_OP -> NE .)
    BOOL            reduce using rule 129 (REL_OP -> NE .)
    RUNE            reduce using rule 129 (REL_OP -> NE .)
    FN              reduce using rule 129 (REL_OP -> NE .)
    DECIMAL_LIT     reduce using rule 129 (REL_OP -> NE .)
    FALSE           reduce using rule 129 (REL_OP -> NE .)
    TRUE            reduce using rule 129 (REL_OP -> NE .)
    RUNE_LIT        reduce using rule 129 (REL_OP -> NE .)
    STRING_LIT      reduce using rule 129 (REL_OP -> NE .)
    F32             reduce using rule 129 (REL_OP -> NE .)
    F64             reduce using rule 129 (REL_OP -> NE .)
    INT             reduce using rule 129 (REL_OP -> NE .)
    ISIZE           reduce using rule 129 (REL_OP -> NE .)
    I64             reduce using rule 129 (REL_OP -> NE .)
    I32             reduce using rule 129 (REL_OP -> NE .)
    I16             reduce using rule 129 (REL_OP -> NE .)
    I8              reduce using rule 129 (REL_OP -> NE .)
    UINT            reduce using rule 129 (REL_OP -> NE .)
    USIZE           reduce using rule 129 (REL_OP -> NE .)
    U64             reduce using rule 129 (REL_OP -> NE .)
    U32             reduce using rule 129 (REL_OP -> NE .)
    U16             reduce using rule 129 (REL_OP -> NE .)
    U8              reduce using rule 129 (REL_OP -> NE .)
    HEX_LIT         reduce using rule 129 (REL_OP -> NE .)
    OCTAL_LIT       reduce using rule 129 (REL_OP -> NE .)
    BINARY_LIT      reduce using rule 129 (REL_OP -> NE .)
    .               reduce using rule 129 (REL_OP -> NE .)


state 121

    (130) REL_OP -> EQ .
    AND             reduce using rule 130 (REL_OP -> EQ .)
    EXCLM           reduce using rule 130 (REL_OP -> EQ .)
    MINUS           reduce using rule 130 (REL_OP -> EQ .)
    (               reduce using rule 130 (REL_OP -> EQ .)
    IDENTIFIER      reduce using rule 130 (REL_OP -> EQ .)
    STRING          reduce using rule 130 (REL_OP -> EQ .)
    BOOL            reduce using rule 130 (REL_OP -> EQ .)
    RUNE            reduce using rule 130 (REL_OP -> EQ .)
    FN              reduce using rule 130 (REL_OP -> EQ .)
    DECIMAL_LIT     reduce using rule 130 (REL_OP -> EQ .)
    FALSE           reduce using rule 130 (REL_OP -> EQ .)
    TRUE            reduce using rule 130 (REL_OP -> EQ .)
    RUNE_LIT        reduce using rule 130 (REL_OP -> EQ .)
    STRING_LIT      reduce using rule 130 (REL_OP -> EQ .)
    F32             reduce using rule 130 (REL_OP -> EQ .)
    F64             reduce using rule 130 (REL_OP -> EQ .)
    INT             reduce using rule 130 (REL_OP -> EQ .)
    ISIZE           reduce using rule 130 (REL_OP -> EQ .)
    I64             reduce using rule 130 (REL_OP -> EQ .)
    I32             reduce using rule 130 (REL_OP -> EQ .)
    I16             reduce using rule 130 (REL_OP -> EQ .)
    I8              reduce using rule 130 (REL_OP -> EQ .)
    UINT            reduce using rule 130 (REL_OP -> EQ .)
    USIZE           reduce using rule 130 (REL_OP -> EQ .)
    U64             reduce using rule 130 (REL_OP -> EQ .)
    U32             reduce using rule 130 (REL_OP -> EQ .)
    U16             reduce using rule 130 (REL_OP -> EQ .)
    U8              reduce using rule 130 (REL_OP -> EQ .)
    HEX_LIT         reduce using rule 130 (REL_OP -> EQ .)
    OCTAL_LIT       reduce using rule 130 (REL_OP -> EQ .)
    BINARY_LIT      reduce using rule 130 (REL_OP -> EQ .)
    .               reduce using rule 130 (REL_OP -> EQ .)


state 122

    (56) unaryExpr -> UNARY_OP unaryExpr .
    LOGIC_AND       reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    LOGIC_OR        reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    SHR             reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    SHL             reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    AND             reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    MOD             reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    DIV             reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    STAR            reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    XOR             reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    OR              reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    MINUS           reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    PLUS            reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    GE              reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    GT              reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    LE              reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    LT              reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    NE              reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    EQ              reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    NEWL            reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    ;               reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    )               reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    ,               reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)
    }               reduce using rule 56 (unaryExpr -> UNARY_OP unaryExpr .)


state 123

    (65) operandName -> IDENTIFIER .
    (71) qualifiedIdent -> IDENTIFIER . . IDENTIFIER
    (               reduce using rule 65 (operandName -> IDENTIFIER .)
    LOGIC_AND       reduce using rule 65 (operandName -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 65 (operandName -> IDENTIFIER .)
    SHR             reduce using rule 65 (operandName -> IDENTIFIER .)
    SHL             reduce using rule 65 (operandName -> IDENTIFIER .)
    AND             reduce using rule 65 (operandName -> IDENTIFIER .)
    MOD             reduce using rule 65 (operandName -> IDENTIFIER .)
    DIV             reduce using rule 65 (operandName -> IDENTIFIER .)
    STAR            reduce using rule 65 (operandName -> IDENTIFIER .)
    XOR             reduce using rule 65 (operandName -> IDENTIFIER .)
    OR              reduce using rule 65 (operandName -> IDENTIFIER .)
    MINUS           reduce using rule 65 (operandName -> IDENTIFIER .)
    PLUS            reduce using rule 65 (operandName -> IDENTIFIER .)
    GE              reduce using rule 65 (operandName -> IDENTIFIER .)
    GT              reduce using rule 65 (operandName -> IDENTIFIER .)
    LE              reduce using rule 65 (operandName -> IDENTIFIER .)
    LT              reduce using rule 65 (operandName -> IDENTIFIER .)
    NE              reduce using rule 65 (operandName -> IDENTIFIER .)
    EQ              reduce using rule 65 (operandName -> IDENTIFIER .)
    NEWL            reduce using rule 65 (operandName -> IDENTIFIER .)
    ;               reduce using rule 65 (operandName -> IDENTIFIER .)
    )               reduce using rule 65 (operandName -> IDENTIFIER .)
    ,               reduce using rule 65 (operandName -> IDENTIFIER .)
    }               reduce using rule 65 (operandName -> IDENTIFIER .)
    .               shift and go to state 85


state 124

    (36) functionLit -> FN . function_
    (24) function_ -> . signature block
    (25) signature -> . parameters
    (26) signature -> . parameters result
    (29) parameters -> . ( parameterList , )
    (30) parameters -> . ( parameterList )
    (31) parameters -> . ( )
    (               shift and go to state 84

    function_                      shift and go to state 82
    signature                      shift and go to state 81
    parameters                     shift and go to state 83

state 125

    (58) primaryExpr -> primaryExpr arguments .
    (               reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    LOGIC_AND       reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    LOGIC_OR        reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    SHR             reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    SHL             reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    AND             reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    MOD             reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    DIV             reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    STAR            reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    XOR             reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    OR              reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    MINUS           reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    PLUS            reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    GE              reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    GT              reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    LE              reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    LT              reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    NE              reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    EQ              reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    NEWL            reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    ;               reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    )               reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    ,               reduce using rule 58 (primaryExpr -> primaryExpr arguments .)
    }               reduce using rule 58 (primaryExpr -> primaryExpr arguments .)


state 126

    (47) arguments -> ( . type_ , expressionList , )
    (48) arguments -> ( . type_ , expressionList )
    (49) arguments -> ( . type_ , )
    (50) arguments -> ( . type_ )
    (51) arguments -> ( . expressionList , )
    (52) arguments -> ( . expressionList )
    (53) arguments -> ( . )
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (37) expressionList -> . expressionList , expression
    (38) expressionList -> . expression
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (54) expression -> . expression BINARY_OP unaryExpr
    (55) expression -> . unaryExpr
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    )               shift and go to state 166
    IDENTIFIER      shift and go to state 167
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    FN              shift and go to state 124
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    type_                          shift and go to state 164
    expressionList                 shift and go to state 165
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    expression                     shift and go to state 160
    numericType                    shift and go to state 37
    unaryExpr                      shift and go to state 20
    UNARY_OP                       shift and go to state 21
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 127

    (68) conversion -> type_ ( . expression )
    (54) expression -> . expression BINARY_OP unaryExpr
    (55) expression -> . unaryExpr
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    IDENTIFIER      shift and go to state 123
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    FN              shift and go to state 124
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    type_                          shift and go to state 28
    expression                     shift and go to state 168
    unaryExpr                      shift and go to state 20
    UNARY_OP                       shift and go to state 21
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    numericType                    shift and go to state 37
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 128

    (61) operand -> ( expression . )
    (54) expression -> expression . BINARY_OP unaryExpr
    (120) BINARY_OP -> . MUL_OP
    (121) BINARY_OP -> . ADD_OP
    (122) BINARY_OP -> . REL_OP
    (123) BINARY_OP -> . LOGIC_AND
    (124) BINARY_OP -> . LOGIC_OR
    (135) MUL_OP -> . SHR
    (136) MUL_OP -> . SHL
    (137) MUL_OP -> . AND
    (138) MUL_OP -> . MOD
    (139) MUL_OP -> . DIV
    (140) MUL_OP -> . STAR
    (131) ADD_OP -> . XOR
    (132) ADD_OP -> . OR
    (133) ADD_OP -> . MINUS
    (134) ADD_OP -> . PLUS
    (125) REL_OP -> . GE
    (126) REL_OP -> . GT
    (127) REL_OP -> . LE
    (128) REL_OP -> . LT
    (129) REL_OP -> . NE
    (130) REL_OP -> . EQ
    )               shift and go to state 169
    LOGIC_AND       shift and go to state 104
    LOGIC_OR        shift and go to state 105
    SHR             shift and go to state 106
    SHL             shift and go to state 107
    AND             shift and go to state 108
    MOD             shift and go to state 109
    DIV             shift and go to state 110
    STAR            shift and go to state 111
    XOR             shift and go to state 112
    OR              shift and go to state 113
    MINUS           shift and go to state 114
    PLUS            shift and go to state 115
    GE              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    LT              shift and go to state 119
    NE              shift and go to state 120
    EQ              shift and go to state 121

    BINARY_OP                      shift and go to state 100
    MUL_OP                         shift and go to state 101
    ADD_OP                         shift and go to state 102
    REL_OP                         shift and go to state 103

state 129

    (98) FLOAT_LIT -> . DECIMAL_LIT .
    EXPONENT        reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    (               reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    SHR             reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    SHL             reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    AND             reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    MOD             reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    DIV             reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    STAR            reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    XOR             reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    OR              reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    MINUS           reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    PLUS            reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    GE              reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    GT              reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    LE              reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    LT              reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    NE              reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    EQ              reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    NEWL            reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    ;               reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    )               reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    ,               reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)
    }               reduce using rule 98 (FLOAT_LIT -> . DECIMAL_LIT .)


state 130

    (93) basicLit -> FLOAT_LIT EXPONENT .
    (               reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    LOGIC_AND       reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    LOGIC_OR        reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    SHR             reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    SHL             reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    AND             reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    MOD             reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    DIV             reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    STAR            reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    XOR             reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    OR              reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    MINUS           reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    PLUS            reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    GE              reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    GT              reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    LE              reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    LT              reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    NE              reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    EQ              reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    NEWL            reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    ;               reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    )               reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    ,               reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)
    }               reduce using rule 93 (basicLit -> FLOAT_LIT EXPONENT .)


state 131

    (92) basicLit -> DECIMAL_LIT EXPONENT .
    (               reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    LOGIC_AND       reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    LOGIC_OR        reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    SHR             reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    SHL             reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    AND             reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    MOD             reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    DIV             reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    STAR            reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    XOR             reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    OR              reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    MINUS           reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    PLUS            reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    GE              reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    GT              reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    LE              reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    LT              reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    NE              reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    EQ              reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    NEWL            reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    ;               reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    )               reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    ,               reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)
    }               reduce using rule 92 (basicLit -> DECIMAL_LIT EXPONENT .)


state 132

    (99) FLOAT_LIT -> DECIMAL_LIT . .
    (100) FLOAT_LIT -> DECIMAL_LIT . . DECIMAL_LIT
    EXPONENT        reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    (               reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    LOGIC_AND       reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    LOGIC_OR        reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    SHR             reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    SHL             reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    AND             reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    MOD             reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    DIV             reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    STAR            reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    XOR             reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    OR              reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    MINUS           reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    PLUS            reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    GE              reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    GT              reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    LE              reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    LT              reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    NE              reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    EQ              reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    NEWL            reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    ;               reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    )               reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    ,               reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    }               reduce using rule 99 (FLOAT_LIT -> DECIMAL_LIT . .)
    DECIMAL_LIT     shift and go to state 170


state 133

    (13) topLevelDecls -> topLevelDecls topLevelDecl eos .
    (105) eos -> eos . NEWL
    (107) eos -> eos . ;
    FN              reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    IDENTIFIER      reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    AND             reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    EXCLM           reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    MINUS           reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    (               reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    STRING          reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    BOOL            reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    RUNE            reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    DECIMAL_LIT     reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    FALSE           reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    TRUE            reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    RUNE_LIT        reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    STRING_LIT      reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    F32             reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    F64             reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    INT             reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    ISIZE           reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I64             reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I32             reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I16             reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I8              reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    UINT            reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    USIZE           reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U64             reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U32             reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U16             reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U8              reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    HEX_LIT         reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    OCTAL_LIT       reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    BINARY_LIT      reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    .               reduce using rule 13 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    NEWL            shift and go to state 136
    ;               shift and go to state 137


state 134

    (3) sourceFile -> importDecls topLevelDecls orphanStmtList .
    $end            reduce using rule 3 (sourceFile -> importDecls topLevelDecls orphanStmtList .)


state 135

    (5) importDecls -> importDecls importDecl eos .
    (105) eos -> eos . NEWL
    (107) eos -> eos . ;
    IMPORT          reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    FN              reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    IDENTIFIER      reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    AND             reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    EXCLM           reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    MINUS           reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    (               reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    STRING          reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    BOOL            reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    RUNE            reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    DECIMAL_LIT     reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    FALSE           reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    TRUE            reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    RUNE_LIT        reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    STRING_LIT      reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    F32             reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    F64             reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    INT             reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    ISIZE           reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    I64             reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    I32             reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    I16             reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    I8              reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    UINT            reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    USIZE           reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    U64             reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    U32             reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    U16             reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    U8              reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    HEX_LIT         reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    OCTAL_LIT       reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    BINARY_LIT      reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    .               reduce using rule 5 (importDecls -> importDecls importDecl eos .)
    NEWL            shift and go to state 136
    ;               shift and go to state 137


state 136

    (105) eos -> eos NEWL .
    NEWL            reduce using rule 105 (eos -> eos NEWL .)
    ;               reduce using rule 105 (eos -> eos NEWL .)
    FN              reduce using rule 105 (eos -> eos NEWL .)
    IDENTIFIER      reduce using rule 105 (eos -> eos NEWL .)
    AND             reduce using rule 105 (eos -> eos NEWL .)
    EXCLM           reduce using rule 105 (eos -> eos NEWL .)
    MINUS           reduce using rule 105 (eos -> eos NEWL .)
    (               reduce using rule 105 (eos -> eos NEWL .)
    STRING          reduce using rule 105 (eos -> eos NEWL .)
    BOOL            reduce using rule 105 (eos -> eos NEWL .)
    RUNE            reduce using rule 105 (eos -> eos NEWL .)
    DECIMAL_LIT     reduce using rule 105 (eos -> eos NEWL .)
    FALSE           reduce using rule 105 (eos -> eos NEWL .)
    TRUE            reduce using rule 105 (eos -> eos NEWL .)
    RUNE_LIT        reduce using rule 105 (eos -> eos NEWL .)
    STRING_LIT      reduce using rule 105 (eos -> eos NEWL .)
    F32             reduce using rule 105 (eos -> eos NEWL .)
    F64             reduce using rule 105 (eos -> eos NEWL .)
    INT             reduce using rule 105 (eos -> eos NEWL .)
    ISIZE           reduce using rule 105 (eos -> eos NEWL .)
    I64             reduce using rule 105 (eos -> eos NEWL .)
    I32             reduce using rule 105 (eos -> eos NEWL .)
    I16             reduce using rule 105 (eos -> eos NEWL .)
    I8              reduce using rule 105 (eos -> eos NEWL .)
    UINT            reduce using rule 105 (eos -> eos NEWL .)
    USIZE           reduce using rule 105 (eos -> eos NEWL .)
    U64             reduce using rule 105 (eos -> eos NEWL .)
    U32             reduce using rule 105 (eos -> eos NEWL .)
    U16             reduce using rule 105 (eos -> eos NEWL .)
    U8              reduce using rule 105 (eos -> eos NEWL .)
    HEX_LIT         reduce using rule 105 (eos -> eos NEWL .)
    OCTAL_LIT       reduce using rule 105 (eos -> eos NEWL .)
    BINARY_LIT      reduce using rule 105 (eos -> eos NEWL .)
    .               reduce using rule 105 (eos -> eos NEWL .)
    $end            reduce using rule 105 (eos -> eos NEWL .)
    IMPORT          reduce using rule 105 (eos -> eos NEWL .)


state 137

    (107) eos -> eos ; .
    NEWL            reduce using rule 107 (eos -> eos ; .)
    ;               reduce using rule 107 (eos -> eos ; .)
    FN              reduce using rule 107 (eos -> eos ; .)
    IDENTIFIER      reduce using rule 107 (eos -> eos ; .)
    AND             reduce using rule 107 (eos -> eos ; .)
    EXCLM           reduce using rule 107 (eos -> eos ; .)
    MINUS           reduce using rule 107 (eos -> eos ; .)
    (               reduce using rule 107 (eos -> eos ; .)
    STRING          reduce using rule 107 (eos -> eos ; .)
    BOOL            reduce using rule 107 (eos -> eos ; .)
    RUNE            reduce using rule 107 (eos -> eos ; .)
    DECIMAL_LIT     reduce using rule 107 (eos -> eos ; .)
    FALSE           reduce using rule 107 (eos -> eos ; .)
    TRUE            reduce using rule 107 (eos -> eos ; .)
    RUNE_LIT        reduce using rule 107 (eos -> eos ; .)
    STRING_LIT      reduce using rule 107 (eos -> eos ; .)
    F32             reduce using rule 107 (eos -> eos ; .)
    F64             reduce using rule 107 (eos -> eos ; .)
    INT             reduce using rule 107 (eos -> eos ; .)
    ISIZE           reduce using rule 107 (eos -> eos ; .)
    I64             reduce using rule 107 (eos -> eos ; .)
    I32             reduce using rule 107 (eos -> eos ; .)
    I16             reduce using rule 107 (eos -> eos ; .)
    I8              reduce using rule 107 (eos -> eos ; .)
    UINT            reduce using rule 107 (eos -> eos ; .)
    USIZE           reduce using rule 107 (eos -> eos ; .)
    U64             reduce using rule 107 (eos -> eos ; .)
    U32             reduce using rule 107 (eos -> eos ; .)
    U16             reduce using rule 107 (eos -> eos ; .)
    U8              reduce using rule 107 (eos -> eos ; .)
    HEX_LIT         reduce using rule 107 (eos -> eos ; .)
    OCTAL_LIT       reduce using rule 107 (eos -> eos ; .)
    BINARY_LIT      reduce using rule 107 (eos -> eos ; .)
    .               reduce using rule 107 (eos -> eos ; .)
    $end            reduce using rule 107 (eos -> eos ; .)
    IMPORT          reduce using rule 107 (eos -> eos ; .)


state 138

    (39) statementList -> statementList eos statement .
    NEWL            reduce using rule 39 (statementList -> statementList eos statement .)
    ;               reduce using rule 39 (statementList -> statementList eos statement .)
    }               reduce using rule 39 (statementList -> statementList eos statement .)


state 139

    (46) assignment -> identifierList . assign_op expressionList
    (20) identifierList -> identifierList . , IDENTIFIER
    (109) assign_op -> . SHR_ASGN
    (110) assign_op -> . SHL_ASGN
    (111) assign_op -> . MOD_ASGN
    (112) assign_op -> . DIV_ASGN
    (113) assign_op -> . OR_ASGN
    (114) assign_op -> . AND_ASGN
    (115) assign_op -> . STAR_ASGN
    (116) assign_op -> . XOR_ASGN
    (117) assign_op -> . MINUS_ASGN
    (118) assign_op -> . PLUS_ASGN
    (119) assign_op -> . ASSIGN
    ,               shift and go to state 87
    SHR_ASGN        shift and go to state 89
    SHL_ASGN        shift and go to state 90
    MOD_ASGN        shift and go to state 91
    DIV_ASGN        shift and go to state 92
    OR_ASGN         shift and go to state 93
    AND_ASGN        shift and go to state 94
    STAR_ASGN       shift and go to state 95
    XOR_ASGN        shift and go to state 96
    MINUS_ASGN      shift and go to state 97
    PLUS_ASGN       shift and go to state 98
    ASSIGN          shift and go to state 99

    assign_op                      shift and go to state 88

state 140

    (12) importPath -> IDENTIFIER .
    NEWL            reduce using rule 12 (importPath -> IDENTIFIER .)
    ;               reduce using rule 12 (importPath -> IDENTIFIER .)


state 141

    (9) importSpec -> IDENTIFIER importPath .
    NEWL            reduce using rule 9 (importSpec -> IDENTIFIER importPath .)
    ;               reduce using rule 9 (importSpec -> IDENTIFIER importPath .)


state 142

    (10) importSpec -> . importPath .
    NEWL            reduce using rule 10 (importSpec -> . importPath .)
    ;               reduce using rule 10 (importSpec -> . importPath .)


state 143

    (22) functionDecl -> FN IDENTIFIER signature .
    (24) function_ -> signature . block
    (41) block -> . { statementList }
    NEWL            reduce using rule 22 (functionDecl -> FN IDENTIFIER signature .)
    ;               reduce using rule 22 (functionDecl -> FN IDENTIFIER signature .)
    {               shift and go to state 146

    block                          shift and go to state 145

state 144

    (23) functionDecl -> FN IDENTIFIER function_ .
    NEWL            reduce using rule 23 (functionDecl -> FN IDENTIFIER function_ .)
    ;               reduce using rule 23 (functionDecl -> FN IDENTIFIER function_ .)


state 145

    (24) function_ -> signature block .
    (               reduce using rule 24 (function_ -> signature block .)
    LOGIC_AND       reduce using rule 24 (function_ -> signature block .)
    LOGIC_OR        reduce using rule 24 (function_ -> signature block .)
    SHR             reduce using rule 24 (function_ -> signature block .)
    SHL             reduce using rule 24 (function_ -> signature block .)
    AND             reduce using rule 24 (function_ -> signature block .)
    MOD             reduce using rule 24 (function_ -> signature block .)
    DIV             reduce using rule 24 (function_ -> signature block .)
    STAR            reduce using rule 24 (function_ -> signature block .)
    XOR             reduce using rule 24 (function_ -> signature block .)
    OR              reduce using rule 24 (function_ -> signature block .)
    MINUS           reduce using rule 24 (function_ -> signature block .)
    PLUS            reduce using rule 24 (function_ -> signature block .)
    GE              reduce using rule 24 (function_ -> signature block .)
    GT              reduce using rule 24 (function_ -> signature block .)
    LE              reduce using rule 24 (function_ -> signature block .)
    LT              reduce using rule 24 (function_ -> signature block .)
    NE              reduce using rule 24 (function_ -> signature block .)
    EQ              reduce using rule 24 (function_ -> signature block .)
    NEWL            reduce using rule 24 (function_ -> signature block .)
    ;               reduce using rule 24 (function_ -> signature block .)
    )               reduce using rule 24 (function_ -> signature block .)
    ,               reduce using rule 24 (function_ -> signature block .)
    }               reduce using rule 24 (function_ -> signature block .)


state 146

    (41) block -> { . statementList }
    (39) statementList -> . statementList eos statement
    (40) statementList -> . statement
    (42) statement -> . simpleStmt
    (43) simpleStmt -> . assignment
    (44) simpleStmt -> . expressionStmt
    (46) assignment -> . identifierList assign_op expressionList
    (45) expressionStmt -> . expression
    (20) identifierList -> . identifierList , IDENTIFIER
    (21) identifierList -> . IDENTIFIER
    (54) expression -> . expression BINARY_OP unaryExpr
    (55) expression -> . unaryExpr
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IDENTIFIER      shift and go to state 13
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    FN              shift and go to state 124
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    statementList                  shift and go to state 171
    statement                      shift and go to state 10
    simpleStmt                     shift and go to state 15
    assignment                     shift and go to state 17
    expressionStmt                 shift and go to state 18
    identifierList                 shift and go to state 139
    expression                     shift and go to state 19
    unaryExpr                      shift and go to state 20
    UNARY_OP                       shift and go to state 21
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    type_                          shift and go to state 28
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    numericType                    shift and go to state 37
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 147

    (28) result -> parameters .
    {               reduce using rule 28 (result -> parameters .)
    NEWL            reduce using rule 28 (result -> parameters .)
    ;               reduce using rule 28 (result -> parameters .)


state 148

    (26) signature -> parameters result .
    {               reduce using rule 26 (signature -> parameters result .)
    NEWL            reduce using rule 26 (signature -> parameters result .)
    ;               reduce using rule 26 (signature -> parameters result .)


state 149

    (27) result -> type_ .
    {               reduce using rule 27 (result -> type_ .)
    NEWL            reduce using rule 27 (result -> type_ .)
    ;               reduce using rule 27 (result -> type_ .)


state 150

    (69) type_ -> qualifiedIdent .
    {               reduce using rule 69 (type_ -> qualifiedIdent .)
    NEWL            reduce using rule 69 (type_ -> qualifiedIdent .)
    ;               reduce using rule 69 (type_ -> qualifiedIdent .)
    ,               reduce using rule 69 (type_ -> qualifiedIdent .)
    )               reduce using rule 69 (type_ -> qualifiedIdent .)


state 151

    (71) qualifiedIdent -> IDENTIFIER . . IDENTIFIER
    .               shift and go to state 85


state 152

    (29) parameters -> ( parameterList . , )
    (30) parameters -> ( parameterList . )
    (32) parameterList -> parameterList . , parameterDecl
    ,               shift and go to state 172
    )               shift and go to state 173


state 153

    (31) parameters -> ( ) .
    (               reduce using rule 31 (parameters -> ( ) .)
    IDENTIFIER      reduce using rule 31 (parameters -> ( ) .)
    STRING          reduce using rule 31 (parameters -> ( ) .)
    BOOL            reduce using rule 31 (parameters -> ( ) .)
    RUNE            reduce using rule 31 (parameters -> ( ) .)
    F32             reduce using rule 31 (parameters -> ( ) .)
    F64             reduce using rule 31 (parameters -> ( ) .)
    INT             reduce using rule 31 (parameters -> ( ) .)
    ISIZE           reduce using rule 31 (parameters -> ( ) .)
    I64             reduce using rule 31 (parameters -> ( ) .)
    I32             reduce using rule 31 (parameters -> ( ) .)
    I16             reduce using rule 31 (parameters -> ( ) .)
    I8              reduce using rule 31 (parameters -> ( ) .)
    UINT            reduce using rule 31 (parameters -> ( ) .)
    USIZE           reduce using rule 31 (parameters -> ( ) .)
    U64             reduce using rule 31 (parameters -> ( ) .)
    U32             reduce using rule 31 (parameters -> ( ) .)
    U16             reduce using rule 31 (parameters -> ( ) .)
    U8              reduce using rule 31 (parameters -> ( ) .)
    {               reduce using rule 31 (parameters -> ( ) .)
    NEWL            reduce using rule 31 (parameters -> ( ) .)
    ;               reduce using rule 31 (parameters -> ( ) .)


state 154

    (33) parameterList -> parameterDecl .
    ,               reduce using rule 33 (parameterList -> parameterDecl .)
    )               reduce using rule 33 (parameterList -> parameterDecl .)


state 155

    (34) parameterDecl -> type_ .
    ,               reduce using rule 34 (parameterDecl -> type_ .)
    )               reduce using rule 34 (parameterDecl -> type_ .)


state 156

    (35) parameterDecl -> identifierList . type_
    (20) identifierList -> identifierList . , IDENTIFIER
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    ,               shift and go to state 87
    IDENTIFIER      shift and go to state 151
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61

    type_                          shift and go to state 174
    qualifiedIdent                 shift and go to state 150
    typeName                       shift and go to state 33
    numericType                    shift and go to state 37

state 157

    (21) identifierList -> IDENTIFIER .
    (71) qualifiedIdent -> IDENTIFIER . . IDENTIFIER
    ,               reduce using rule 21 (identifierList -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 21 (identifierList -> IDENTIFIER .)
    STRING          reduce using rule 21 (identifierList -> IDENTIFIER .)
    BOOL            reduce using rule 21 (identifierList -> IDENTIFIER .)
    RUNE            reduce using rule 21 (identifierList -> IDENTIFIER .)
    F32             reduce using rule 21 (identifierList -> IDENTIFIER .)
    F64             reduce using rule 21 (identifierList -> IDENTIFIER .)
    INT             reduce using rule 21 (identifierList -> IDENTIFIER .)
    ISIZE           reduce using rule 21 (identifierList -> IDENTIFIER .)
    I64             reduce using rule 21 (identifierList -> IDENTIFIER .)
    I32             reduce using rule 21 (identifierList -> IDENTIFIER .)
    I16             reduce using rule 21 (identifierList -> IDENTIFIER .)
    I8              reduce using rule 21 (identifierList -> IDENTIFIER .)
    UINT            reduce using rule 21 (identifierList -> IDENTIFIER .)
    USIZE           reduce using rule 21 (identifierList -> IDENTIFIER .)
    U64             reduce using rule 21 (identifierList -> IDENTIFIER .)
    U32             reduce using rule 21 (identifierList -> IDENTIFIER .)
    U16             reduce using rule 21 (identifierList -> IDENTIFIER .)
    U8              reduce using rule 21 (identifierList -> IDENTIFIER .)
    .               shift and go to state 85


state 158

    (71) qualifiedIdent -> IDENTIFIER . IDENTIFIER .
    (               reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    LOGIC_AND       reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    LOGIC_OR        reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    SHR             reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    SHL             reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    AND             reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    MOD             reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    DIV             reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    STAR            reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    XOR             reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    OR              reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    MINUS           reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    PLUS            reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    GE              reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    GT              reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    LE              reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    LT              reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    NE              reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    EQ              reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    NEWL            reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    ;               reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    )               reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    ,               reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    }               reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    {               reduce using rule 71 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)


state 159

    (19) varDecl -> identifierList DECL_ASGN expressionList .
    (37) expressionList -> expressionList . , expression
    NEWL            reduce using rule 19 (varDecl -> identifierList DECL_ASGN expressionList .)
    ;               reduce using rule 19 (varDecl -> identifierList DECL_ASGN expressionList .)
    ,               shift and go to state 175


state 160

    (38) expressionList -> expression .
    (54) expression -> expression . BINARY_OP unaryExpr
    (120) BINARY_OP -> . MUL_OP
    (121) BINARY_OP -> . ADD_OP
    (122) BINARY_OP -> . REL_OP
    (123) BINARY_OP -> . LOGIC_AND
    (124) BINARY_OP -> . LOGIC_OR
    (135) MUL_OP -> . SHR
    (136) MUL_OP -> . SHL
    (137) MUL_OP -> . AND
    (138) MUL_OP -> . MOD
    (139) MUL_OP -> . DIV
    (140) MUL_OP -> . STAR
    (131) ADD_OP -> . XOR
    (132) ADD_OP -> . OR
    (133) ADD_OP -> . MINUS
    (134) ADD_OP -> . PLUS
    (125) REL_OP -> . GE
    (126) REL_OP -> . GT
    (127) REL_OP -> . LE
    (128) REL_OP -> . LT
    (129) REL_OP -> . NE
    (130) REL_OP -> . EQ
    ,               reduce using rule 38 (expressionList -> expression .)
    NEWL            reduce using rule 38 (expressionList -> expression .)
    ;               reduce using rule 38 (expressionList -> expression .)
    }               reduce using rule 38 (expressionList -> expression .)
    )               reduce using rule 38 (expressionList -> expression .)
    LOGIC_AND       shift and go to state 104
    LOGIC_OR        shift and go to state 105
    SHR             shift and go to state 106
    SHL             shift and go to state 107
    AND             shift and go to state 108
    MOD             shift and go to state 109
    DIV             shift and go to state 110
    STAR            shift and go to state 111
    XOR             shift and go to state 112
    OR              shift and go to state 113
    MINUS           shift and go to state 114
    PLUS            shift and go to state 115
    GE              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    LT              shift and go to state 119
    NE              shift and go to state 120
    EQ              shift and go to state 121

    BINARY_OP                      shift and go to state 100
    MUL_OP                         shift and go to state 101
    ADD_OP                         shift and go to state 102
    REL_OP                         shift and go to state 103

state 161

    (20) identifierList -> identifierList , IDENTIFIER .
    DECL_ASGN       reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    ,               reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    SHR_ASGN        reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    SHL_ASGN        reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    MOD_ASGN        reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    DIV_ASGN        reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    OR_ASGN         reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    AND_ASGN        reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    STAR_ASGN       reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    XOR_ASGN        reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    MINUS_ASGN      reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    PLUS_ASGN       reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    ASSIGN          reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    IDENTIFIER      reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    STRING          reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    BOOL            reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    RUNE            reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    F32             reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    F64             reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    INT             reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    ISIZE           reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    I64             reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    I32             reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    I16             reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    I8              reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    UINT            reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    USIZE           reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    U64             reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    U32             reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    U16             reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)
    U8              reduce using rule 20 (identifierList -> identifierList , IDENTIFIER .)


state 162

    (46) assignment -> identifierList assign_op expressionList .
    (37) expressionList -> expressionList . , expression
    NEWL            reduce using rule 46 (assignment -> identifierList assign_op expressionList .)
    ;               reduce using rule 46 (assignment -> identifierList assign_op expressionList .)
    }               reduce using rule 46 (assignment -> identifierList assign_op expressionList .)
    ,               shift and go to state 175


state 163

    (54) expression -> expression BINARY_OP unaryExpr .
    LOGIC_AND       reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    LOGIC_OR        reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    SHR             reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    SHL             reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    AND             reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    MOD             reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    DIV             reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    STAR            reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    XOR             reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    OR              reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    MINUS           reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    PLUS            reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    GE              reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    GT              reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    LE              reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    LT              reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    NE              reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    EQ              reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    NEWL            reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    ;               reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    )               reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    ,               reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)
    }               reduce using rule 54 (expression -> expression BINARY_OP unaryExpr .)


state 164

    (47) arguments -> ( type_ . , expressionList , )
    (48) arguments -> ( type_ . , expressionList )
    (49) arguments -> ( type_ . , )
    (50) arguments -> ( type_ . )
    (68) conversion -> type_ . ( expression )
    ,               shift and go to state 176
    )               shift and go to state 177
    (               shift and go to state 127


state 165

    (51) arguments -> ( expressionList . , )
    (52) arguments -> ( expressionList . )
    (37) expressionList -> expressionList . , expression
    ,               shift and go to state 178
    )               shift and go to state 179


state 166

    (53) arguments -> ( ) .
    (               reduce using rule 53 (arguments -> ( ) .)
    LOGIC_AND       reduce using rule 53 (arguments -> ( ) .)
    LOGIC_OR        reduce using rule 53 (arguments -> ( ) .)
    SHR             reduce using rule 53 (arguments -> ( ) .)
    SHL             reduce using rule 53 (arguments -> ( ) .)
    AND             reduce using rule 53 (arguments -> ( ) .)
    MOD             reduce using rule 53 (arguments -> ( ) .)
    DIV             reduce using rule 53 (arguments -> ( ) .)
    STAR            reduce using rule 53 (arguments -> ( ) .)
    XOR             reduce using rule 53 (arguments -> ( ) .)
    OR              reduce using rule 53 (arguments -> ( ) .)
    MINUS           reduce using rule 53 (arguments -> ( ) .)
    PLUS            reduce using rule 53 (arguments -> ( ) .)
    GE              reduce using rule 53 (arguments -> ( ) .)
    GT              reduce using rule 53 (arguments -> ( ) .)
    LE              reduce using rule 53 (arguments -> ( ) .)
    LT              reduce using rule 53 (arguments -> ( ) .)
    NE              reduce using rule 53 (arguments -> ( ) .)
    EQ              reduce using rule 53 (arguments -> ( ) .)
    NEWL            reduce using rule 53 (arguments -> ( ) .)
    ;               reduce using rule 53 (arguments -> ( ) .)
    )               reduce using rule 53 (arguments -> ( ) .)
    ,               reduce using rule 53 (arguments -> ( ) .)
    }               reduce using rule 53 (arguments -> ( ) .)


state 167

    (71) qualifiedIdent -> IDENTIFIER . . IDENTIFIER
    (65) operandName -> IDENTIFIER .
    .               shift and go to state 85
    (               reduce using rule 65 (operandName -> IDENTIFIER .)
    LOGIC_AND       reduce using rule 65 (operandName -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 65 (operandName -> IDENTIFIER .)
    SHR             reduce using rule 65 (operandName -> IDENTIFIER .)
    SHL             reduce using rule 65 (operandName -> IDENTIFIER .)
    AND             reduce using rule 65 (operandName -> IDENTIFIER .)
    MOD             reduce using rule 65 (operandName -> IDENTIFIER .)
    DIV             reduce using rule 65 (operandName -> IDENTIFIER .)
    STAR            reduce using rule 65 (operandName -> IDENTIFIER .)
    XOR             reduce using rule 65 (operandName -> IDENTIFIER .)
    OR              reduce using rule 65 (operandName -> IDENTIFIER .)
    MINUS           reduce using rule 65 (operandName -> IDENTIFIER .)
    PLUS            reduce using rule 65 (operandName -> IDENTIFIER .)
    GE              reduce using rule 65 (operandName -> IDENTIFIER .)
    GT              reduce using rule 65 (operandName -> IDENTIFIER .)
    LE              reduce using rule 65 (operandName -> IDENTIFIER .)
    LT              reduce using rule 65 (operandName -> IDENTIFIER .)
    NE              reduce using rule 65 (operandName -> IDENTIFIER .)
    EQ              reduce using rule 65 (operandName -> IDENTIFIER .)
    ,               reduce using rule 65 (operandName -> IDENTIFIER .)
    )               reduce using rule 65 (operandName -> IDENTIFIER .)


state 168

    (68) conversion -> type_ ( expression . )
    (54) expression -> expression . BINARY_OP unaryExpr
    (120) BINARY_OP -> . MUL_OP
    (121) BINARY_OP -> . ADD_OP
    (122) BINARY_OP -> . REL_OP
    (123) BINARY_OP -> . LOGIC_AND
    (124) BINARY_OP -> . LOGIC_OR
    (135) MUL_OP -> . SHR
    (136) MUL_OP -> . SHL
    (137) MUL_OP -> . AND
    (138) MUL_OP -> . MOD
    (139) MUL_OP -> . DIV
    (140) MUL_OP -> . STAR
    (131) ADD_OP -> . XOR
    (132) ADD_OP -> . OR
    (133) ADD_OP -> . MINUS
    (134) ADD_OP -> . PLUS
    (125) REL_OP -> . GE
    (126) REL_OP -> . GT
    (127) REL_OP -> . LE
    (128) REL_OP -> . LT
    (129) REL_OP -> . NE
    (130) REL_OP -> . EQ
    )               shift and go to state 180
    LOGIC_AND       shift and go to state 104
    LOGIC_OR        shift and go to state 105
    SHR             shift and go to state 106
    SHL             shift and go to state 107
    AND             shift and go to state 108
    MOD             shift and go to state 109
    DIV             shift and go to state 110
    STAR            shift and go to state 111
    XOR             shift and go to state 112
    OR              shift and go to state 113
    MINUS           shift and go to state 114
    PLUS            shift and go to state 115
    GE              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    LT              shift and go to state 119
    NE              shift and go to state 120
    EQ              shift and go to state 121

    BINARY_OP                      shift and go to state 100
    MUL_OP                         shift and go to state 101
    ADD_OP                         shift and go to state 102
    REL_OP                         shift and go to state 103

state 169

    (61) operand -> ( expression ) .
    (               reduce using rule 61 (operand -> ( expression ) .)
    LOGIC_AND       reduce using rule 61 (operand -> ( expression ) .)
    LOGIC_OR        reduce using rule 61 (operand -> ( expression ) .)
    SHR             reduce using rule 61 (operand -> ( expression ) .)
    SHL             reduce using rule 61 (operand -> ( expression ) .)
    AND             reduce using rule 61 (operand -> ( expression ) .)
    MOD             reduce using rule 61 (operand -> ( expression ) .)
    DIV             reduce using rule 61 (operand -> ( expression ) .)
    STAR            reduce using rule 61 (operand -> ( expression ) .)
    XOR             reduce using rule 61 (operand -> ( expression ) .)
    OR              reduce using rule 61 (operand -> ( expression ) .)
    MINUS           reduce using rule 61 (operand -> ( expression ) .)
    PLUS            reduce using rule 61 (operand -> ( expression ) .)
    GE              reduce using rule 61 (operand -> ( expression ) .)
    GT              reduce using rule 61 (operand -> ( expression ) .)
    LE              reduce using rule 61 (operand -> ( expression ) .)
    LT              reduce using rule 61 (operand -> ( expression ) .)
    NE              reduce using rule 61 (operand -> ( expression ) .)
    EQ              reduce using rule 61 (operand -> ( expression ) .)
    NEWL            reduce using rule 61 (operand -> ( expression ) .)
    ;               reduce using rule 61 (operand -> ( expression ) .)
    )               reduce using rule 61 (operand -> ( expression ) .)
    ,               reduce using rule 61 (operand -> ( expression ) .)
    }               reduce using rule 61 (operand -> ( expression ) .)


state 170

    (100) FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .
    EXPONENT        reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    (               reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    SHR             reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    SHL             reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    AND             reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    MOD             reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    DIV             reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    STAR            reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    XOR             reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    OR              reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    MINUS           reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    PLUS            reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    GE              reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    GT              reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LE              reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LT              reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    NE              reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    EQ              reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    NEWL            reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    ;               reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    )               reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    ,               reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    }               reduce using rule 100 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)


state 171

    (41) block -> { statementList . }
    (39) statementList -> statementList . eos statement
    (105) eos -> . eos NEWL
    (106) eos -> . NEWL
    (107) eos -> . eos ;
    (108) eos -> . ;
    }               shift and go to state 181
    NEWL            shift and go to state 71
    ;               shift and go to state 72

    eos                            shift and go to state 182

state 172

    (29) parameters -> ( parameterList , . )
    (32) parameterList -> parameterList , . parameterDecl
    (34) parameterDecl -> . type_
    (35) parameterDecl -> . identifierList type_
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (20) identifierList -> . identifierList , IDENTIFIER
    (21) identifierList -> . IDENTIFIER
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    )               shift and go to state 183
    IDENTIFIER      shift and go to state 157
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61

    parameterDecl                  shift and go to state 184
    type_                          shift and go to state 155
    identifierList                 shift and go to state 156
    qualifiedIdent                 shift and go to state 150
    typeName                       shift and go to state 33
    numericType                    shift and go to state 37

state 173

    (30) parameters -> ( parameterList ) .
    (               reduce using rule 30 (parameters -> ( parameterList ) .)
    IDENTIFIER      reduce using rule 30 (parameters -> ( parameterList ) .)
    STRING          reduce using rule 30 (parameters -> ( parameterList ) .)
    BOOL            reduce using rule 30 (parameters -> ( parameterList ) .)
    RUNE            reduce using rule 30 (parameters -> ( parameterList ) .)
    F32             reduce using rule 30 (parameters -> ( parameterList ) .)
    F64             reduce using rule 30 (parameters -> ( parameterList ) .)
    INT             reduce using rule 30 (parameters -> ( parameterList ) .)
    ISIZE           reduce using rule 30 (parameters -> ( parameterList ) .)
    I64             reduce using rule 30 (parameters -> ( parameterList ) .)
    I32             reduce using rule 30 (parameters -> ( parameterList ) .)
    I16             reduce using rule 30 (parameters -> ( parameterList ) .)
    I8              reduce using rule 30 (parameters -> ( parameterList ) .)
    UINT            reduce using rule 30 (parameters -> ( parameterList ) .)
    USIZE           reduce using rule 30 (parameters -> ( parameterList ) .)
    U64             reduce using rule 30 (parameters -> ( parameterList ) .)
    U32             reduce using rule 30 (parameters -> ( parameterList ) .)
    U16             reduce using rule 30 (parameters -> ( parameterList ) .)
    U8              reduce using rule 30 (parameters -> ( parameterList ) .)
    {               reduce using rule 30 (parameters -> ( parameterList ) .)
    NEWL            reduce using rule 30 (parameters -> ( parameterList ) .)
    ;               reduce using rule 30 (parameters -> ( parameterList ) .)


state 174

    (35) parameterDecl -> identifierList type_ .
    ,               reduce using rule 35 (parameterDecl -> identifierList type_ .)
    )               reduce using rule 35 (parameterDecl -> identifierList type_ .)


state 175

    (37) expressionList -> expressionList , . expression
    (54) expression -> . expression BINARY_OP unaryExpr
    (55) expression -> . unaryExpr
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    IDENTIFIER      shift and go to state 123
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    FN              shift and go to state 124
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    expression                     shift and go to state 185
    unaryExpr                      shift and go to state 20
    UNARY_OP                       shift and go to state 21
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    type_                          shift and go to state 28
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    numericType                    shift and go to state 37
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 176

    (47) arguments -> ( type_ , . expressionList , )
    (48) arguments -> ( type_ , . expressionList )
    (49) arguments -> ( type_ , . )
    (37) expressionList -> . expressionList , expression
    (38) expressionList -> . expression
    (54) expression -> . expression BINARY_OP unaryExpr
    (55) expression -> . unaryExpr
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    )               shift and go to state 187
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    IDENTIFIER      shift and go to state 123
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    FN              shift and go to state 124
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    type_                          shift and go to state 28
    expressionList                 shift and go to state 186
    expression                     shift and go to state 160
    unaryExpr                      shift and go to state 20
    UNARY_OP                       shift and go to state 21
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    numericType                    shift and go to state 37
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 177

    (50) arguments -> ( type_ ) .
    (               reduce using rule 50 (arguments -> ( type_ ) .)
    LOGIC_AND       reduce using rule 50 (arguments -> ( type_ ) .)
    LOGIC_OR        reduce using rule 50 (arguments -> ( type_ ) .)
    SHR             reduce using rule 50 (arguments -> ( type_ ) .)
    SHL             reduce using rule 50 (arguments -> ( type_ ) .)
    AND             reduce using rule 50 (arguments -> ( type_ ) .)
    MOD             reduce using rule 50 (arguments -> ( type_ ) .)
    DIV             reduce using rule 50 (arguments -> ( type_ ) .)
    STAR            reduce using rule 50 (arguments -> ( type_ ) .)
    XOR             reduce using rule 50 (arguments -> ( type_ ) .)
    OR              reduce using rule 50 (arguments -> ( type_ ) .)
    MINUS           reduce using rule 50 (arguments -> ( type_ ) .)
    PLUS            reduce using rule 50 (arguments -> ( type_ ) .)
    GE              reduce using rule 50 (arguments -> ( type_ ) .)
    GT              reduce using rule 50 (arguments -> ( type_ ) .)
    LE              reduce using rule 50 (arguments -> ( type_ ) .)
    LT              reduce using rule 50 (arguments -> ( type_ ) .)
    NE              reduce using rule 50 (arguments -> ( type_ ) .)
    EQ              reduce using rule 50 (arguments -> ( type_ ) .)
    NEWL            reduce using rule 50 (arguments -> ( type_ ) .)
    ;               reduce using rule 50 (arguments -> ( type_ ) .)
    )               reduce using rule 50 (arguments -> ( type_ ) .)
    ,               reduce using rule 50 (arguments -> ( type_ ) .)
    }               reduce using rule 50 (arguments -> ( type_ ) .)


state 178

    (51) arguments -> ( expressionList , . )
    (37) expressionList -> expressionList , . expression
    (54) expression -> . expression BINARY_OP unaryExpr
    (55) expression -> . unaryExpr
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    )               shift and go to state 188
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    IDENTIFIER      shift and go to state 123
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    FN              shift and go to state 124
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    expression                     shift and go to state 185
    unaryExpr                      shift and go to state 20
    UNARY_OP                       shift and go to state 21
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    type_                          shift and go to state 28
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    numericType                    shift and go to state 37
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 179

    (52) arguments -> ( expressionList ) .
    (               reduce using rule 52 (arguments -> ( expressionList ) .)
    LOGIC_AND       reduce using rule 52 (arguments -> ( expressionList ) .)
    LOGIC_OR        reduce using rule 52 (arguments -> ( expressionList ) .)
    SHR             reduce using rule 52 (arguments -> ( expressionList ) .)
    SHL             reduce using rule 52 (arguments -> ( expressionList ) .)
    AND             reduce using rule 52 (arguments -> ( expressionList ) .)
    MOD             reduce using rule 52 (arguments -> ( expressionList ) .)
    DIV             reduce using rule 52 (arguments -> ( expressionList ) .)
    STAR            reduce using rule 52 (arguments -> ( expressionList ) .)
    XOR             reduce using rule 52 (arguments -> ( expressionList ) .)
    OR              reduce using rule 52 (arguments -> ( expressionList ) .)
    MINUS           reduce using rule 52 (arguments -> ( expressionList ) .)
    PLUS            reduce using rule 52 (arguments -> ( expressionList ) .)
    GE              reduce using rule 52 (arguments -> ( expressionList ) .)
    GT              reduce using rule 52 (arguments -> ( expressionList ) .)
    LE              reduce using rule 52 (arguments -> ( expressionList ) .)
    LT              reduce using rule 52 (arguments -> ( expressionList ) .)
    NE              reduce using rule 52 (arguments -> ( expressionList ) .)
    EQ              reduce using rule 52 (arguments -> ( expressionList ) .)
    NEWL            reduce using rule 52 (arguments -> ( expressionList ) .)
    ;               reduce using rule 52 (arguments -> ( expressionList ) .)
    )               reduce using rule 52 (arguments -> ( expressionList ) .)
    ,               reduce using rule 52 (arguments -> ( expressionList ) .)
    }               reduce using rule 52 (arguments -> ( expressionList ) .)


state 180

    (68) conversion -> type_ ( expression ) .
    (               reduce using rule 68 (conversion -> type_ ( expression ) .)
    LOGIC_AND       reduce using rule 68 (conversion -> type_ ( expression ) .)
    LOGIC_OR        reduce using rule 68 (conversion -> type_ ( expression ) .)
    SHR             reduce using rule 68 (conversion -> type_ ( expression ) .)
    SHL             reduce using rule 68 (conversion -> type_ ( expression ) .)
    AND             reduce using rule 68 (conversion -> type_ ( expression ) .)
    MOD             reduce using rule 68 (conversion -> type_ ( expression ) .)
    DIV             reduce using rule 68 (conversion -> type_ ( expression ) .)
    STAR            reduce using rule 68 (conversion -> type_ ( expression ) .)
    XOR             reduce using rule 68 (conversion -> type_ ( expression ) .)
    OR              reduce using rule 68 (conversion -> type_ ( expression ) .)
    MINUS           reduce using rule 68 (conversion -> type_ ( expression ) .)
    PLUS            reduce using rule 68 (conversion -> type_ ( expression ) .)
    GE              reduce using rule 68 (conversion -> type_ ( expression ) .)
    GT              reduce using rule 68 (conversion -> type_ ( expression ) .)
    LE              reduce using rule 68 (conversion -> type_ ( expression ) .)
    LT              reduce using rule 68 (conversion -> type_ ( expression ) .)
    NE              reduce using rule 68 (conversion -> type_ ( expression ) .)
    EQ              reduce using rule 68 (conversion -> type_ ( expression ) .)
    NEWL            reduce using rule 68 (conversion -> type_ ( expression ) .)
    ;               reduce using rule 68 (conversion -> type_ ( expression ) .)
    )               reduce using rule 68 (conversion -> type_ ( expression ) .)
    ,               reduce using rule 68 (conversion -> type_ ( expression ) .)
    }               reduce using rule 68 (conversion -> type_ ( expression ) .)


state 181

    (41) block -> { statementList } .
    (               reduce using rule 41 (block -> { statementList } .)
    LOGIC_AND       reduce using rule 41 (block -> { statementList } .)
    LOGIC_OR        reduce using rule 41 (block -> { statementList } .)
    SHR             reduce using rule 41 (block -> { statementList } .)
    SHL             reduce using rule 41 (block -> { statementList } .)
    AND             reduce using rule 41 (block -> { statementList } .)
    MOD             reduce using rule 41 (block -> { statementList } .)
    DIV             reduce using rule 41 (block -> { statementList } .)
    STAR            reduce using rule 41 (block -> { statementList } .)
    XOR             reduce using rule 41 (block -> { statementList } .)
    OR              reduce using rule 41 (block -> { statementList } .)
    MINUS           reduce using rule 41 (block -> { statementList } .)
    PLUS            reduce using rule 41 (block -> { statementList } .)
    GE              reduce using rule 41 (block -> { statementList } .)
    GT              reduce using rule 41 (block -> { statementList } .)
    LE              reduce using rule 41 (block -> { statementList } .)
    LT              reduce using rule 41 (block -> { statementList } .)
    NE              reduce using rule 41 (block -> { statementList } .)
    EQ              reduce using rule 41 (block -> { statementList } .)
    NEWL            reduce using rule 41 (block -> { statementList } .)
    ;               reduce using rule 41 (block -> { statementList } .)
    )               reduce using rule 41 (block -> { statementList } .)
    ,               reduce using rule 41 (block -> { statementList } .)
    }               reduce using rule 41 (block -> { statementList } .)


state 182

    (39) statementList -> statementList eos . statement
    (105) eos -> eos . NEWL
    (107) eos -> eos . ;
    (42) statement -> . simpleStmt
    (43) simpleStmt -> . assignment
    (44) simpleStmt -> . expressionStmt
    (46) assignment -> . identifierList assign_op expressionList
    (45) expressionStmt -> . expression
    (20) identifierList -> . identifierList , IDENTIFIER
    (21) identifierList -> . IDENTIFIER
    (54) expression -> . expression BINARY_OP unaryExpr
    (55) expression -> . unaryExpr
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    NEWL            shift and go to state 136
    ;               shift and go to state 137
    IDENTIFIER      shift and go to state 13
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    FN              shift and go to state 124
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    statement                      shift and go to state 138
    simpleStmt                     shift and go to state 15
    assignment                     shift and go to state 17
    expressionStmt                 shift and go to state 18
    identifierList                 shift and go to state 139
    expression                     shift and go to state 19
    unaryExpr                      shift and go to state 20
    UNARY_OP                       shift and go to state 21
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    type_                          shift and go to state 28
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    numericType                    shift and go to state 37
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 183

    (29) parameters -> ( parameterList , ) .
    (               reduce using rule 29 (parameters -> ( parameterList , ) .)
    IDENTIFIER      reduce using rule 29 (parameters -> ( parameterList , ) .)
    STRING          reduce using rule 29 (parameters -> ( parameterList , ) .)
    BOOL            reduce using rule 29 (parameters -> ( parameterList , ) .)
    RUNE            reduce using rule 29 (parameters -> ( parameterList , ) .)
    F32             reduce using rule 29 (parameters -> ( parameterList , ) .)
    F64             reduce using rule 29 (parameters -> ( parameterList , ) .)
    INT             reduce using rule 29 (parameters -> ( parameterList , ) .)
    ISIZE           reduce using rule 29 (parameters -> ( parameterList , ) .)
    I64             reduce using rule 29 (parameters -> ( parameterList , ) .)
    I32             reduce using rule 29 (parameters -> ( parameterList , ) .)
    I16             reduce using rule 29 (parameters -> ( parameterList , ) .)
    I8              reduce using rule 29 (parameters -> ( parameterList , ) .)
    UINT            reduce using rule 29 (parameters -> ( parameterList , ) .)
    USIZE           reduce using rule 29 (parameters -> ( parameterList , ) .)
    U64             reduce using rule 29 (parameters -> ( parameterList , ) .)
    U32             reduce using rule 29 (parameters -> ( parameterList , ) .)
    U16             reduce using rule 29 (parameters -> ( parameterList , ) .)
    U8              reduce using rule 29 (parameters -> ( parameterList , ) .)
    {               reduce using rule 29 (parameters -> ( parameterList , ) .)
    NEWL            reduce using rule 29 (parameters -> ( parameterList , ) .)
    ;               reduce using rule 29 (parameters -> ( parameterList , ) .)


state 184

    (32) parameterList -> parameterList , parameterDecl .
    ,               reduce using rule 32 (parameterList -> parameterList , parameterDecl .)
    )               reduce using rule 32 (parameterList -> parameterList , parameterDecl .)


state 185

    (37) expressionList -> expressionList , expression .
    (54) expression -> expression . BINARY_OP unaryExpr
    (120) BINARY_OP -> . MUL_OP
    (121) BINARY_OP -> . ADD_OP
    (122) BINARY_OP -> . REL_OP
    (123) BINARY_OP -> . LOGIC_AND
    (124) BINARY_OP -> . LOGIC_OR
    (135) MUL_OP -> . SHR
    (136) MUL_OP -> . SHL
    (137) MUL_OP -> . AND
    (138) MUL_OP -> . MOD
    (139) MUL_OP -> . DIV
    (140) MUL_OP -> . STAR
    (131) ADD_OP -> . XOR
    (132) ADD_OP -> . OR
    (133) ADD_OP -> . MINUS
    (134) ADD_OP -> . PLUS
    (125) REL_OP -> . GE
    (126) REL_OP -> . GT
    (127) REL_OP -> . LE
    (128) REL_OP -> . LT
    (129) REL_OP -> . NE
    (130) REL_OP -> . EQ
    ,               reduce using rule 37 (expressionList -> expressionList , expression .)
    NEWL            reduce using rule 37 (expressionList -> expressionList , expression .)
    ;               reduce using rule 37 (expressionList -> expressionList , expression .)
    }               reduce using rule 37 (expressionList -> expressionList , expression .)
    )               reduce using rule 37 (expressionList -> expressionList , expression .)
    LOGIC_AND       shift and go to state 104
    LOGIC_OR        shift and go to state 105
    SHR             shift and go to state 106
    SHL             shift and go to state 107
    AND             shift and go to state 108
    MOD             shift and go to state 109
    DIV             shift and go to state 110
    STAR            shift and go to state 111
    XOR             shift and go to state 112
    OR              shift and go to state 113
    MINUS           shift and go to state 114
    PLUS            shift and go to state 115
    GE              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    LT              shift and go to state 119
    NE              shift and go to state 120
    EQ              shift and go to state 121

    BINARY_OP                      shift and go to state 100
    MUL_OP                         shift and go to state 101
    ADD_OP                         shift and go to state 102
    REL_OP                         shift and go to state 103

state 186

    (47) arguments -> ( type_ , expressionList . , )
    (48) arguments -> ( type_ , expressionList . )
    (37) expressionList -> expressionList . , expression
    ,               shift and go to state 189
    )               shift and go to state 190


state 187

    (49) arguments -> ( type_ , ) .
    (               reduce using rule 49 (arguments -> ( type_ , ) .)
    LOGIC_AND       reduce using rule 49 (arguments -> ( type_ , ) .)
    LOGIC_OR        reduce using rule 49 (arguments -> ( type_ , ) .)
    SHR             reduce using rule 49 (arguments -> ( type_ , ) .)
    SHL             reduce using rule 49 (arguments -> ( type_ , ) .)
    AND             reduce using rule 49 (arguments -> ( type_ , ) .)
    MOD             reduce using rule 49 (arguments -> ( type_ , ) .)
    DIV             reduce using rule 49 (arguments -> ( type_ , ) .)
    STAR            reduce using rule 49 (arguments -> ( type_ , ) .)
    XOR             reduce using rule 49 (arguments -> ( type_ , ) .)
    OR              reduce using rule 49 (arguments -> ( type_ , ) .)
    MINUS           reduce using rule 49 (arguments -> ( type_ , ) .)
    PLUS            reduce using rule 49 (arguments -> ( type_ , ) .)
    GE              reduce using rule 49 (arguments -> ( type_ , ) .)
    GT              reduce using rule 49 (arguments -> ( type_ , ) .)
    LE              reduce using rule 49 (arguments -> ( type_ , ) .)
    LT              reduce using rule 49 (arguments -> ( type_ , ) .)
    NE              reduce using rule 49 (arguments -> ( type_ , ) .)
    EQ              reduce using rule 49 (arguments -> ( type_ , ) .)
    NEWL            reduce using rule 49 (arguments -> ( type_ , ) .)
    ;               reduce using rule 49 (arguments -> ( type_ , ) .)
    )               reduce using rule 49 (arguments -> ( type_ , ) .)
    ,               reduce using rule 49 (arguments -> ( type_ , ) .)
    }               reduce using rule 49 (arguments -> ( type_ , ) .)


state 188

    (51) arguments -> ( expressionList , ) .
    (               reduce using rule 51 (arguments -> ( expressionList , ) .)
    LOGIC_AND       reduce using rule 51 (arguments -> ( expressionList , ) .)
    LOGIC_OR        reduce using rule 51 (arguments -> ( expressionList , ) .)
    SHR             reduce using rule 51 (arguments -> ( expressionList , ) .)
    SHL             reduce using rule 51 (arguments -> ( expressionList , ) .)
    AND             reduce using rule 51 (arguments -> ( expressionList , ) .)
    MOD             reduce using rule 51 (arguments -> ( expressionList , ) .)
    DIV             reduce using rule 51 (arguments -> ( expressionList , ) .)
    STAR            reduce using rule 51 (arguments -> ( expressionList , ) .)
    XOR             reduce using rule 51 (arguments -> ( expressionList , ) .)
    OR              reduce using rule 51 (arguments -> ( expressionList , ) .)
    MINUS           reduce using rule 51 (arguments -> ( expressionList , ) .)
    PLUS            reduce using rule 51 (arguments -> ( expressionList , ) .)
    GE              reduce using rule 51 (arguments -> ( expressionList , ) .)
    GT              reduce using rule 51 (arguments -> ( expressionList , ) .)
    LE              reduce using rule 51 (arguments -> ( expressionList , ) .)
    LT              reduce using rule 51 (arguments -> ( expressionList , ) .)
    NE              reduce using rule 51 (arguments -> ( expressionList , ) .)
    EQ              reduce using rule 51 (arguments -> ( expressionList , ) .)
    NEWL            reduce using rule 51 (arguments -> ( expressionList , ) .)
    ;               reduce using rule 51 (arguments -> ( expressionList , ) .)
    )               reduce using rule 51 (arguments -> ( expressionList , ) .)
    ,               reduce using rule 51 (arguments -> ( expressionList , ) .)
    }               reduce using rule 51 (arguments -> ( expressionList , ) .)


state 189

    (47) arguments -> ( type_ , expressionList , . )
    (37) expressionList -> expressionList , . expression
    (54) expression -> . expression BINARY_OP unaryExpr
    (55) expression -> . unaryExpr
    (56) unaryExpr -> . UNARY_OP unaryExpr
    (57) unaryExpr -> . primaryExpr
    (141) UNARY_OP -> . AND
    (142) UNARY_OP -> . EXCLM
    (143) UNARY_OP -> . MINUS
    (58) primaryExpr -> . primaryExpr arguments
    (59) primaryExpr -> . conversion
    (60) primaryExpr -> . operand
    (68) conversion -> . type_ ( expression )
    (61) operand -> . ( expression )
    (62) operand -> . operandName
    (63) operand -> . literal
    (69) type_ -> . qualifiedIdent
    (70) type_ -> . typeName
    (64) operandName -> . qualifiedIdent
    (65) operandName -> . IDENTIFIER
    (66) literal -> . functionLit
    (67) literal -> . basicLit
    (71) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (72) typeName -> . numericType
    (73) typeName -> . STRING
    (74) typeName -> . BOOL
    (75) typeName -> . RUNE
    (36) functionLit -> . FN function_
    (90) basicLit -> . INT_LIT
    (91) basicLit -> . FLOAT_LIT
    (92) basicLit -> . DECIMAL_LIT EXPONENT
    (93) basicLit -> . FLOAT_LIT EXPONENT
    (94) basicLit -> . FALSE
    (95) basicLit -> . TRUE
    (96) basicLit -> . RUNE_LIT
    (97) basicLit -> . STRING_LIT
    (76) numericType -> . F32
    (77) numericType -> . F64
    (78) numericType -> . INT
    (79) numericType -> . ISIZE
    (80) numericType -> . I64
    (81) numericType -> . I32
    (82) numericType -> . I16
    (83) numericType -> . I8
    (84) numericType -> . UINT
    (85) numericType -> . USIZE
    (86) numericType -> . U64
    (87) numericType -> . U32
    (88) numericType -> . U16
    (89) numericType -> . U8
    (101) INT_LIT -> . HEX_LIT
    (102) INT_LIT -> . OCTAL_LIT
    (103) INT_LIT -> . BINARY_LIT
    (104) INT_LIT -> . DECIMAL_LIT
    (98) FLOAT_LIT -> . . DECIMAL_LIT
    (99) FLOAT_LIT -> . DECIMAL_LIT .
    (100) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    )               shift and go to state 191
    AND             shift and go to state 23
    EXCLM           shift and go to state 24
    MINUS           shift and go to state 25
    (               shift and go to state 29
    IDENTIFIER      shift and go to state 123
    STRING          shift and go to state 38
    BOOL            shift and go to state 39
    RUNE            shift and go to state 40
    FN              shift and go to state 124
    DECIMAL_LIT     shift and go to state 43
    FALSE           shift and go to state 44
    TRUE            shift and go to state 45
    RUNE_LIT        shift and go to state 46
    STRING_LIT      shift and go to state 47
    F32             shift and go to state 48
    F64             shift and go to state 49
    INT             shift and go to state 50
    ISIZE           shift and go to state 51
    I64             shift and go to state 52
    I32             shift and go to state 53
    I16             shift and go to state 54
    I8              shift and go to state 55
    UINT            shift and go to state 56
    USIZE           shift and go to state 57
    U64             shift and go to state 58
    U32             shift and go to state 59
    U16             shift and go to state 60
    U8              shift and go to state 61
    HEX_LIT         shift and go to state 62
    OCTAL_LIT       shift and go to state 63
    BINARY_LIT      shift and go to state 64
    .               shift and go to state 36

    type_                          shift and go to state 28
    expression                     shift and go to state 185
    unaryExpr                      shift and go to state 20
    UNARY_OP                       shift and go to state 21
    primaryExpr                    shift and go to state 22
    conversion                     shift and go to state 26
    operand                        shift and go to state 27
    operandName                    shift and go to state 30
    literal                        shift and go to state 31
    qualifiedIdent                 shift and go to state 32
    typeName                       shift and go to state 33
    functionLit                    shift and go to state 34
    basicLit                       shift and go to state 35
    numericType                    shift and go to state 37
    INT_LIT                        shift and go to state 41
    FLOAT_LIT                      shift and go to state 42

state 190

    (48) arguments -> ( type_ , expressionList ) .
    (               reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    LOGIC_AND       reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    LOGIC_OR        reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    SHR             reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    SHL             reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    AND             reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    MOD             reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    DIV             reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    STAR            reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    XOR             reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    OR              reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    MINUS           reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    PLUS            reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    GE              reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    GT              reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    LE              reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    LT              reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    NE              reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    EQ              reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    NEWL            reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    ;               reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    )               reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    ,               reduce using rule 48 (arguments -> ( type_ , expressionList ) .)
    }               reduce using rule 48 (arguments -> ( type_ , expressionList ) .)


state 191

    (47) arguments -> ( type_ , expressionList , ) .
    (               reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    LOGIC_AND       reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    LOGIC_OR        reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    SHR             reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    SHL             reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    AND             reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    MOD             reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    DIV             reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    STAR            reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    XOR             reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    OR              reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    MINUS           reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    PLUS            reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    GE              reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    GT              reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    LE              reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    LT              reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    NE              reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    EQ              reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    NEWL            reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    ;               reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    )               reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    ,               reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)
    }               reduce using rule 47 (arguments -> ( type_ , expressionList , ) .)


Conflicts:

reduce/reduce conflict in state 32 resolved using rule operandName -> qualifiedIdent
rejected rule (type_ -> qualifiedIdent) in state 32