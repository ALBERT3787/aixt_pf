Grammar:

Rule 0     S' -> sourceFile
Rule 1     sourceFile -> topLevelDecls
Rule 2     sourceFile -> moduleClause topLevelDecls
Rule 3     sourceFile -> cPreprocessors topLevelDecls
Rule 4     sourceFile -> importDecls topLevelDecls
Rule 5     sourceFile -> cPreprocessors moduleClause topLevelDecls
Rule 6     sourceFile -> cPreprocessors importDecls topLevelDecls
Rule 7     sourceFile -> moduleClause importDecls topLevelDecls
Rule 8     sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls
Rule 9     sourceFile -> orphanStmtList
Rule 10    sourceFile -> moduleClause orphanStmtList
Rule 11    sourceFile -> cPreprocessors orphanStmtList
Rule 12    sourceFile -> importDecls orphanStmtList
Rule 13    sourceFile -> cPreprocessors moduleClause orphanStmtList
Rule 14    sourceFile -> cPreprocessors importDecls orphanStmtList
Rule 15    sourceFile -> moduleClause importDecls orphanStmtList
Rule 16    sourceFile -> cPreprocessors moduleClause importDecls orphanStmtList
Rule 17    sourceFile -> topLevelDecls orphanStmtList
Rule 18    sourceFile -> moduleClause topLevelDecls orphanStmtList
Rule 19    sourceFile -> cPreprocessors topLevelDecls orphanStmtList
Rule 20    sourceFile -> importDecls topLevelDecls orphanStmtList
Rule 21    sourceFile -> cPreprocessors moduleClause topLevelDecls orphanStmtList
Rule 22    sourceFile -> cPreprocessors importDecls topLevelDecls orphanStmtList
Rule 23    sourceFile -> moduleClause importDecls topLevelDecls orphanStmtList
Rule 24    sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls orphanStmtList
Rule 25    moduleClause -> MODULE IDENTIFIER eos
Rule 26    cPreprocessors -> cPreprocessors cPreprocessor eos
Rule 27    cPreprocessors -> cPreprocessor eos
Rule 28    cPreprocessor -> C_PREPR C_STRING_LIT
Rule 29    cPreprocessor -> C_PREPR C_PATH_LIT
Rule 30    cPreprocessor -> C_PREPR IDENTIFIER expressionList
Rule 31    importDecls -> importDecls importDecl eos
Rule 32    importDecls -> importDecl eos
Rule 33    importDecl -> IMPORT importSpec
Rule 34    importSpec -> importPath
Rule 35    importSpec -> IDENTIFIER importPath
Rule 36    importSpec -> . importPath
Rule 37    importPath -> STRING_LIT
Rule 38    importPath -> IDENTIFIER
Rule 39    topLevelDecls -> topLevelDecls topLevelDecl eos
Rule 40    topLevelDecls -> topLevelDecl eos
Rule 41    orphanStmtList -> statementList eos
Rule 42    topLevelDecl -> functionDecl
Rule 43    topLevelDecl -> constDecl
Rule 44    declaration -> varDecl
Rule 45    varDecl -> identifierList DECL_ASGN expressionList
Rule 46    constDecl -> CONST ( eos constSpecs )
Rule 47    constDecl -> CONST ( constSpecs )
Rule 48    constDecl -> CONST constSpec
Rule 49    constSpecs -> constSpecs constSpec
Rule 50    constSpecs -> constSpec
Rule 51    constSpecs -> constSpecs constSpec eos
Rule 52    constSpecs -> constSpec eos
Rule 53    constSpec -> IDENTIFIER ASSIGN expression  [precedence=right, level=8]
Rule 54    identifierList -> identifierList , IDENTIFIER
Rule 55    identifierList -> IDENTIFIER
Rule 56    functionDecl -> FN IDENTIFIER signature
Rule 57    functionDecl -> FN IDENTIFIER function_
Rule 58    function_ -> signature block
Rule 59    signature -> parameters
Rule 60    signature -> parameters result
Rule 61    result -> type_
Rule 62    result -> parameters
Rule 63    parameters -> ( parameterList , )
Rule 64    parameters -> ( parameterList )
Rule 65    parameters -> ( )
Rule 66    parameterList -> parameterList , parameterDecl
Rule 67    parameterList -> parameterDecl
Rule 68    parameterDecl -> type_
Rule 69    parameterDecl -> identifierList type_
Rule 70    functionLit -> FN function_
Rule 71    expressionList -> expressionList , expression
Rule 72    expressionList -> expression
Rule 73    statementList -> statementList eos statement
Rule 74    statementList -> statement
Rule 75    block -> { statementList }
Rule 76    statement -> simpleStmt
Rule 77    statement -> declaration
Rule 78    simpleStmt -> assignment
Rule 79    simpleStmt -> expressionStmt
Rule 80    expressionStmt -> expression
Rule 81    assignment -> identifierList assign_op expressionList
Rule 82    arguments -> ( type_ , expressionList , )
Rule 83    arguments -> ( type_ , expressionList )
Rule 84    arguments -> ( type_ , )
Rule 85    arguments -> ( type_ )
Rule 86    arguments -> ( expressionList , )
Rule 87    arguments -> ( expressionList )
Rule 88    arguments -> ( )
Rule 89    expression -> expression BINARY_OP unaryExpr
Rule 90    expression -> unaryExpr
Rule 91    unaryExpr -> UNARY_OP unaryExpr  [precedence=right, level=7]
Rule 92    unaryExpr -> primaryExpr
Rule 93    primaryExpr -> primaryExpr arguments
Rule 94    primaryExpr -> conversion
Rule 95    primaryExpr -> operand
Rule 96    operand -> ( expression )
Rule 97    operand -> operandName
Rule 98    operand -> literal
Rule 99    operandName -> IDENTIFIER
Rule 100   literal -> functionLit
Rule 101   literal -> basicLit
Rule 102   conversion -> type_ ( expression )
Rule 103   type_ -> typeName
Rule 104   typeName -> numericType
Rule 105   typeName -> STRING
Rule 106   typeName -> BOOL
Rule 107   typeName -> RUNE
Rule 108   numericType -> F32
Rule 109   numericType -> F64
Rule 110   numericType -> INT
Rule 111   numericType -> ISIZE
Rule 112   numericType -> I64
Rule 113   numericType -> I32
Rule 114   numericType -> I16
Rule 115   numericType -> I8
Rule 116   numericType -> UINT
Rule 117   numericType -> USIZE
Rule 118   numericType -> U64
Rule 119   numericType -> U32
Rule 120   numericType -> U16
Rule 121   numericType -> U8
Rule 122   basicLit -> INT_LIT
Rule 123   basicLit -> FLOAT_LIT
Rule 124   basicLit -> DECIMAL_LIT EXPONENT
Rule 125   basicLit -> FLOAT_LIT EXPONENT
Rule 126   basicLit -> FALSE
Rule 127   basicLit -> TRUE
Rule 128   basicLit -> RUNE_LIT
Rule 129   basicLit -> STRING_LIT
Rule 130   FLOAT_LIT -> . DECIMAL_LIT
Rule 131   FLOAT_LIT -> DECIMAL_LIT .
Rule 132   FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT
Rule 133   INT_LIT -> HEX_LIT
Rule 134   INT_LIT -> OCTAL_LIT
Rule 135   INT_LIT -> BINARY_LIT
Rule 136   INT_LIT -> DECIMAL_LIT
Rule 137   eos -> eos NEWL
Rule 138   eos -> NEWL
Rule 139   eos -> eos ;
Rule 140   eos -> ;
Rule 141   assign_op -> SHR_ASGN  [precedence=right, level=8]
Rule 142   assign_op -> SHL_ASGN  [precedence=right, level=8]
Rule 143   assign_op -> MOD_ASGN  [precedence=right, level=8]
Rule 144   assign_op -> DIV_ASGN  [precedence=right, level=8]
Rule 145   assign_op -> OR_ASGN  [precedence=right, level=8]
Rule 146   assign_op -> AND_ASGN  [precedence=right, level=8]
Rule 147   assign_op -> STAR_ASGN  [precedence=right, level=8]
Rule 148   assign_op -> XOR_ASGN  [precedence=right, level=8]
Rule 149   assign_op -> MINUS_ASGN  [precedence=right, level=8]
Rule 150   assign_op -> PLUS_ASGN  [precedence=right, level=8]
Rule 151   assign_op -> ASSIGN  [precedence=right, level=8]
Rule 152   BINARY_OP -> MUL_OP
Rule 153   BINARY_OP -> ADD_OP
Rule 154   BINARY_OP -> REL_OP
Rule 155   BINARY_OP -> LOGIC_AND  [precedence=left, level=2]
Rule 156   BINARY_OP -> LOGIC_OR  [precedence=left, level=1]
Rule 157   REL_OP -> GE  [precedence=left, level=3]
Rule 158   REL_OP -> GT  [precedence=left, level=3]
Rule 159   REL_OP -> LE  [precedence=left, level=3]
Rule 160   REL_OP -> LT  [precedence=left, level=3]
Rule 161   REL_OP -> NE  [precedence=left, level=3]
Rule 162   REL_OP -> EQ  [precedence=left, level=3]
Rule 163   ADD_OP -> XOR  [precedence=left, level=4]
Rule 164   ADD_OP -> OR  [precedence=left, level=4]
Rule 165   ADD_OP -> MINUS  [precedence=left, level=4]
Rule 166   ADD_OP -> PLUS  [precedence=left, level=4]
Rule 167   MUL_OP -> SHR  [precedence=left, level=5]
Rule 168   MUL_OP -> SHL  [precedence=left, level=5]
Rule 169   MUL_OP -> AND  [precedence=left, level=5]
Rule 170   MUL_OP -> MOD  [precedence=left, level=5]
Rule 171   MUL_OP -> DIV  [precedence=left, level=5]
Rule 172   MUL_OP -> STAR  [precedence=left, level=5]
Rule 173   UNARY_OP -> AND  [precedence=left, level=5]
Rule 174   UNARY_OP -> EXCLM
Rule 175   UNARY_OP -> MINUS  [precedence=left, level=4]

Unused terminals:

    ELSE
    MAP
    AS
    RETURN
    BREAK
    ENUM
    STRUCT
    MINUS_MINUS
    IF
    IN
    CONTINUE
    PLUS_PLUS
    MATCH
    TYPE
    STATIC
    FOR

Terminals, with rules where they appear:

(                    : 46 47 63 64 65 82 83 84 85 86 87 88 96 102
)                    : 46 47 63 64 65 82 83 84 85 86 87 88 96 102
,                    : 54 63 66 71 82 82 83 84 86
.                    : 36 130 131 132
;                    : 139 140
AND                  : 169 173
AND_ASGN             : 146
AS                   : 
ASSIGN               : 53 151
BINARY_LIT           : 135
BOOL                 : 106
BREAK                : 
CONST                : 46 47 48
CONTINUE             : 
C_PATH_LIT           : 29
C_PREPR              : 28 29 30
C_STRING_LIT         : 28
DECIMAL_LIT          : 124 130 131 132 132 136
DECL_ASGN            : 45
DIV                  : 171
DIV_ASGN             : 144
ELSE                 : 
ENUM                 : 
EQ                   : 162
EXCLM                : 174
EXPONENT             : 124 125
F32                  : 108
F64                  : 109
FALSE                : 126
FN                   : 56 57 70
FOR                  : 
GE                   : 157
GT                   : 158
HEX_LIT              : 133
I16                  : 114
I32                  : 113
I64                  : 112
I8                   : 115
IDENTIFIER           : 25 30 35 38 53 54 55 56 57 99
IF                   : 
IMPORT               : 33
IN                   : 
INT                  : 110
ISIZE                : 111
LE                   : 159
LOGIC_AND            : 155
LOGIC_OR             : 156
LT                   : 160
MAP                  : 
MATCH                : 
MINUS                : 165 175
MINUS_ASGN           : 149
MINUS_MINUS          : 
MOD                  : 170
MODULE               : 25
MOD_ASGN             : 143
NE                   : 161
NEWL                 : 137 138
OCTAL_LIT            : 134
OR                   : 164
OR_ASGN              : 145
PLUS                 : 166
PLUS_ASGN            : 150
PLUS_PLUS            : 
RETURN               : 
RUNE                 : 107
RUNE_LIT             : 128
SHL                  : 168
SHL_ASGN             : 142
SHR                  : 167
SHR_ASGN             : 141
STAR                 : 172
STAR_ASGN            : 147
STATIC               : 
STRING               : 105
STRING_LIT           : 37 129
STRUCT               : 
TRUE                 : 127
TYPE                 : 
U16                  : 120
U32                  : 119
U64                  : 118
U8                   : 121
UINT                 : 116
USIZE                : 117
XOR                  : 163
XOR_ASGN             : 148
error                : 
{                    : 75
}                    : 75

Nonterminals, with rules where they appear:

ADD_OP               : 153
BINARY_OP            : 89
FLOAT_LIT            : 123 125
INT_LIT              : 122
MUL_OP               : 152
REL_OP               : 154
UNARY_OP             : 91
arguments            : 93
assign_op            : 81
assignment           : 78
basicLit             : 101
block                : 58
cPreprocessor        : 26 27
cPreprocessors       : 3 5 6 8 11 13 14 16 19 21 22 24 26
constDecl            : 43
constSpec            : 48 49 50 51 52
constSpecs           : 46 47 49 51
conversion           : 94
declaration          : 77
eos                  : 25 26 27 31 32 39 40 41 46 51 52 73 137 139
expression           : 53 71 72 80 89 96 102
expressionList       : 30 45 71 81 82 83 86 87
expressionStmt       : 79
functionDecl         : 42
functionLit          : 100
function_            : 57 70
identifierList       : 45 54 69 81
importDecl           : 31 32
importDecls          : 4 6 7 8 12 14 15 16 20 22 23 24 31
importPath           : 34 35 36
importSpec           : 33
literal              : 98
moduleClause         : 2 5 7 8 10 13 15 16 18 21 23 24
numericType          : 104
operand              : 95
operandName          : 97
orphanStmtList       : 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
parameterDecl        : 66 67
parameterList        : 63 64 66
parameters           : 59 60 62
primaryExpr          : 92 93
result               : 60
signature            : 56 58
simpleStmt           : 76
sourceFile           : 0
statement            : 73 74
statementList        : 41 73 75
topLevelDecl         : 39 40
topLevelDecls        : 1 2 3 4 5 6 7 8 17 18 19 20 21 22 23 24 39
typeName             : 103
type_                : 61 68 69 82 83 84 85 102
unaryExpr            : 89 90 91
varDecl              : 44


state 0

    (0) S' -> . sourceFile
    (1) sourceFile -> . topLevelDecls
    (2) sourceFile -> . moduleClause topLevelDecls
    (3) sourceFile -> . cPreprocessors topLevelDecls
    (4) sourceFile -> . importDecls topLevelDecls
    (5) sourceFile -> . cPreprocessors moduleClause topLevelDecls
    (6) sourceFile -> . cPreprocessors importDecls topLevelDecls
    (7) sourceFile -> . moduleClause importDecls topLevelDecls
    (8) sourceFile -> . cPreprocessors moduleClause importDecls topLevelDecls
    (9) sourceFile -> . orphanStmtList
    (10) sourceFile -> . moduleClause orphanStmtList
    (11) sourceFile -> . cPreprocessors orphanStmtList
    (12) sourceFile -> . importDecls orphanStmtList
    (13) sourceFile -> . cPreprocessors moduleClause orphanStmtList
    (14) sourceFile -> . cPreprocessors importDecls orphanStmtList
    (15) sourceFile -> . moduleClause importDecls orphanStmtList
    (16) sourceFile -> . cPreprocessors moduleClause importDecls orphanStmtList
    (17) sourceFile -> . topLevelDecls orphanStmtList
    (18) sourceFile -> . moduleClause topLevelDecls orphanStmtList
    (19) sourceFile -> . cPreprocessors topLevelDecls orphanStmtList
    (20) sourceFile -> . importDecls topLevelDecls orphanStmtList
    (21) sourceFile -> . cPreprocessors moduleClause topLevelDecls orphanStmtList
    (22) sourceFile -> . cPreprocessors importDecls topLevelDecls orphanStmtList
    (23) sourceFile -> . moduleClause importDecls topLevelDecls orphanStmtList
    (24) sourceFile -> . cPreprocessors moduleClause importDecls topLevelDecls orphanStmtList
    (39) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (40) topLevelDecls -> . topLevelDecl eos
    (25) moduleClause -> . MODULE IDENTIFIER eos
    (26) cPreprocessors -> . cPreprocessors cPreprocessor eos
    (27) cPreprocessors -> . cPreprocessor eos
    (31) importDecls -> . importDecls importDecl eos
    (32) importDecls -> . importDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (43) topLevelDecl -> . constDecl
    (28) cPreprocessor -> . C_PREPR C_STRING_LIT
    (29) cPreprocessor -> . C_PREPR C_PATH_LIT
    (30) cPreprocessor -> . C_PREPR IDENTIFIER expressionList
    (33) importDecl -> . IMPORT importSpec
    (73) statementList -> . statementList eos statement
    (74) statementList -> . statement
    (56) functionDecl -> . FN IDENTIFIER signature
    (57) functionDecl -> . FN IDENTIFIER function_
    (46) constDecl -> . CONST ( eos constSpecs )
    (47) constDecl -> . CONST ( constSpecs )
    (48) constDecl -> . CONST constSpec
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    MODULE          shift and go to state 8
    C_PREPR         shift and go to state 15
    IMPORT          shift and go to state 16
    FN              shift and go to state 18
    CONST           shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    sourceFile                     shift and go to state 1
    topLevelDecls                  shift and go to state 2
    moduleClause                   shift and go to state 3
    cPreprocessors                 shift and go to state 4
    importDecls                    shift and go to state 5
    orphanStmtList                 shift and go to state 6
    topLevelDecl                   shift and go to state 7
    cPreprocessor                  shift and go to state 10
    importDecl                     shift and go to state 11
    statementList                  shift and go to state 12
    functionDecl                   shift and go to state 13
    constDecl                      shift and go to state 14
    statement                      shift and go to state 17
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 1

    (0) S' -> sourceFile .


state 2

    (1) sourceFile -> topLevelDecls .
    (17) sourceFile -> topLevelDecls . orphanStmtList
    (39) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (43) topLevelDecl -> . constDecl
    (73) statementList -> . statementList eos statement
    (74) statementList -> . statement
    (56) functionDecl -> . FN IDENTIFIER signature
    (57) functionDecl -> . FN IDENTIFIER function_
    (46) constDecl -> . CONST ( eos constSpecs )
    (47) constDecl -> . CONST ( constSpecs )
    (48) constDecl -> . CONST constSpec
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 1 (sourceFile -> topLevelDecls .)
    FN              shift and go to state 18
    CONST           shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    orphanStmtList                 shift and go to state 71
    topLevelDecl                   shift and go to state 72
    statementList                  shift and go to state 12
    functionDecl                   shift and go to state 13
    constDecl                      shift and go to state 14
    statement                      shift and go to state 17
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 3

    (2) sourceFile -> moduleClause . topLevelDecls
    (7) sourceFile -> moduleClause . importDecls topLevelDecls
    (10) sourceFile -> moduleClause . orphanStmtList
    (15) sourceFile -> moduleClause . importDecls orphanStmtList
    (18) sourceFile -> moduleClause . topLevelDecls orphanStmtList
    (23) sourceFile -> moduleClause . importDecls topLevelDecls orphanStmtList
    (39) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (40) topLevelDecls -> . topLevelDecl eos
    (31) importDecls -> . importDecls importDecl eos
    (32) importDecls -> . importDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (43) topLevelDecl -> . constDecl
    (33) importDecl -> . IMPORT importSpec
    (73) statementList -> . statementList eos statement
    (74) statementList -> . statement
    (56) functionDecl -> . FN IDENTIFIER signature
    (57) functionDecl -> . FN IDENTIFIER function_
    (46) constDecl -> . CONST ( eos constSpecs )
    (47) constDecl -> . CONST ( constSpecs )
    (48) constDecl -> . CONST constSpec
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IMPORT          shift and go to state 16
    FN              shift and go to state 18
    CONST           shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    topLevelDecls                  shift and go to state 73
    importDecls                    shift and go to state 74
    orphanStmtList                 shift and go to state 75
    topLevelDecl                   shift and go to state 7
    importDecl                     shift and go to state 11
    statementList                  shift and go to state 12
    functionDecl                   shift and go to state 13
    constDecl                      shift and go to state 14
    statement                      shift and go to state 17
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 4

    (3) sourceFile -> cPreprocessors . topLevelDecls
    (5) sourceFile -> cPreprocessors . moduleClause topLevelDecls
    (6) sourceFile -> cPreprocessors . importDecls topLevelDecls
    (8) sourceFile -> cPreprocessors . moduleClause importDecls topLevelDecls
    (11) sourceFile -> cPreprocessors . orphanStmtList
    (13) sourceFile -> cPreprocessors . moduleClause orphanStmtList
    (14) sourceFile -> cPreprocessors . importDecls orphanStmtList
    (16) sourceFile -> cPreprocessors . moduleClause importDecls orphanStmtList
    (19) sourceFile -> cPreprocessors . topLevelDecls orphanStmtList
    (21) sourceFile -> cPreprocessors . moduleClause topLevelDecls orphanStmtList
    (22) sourceFile -> cPreprocessors . importDecls topLevelDecls orphanStmtList
    (24) sourceFile -> cPreprocessors . moduleClause importDecls topLevelDecls orphanStmtList
    (26) cPreprocessors -> cPreprocessors . cPreprocessor eos
    (39) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (40) topLevelDecls -> . topLevelDecl eos
    (25) moduleClause -> . MODULE IDENTIFIER eos
    (31) importDecls -> . importDecls importDecl eos
    (32) importDecls -> . importDecl eos
    (41) orphanStmtList -> . statementList eos
    (28) cPreprocessor -> . C_PREPR C_STRING_LIT
    (29) cPreprocessor -> . C_PREPR C_PATH_LIT
    (30) cPreprocessor -> . C_PREPR IDENTIFIER expressionList
    (42) topLevelDecl -> . functionDecl
    (43) topLevelDecl -> . constDecl
    (33) importDecl -> . IMPORT importSpec
    (73) statementList -> . statementList eos statement
    (74) statementList -> . statement
    (56) functionDecl -> . FN IDENTIFIER signature
    (57) functionDecl -> . FN IDENTIFIER function_
    (46) constDecl -> . CONST ( eos constSpecs )
    (47) constDecl -> . CONST ( constSpecs )
    (48) constDecl -> . CONST constSpec
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    MODULE          shift and go to state 8
    C_PREPR         shift and go to state 15
    IMPORT          shift and go to state 16
    FN              shift and go to state 18
    CONST           shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    topLevelDecls                  shift and go to state 76
    moduleClause                   shift and go to state 77
    importDecls                    shift and go to state 78
    orphanStmtList                 shift and go to state 79
    cPreprocessor                  shift and go to state 80
    topLevelDecl                   shift and go to state 7
    importDecl                     shift and go to state 11
    statementList                  shift and go to state 12
    functionDecl                   shift and go to state 13
    constDecl                      shift and go to state 14
    statement                      shift and go to state 17
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 5

    (4) sourceFile -> importDecls . topLevelDecls
    (12) sourceFile -> importDecls . orphanStmtList
    (20) sourceFile -> importDecls . topLevelDecls orphanStmtList
    (31) importDecls -> importDecls . importDecl eos
    (39) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (40) topLevelDecls -> . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (33) importDecl -> . IMPORT importSpec
    (42) topLevelDecl -> . functionDecl
    (43) topLevelDecl -> . constDecl
    (73) statementList -> . statementList eos statement
    (74) statementList -> . statement
    (56) functionDecl -> . FN IDENTIFIER signature
    (57) functionDecl -> . FN IDENTIFIER function_
    (46) constDecl -> . CONST ( eos constSpecs )
    (47) constDecl -> . CONST ( constSpecs )
    (48) constDecl -> . CONST constSpec
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IMPORT          shift and go to state 16
    FN              shift and go to state 18
    CONST           shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    topLevelDecls                  shift and go to state 81
    orphanStmtList                 shift and go to state 82
    importDecl                     shift and go to state 83
    topLevelDecl                   shift and go to state 7
    statementList                  shift and go to state 12
    functionDecl                   shift and go to state 13
    constDecl                      shift and go to state 14
    statement                      shift and go to state 17
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 6

    (9) sourceFile -> orphanStmtList .
    $end            reduce using rule 9 (sourceFile -> orphanStmtList .)


state 7

    (40) topLevelDecls -> topLevelDecl . eos
    (137) eos -> . eos NEWL
    (138) eos -> . NEWL
    (139) eos -> . eos ;
    (140) eos -> . ;
    NEWL            shift and go to state 85
    ;               shift and go to state 86

    eos                            shift and go to state 84

state 8

    (25) moduleClause -> MODULE . IDENTIFIER eos
    IDENTIFIER      shift and go to state 87


state 9

    (55) identifierList -> IDENTIFIER .
    (99) operandName -> IDENTIFIER .
    DECL_ASGN       reduce using rule 55 (identifierList -> IDENTIFIER .)
    ,               reduce using rule 55 (identifierList -> IDENTIFIER .)
    SHR_ASGN        reduce using rule 55 (identifierList -> IDENTIFIER .)
    SHL_ASGN        reduce using rule 55 (identifierList -> IDENTIFIER .)
    MOD_ASGN        reduce using rule 55 (identifierList -> IDENTIFIER .)
    DIV_ASGN        reduce using rule 55 (identifierList -> IDENTIFIER .)
    OR_ASGN         reduce using rule 55 (identifierList -> IDENTIFIER .)
    AND_ASGN        reduce using rule 55 (identifierList -> IDENTIFIER .)
    STAR_ASGN       reduce using rule 55 (identifierList -> IDENTIFIER .)
    XOR_ASGN        reduce using rule 55 (identifierList -> IDENTIFIER .)
    MINUS_ASGN      reduce using rule 55 (identifierList -> IDENTIFIER .)
    PLUS_ASGN       reduce using rule 55 (identifierList -> IDENTIFIER .)
    ASSIGN          reduce using rule 55 (identifierList -> IDENTIFIER .)
    (               reduce using rule 99 (operandName -> IDENTIFIER .)
    LOGIC_AND       reduce using rule 99 (operandName -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 99 (operandName -> IDENTIFIER .)
    SHR             reduce using rule 99 (operandName -> IDENTIFIER .)
    SHL             reduce using rule 99 (operandName -> IDENTIFIER .)
    AND             reduce using rule 99 (operandName -> IDENTIFIER .)
    MOD             reduce using rule 99 (operandName -> IDENTIFIER .)
    DIV             reduce using rule 99 (operandName -> IDENTIFIER .)
    STAR            reduce using rule 99 (operandName -> IDENTIFIER .)
    XOR             reduce using rule 99 (operandName -> IDENTIFIER .)
    OR              reduce using rule 99 (operandName -> IDENTIFIER .)
    MINUS           reduce using rule 99 (operandName -> IDENTIFIER .)
    PLUS            reduce using rule 99 (operandName -> IDENTIFIER .)
    GE              reduce using rule 99 (operandName -> IDENTIFIER .)
    GT              reduce using rule 99 (operandName -> IDENTIFIER .)
    LE              reduce using rule 99 (operandName -> IDENTIFIER .)
    LT              reduce using rule 99 (operandName -> IDENTIFIER .)
    NE              reduce using rule 99 (operandName -> IDENTIFIER .)
    EQ              reduce using rule 99 (operandName -> IDENTIFIER .)
    NEWL            reduce using rule 99 (operandName -> IDENTIFIER .)
    ;               reduce using rule 99 (operandName -> IDENTIFIER .)
    }               reduce using rule 99 (operandName -> IDENTIFIER .)


state 10

    (27) cPreprocessors -> cPreprocessor . eos
    (137) eos -> . eos NEWL
    (138) eos -> . NEWL
    (139) eos -> . eos ;
    (140) eos -> . ;
    NEWL            shift and go to state 85
    ;               shift and go to state 86

    eos                            shift and go to state 88

state 11

    (32) importDecls -> importDecl . eos
    (137) eos -> . eos NEWL
    (138) eos -> . NEWL
    (139) eos -> . eos ;
    (140) eos -> . ;
    NEWL            shift and go to state 85
    ;               shift and go to state 86

    eos                            shift and go to state 89

state 12

    (41) orphanStmtList -> statementList . eos
    (73) statementList -> statementList . eos statement
    (137) eos -> . eos NEWL
    (138) eos -> . NEWL
    (139) eos -> . eos ;
    (140) eos -> . ;
    NEWL            shift and go to state 85
    ;               shift and go to state 86

    eos                            shift and go to state 90

state 13

    (42) topLevelDecl -> functionDecl .
    NEWL            reduce using rule 42 (topLevelDecl -> functionDecl .)
    ;               reduce using rule 42 (topLevelDecl -> functionDecl .)


state 14

    (43) topLevelDecl -> constDecl .
    NEWL            reduce using rule 43 (topLevelDecl -> constDecl .)
    ;               reduce using rule 43 (topLevelDecl -> constDecl .)


state 15

    (28) cPreprocessor -> C_PREPR . C_STRING_LIT
    (29) cPreprocessor -> C_PREPR . C_PATH_LIT
    (30) cPreprocessor -> C_PREPR . IDENTIFIER expressionList
    C_STRING_LIT    shift and go to state 91
    C_PATH_LIT      shift and go to state 92
    IDENTIFIER      shift and go to state 93


state 16

    (33) importDecl -> IMPORT . importSpec
    (34) importSpec -> . importPath
    (35) importSpec -> . IDENTIFIER importPath
    (36) importSpec -> . . importPath
    (37) importPath -> . STRING_LIT
    (38) importPath -> . IDENTIFIER
    IDENTIFIER      shift and go to state 96
    .               shift and go to state 97
    STRING_LIT      shift and go to state 98

    importSpec                     shift and go to state 94
    importPath                     shift and go to state 95

state 17

    (74) statementList -> statement .
    NEWL            reduce using rule 74 (statementList -> statement .)
    ;               reduce using rule 74 (statementList -> statement .)
    }               reduce using rule 74 (statementList -> statement .)


state 18

    (56) functionDecl -> FN . IDENTIFIER signature
    (57) functionDecl -> FN . IDENTIFIER function_
    (70) functionLit -> FN . function_
    (58) function_ -> . signature block
    (59) signature -> . parameters
    (60) signature -> . parameters result
    (63) parameters -> . ( parameterList , )
    (64) parameters -> . ( parameterList )
    (65) parameters -> . ( )
    IDENTIFIER      shift and go to state 99
    (               shift and go to state 103

    signature                      shift and go to state 100
    function_                      shift and go to state 101
    parameters                     shift and go to state 102

state 19

    (46) constDecl -> CONST . ( eos constSpecs )
    (47) constDecl -> CONST . ( constSpecs )
    (48) constDecl -> CONST . constSpec
    (53) constSpec -> . IDENTIFIER ASSIGN expression
    (               shift and go to state 104
    IDENTIFIER      shift and go to state 106

    constSpec                      shift and go to state 105

state 20

    (96) operand -> ( . expression )
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    IDENTIFIER      shift and go to state 108
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 109
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    expression                     shift and go to state 107
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 21

    (76) statement -> simpleStmt .
    NEWL            reduce using rule 76 (statement -> simpleStmt .)
    ;               reduce using rule 76 (statement -> simpleStmt .)
    }               reduce using rule 76 (statement -> simpleStmt .)


state 22

    (77) statement -> declaration .
    NEWL            reduce using rule 77 (statement -> declaration .)
    ;               reduce using rule 77 (statement -> declaration .)
    }               reduce using rule 77 (statement -> declaration .)


state 23

    (78) simpleStmt -> assignment .
    NEWL            reduce using rule 78 (simpleStmt -> assignment .)
    ;               reduce using rule 78 (simpleStmt -> assignment .)
    }               reduce using rule 78 (simpleStmt -> assignment .)


state 24

    (79) simpleStmt -> expressionStmt .
    NEWL            reduce using rule 79 (simpleStmt -> expressionStmt .)
    ;               reduce using rule 79 (simpleStmt -> expressionStmt .)
    }               reduce using rule 79 (simpleStmt -> expressionStmt .)


state 25

    (44) declaration -> varDecl .
    NEWL            reduce using rule 44 (declaration -> varDecl .)
    ;               reduce using rule 44 (declaration -> varDecl .)
    }               reduce using rule 44 (declaration -> varDecl .)


state 26

    (81) assignment -> identifierList . assign_op expressionList
    (45) varDecl -> identifierList . DECL_ASGN expressionList
    (54) identifierList -> identifierList . , IDENTIFIER
    (141) assign_op -> . SHR_ASGN
    (142) assign_op -> . SHL_ASGN
    (143) assign_op -> . MOD_ASGN
    (144) assign_op -> . DIV_ASGN
    (145) assign_op -> . OR_ASGN
    (146) assign_op -> . AND_ASGN
    (147) assign_op -> . STAR_ASGN
    (148) assign_op -> . XOR_ASGN
    (149) assign_op -> . MINUS_ASGN
    (150) assign_op -> . PLUS_ASGN
    (151) assign_op -> . ASSIGN
    DECL_ASGN       shift and go to state 111
    ,               shift and go to state 112
    SHR_ASGN        shift and go to state 113
    SHL_ASGN        shift and go to state 114
    MOD_ASGN        shift and go to state 115
    DIV_ASGN        shift and go to state 116
    OR_ASGN         shift and go to state 117
    AND_ASGN        shift and go to state 118
    STAR_ASGN       shift and go to state 119
    XOR_ASGN        shift and go to state 120
    MINUS_ASGN      shift and go to state 121
    PLUS_ASGN       shift and go to state 122
    ASSIGN          shift and go to state 123

    assign_op                      shift and go to state 110

state 27

    (80) expressionStmt -> expression .
    (89) expression -> expression . BINARY_OP unaryExpr
    (152) BINARY_OP -> . MUL_OP
    (153) BINARY_OP -> . ADD_OP
    (154) BINARY_OP -> . REL_OP
    (155) BINARY_OP -> . LOGIC_AND
    (156) BINARY_OP -> . LOGIC_OR
    (167) MUL_OP -> . SHR
    (168) MUL_OP -> . SHL
    (169) MUL_OP -> . AND
    (170) MUL_OP -> . MOD
    (171) MUL_OP -> . DIV
    (172) MUL_OP -> . STAR
    (163) ADD_OP -> . XOR
    (164) ADD_OP -> . OR
    (165) ADD_OP -> . MINUS
    (166) ADD_OP -> . PLUS
    (157) REL_OP -> . GE
    (158) REL_OP -> . GT
    (159) REL_OP -> . LE
    (160) REL_OP -> . LT
    (161) REL_OP -> . NE
    (162) REL_OP -> . EQ
    NEWL            reduce using rule 80 (expressionStmt -> expression .)
    ;               reduce using rule 80 (expressionStmt -> expression .)
    }               reduce using rule 80 (expressionStmt -> expression .)
    LOGIC_AND       shift and go to state 128
    LOGIC_OR        shift and go to state 129
    SHR             shift and go to state 130
    SHL             shift and go to state 131
    AND             shift and go to state 132
    MOD             shift and go to state 133
    DIV             shift and go to state 134
    STAR            shift and go to state 135
    XOR             shift and go to state 136
    OR              shift and go to state 137
    MINUS           shift and go to state 138
    PLUS            shift and go to state 139
    GE              shift and go to state 140
    GT              shift and go to state 141
    LE              shift and go to state 142
    LT              shift and go to state 143
    NE              shift and go to state 144
    EQ              shift and go to state 145

    BINARY_OP                      shift and go to state 124
    MUL_OP                         shift and go to state 125
    ADD_OP                         shift and go to state 126
    REL_OP                         shift and go to state 127

state 28

    (90) expression -> unaryExpr .
    LOGIC_AND       reduce using rule 90 (expression -> unaryExpr .)
    LOGIC_OR        reduce using rule 90 (expression -> unaryExpr .)
    SHR             reduce using rule 90 (expression -> unaryExpr .)
    SHL             reduce using rule 90 (expression -> unaryExpr .)
    AND             reduce using rule 90 (expression -> unaryExpr .)
    MOD             reduce using rule 90 (expression -> unaryExpr .)
    DIV             reduce using rule 90 (expression -> unaryExpr .)
    STAR            reduce using rule 90 (expression -> unaryExpr .)
    XOR             reduce using rule 90 (expression -> unaryExpr .)
    OR              reduce using rule 90 (expression -> unaryExpr .)
    MINUS           reduce using rule 90 (expression -> unaryExpr .)
    PLUS            reduce using rule 90 (expression -> unaryExpr .)
    GE              reduce using rule 90 (expression -> unaryExpr .)
    GT              reduce using rule 90 (expression -> unaryExpr .)
    LE              reduce using rule 90 (expression -> unaryExpr .)
    LT              reduce using rule 90 (expression -> unaryExpr .)
    NE              reduce using rule 90 (expression -> unaryExpr .)
    EQ              reduce using rule 90 (expression -> unaryExpr .)
    NEWL            reduce using rule 90 (expression -> unaryExpr .)
    ;               reduce using rule 90 (expression -> unaryExpr .)
    )               reduce using rule 90 (expression -> unaryExpr .)
    ,               reduce using rule 90 (expression -> unaryExpr .)
    }               reduce using rule 90 (expression -> unaryExpr .)
    IDENTIFIER      reduce using rule 90 (expression -> unaryExpr .)


state 29

    (91) unaryExpr -> UNARY_OP . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    IDENTIFIER      shift and go to state 108
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 109
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    UNARY_OP                       shift and go to state 29
    unaryExpr                      shift and go to state 146
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 30

    (92) unaryExpr -> primaryExpr .
    (93) primaryExpr -> primaryExpr . arguments
    (82) arguments -> . ( type_ , expressionList , )
    (83) arguments -> . ( type_ , expressionList )
    (84) arguments -> . ( type_ , )
    (85) arguments -> . ( type_ )
    (86) arguments -> . ( expressionList , )
    (87) arguments -> . ( expressionList )
    (88) arguments -> . ( )
    LOGIC_AND       reduce using rule 92 (unaryExpr -> primaryExpr .)
    LOGIC_OR        reduce using rule 92 (unaryExpr -> primaryExpr .)
    SHR             reduce using rule 92 (unaryExpr -> primaryExpr .)
    SHL             reduce using rule 92 (unaryExpr -> primaryExpr .)
    AND             reduce using rule 92 (unaryExpr -> primaryExpr .)
    MOD             reduce using rule 92 (unaryExpr -> primaryExpr .)
    DIV             reduce using rule 92 (unaryExpr -> primaryExpr .)
    STAR            reduce using rule 92 (unaryExpr -> primaryExpr .)
    XOR             reduce using rule 92 (unaryExpr -> primaryExpr .)
    OR              reduce using rule 92 (unaryExpr -> primaryExpr .)
    MINUS           reduce using rule 92 (unaryExpr -> primaryExpr .)
    PLUS            reduce using rule 92 (unaryExpr -> primaryExpr .)
    GE              reduce using rule 92 (unaryExpr -> primaryExpr .)
    GT              reduce using rule 92 (unaryExpr -> primaryExpr .)
    LE              reduce using rule 92 (unaryExpr -> primaryExpr .)
    LT              reduce using rule 92 (unaryExpr -> primaryExpr .)
    NE              reduce using rule 92 (unaryExpr -> primaryExpr .)
    EQ              reduce using rule 92 (unaryExpr -> primaryExpr .)
    NEWL            reduce using rule 92 (unaryExpr -> primaryExpr .)
    ;               reduce using rule 92 (unaryExpr -> primaryExpr .)
    )               reduce using rule 92 (unaryExpr -> primaryExpr .)
    ,               reduce using rule 92 (unaryExpr -> primaryExpr .)
    }               reduce using rule 92 (unaryExpr -> primaryExpr .)
    IDENTIFIER      reduce using rule 92 (unaryExpr -> primaryExpr .)
    (               shift and go to state 148

    arguments                      shift and go to state 147

state 31

    (173) UNARY_OP -> AND .
    AND             reduce using rule 173 (UNARY_OP -> AND .)
    EXCLM           reduce using rule 173 (UNARY_OP -> AND .)
    MINUS           reduce using rule 173 (UNARY_OP -> AND .)
    (               reduce using rule 173 (UNARY_OP -> AND .)
    IDENTIFIER      reduce using rule 173 (UNARY_OP -> AND .)
    STRING          reduce using rule 173 (UNARY_OP -> AND .)
    BOOL            reduce using rule 173 (UNARY_OP -> AND .)
    RUNE            reduce using rule 173 (UNARY_OP -> AND .)
    FN              reduce using rule 173 (UNARY_OP -> AND .)
    DECIMAL_LIT     reduce using rule 173 (UNARY_OP -> AND .)
    FALSE           reduce using rule 173 (UNARY_OP -> AND .)
    TRUE            reduce using rule 173 (UNARY_OP -> AND .)
    RUNE_LIT        reduce using rule 173 (UNARY_OP -> AND .)
    STRING_LIT      reduce using rule 173 (UNARY_OP -> AND .)
    F32             reduce using rule 173 (UNARY_OP -> AND .)
    F64             reduce using rule 173 (UNARY_OP -> AND .)
    INT             reduce using rule 173 (UNARY_OP -> AND .)
    ISIZE           reduce using rule 173 (UNARY_OP -> AND .)
    I64             reduce using rule 173 (UNARY_OP -> AND .)
    I32             reduce using rule 173 (UNARY_OP -> AND .)
    I16             reduce using rule 173 (UNARY_OP -> AND .)
    I8              reduce using rule 173 (UNARY_OP -> AND .)
    UINT            reduce using rule 173 (UNARY_OP -> AND .)
    USIZE           reduce using rule 173 (UNARY_OP -> AND .)
    U64             reduce using rule 173 (UNARY_OP -> AND .)
    U32             reduce using rule 173 (UNARY_OP -> AND .)
    U16             reduce using rule 173 (UNARY_OP -> AND .)
    U8              reduce using rule 173 (UNARY_OP -> AND .)
    HEX_LIT         reduce using rule 173 (UNARY_OP -> AND .)
    OCTAL_LIT       reduce using rule 173 (UNARY_OP -> AND .)
    BINARY_LIT      reduce using rule 173 (UNARY_OP -> AND .)
    .               reduce using rule 173 (UNARY_OP -> AND .)


state 32

    (174) UNARY_OP -> EXCLM .
    AND             reduce using rule 174 (UNARY_OP -> EXCLM .)
    EXCLM           reduce using rule 174 (UNARY_OP -> EXCLM .)
    MINUS           reduce using rule 174 (UNARY_OP -> EXCLM .)
    (               reduce using rule 174 (UNARY_OP -> EXCLM .)
    IDENTIFIER      reduce using rule 174 (UNARY_OP -> EXCLM .)
    STRING          reduce using rule 174 (UNARY_OP -> EXCLM .)
    BOOL            reduce using rule 174 (UNARY_OP -> EXCLM .)
    RUNE            reduce using rule 174 (UNARY_OP -> EXCLM .)
    FN              reduce using rule 174 (UNARY_OP -> EXCLM .)
    DECIMAL_LIT     reduce using rule 174 (UNARY_OP -> EXCLM .)
    FALSE           reduce using rule 174 (UNARY_OP -> EXCLM .)
    TRUE            reduce using rule 174 (UNARY_OP -> EXCLM .)
    RUNE_LIT        reduce using rule 174 (UNARY_OP -> EXCLM .)
    STRING_LIT      reduce using rule 174 (UNARY_OP -> EXCLM .)
    F32             reduce using rule 174 (UNARY_OP -> EXCLM .)
    F64             reduce using rule 174 (UNARY_OP -> EXCLM .)
    INT             reduce using rule 174 (UNARY_OP -> EXCLM .)
    ISIZE           reduce using rule 174 (UNARY_OP -> EXCLM .)
    I64             reduce using rule 174 (UNARY_OP -> EXCLM .)
    I32             reduce using rule 174 (UNARY_OP -> EXCLM .)
    I16             reduce using rule 174 (UNARY_OP -> EXCLM .)
    I8              reduce using rule 174 (UNARY_OP -> EXCLM .)
    UINT            reduce using rule 174 (UNARY_OP -> EXCLM .)
    USIZE           reduce using rule 174 (UNARY_OP -> EXCLM .)
    U64             reduce using rule 174 (UNARY_OP -> EXCLM .)
    U32             reduce using rule 174 (UNARY_OP -> EXCLM .)
    U16             reduce using rule 174 (UNARY_OP -> EXCLM .)
    U8              reduce using rule 174 (UNARY_OP -> EXCLM .)
    HEX_LIT         reduce using rule 174 (UNARY_OP -> EXCLM .)
    OCTAL_LIT       reduce using rule 174 (UNARY_OP -> EXCLM .)
    BINARY_LIT      reduce using rule 174 (UNARY_OP -> EXCLM .)
    .               reduce using rule 174 (UNARY_OP -> EXCLM .)


state 33

    (175) UNARY_OP -> MINUS .
    AND             reduce using rule 175 (UNARY_OP -> MINUS .)
    EXCLM           reduce using rule 175 (UNARY_OP -> MINUS .)
    MINUS           reduce using rule 175 (UNARY_OP -> MINUS .)
    (               reduce using rule 175 (UNARY_OP -> MINUS .)
    IDENTIFIER      reduce using rule 175 (UNARY_OP -> MINUS .)
    STRING          reduce using rule 175 (UNARY_OP -> MINUS .)
    BOOL            reduce using rule 175 (UNARY_OP -> MINUS .)
    RUNE            reduce using rule 175 (UNARY_OP -> MINUS .)
    FN              reduce using rule 175 (UNARY_OP -> MINUS .)
    DECIMAL_LIT     reduce using rule 175 (UNARY_OP -> MINUS .)
    FALSE           reduce using rule 175 (UNARY_OP -> MINUS .)
    TRUE            reduce using rule 175 (UNARY_OP -> MINUS .)
    RUNE_LIT        reduce using rule 175 (UNARY_OP -> MINUS .)
    STRING_LIT      reduce using rule 175 (UNARY_OP -> MINUS .)
    F32             reduce using rule 175 (UNARY_OP -> MINUS .)
    F64             reduce using rule 175 (UNARY_OP -> MINUS .)
    INT             reduce using rule 175 (UNARY_OP -> MINUS .)
    ISIZE           reduce using rule 175 (UNARY_OP -> MINUS .)
    I64             reduce using rule 175 (UNARY_OP -> MINUS .)
    I32             reduce using rule 175 (UNARY_OP -> MINUS .)
    I16             reduce using rule 175 (UNARY_OP -> MINUS .)
    I8              reduce using rule 175 (UNARY_OP -> MINUS .)
    UINT            reduce using rule 175 (UNARY_OP -> MINUS .)
    USIZE           reduce using rule 175 (UNARY_OP -> MINUS .)
    U64             reduce using rule 175 (UNARY_OP -> MINUS .)
    U32             reduce using rule 175 (UNARY_OP -> MINUS .)
    U16             reduce using rule 175 (UNARY_OP -> MINUS .)
    U8              reduce using rule 175 (UNARY_OP -> MINUS .)
    HEX_LIT         reduce using rule 175 (UNARY_OP -> MINUS .)
    OCTAL_LIT       reduce using rule 175 (UNARY_OP -> MINUS .)
    BINARY_LIT      reduce using rule 175 (UNARY_OP -> MINUS .)
    .               reduce using rule 175 (UNARY_OP -> MINUS .)


state 34

    (94) primaryExpr -> conversion .
    (               reduce using rule 94 (primaryExpr -> conversion .)
    LOGIC_AND       reduce using rule 94 (primaryExpr -> conversion .)
    LOGIC_OR        reduce using rule 94 (primaryExpr -> conversion .)
    SHR             reduce using rule 94 (primaryExpr -> conversion .)
    SHL             reduce using rule 94 (primaryExpr -> conversion .)
    AND             reduce using rule 94 (primaryExpr -> conversion .)
    MOD             reduce using rule 94 (primaryExpr -> conversion .)
    DIV             reduce using rule 94 (primaryExpr -> conversion .)
    STAR            reduce using rule 94 (primaryExpr -> conversion .)
    XOR             reduce using rule 94 (primaryExpr -> conversion .)
    OR              reduce using rule 94 (primaryExpr -> conversion .)
    MINUS           reduce using rule 94 (primaryExpr -> conversion .)
    PLUS            reduce using rule 94 (primaryExpr -> conversion .)
    GE              reduce using rule 94 (primaryExpr -> conversion .)
    GT              reduce using rule 94 (primaryExpr -> conversion .)
    LE              reduce using rule 94 (primaryExpr -> conversion .)
    LT              reduce using rule 94 (primaryExpr -> conversion .)
    NE              reduce using rule 94 (primaryExpr -> conversion .)
    EQ              reduce using rule 94 (primaryExpr -> conversion .)
    NEWL            reduce using rule 94 (primaryExpr -> conversion .)
    ;               reduce using rule 94 (primaryExpr -> conversion .)
    )               reduce using rule 94 (primaryExpr -> conversion .)
    ,               reduce using rule 94 (primaryExpr -> conversion .)
    }               reduce using rule 94 (primaryExpr -> conversion .)
    IDENTIFIER      reduce using rule 94 (primaryExpr -> conversion .)


state 35

    (95) primaryExpr -> operand .
    (               reduce using rule 95 (primaryExpr -> operand .)
    LOGIC_AND       reduce using rule 95 (primaryExpr -> operand .)
    LOGIC_OR        reduce using rule 95 (primaryExpr -> operand .)
    SHR             reduce using rule 95 (primaryExpr -> operand .)
    SHL             reduce using rule 95 (primaryExpr -> operand .)
    AND             reduce using rule 95 (primaryExpr -> operand .)
    MOD             reduce using rule 95 (primaryExpr -> operand .)
    DIV             reduce using rule 95 (primaryExpr -> operand .)
    STAR            reduce using rule 95 (primaryExpr -> operand .)
    XOR             reduce using rule 95 (primaryExpr -> operand .)
    OR              reduce using rule 95 (primaryExpr -> operand .)
    MINUS           reduce using rule 95 (primaryExpr -> operand .)
    PLUS            reduce using rule 95 (primaryExpr -> operand .)
    GE              reduce using rule 95 (primaryExpr -> operand .)
    GT              reduce using rule 95 (primaryExpr -> operand .)
    LE              reduce using rule 95 (primaryExpr -> operand .)
    LT              reduce using rule 95 (primaryExpr -> operand .)
    NE              reduce using rule 95 (primaryExpr -> operand .)
    EQ              reduce using rule 95 (primaryExpr -> operand .)
    NEWL            reduce using rule 95 (primaryExpr -> operand .)
    ;               reduce using rule 95 (primaryExpr -> operand .)
    )               reduce using rule 95 (primaryExpr -> operand .)
    ,               reduce using rule 95 (primaryExpr -> operand .)
    }               reduce using rule 95 (primaryExpr -> operand .)
    IDENTIFIER      reduce using rule 95 (primaryExpr -> operand .)


state 36

    (102) conversion -> type_ . ( expression )
    (               shift and go to state 149


state 37

    (97) operand -> operandName .
    (               reduce using rule 97 (operand -> operandName .)
    LOGIC_AND       reduce using rule 97 (operand -> operandName .)
    LOGIC_OR        reduce using rule 97 (operand -> operandName .)
    SHR             reduce using rule 97 (operand -> operandName .)
    SHL             reduce using rule 97 (operand -> operandName .)
    AND             reduce using rule 97 (operand -> operandName .)
    MOD             reduce using rule 97 (operand -> operandName .)
    DIV             reduce using rule 97 (operand -> operandName .)
    STAR            reduce using rule 97 (operand -> operandName .)
    XOR             reduce using rule 97 (operand -> operandName .)
    OR              reduce using rule 97 (operand -> operandName .)
    MINUS           reduce using rule 97 (operand -> operandName .)
    PLUS            reduce using rule 97 (operand -> operandName .)
    GE              reduce using rule 97 (operand -> operandName .)
    GT              reduce using rule 97 (operand -> operandName .)
    LE              reduce using rule 97 (operand -> operandName .)
    LT              reduce using rule 97 (operand -> operandName .)
    NE              reduce using rule 97 (operand -> operandName .)
    EQ              reduce using rule 97 (operand -> operandName .)
    NEWL            reduce using rule 97 (operand -> operandName .)
    ;               reduce using rule 97 (operand -> operandName .)
    )               reduce using rule 97 (operand -> operandName .)
    ,               reduce using rule 97 (operand -> operandName .)
    }               reduce using rule 97 (operand -> operandName .)
    IDENTIFIER      reduce using rule 97 (operand -> operandName .)


state 38

    (98) operand -> literal .
    (               reduce using rule 98 (operand -> literal .)
    LOGIC_AND       reduce using rule 98 (operand -> literal .)
    LOGIC_OR        reduce using rule 98 (operand -> literal .)
    SHR             reduce using rule 98 (operand -> literal .)
    SHL             reduce using rule 98 (operand -> literal .)
    AND             reduce using rule 98 (operand -> literal .)
    MOD             reduce using rule 98 (operand -> literal .)
    DIV             reduce using rule 98 (operand -> literal .)
    STAR            reduce using rule 98 (operand -> literal .)
    XOR             reduce using rule 98 (operand -> literal .)
    OR              reduce using rule 98 (operand -> literal .)
    MINUS           reduce using rule 98 (operand -> literal .)
    PLUS            reduce using rule 98 (operand -> literal .)
    GE              reduce using rule 98 (operand -> literal .)
    GT              reduce using rule 98 (operand -> literal .)
    LE              reduce using rule 98 (operand -> literal .)
    LT              reduce using rule 98 (operand -> literal .)
    NE              reduce using rule 98 (operand -> literal .)
    EQ              reduce using rule 98 (operand -> literal .)
    NEWL            reduce using rule 98 (operand -> literal .)
    ;               reduce using rule 98 (operand -> literal .)
    )               reduce using rule 98 (operand -> literal .)
    ,               reduce using rule 98 (operand -> literal .)
    }               reduce using rule 98 (operand -> literal .)
    IDENTIFIER      reduce using rule 98 (operand -> literal .)


state 39

    (103) type_ -> typeName .
    (               reduce using rule 103 (type_ -> typeName .)
    {               reduce using rule 103 (type_ -> typeName .)
    NEWL            reduce using rule 103 (type_ -> typeName .)
    ;               reduce using rule 103 (type_ -> typeName .)
    ,               reduce using rule 103 (type_ -> typeName .)
    )               reduce using rule 103 (type_ -> typeName .)


state 40

    (100) literal -> functionLit .
    (               reduce using rule 100 (literal -> functionLit .)
    LOGIC_AND       reduce using rule 100 (literal -> functionLit .)
    LOGIC_OR        reduce using rule 100 (literal -> functionLit .)
    SHR             reduce using rule 100 (literal -> functionLit .)
    SHL             reduce using rule 100 (literal -> functionLit .)
    AND             reduce using rule 100 (literal -> functionLit .)
    MOD             reduce using rule 100 (literal -> functionLit .)
    DIV             reduce using rule 100 (literal -> functionLit .)
    STAR            reduce using rule 100 (literal -> functionLit .)
    XOR             reduce using rule 100 (literal -> functionLit .)
    OR              reduce using rule 100 (literal -> functionLit .)
    MINUS           reduce using rule 100 (literal -> functionLit .)
    PLUS            reduce using rule 100 (literal -> functionLit .)
    GE              reduce using rule 100 (literal -> functionLit .)
    GT              reduce using rule 100 (literal -> functionLit .)
    LE              reduce using rule 100 (literal -> functionLit .)
    LT              reduce using rule 100 (literal -> functionLit .)
    NE              reduce using rule 100 (literal -> functionLit .)
    EQ              reduce using rule 100 (literal -> functionLit .)
    NEWL            reduce using rule 100 (literal -> functionLit .)
    ;               reduce using rule 100 (literal -> functionLit .)
    )               reduce using rule 100 (literal -> functionLit .)
    ,               reduce using rule 100 (literal -> functionLit .)
    }               reduce using rule 100 (literal -> functionLit .)
    IDENTIFIER      reduce using rule 100 (literal -> functionLit .)


state 41

    (101) literal -> basicLit .
    (               reduce using rule 101 (literal -> basicLit .)
    LOGIC_AND       reduce using rule 101 (literal -> basicLit .)
    LOGIC_OR        reduce using rule 101 (literal -> basicLit .)
    SHR             reduce using rule 101 (literal -> basicLit .)
    SHL             reduce using rule 101 (literal -> basicLit .)
    AND             reduce using rule 101 (literal -> basicLit .)
    MOD             reduce using rule 101 (literal -> basicLit .)
    DIV             reduce using rule 101 (literal -> basicLit .)
    STAR            reduce using rule 101 (literal -> basicLit .)
    XOR             reduce using rule 101 (literal -> basicLit .)
    OR              reduce using rule 101 (literal -> basicLit .)
    MINUS           reduce using rule 101 (literal -> basicLit .)
    PLUS            reduce using rule 101 (literal -> basicLit .)
    GE              reduce using rule 101 (literal -> basicLit .)
    GT              reduce using rule 101 (literal -> basicLit .)
    LE              reduce using rule 101 (literal -> basicLit .)
    LT              reduce using rule 101 (literal -> basicLit .)
    NE              reduce using rule 101 (literal -> basicLit .)
    EQ              reduce using rule 101 (literal -> basicLit .)
    NEWL            reduce using rule 101 (literal -> basicLit .)
    ;               reduce using rule 101 (literal -> basicLit .)
    )               reduce using rule 101 (literal -> basicLit .)
    ,               reduce using rule 101 (literal -> basicLit .)
    }               reduce using rule 101 (literal -> basicLit .)
    IDENTIFIER      reduce using rule 101 (literal -> basicLit .)


state 42

    (104) typeName -> numericType .
    (               reduce using rule 104 (typeName -> numericType .)
    {               reduce using rule 104 (typeName -> numericType .)
    NEWL            reduce using rule 104 (typeName -> numericType .)
    ;               reduce using rule 104 (typeName -> numericType .)
    ,               reduce using rule 104 (typeName -> numericType .)
    )               reduce using rule 104 (typeName -> numericType .)


state 43

    (105) typeName -> STRING .
    (               reduce using rule 105 (typeName -> STRING .)
    {               reduce using rule 105 (typeName -> STRING .)
    NEWL            reduce using rule 105 (typeName -> STRING .)
    ;               reduce using rule 105 (typeName -> STRING .)
    ,               reduce using rule 105 (typeName -> STRING .)
    )               reduce using rule 105 (typeName -> STRING .)


state 44

    (106) typeName -> BOOL .
    (               reduce using rule 106 (typeName -> BOOL .)
    {               reduce using rule 106 (typeName -> BOOL .)
    NEWL            reduce using rule 106 (typeName -> BOOL .)
    ;               reduce using rule 106 (typeName -> BOOL .)
    ,               reduce using rule 106 (typeName -> BOOL .)
    )               reduce using rule 106 (typeName -> BOOL .)


state 45

    (107) typeName -> RUNE .
    (               reduce using rule 107 (typeName -> RUNE .)
    {               reduce using rule 107 (typeName -> RUNE .)
    NEWL            reduce using rule 107 (typeName -> RUNE .)
    ;               reduce using rule 107 (typeName -> RUNE .)
    ,               reduce using rule 107 (typeName -> RUNE .)
    )               reduce using rule 107 (typeName -> RUNE .)


state 46

    (122) basicLit -> INT_LIT .
    (               reduce using rule 122 (basicLit -> INT_LIT .)
    LOGIC_AND       reduce using rule 122 (basicLit -> INT_LIT .)
    LOGIC_OR        reduce using rule 122 (basicLit -> INT_LIT .)
    SHR             reduce using rule 122 (basicLit -> INT_LIT .)
    SHL             reduce using rule 122 (basicLit -> INT_LIT .)
    AND             reduce using rule 122 (basicLit -> INT_LIT .)
    MOD             reduce using rule 122 (basicLit -> INT_LIT .)
    DIV             reduce using rule 122 (basicLit -> INT_LIT .)
    STAR            reduce using rule 122 (basicLit -> INT_LIT .)
    XOR             reduce using rule 122 (basicLit -> INT_LIT .)
    OR              reduce using rule 122 (basicLit -> INT_LIT .)
    MINUS           reduce using rule 122 (basicLit -> INT_LIT .)
    PLUS            reduce using rule 122 (basicLit -> INT_LIT .)
    GE              reduce using rule 122 (basicLit -> INT_LIT .)
    GT              reduce using rule 122 (basicLit -> INT_LIT .)
    LE              reduce using rule 122 (basicLit -> INT_LIT .)
    LT              reduce using rule 122 (basicLit -> INT_LIT .)
    NE              reduce using rule 122 (basicLit -> INT_LIT .)
    EQ              reduce using rule 122 (basicLit -> INT_LIT .)
    NEWL            reduce using rule 122 (basicLit -> INT_LIT .)
    ;               reduce using rule 122 (basicLit -> INT_LIT .)
    )               reduce using rule 122 (basicLit -> INT_LIT .)
    ,               reduce using rule 122 (basicLit -> INT_LIT .)
    }               reduce using rule 122 (basicLit -> INT_LIT .)
    IDENTIFIER      reduce using rule 122 (basicLit -> INT_LIT .)


state 47

    (123) basicLit -> FLOAT_LIT .
    (125) basicLit -> FLOAT_LIT . EXPONENT
    (               reduce using rule 123 (basicLit -> FLOAT_LIT .)
    LOGIC_AND       reduce using rule 123 (basicLit -> FLOAT_LIT .)
    LOGIC_OR        reduce using rule 123 (basicLit -> FLOAT_LIT .)
    SHR             reduce using rule 123 (basicLit -> FLOAT_LIT .)
    SHL             reduce using rule 123 (basicLit -> FLOAT_LIT .)
    AND             reduce using rule 123 (basicLit -> FLOAT_LIT .)
    MOD             reduce using rule 123 (basicLit -> FLOAT_LIT .)
    DIV             reduce using rule 123 (basicLit -> FLOAT_LIT .)
    STAR            reduce using rule 123 (basicLit -> FLOAT_LIT .)
    XOR             reduce using rule 123 (basicLit -> FLOAT_LIT .)
    OR              reduce using rule 123 (basicLit -> FLOAT_LIT .)
    MINUS           reduce using rule 123 (basicLit -> FLOAT_LIT .)
    PLUS            reduce using rule 123 (basicLit -> FLOAT_LIT .)
    GE              reduce using rule 123 (basicLit -> FLOAT_LIT .)
    GT              reduce using rule 123 (basicLit -> FLOAT_LIT .)
    LE              reduce using rule 123 (basicLit -> FLOAT_LIT .)
    LT              reduce using rule 123 (basicLit -> FLOAT_LIT .)
    NE              reduce using rule 123 (basicLit -> FLOAT_LIT .)
    EQ              reduce using rule 123 (basicLit -> FLOAT_LIT .)
    NEWL            reduce using rule 123 (basicLit -> FLOAT_LIT .)
    ;               reduce using rule 123 (basicLit -> FLOAT_LIT .)
    )               reduce using rule 123 (basicLit -> FLOAT_LIT .)
    ,               reduce using rule 123 (basicLit -> FLOAT_LIT .)
    }               reduce using rule 123 (basicLit -> FLOAT_LIT .)
    IDENTIFIER      reduce using rule 123 (basicLit -> FLOAT_LIT .)
    EXPONENT        shift and go to state 150


state 48

    (124) basicLit -> DECIMAL_LIT . EXPONENT
    (136) INT_LIT -> DECIMAL_LIT .
    (131) FLOAT_LIT -> DECIMAL_LIT . .
    (132) FLOAT_LIT -> DECIMAL_LIT . . DECIMAL_LIT
    EXPONENT        shift and go to state 151
    (               reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    SHR             reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    SHL             reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    AND             reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    MOD             reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    DIV             reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    STAR            reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    XOR             reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    OR              reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    MINUS           reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    PLUS            reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    GE              reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    GT              reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    LE              reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    LT              reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    NE              reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    EQ              reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    NEWL            reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    ;               reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    )               reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    ,               reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    }               reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    IDENTIFIER      reduce using rule 136 (INT_LIT -> DECIMAL_LIT .)
    .               shift and go to state 152


state 49

    (126) basicLit -> FALSE .
    (               reduce using rule 126 (basicLit -> FALSE .)
    LOGIC_AND       reduce using rule 126 (basicLit -> FALSE .)
    LOGIC_OR        reduce using rule 126 (basicLit -> FALSE .)
    SHR             reduce using rule 126 (basicLit -> FALSE .)
    SHL             reduce using rule 126 (basicLit -> FALSE .)
    AND             reduce using rule 126 (basicLit -> FALSE .)
    MOD             reduce using rule 126 (basicLit -> FALSE .)
    DIV             reduce using rule 126 (basicLit -> FALSE .)
    STAR            reduce using rule 126 (basicLit -> FALSE .)
    XOR             reduce using rule 126 (basicLit -> FALSE .)
    OR              reduce using rule 126 (basicLit -> FALSE .)
    MINUS           reduce using rule 126 (basicLit -> FALSE .)
    PLUS            reduce using rule 126 (basicLit -> FALSE .)
    GE              reduce using rule 126 (basicLit -> FALSE .)
    GT              reduce using rule 126 (basicLit -> FALSE .)
    LE              reduce using rule 126 (basicLit -> FALSE .)
    LT              reduce using rule 126 (basicLit -> FALSE .)
    NE              reduce using rule 126 (basicLit -> FALSE .)
    EQ              reduce using rule 126 (basicLit -> FALSE .)
    NEWL            reduce using rule 126 (basicLit -> FALSE .)
    ;               reduce using rule 126 (basicLit -> FALSE .)
    )               reduce using rule 126 (basicLit -> FALSE .)
    ,               reduce using rule 126 (basicLit -> FALSE .)
    }               reduce using rule 126 (basicLit -> FALSE .)
    IDENTIFIER      reduce using rule 126 (basicLit -> FALSE .)


state 50

    (127) basicLit -> TRUE .
    (               reduce using rule 127 (basicLit -> TRUE .)
    LOGIC_AND       reduce using rule 127 (basicLit -> TRUE .)
    LOGIC_OR        reduce using rule 127 (basicLit -> TRUE .)
    SHR             reduce using rule 127 (basicLit -> TRUE .)
    SHL             reduce using rule 127 (basicLit -> TRUE .)
    AND             reduce using rule 127 (basicLit -> TRUE .)
    MOD             reduce using rule 127 (basicLit -> TRUE .)
    DIV             reduce using rule 127 (basicLit -> TRUE .)
    STAR            reduce using rule 127 (basicLit -> TRUE .)
    XOR             reduce using rule 127 (basicLit -> TRUE .)
    OR              reduce using rule 127 (basicLit -> TRUE .)
    MINUS           reduce using rule 127 (basicLit -> TRUE .)
    PLUS            reduce using rule 127 (basicLit -> TRUE .)
    GE              reduce using rule 127 (basicLit -> TRUE .)
    GT              reduce using rule 127 (basicLit -> TRUE .)
    LE              reduce using rule 127 (basicLit -> TRUE .)
    LT              reduce using rule 127 (basicLit -> TRUE .)
    NE              reduce using rule 127 (basicLit -> TRUE .)
    EQ              reduce using rule 127 (basicLit -> TRUE .)
    NEWL            reduce using rule 127 (basicLit -> TRUE .)
    ;               reduce using rule 127 (basicLit -> TRUE .)
    )               reduce using rule 127 (basicLit -> TRUE .)
    ,               reduce using rule 127 (basicLit -> TRUE .)
    }               reduce using rule 127 (basicLit -> TRUE .)
    IDENTIFIER      reduce using rule 127 (basicLit -> TRUE .)


state 51

    (128) basicLit -> RUNE_LIT .
    (               reduce using rule 128 (basicLit -> RUNE_LIT .)
    LOGIC_AND       reduce using rule 128 (basicLit -> RUNE_LIT .)
    LOGIC_OR        reduce using rule 128 (basicLit -> RUNE_LIT .)
    SHR             reduce using rule 128 (basicLit -> RUNE_LIT .)
    SHL             reduce using rule 128 (basicLit -> RUNE_LIT .)
    AND             reduce using rule 128 (basicLit -> RUNE_LIT .)
    MOD             reduce using rule 128 (basicLit -> RUNE_LIT .)
    DIV             reduce using rule 128 (basicLit -> RUNE_LIT .)
    STAR            reduce using rule 128 (basicLit -> RUNE_LIT .)
    XOR             reduce using rule 128 (basicLit -> RUNE_LIT .)
    OR              reduce using rule 128 (basicLit -> RUNE_LIT .)
    MINUS           reduce using rule 128 (basicLit -> RUNE_LIT .)
    PLUS            reduce using rule 128 (basicLit -> RUNE_LIT .)
    GE              reduce using rule 128 (basicLit -> RUNE_LIT .)
    GT              reduce using rule 128 (basicLit -> RUNE_LIT .)
    LE              reduce using rule 128 (basicLit -> RUNE_LIT .)
    LT              reduce using rule 128 (basicLit -> RUNE_LIT .)
    NE              reduce using rule 128 (basicLit -> RUNE_LIT .)
    EQ              reduce using rule 128 (basicLit -> RUNE_LIT .)
    NEWL            reduce using rule 128 (basicLit -> RUNE_LIT .)
    ;               reduce using rule 128 (basicLit -> RUNE_LIT .)
    )               reduce using rule 128 (basicLit -> RUNE_LIT .)
    ,               reduce using rule 128 (basicLit -> RUNE_LIT .)
    }               reduce using rule 128 (basicLit -> RUNE_LIT .)
    IDENTIFIER      reduce using rule 128 (basicLit -> RUNE_LIT .)


state 52

    (129) basicLit -> STRING_LIT .
    (               reduce using rule 129 (basicLit -> STRING_LIT .)
    LOGIC_AND       reduce using rule 129 (basicLit -> STRING_LIT .)
    LOGIC_OR        reduce using rule 129 (basicLit -> STRING_LIT .)
    SHR             reduce using rule 129 (basicLit -> STRING_LIT .)
    SHL             reduce using rule 129 (basicLit -> STRING_LIT .)
    AND             reduce using rule 129 (basicLit -> STRING_LIT .)
    MOD             reduce using rule 129 (basicLit -> STRING_LIT .)
    DIV             reduce using rule 129 (basicLit -> STRING_LIT .)
    STAR            reduce using rule 129 (basicLit -> STRING_LIT .)
    XOR             reduce using rule 129 (basicLit -> STRING_LIT .)
    OR              reduce using rule 129 (basicLit -> STRING_LIT .)
    MINUS           reduce using rule 129 (basicLit -> STRING_LIT .)
    PLUS            reduce using rule 129 (basicLit -> STRING_LIT .)
    GE              reduce using rule 129 (basicLit -> STRING_LIT .)
    GT              reduce using rule 129 (basicLit -> STRING_LIT .)
    LE              reduce using rule 129 (basicLit -> STRING_LIT .)
    LT              reduce using rule 129 (basicLit -> STRING_LIT .)
    NE              reduce using rule 129 (basicLit -> STRING_LIT .)
    EQ              reduce using rule 129 (basicLit -> STRING_LIT .)
    NEWL            reduce using rule 129 (basicLit -> STRING_LIT .)
    ;               reduce using rule 129 (basicLit -> STRING_LIT .)
    )               reduce using rule 129 (basicLit -> STRING_LIT .)
    ,               reduce using rule 129 (basicLit -> STRING_LIT .)
    }               reduce using rule 129 (basicLit -> STRING_LIT .)
    IDENTIFIER      reduce using rule 129 (basicLit -> STRING_LIT .)


state 53

    (108) numericType -> F32 .
    (               reduce using rule 108 (numericType -> F32 .)
    {               reduce using rule 108 (numericType -> F32 .)
    NEWL            reduce using rule 108 (numericType -> F32 .)
    ;               reduce using rule 108 (numericType -> F32 .)
    ,               reduce using rule 108 (numericType -> F32 .)
    )               reduce using rule 108 (numericType -> F32 .)


state 54

    (109) numericType -> F64 .
    (               reduce using rule 109 (numericType -> F64 .)
    {               reduce using rule 109 (numericType -> F64 .)
    NEWL            reduce using rule 109 (numericType -> F64 .)
    ;               reduce using rule 109 (numericType -> F64 .)
    ,               reduce using rule 109 (numericType -> F64 .)
    )               reduce using rule 109 (numericType -> F64 .)


state 55

    (110) numericType -> INT .
    (               reduce using rule 110 (numericType -> INT .)
    {               reduce using rule 110 (numericType -> INT .)
    NEWL            reduce using rule 110 (numericType -> INT .)
    ;               reduce using rule 110 (numericType -> INT .)
    ,               reduce using rule 110 (numericType -> INT .)
    )               reduce using rule 110 (numericType -> INT .)


state 56

    (111) numericType -> ISIZE .
    (               reduce using rule 111 (numericType -> ISIZE .)
    {               reduce using rule 111 (numericType -> ISIZE .)
    NEWL            reduce using rule 111 (numericType -> ISIZE .)
    ;               reduce using rule 111 (numericType -> ISIZE .)
    ,               reduce using rule 111 (numericType -> ISIZE .)
    )               reduce using rule 111 (numericType -> ISIZE .)


state 57

    (112) numericType -> I64 .
    (               reduce using rule 112 (numericType -> I64 .)
    {               reduce using rule 112 (numericType -> I64 .)
    NEWL            reduce using rule 112 (numericType -> I64 .)
    ;               reduce using rule 112 (numericType -> I64 .)
    ,               reduce using rule 112 (numericType -> I64 .)
    )               reduce using rule 112 (numericType -> I64 .)


state 58

    (113) numericType -> I32 .
    (               reduce using rule 113 (numericType -> I32 .)
    {               reduce using rule 113 (numericType -> I32 .)
    NEWL            reduce using rule 113 (numericType -> I32 .)
    ;               reduce using rule 113 (numericType -> I32 .)
    ,               reduce using rule 113 (numericType -> I32 .)
    )               reduce using rule 113 (numericType -> I32 .)


state 59

    (114) numericType -> I16 .
    (               reduce using rule 114 (numericType -> I16 .)
    {               reduce using rule 114 (numericType -> I16 .)
    NEWL            reduce using rule 114 (numericType -> I16 .)
    ;               reduce using rule 114 (numericType -> I16 .)
    ,               reduce using rule 114 (numericType -> I16 .)
    )               reduce using rule 114 (numericType -> I16 .)


state 60

    (115) numericType -> I8 .
    (               reduce using rule 115 (numericType -> I8 .)
    {               reduce using rule 115 (numericType -> I8 .)
    NEWL            reduce using rule 115 (numericType -> I8 .)
    ;               reduce using rule 115 (numericType -> I8 .)
    ,               reduce using rule 115 (numericType -> I8 .)
    )               reduce using rule 115 (numericType -> I8 .)


state 61

    (116) numericType -> UINT .
    (               reduce using rule 116 (numericType -> UINT .)
    {               reduce using rule 116 (numericType -> UINT .)
    NEWL            reduce using rule 116 (numericType -> UINT .)
    ;               reduce using rule 116 (numericType -> UINT .)
    ,               reduce using rule 116 (numericType -> UINT .)
    )               reduce using rule 116 (numericType -> UINT .)


state 62

    (117) numericType -> USIZE .
    (               reduce using rule 117 (numericType -> USIZE .)
    {               reduce using rule 117 (numericType -> USIZE .)
    NEWL            reduce using rule 117 (numericType -> USIZE .)
    ;               reduce using rule 117 (numericType -> USIZE .)
    ,               reduce using rule 117 (numericType -> USIZE .)
    )               reduce using rule 117 (numericType -> USIZE .)


state 63

    (118) numericType -> U64 .
    (               reduce using rule 118 (numericType -> U64 .)
    {               reduce using rule 118 (numericType -> U64 .)
    NEWL            reduce using rule 118 (numericType -> U64 .)
    ;               reduce using rule 118 (numericType -> U64 .)
    ,               reduce using rule 118 (numericType -> U64 .)
    )               reduce using rule 118 (numericType -> U64 .)


state 64

    (119) numericType -> U32 .
    (               reduce using rule 119 (numericType -> U32 .)
    {               reduce using rule 119 (numericType -> U32 .)
    NEWL            reduce using rule 119 (numericType -> U32 .)
    ;               reduce using rule 119 (numericType -> U32 .)
    ,               reduce using rule 119 (numericType -> U32 .)
    )               reduce using rule 119 (numericType -> U32 .)


state 65

    (120) numericType -> U16 .
    (               reduce using rule 120 (numericType -> U16 .)
    {               reduce using rule 120 (numericType -> U16 .)
    NEWL            reduce using rule 120 (numericType -> U16 .)
    ;               reduce using rule 120 (numericType -> U16 .)
    ,               reduce using rule 120 (numericType -> U16 .)
    )               reduce using rule 120 (numericType -> U16 .)


state 66

    (121) numericType -> U8 .
    (               reduce using rule 121 (numericType -> U8 .)
    {               reduce using rule 121 (numericType -> U8 .)
    NEWL            reduce using rule 121 (numericType -> U8 .)
    ;               reduce using rule 121 (numericType -> U8 .)
    ,               reduce using rule 121 (numericType -> U8 .)
    )               reduce using rule 121 (numericType -> U8 .)


state 67

    (133) INT_LIT -> HEX_LIT .
    (               reduce using rule 133 (INT_LIT -> HEX_LIT .)
    LOGIC_AND       reduce using rule 133 (INT_LIT -> HEX_LIT .)
    LOGIC_OR        reduce using rule 133 (INT_LIT -> HEX_LIT .)
    SHR             reduce using rule 133 (INT_LIT -> HEX_LIT .)
    SHL             reduce using rule 133 (INT_LIT -> HEX_LIT .)
    AND             reduce using rule 133 (INT_LIT -> HEX_LIT .)
    MOD             reduce using rule 133 (INT_LIT -> HEX_LIT .)
    DIV             reduce using rule 133 (INT_LIT -> HEX_LIT .)
    STAR            reduce using rule 133 (INT_LIT -> HEX_LIT .)
    XOR             reduce using rule 133 (INT_LIT -> HEX_LIT .)
    OR              reduce using rule 133 (INT_LIT -> HEX_LIT .)
    MINUS           reduce using rule 133 (INT_LIT -> HEX_LIT .)
    PLUS            reduce using rule 133 (INT_LIT -> HEX_LIT .)
    GE              reduce using rule 133 (INT_LIT -> HEX_LIT .)
    GT              reduce using rule 133 (INT_LIT -> HEX_LIT .)
    LE              reduce using rule 133 (INT_LIT -> HEX_LIT .)
    LT              reduce using rule 133 (INT_LIT -> HEX_LIT .)
    NE              reduce using rule 133 (INT_LIT -> HEX_LIT .)
    EQ              reduce using rule 133 (INT_LIT -> HEX_LIT .)
    NEWL            reduce using rule 133 (INT_LIT -> HEX_LIT .)
    ;               reduce using rule 133 (INT_LIT -> HEX_LIT .)
    )               reduce using rule 133 (INT_LIT -> HEX_LIT .)
    ,               reduce using rule 133 (INT_LIT -> HEX_LIT .)
    }               reduce using rule 133 (INT_LIT -> HEX_LIT .)
    IDENTIFIER      reduce using rule 133 (INT_LIT -> HEX_LIT .)


state 68

    (134) INT_LIT -> OCTAL_LIT .
    (               reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    LOGIC_AND       reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    LOGIC_OR        reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    SHR             reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    SHL             reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    AND             reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    MOD             reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    DIV             reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    STAR            reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    XOR             reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    OR              reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    MINUS           reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    PLUS            reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    GE              reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    GT              reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    LE              reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    LT              reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    NE              reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    EQ              reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    NEWL            reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    ;               reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    )               reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    ,               reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    }               reduce using rule 134 (INT_LIT -> OCTAL_LIT .)
    IDENTIFIER      reduce using rule 134 (INT_LIT -> OCTAL_LIT .)


state 69

    (135) INT_LIT -> BINARY_LIT .
    (               reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    LOGIC_AND       reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    LOGIC_OR        reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    SHR             reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    SHL             reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    AND             reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    MOD             reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    DIV             reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    STAR            reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    XOR             reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    OR              reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    MINUS           reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    PLUS            reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    GE              reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    GT              reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    LE              reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    LT              reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    NE              reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    EQ              reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    NEWL            reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    ;               reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    )               reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    ,               reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    }               reduce using rule 135 (INT_LIT -> BINARY_LIT .)
    IDENTIFIER      reduce using rule 135 (INT_LIT -> BINARY_LIT .)


state 70

    (130) FLOAT_LIT -> . . DECIMAL_LIT
    DECIMAL_LIT     shift and go to state 153


state 71

    (17) sourceFile -> topLevelDecls orphanStmtList .
    $end            reduce using rule 17 (sourceFile -> topLevelDecls orphanStmtList .)


state 72

    (39) topLevelDecls -> topLevelDecls topLevelDecl . eos
    (137) eos -> . eos NEWL
    (138) eos -> . NEWL
    (139) eos -> . eos ;
    (140) eos -> . ;
    NEWL            shift and go to state 85
    ;               shift and go to state 86

    eos                            shift and go to state 154

state 73

    (2) sourceFile -> moduleClause topLevelDecls .
    (18) sourceFile -> moduleClause topLevelDecls . orphanStmtList
    (39) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (43) topLevelDecl -> . constDecl
    (73) statementList -> . statementList eos statement
    (74) statementList -> . statement
    (56) functionDecl -> . FN IDENTIFIER signature
    (57) functionDecl -> . FN IDENTIFIER function_
    (46) constDecl -> . CONST ( eos constSpecs )
    (47) constDecl -> . CONST ( constSpecs )
    (48) constDecl -> . CONST constSpec
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 2 (sourceFile -> moduleClause topLevelDecls .)
    FN              shift and go to state 18
    CONST           shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    orphanStmtList                 shift and go to state 155
    topLevelDecl                   shift and go to state 72
    statementList                  shift and go to state 12
    functionDecl                   shift and go to state 13
    constDecl                      shift and go to state 14
    statement                      shift and go to state 17
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 74

    (7) sourceFile -> moduleClause importDecls . topLevelDecls
    (15) sourceFile -> moduleClause importDecls . orphanStmtList
    (23) sourceFile -> moduleClause importDecls . topLevelDecls orphanStmtList
    (31) importDecls -> importDecls . importDecl eos
    (39) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (40) topLevelDecls -> . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (33) importDecl -> . IMPORT importSpec
    (42) topLevelDecl -> . functionDecl
    (43) topLevelDecl -> . constDecl
    (73) statementList -> . statementList eos statement
    (74) statementList -> . statement
    (56) functionDecl -> . FN IDENTIFIER signature
    (57) functionDecl -> . FN IDENTIFIER function_
    (46) constDecl -> . CONST ( eos constSpecs )
    (47) constDecl -> . CONST ( constSpecs )
    (48) constDecl -> . CONST constSpec
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IMPORT          shift and go to state 16
    FN              shift and go to state 18
    CONST           shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    topLevelDecls                  shift and go to state 156
    orphanStmtList                 shift and go to state 157
    importDecl                     shift and go to state 83
    topLevelDecl                   shift and go to state 7
    statementList                  shift and go to state 12
    functionDecl                   shift and go to state 13
    constDecl                      shift and go to state 14
    statement                      shift and go to state 17
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 75

    (10) sourceFile -> moduleClause orphanStmtList .
    $end            reduce using rule 10 (sourceFile -> moduleClause orphanStmtList .)


state 76

    (3) sourceFile -> cPreprocessors topLevelDecls .
    (19) sourceFile -> cPreprocessors topLevelDecls . orphanStmtList
    (39) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (43) topLevelDecl -> . constDecl
    (73) statementList -> . statementList eos statement
    (74) statementList -> . statement
    (56) functionDecl -> . FN IDENTIFIER signature
    (57) functionDecl -> . FN IDENTIFIER function_
    (46) constDecl -> . CONST ( eos constSpecs )
    (47) constDecl -> . CONST ( constSpecs )
    (48) constDecl -> . CONST constSpec
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 3 (sourceFile -> cPreprocessors topLevelDecls .)
    FN              shift and go to state 18
    CONST           shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    orphanStmtList                 shift and go to state 158
    topLevelDecl                   shift and go to state 72
    statementList                  shift and go to state 12
    functionDecl                   shift and go to state 13
    constDecl                      shift and go to state 14
    statement                      shift and go to state 17
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 77

    (5) sourceFile -> cPreprocessors moduleClause . topLevelDecls
    (8) sourceFile -> cPreprocessors moduleClause . importDecls topLevelDecls
    (13) sourceFile -> cPreprocessors moduleClause . orphanStmtList
    (16) sourceFile -> cPreprocessors moduleClause . importDecls orphanStmtList
    (21) sourceFile -> cPreprocessors moduleClause . topLevelDecls orphanStmtList
    (24) sourceFile -> cPreprocessors moduleClause . importDecls topLevelDecls orphanStmtList
    (39) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (40) topLevelDecls -> . topLevelDecl eos
    (31) importDecls -> . importDecls importDecl eos
    (32) importDecls -> . importDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (43) topLevelDecl -> . constDecl
    (33) importDecl -> . IMPORT importSpec
    (73) statementList -> . statementList eos statement
    (74) statementList -> . statement
    (56) functionDecl -> . FN IDENTIFIER signature
    (57) functionDecl -> . FN IDENTIFIER function_
    (46) constDecl -> . CONST ( eos constSpecs )
    (47) constDecl -> . CONST ( constSpecs )
    (48) constDecl -> . CONST constSpec
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IMPORT          shift and go to state 16
    FN              shift and go to state 18
    CONST           shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    topLevelDecls                  shift and go to state 159
    importDecls                    shift and go to state 160
    orphanStmtList                 shift and go to state 161
    topLevelDecl                   shift and go to state 7
    importDecl                     shift and go to state 11
    statementList                  shift and go to state 12
    functionDecl                   shift and go to state 13
    constDecl                      shift and go to state 14
    statement                      shift and go to state 17
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 78

    (6) sourceFile -> cPreprocessors importDecls . topLevelDecls
    (14) sourceFile -> cPreprocessors importDecls . orphanStmtList
    (22) sourceFile -> cPreprocessors importDecls . topLevelDecls orphanStmtList
    (31) importDecls -> importDecls . importDecl eos
    (39) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (40) topLevelDecls -> . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (33) importDecl -> . IMPORT importSpec
    (42) topLevelDecl -> . functionDecl
    (43) topLevelDecl -> . constDecl
    (73) statementList -> . statementList eos statement
    (74) statementList -> . statement
    (56) functionDecl -> . FN IDENTIFIER signature
    (57) functionDecl -> . FN IDENTIFIER function_
    (46) constDecl -> . CONST ( eos constSpecs )
    (47) constDecl -> . CONST ( constSpecs )
    (48) constDecl -> . CONST constSpec
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IMPORT          shift and go to state 16
    FN              shift and go to state 18
    CONST           shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    topLevelDecls                  shift and go to state 162
    orphanStmtList                 shift and go to state 163
    importDecl                     shift and go to state 83
    topLevelDecl                   shift and go to state 7
    statementList                  shift and go to state 12
    functionDecl                   shift and go to state 13
    constDecl                      shift and go to state 14
    statement                      shift and go to state 17
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 79

    (11) sourceFile -> cPreprocessors orphanStmtList .
    $end            reduce using rule 11 (sourceFile -> cPreprocessors orphanStmtList .)


state 80

    (26) cPreprocessors -> cPreprocessors cPreprocessor . eos
    (137) eos -> . eos NEWL
    (138) eos -> . NEWL
    (139) eos -> . eos ;
    (140) eos -> . ;
    NEWL            shift and go to state 85
    ;               shift and go to state 86

    eos                            shift and go to state 164

state 81

    (4) sourceFile -> importDecls topLevelDecls .
    (20) sourceFile -> importDecls topLevelDecls . orphanStmtList
    (39) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (43) topLevelDecl -> . constDecl
    (73) statementList -> . statementList eos statement
    (74) statementList -> . statement
    (56) functionDecl -> . FN IDENTIFIER signature
    (57) functionDecl -> . FN IDENTIFIER function_
    (46) constDecl -> . CONST ( eos constSpecs )
    (47) constDecl -> . CONST ( constSpecs )
    (48) constDecl -> . CONST constSpec
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 4 (sourceFile -> importDecls topLevelDecls .)
    FN              shift and go to state 18
    CONST           shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    orphanStmtList                 shift and go to state 165
    topLevelDecl                   shift and go to state 72
    statementList                  shift and go to state 12
    functionDecl                   shift and go to state 13
    constDecl                      shift and go to state 14
    statement                      shift and go to state 17
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 82

    (12) sourceFile -> importDecls orphanStmtList .
    $end            reduce using rule 12 (sourceFile -> importDecls orphanStmtList .)


state 83

    (31) importDecls -> importDecls importDecl . eos
    (137) eos -> . eos NEWL
    (138) eos -> . NEWL
    (139) eos -> . eos ;
    (140) eos -> . ;
    NEWL            shift and go to state 85
    ;               shift and go to state 86

    eos                            shift and go to state 166

state 84

    (40) topLevelDecls -> topLevelDecl eos .
    (137) eos -> eos . NEWL
    (139) eos -> eos . ;
    FN              reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    CONST           reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    IDENTIFIER      reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    AND             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    EXCLM           reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    MINUS           reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    (               reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    STRING          reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    BOOL            reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    RUNE            reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    DECIMAL_LIT     reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    FALSE           reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    TRUE            reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    RUNE_LIT        reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    STRING_LIT      reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    F32             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    F64             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    INT             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    ISIZE           reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    I64             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    I32             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    I16             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    I8              reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    UINT            reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    USIZE           reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    U64             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    U32             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    U16             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    U8              reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    HEX_LIT         reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    OCTAL_LIT       reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    BINARY_LIT      reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    .               reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    $end            reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    NEWL            shift and go to state 167
    ;               shift and go to state 168


state 85

    (138) eos -> NEWL .
    NEWL            reduce using rule 138 (eos -> NEWL .)
    ;               reduce using rule 138 (eos -> NEWL .)
    FN              reduce using rule 138 (eos -> NEWL .)
    CONST           reduce using rule 138 (eos -> NEWL .)
    IDENTIFIER      reduce using rule 138 (eos -> NEWL .)
    AND             reduce using rule 138 (eos -> NEWL .)
    EXCLM           reduce using rule 138 (eos -> NEWL .)
    MINUS           reduce using rule 138 (eos -> NEWL .)
    (               reduce using rule 138 (eos -> NEWL .)
    STRING          reduce using rule 138 (eos -> NEWL .)
    BOOL            reduce using rule 138 (eos -> NEWL .)
    RUNE            reduce using rule 138 (eos -> NEWL .)
    DECIMAL_LIT     reduce using rule 138 (eos -> NEWL .)
    FALSE           reduce using rule 138 (eos -> NEWL .)
    TRUE            reduce using rule 138 (eos -> NEWL .)
    RUNE_LIT        reduce using rule 138 (eos -> NEWL .)
    STRING_LIT      reduce using rule 138 (eos -> NEWL .)
    F32             reduce using rule 138 (eos -> NEWL .)
    F64             reduce using rule 138 (eos -> NEWL .)
    INT             reduce using rule 138 (eos -> NEWL .)
    ISIZE           reduce using rule 138 (eos -> NEWL .)
    I64             reduce using rule 138 (eos -> NEWL .)
    I32             reduce using rule 138 (eos -> NEWL .)
    I16             reduce using rule 138 (eos -> NEWL .)
    I8              reduce using rule 138 (eos -> NEWL .)
    UINT            reduce using rule 138 (eos -> NEWL .)
    USIZE           reduce using rule 138 (eos -> NEWL .)
    U64             reduce using rule 138 (eos -> NEWL .)
    U32             reduce using rule 138 (eos -> NEWL .)
    U16             reduce using rule 138 (eos -> NEWL .)
    U8              reduce using rule 138 (eos -> NEWL .)
    HEX_LIT         reduce using rule 138 (eos -> NEWL .)
    OCTAL_LIT       reduce using rule 138 (eos -> NEWL .)
    BINARY_LIT      reduce using rule 138 (eos -> NEWL .)
    .               reduce using rule 138 (eos -> NEWL .)
    $end            reduce using rule 138 (eos -> NEWL .)
    MODULE          reduce using rule 138 (eos -> NEWL .)
    C_PREPR         reduce using rule 138 (eos -> NEWL .)
    IMPORT          reduce using rule 138 (eos -> NEWL .)
    )               reduce using rule 138 (eos -> NEWL .)


state 86

    (140) eos -> ; .
    NEWL            reduce using rule 140 (eos -> ; .)
    ;               reduce using rule 140 (eos -> ; .)
    FN              reduce using rule 140 (eos -> ; .)
    CONST           reduce using rule 140 (eos -> ; .)
    IDENTIFIER      reduce using rule 140 (eos -> ; .)
    AND             reduce using rule 140 (eos -> ; .)
    EXCLM           reduce using rule 140 (eos -> ; .)
    MINUS           reduce using rule 140 (eos -> ; .)
    (               reduce using rule 140 (eos -> ; .)
    STRING          reduce using rule 140 (eos -> ; .)
    BOOL            reduce using rule 140 (eos -> ; .)
    RUNE            reduce using rule 140 (eos -> ; .)
    DECIMAL_LIT     reduce using rule 140 (eos -> ; .)
    FALSE           reduce using rule 140 (eos -> ; .)
    TRUE            reduce using rule 140 (eos -> ; .)
    RUNE_LIT        reduce using rule 140 (eos -> ; .)
    STRING_LIT      reduce using rule 140 (eos -> ; .)
    F32             reduce using rule 140 (eos -> ; .)
    F64             reduce using rule 140 (eos -> ; .)
    INT             reduce using rule 140 (eos -> ; .)
    ISIZE           reduce using rule 140 (eos -> ; .)
    I64             reduce using rule 140 (eos -> ; .)
    I32             reduce using rule 140 (eos -> ; .)
    I16             reduce using rule 140 (eos -> ; .)
    I8              reduce using rule 140 (eos -> ; .)
    UINT            reduce using rule 140 (eos -> ; .)
    USIZE           reduce using rule 140 (eos -> ; .)
    U64             reduce using rule 140 (eos -> ; .)
    U32             reduce using rule 140 (eos -> ; .)
    U16             reduce using rule 140 (eos -> ; .)
    U8              reduce using rule 140 (eos -> ; .)
    HEX_LIT         reduce using rule 140 (eos -> ; .)
    OCTAL_LIT       reduce using rule 140 (eos -> ; .)
    BINARY_LIT      reduce using rule 140 (eos -> ; .)
    .               reduce using rule 140 (eos -> ; .)
    $end            reduce using rule 140 (eos -> ; .)
    MODULE          reduce using rule 140 (eos -> ; .)
    C_PREPR         reduce using rule 140 (eos -> ; .)
    IMPORT          reduce using rule 140 (eos -> ; .)
    )               reduce using rule 140 (eos -> ; .)


state 87

    (25) moduleClause -> MODULE IDENTIFIER . eos
    (137) eos -> . eos NEWL
    (138) eos -> . NEWL
    (139) eos -> . eos ;
    (140) eos -> . ;
    NEWL            shift and go to state 85
    ;               shift and go to state 86

    eos                            shift and go to state 169

state 88

    (27) cPreprocessors -> cPreprocessor eos .
    (137) eos -> eos . NEWL
    (139) eos -> eos . ;
    MODULE          reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    C_PREPR         reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    IMPORT          reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    FN              reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    CONST           reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    IDENTIFIER      reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    AND             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    EXCLM           reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    MINUS           reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    (               reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    STRING          reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    BOOL            reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    RUNE            reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    DECIMAL_LIT     reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    FALSE           reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    TRUE            reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    RUNE_LIT        reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    STRING_LIT      reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    F32             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    F64             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    INT             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    ISIZE           reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    I64             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    I32             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    I16             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    I8              reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    UINT            reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    USIZE           reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    U64             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    U32             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    U16             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    U8              reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    HEX_LIT         reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    OCTAL_LIT       reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    BINARY_LIT      reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    .               reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    NEWL            shift and go to state 167
    ;               shift and go to state 168


state 89

    (32) importDecls -> importDecl eos .
    (137) eos -> eos . NEWL
    (139) eos -> eos . ;
    IMPORT          reduce using rule 32 (importDecls -> importDecl eos .)
    FN              reduce using rule 32 (importDecls -> importDecl eos .)
    CONST           reduce using rule 32 (importDecls -> importDecl eos .)
    IDENTIFIER      reduce using rule 32 (importDecls -> importDecl eos .)
    AND             reduce using rule 32 (importDecls -> importDecl eos .)
    EXCLM           reduce using rule 32 (importDecls -> importDecl eos .)
    MINUS           reduce using rule 32 (importDecls -> importDecl eos .)
    (               reduce using rule 32 (importDecls -> importDecl eos .)
    STRING          reduce using rule 32 (importDecls -> importDecl eos .)
    BOOL            reduce using rule 32 (importDecls -> importDecl eos .)
    RUNE            reduce using rule 32 (importDecls -> importDecl eos .)
    DECIMAL_LIT     reduce using rule 32 (importDecls -> importDecl eos .)
    FALSE           reduce using rule 32 (importDecls -> importDecl eos .)
    TRUE            reduce using rule 32 (importDecls -> importDecl eos .)
    RUNE_LIT        reduce using rule 32 (importDecls -> importDecl eos .)
    STRING_LIT      reduce using rule 32 (importDecls -> importDecl eos .)
    F32             reduce using rule 32 (importDecls -> importDecl eos .)
    F64             reduce using rule 32 (importDecls -> importDecl eos .)
    INT             reduce using rule 32 (importDecls -> importDecl eos .)
    ISIZE           reduce using rule 32 (importDecls -> importDecl eos .)
    I64             reduce using rule 32 (importDecls -> importDecl eos .)
    I32             reduce using rule 32 (importDecls -> importDecl eos .)
    I16             reduce using rule 32 (importDecls -> importDecl eos .)
    I8              reduce using rule 32 (importDecls -> importDecl eos .)
    UINT            reduce using rule 32 (importDecls -> importDecl eos .)
    USIZE           reduce using rule 32 (importDecls -> importDecl eos .)
    U64             reduce using rule 32 (importDecls -> importDecl eos .)
    U32             reduce using rule 32 (importDecls -> importDecl eos .)
    U16             reduce using rule 32 (importDecls -> importDecl eos .)
    U8              reduce using rule 32 (importDecls -> importDecl eos .)
    HEX_LIT         reduce using rule 32 (importDecls -> importDecl eos .)
    OCTAL_LIT       reduce using rule 32 (importDecls -> importDecl eos .)
    BINARY_LIT      reduce using rule 32 (importDecls -> importDecl eos .)
    .               reduce using rule 32 (importDecls -> importDecl eos .)
    NEWL            shift and go to state 167
    ;               shift and go to state 168


state 90

    (41) orphanStmtList -> statementList eos .
    (73) statementList -> statementList eos . statement
    (137) eos -> eos . NEWL
    (139) eos -> eos . ;
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 41 (orphanStmtList -> statementList eos .)
    NEWL            shift and go to state 167
    ;               shift and go to state 168
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 109
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    statement                      shift and go to state 170
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 91

    (28) cPreprocessor -> C_PREPR C_STRING_LIT .
    NEWL            reduce using rule 28 (cPreprocessor -> C_PREPR C_STRING_LIT .)
    ;               reduce using rule 28 (cPreprocessor -> C_PREPR C_STRING_LIT .)


state 92

    (29) cPreprocessor -> C_PREPR C_PATH_LIT .
    NEWL            reduce using rule 29 (cPreprocessor -> C_PREPR C_PATH_LIT .)
    ;               reduce using rule 29 (cPreprocessor -> C_PREPR C_PATH_LIT .)


state 93

    (30) cPreprocessor -> C_PREPR IDENTIFIER . expressionList
    (71) expressionList -> . expressionList , expression
    (72) expressionList -> . expression
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    IDENTIFIER      shift and go to state 108
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 109
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    expressionList                 shift and go to state 171
    expression                     shift and go to state 172
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 94

    (33) importDecl -> IMPORT importSpec .
    NEWL            reduce using rule 33 (importDecl -> IMPORT importSpec .)
    ;               reduce using rule 33 (importDecl -> IMPORT importSpec .)


state 95

    (34) importSpec -> importPath .
    NEWL            reduce using rule 34 (importSpec -> importPath .)
    ;               reduce using rule 34 (importSpec -> importPath .)


state 96

    (35) importSpec -> IDENTIFIER . importPath
    (38) importPath -> IDENTIFIER .
    (37) importPath -> . STRING_LIT
    (38) importPath -> . IDENTIFIER
    NEWL            reduce using rule 38 (importPath -> IDENTIFIER .)
    ;               reduce using rule 38 (importPath -> IDENTIFIER .)
    STRING_LIT      shift and go to state 98
    IDENTIFIER      shift and go to state 173

    importPath                     shift and go to state 174

state 97

    (36) importSpec -> . . importPath
    (37) importPath -> . STRING_LIT
    (38) importPath -> . IDENTIFIER
    STRING_LIT      shift and go to state 98
    IDENTIFIER      shift and go to state 173

    importPath                     shift and go to state 175

state 98

    (37) importPath -> STRING_LIT .
    NEWL            reduce using rule 37 (importPath -> STRING_LIT .)
    ;               reduce using rule 37 (importPath -> STRING_LIT .)


state 99

    (56) functionDecl -> FN IDENTIFIER . signature
    (57) functionDecl -> FN IDENTIFIER . function_
    (59) signature -> . parameters
    (60) signature -> . parameters result
    (58) function_ -> . signature block
    (63) parameters -> . ( parameterList , )
    (64) parameters -> . ( parameterList )
    (65) parameters -> . ( )
    (               shift and go to state 103

    signature                      shift and go to state 176
    function_                      shift and go to state 177
    parameters                     shift and go to state 102

state 100

    (58) function_ -> signature . block
    (75) block -> . { statementList }
    {               shift and go to state 179

    block                          shift and go to state 178

state 101

    (70) functionLit -> FN function_ .
    (               reduce using rule 70 (functionLit -> FN function_ .)
    LOGIC_AND       reduce using rule 70 (functionLit -> FN function_ .)
    LOGIC_OR        reduce using rule 70 (functionLit -> FN function_ .)
    SHR             reduce using rule 70 (functionLit -> FN function_ .)
    SHL             reduce using rule 70 (functionLit -> FN function_ .)
    AND             reduce using rule 70 (functionLit -> FN function_ .)
    MOD             reduce using rule 70 (functionLit -> FN function_ .)
    DIV             reduce using rule 70 (functionLit -> FN function_ .)
    STAR            reduce using rule 70 (functionLit -> FN function_ .)
    XOR             reduce using rule 70 (functionLit -> FN function_ .)
    OR              reduce using rule 70 (functionLit -> FN function_ .)
    MINUS           reduce using rule 70 (functionLit -> FN function_ .)
    PLUS            reduce using rule 70 (functionLit -> FN function_ .)
    GE              reduce using rule 70 (functionLit -> FN function_ .)
    GT              reduce using rule 70 (functionLit -> FN function_ .)
    LE              reduce using rule 70 (functionLit -> FN function_ .)
    LT              reduce using rule 70 (functionLit -> FN function_ .)
    NE              reduce using rule 70 (functionLit -> FN function_ .)
    EQ              reduce using rule 70 (functionLit -> FN function_ .)
    NEWL            reduce using rule 70 (functionLit -> FN function_ .)
    ;               reduce using rule 70 (functionLit -> FN function_ .)
    )               reduce using rule 70 (functionLit -> FN function_ .)
    ,               reduce using rule 70 (functionLit -> FN function_ .)
    }               reduce using rule 70 (functionLit -> FN function_ .)
    IDENTIFIER      reduce using rule 70 (functionLit -> FN function_ .)


state 102

    (59) signature -> parameters .
    (60) signature -> parameters . result
    (61) result -> . type_
    (62) result -> . parameters
    (103) type_ -> . typeName
    (63) parameters -> . ( parameterList , )
    (64) parameters -> . ( parameterList )
    (65) parameters -> . ( )
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    {               reduce using rule 59 (signature -> parameters .)
    NEWL            reduce using rule 59 (signature -> parameters .)
    ;               reduce using rule 59 (signature -> parameters .)
    (               shift and go to state 103
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66

    parameters                     shift and go to state 180
    result                         shift and go to state 181
    type_                          shift and go to state 182
    typeName                       shift and go to state 39
    numericType                    shift and go to state 42

state 103

    (63) parameters -> ( . parameterList , )
    (64) parameters -> ( . parameterList )
    (65) parameters -> ( . )
    (66) parameterList -> . parameterList , parameterDecl
    (67) parameterList -> . parameterDecl
    (68) parameterDecl -> . type_
    (69) parameterDecl -> . identifierList type_
    (103) type_ -> . typeName
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    )               shift and go to state 184
    IDENTIFIER      shift and go to state 188
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66

    parameterList                  shift and go to state 183
    parameterDecl                  shift and go to state 185
    type_                          shift and go to state 186
    identifierList                 shift and go to state 187
    typeName                       shift and go to state 39
    numericType                    shift and go to state 42

state 104

    (46) constDecl -> CONST ( . eos constSpecs )
    (47) constDecl -> CONST ( . constSpecs )
    (137) eos -> . eos NEWL
    (138) eos -> . NEWL
    (139) eos -> . eos ;
    (140) eos -> . ;
    (49) constSpecs -> . constSpecs constSpec
    (50) constSpecs -> . constSpec
    (51) constSpecs -> . constSpecs constSpec eos
    (52) constSpecs -> . constSpec eos
    (53) constSpec -> . IDENTIFIER ASSIGN expression
    NEWL            shift and go to state 85
    ;               shift and go to state 86
    IDENTIFIER      shift and go to state 106

    eos                            shift and go to state 189
    constSpecs                     shift and go to state 190
    constSpec                      shift and go to state 191

state 105

    (48) constDecl -> CONST constSpec .
    NEWL            reduce using rule 48 (constDecl -> CONST constSpec .)
    ;               reduce using rule 48 (constDecl -> CONST constSpec .)


state 106

    (53) constSpec -> IDENTIFIER . ASSIGN expression
    ASSIGN          shift and go to state 192


state 107

    (96) operand -> ( expression . )
    (89) expression -> expression . BINARY_OP unaryExpr
    (152) BINARY_OP -> . MUL_OP
    (153) BINARY_OP -> . ADD_OP
    (154) BINARY_OP -> . REL_OP
    (155) BINARY_OP -> . LOGIC_AND
    (156) BINARY_OP -> . LOGIC_OR
    (167) MUL_OP -> . SHR
    (168) MUL_OP -> . SHL
    (169) MUL_OP -> . AND
    (170) MUL_OP -> . MOD
    (171) MUL_OP -> . DIV
    (172) MUL_OP -> . STAR
    (163) ADD_OP -> . XOR
    (164) ADD_OP -> . OR
    (165) ADD_OP -> . MINUS
    (166) ADD_OP -> . PLUS
    (157) REL_OP -> . GE
    (158) REL_OP -> . GT
    (159) REL_OP -> . LE
    (160) REL_OP -> . LT
    (161) REL_OP -> . NE
    (162) REL_OP -> . EQ
    )               shift and go to state 193
    LOGIC_AND       shift and go to state 128
    LOGIC_OR        shift and go to state 129
    SHR             shift and go to state 130
    SHL             shift and go to state 131
    AND             shift and go to state 132
    MOD             shift and go to state 133
    DIV             shift and go to state 134
    STAR            shift and go to state 135
    XOR             shift and go to state 136
    OR              shift and go to state 137
    MINUS           shift and go to state 138
    PLUS            shift and go to state 139
    GE              shift and go to state 140
    GT              shift and go to state 141
    LE              shift and go to state 142
    LT              shift and go to state 143
    NE              shift and go to state 144
    EQ              shift and go to state 145

    BINARY_OP                      shift and go to state 124
    MUL_OP                         shift and go to state 125
    ADD_OP                         shift and go to state 126
    REL_OP                         shift and go to state 127

state 108

    (99) operandName -> IDENTIFIER .
    (               reduce using rule 99 (operandName -> IDENTIFIER .)
    )               reduce using rule 99 (operandName -> IDENTIFIER .)
    LOGIC_AND       reduce using rule 99 (operandName -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 99 (operandName -> IDENTIFIER .)
    SHR             reduce using rule 99 (operandName -> IDENTIFIER .)
    SHL             reduce using rule 99 (operandName -> IDENTIFIER .)
    AND             reduce using rule 99 (operandName -> IDENTIFIER .)
    MOD             reduce using rule 99 (operandName -> IDENTIFIER .)
    DIV             reduce using rule 99 (operandName -> IDENTIFIER .)
    STAR            reduce using rule 99 (operandName -> IDENTIFIER .)
    XOR             reduce using rule 99 (operandName -> IDENTIFIER .)
    OR              reduce using rule 99 (operandName -> IDENTIFIER .)
    MINUS           reduce using rule 99 (operandName -> IDENTIFIER .)
    PLUS            reduce using rule 99 (operandName -> IDENTIFIER .)
    GE              reduce using rule 99 (operandName -> IDENTIFIER .)
    GT              reduce using rule 99 (operandName -> IDENTIFIER .)
    LE              reduce using rule 99 (operandName -> IDENTIFIER .)
    LT              reduce using rule 99 (operandName -> IDENTIFIER .)
    NE              reduce using rule 99 (operandName -> IDENTIFIER .)
    EQ              reduce using rule 99 (operandName -> IDENTIFIER .)
    NEWL            reduce using rule 99 (operandName -> IDENTIFIER .)
    ;               reduce using rule 99 (operandName -> IDENTIFIER .)
    ,               reduce using rule 99 (operandName -> IDENTIFIER .)
    }               reduce using rule 99 (operandName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 99 (operandName -> IDENTIFIER .)


state 109

    (70) functionLit -> FN . function_
    (58) function_ -> . signature block
    (59) signature -> . parameters
    (60) signature -> . parameters result
    (63) parameters -> . ( parameterList , )
    (64) parameters -> . ( parameterList )
    (65) parameters -> . ( )
    (               shift and go to state 103

    function_                      shift and go to state 101
    signature                      shift and go to state 100
    parameters                     shift and go to state 102

state 110

    (81) assignment -> identifierList assign_op . expressionList
    (71) expressionList -> . expressionList , expression
    (72) expressionList -> . expression
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    IDENTIFIER      shift and go to state 108
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 109
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    expressionList                 shift and go to state 194
    expression                     shift and go to state 172
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 111

    (45) varDecl -> identifierList DECL_ASGN . expressionList
    (71) expressionList -> . expressionList , expression
    (72) expressionList -> . expression
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    IDENTIFIER      shift and go to state 108
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 109
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    expressionList                 shift and go to state 195
    expression                     shift and go to state 172
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 112

    (54) identifierList -> identifierList , . IDENTIFIER
    IDENTIFIER      shift and go to state 196


state 113

    (141) assign_op -> SHR_ASGN .
    AND             reduce using rule 141 (assign_op -> SHR_ASGN .)
    EXCLM           reduce using rule 141 (assign_op -> SHR_ASGN .)
    MINUS           reduce using rule 141 (assign_op -> SHR_ASGN .)
    (               reduce using rule 141 (assign_op -> SHR_ASGN .)
    IDENTIFIER      reduce using rule 141 (assign_op -> SHR_ASGN .)
    STRING          reduce using rule 141 (assign_op -> SHR_ASGN .)
    BOOL            reduce using rule 141 (assign_op -> SHR_ASGN .)
    RUNE            reduce using rule 141 (assign_op -> SHR_ASGN .)
    FN              reduce using rule 141 (assign_op -> SHR_ASGN .)
    DECIMAL_LIT     reduce using rule 141 (assign_op -> SHR_ASGN .)
    FALSE           reduce using rule 141 (assign_op -> SHR_ASGN .)
    TRUE            reduce using rule 141 (assign_op -> SHR_ASGN .)
    RUNE_LIT        reduce using rule 141 (assign_op -> SHR_ASGN .)
    STRING_LIT      reduce using rule 141 (assign_op -> SHR_ASGN .)
    F32             reduce using rule 141 (assign_op -> SHR_ASGN .)
    F64             reduce using rule 141 (assign_op -> SHR_ASGN .)
    INT             reduce using rule 141 (assign_op -> SHR_ASGN .)
    ISIZE           reduce using rule 141 (assign_op -> SHR_ASGN .)
    I64             reduce using rule 141 (assign_op -> SHR_ASGN .)
    I32             reduce using rule 141 (assign_op -> SHR_ASGN .)
    I16             reduce using rule 141 (assign_op -> SHR_ASGN .)
    I8              reduce using rule 141 (assign_op -> SHR_ASGN .)
    UINT            reduce using rule 141 (assign_op -> SHR_ASGN .)
    USIZE           reduce using rule 141 (assign_op -> SHR_ASGN .)
    U64             reduce using rule 141 (assign_op -> SHR_ASGN .)
    U32             reduce using rule 141 (assign_op -> SHR_ASGN .)
    U16             reduce using rule 141 (assign_op -> SHR_ASGN .)
    U8              reduce using rule 141 (assign_op -> SHR_ASGN .)
    HEX_LIT         reduce using rule 141 (assign_op -> SHR_ASGN .)
    OCTAL_LIT       reduce using rule 141 (assign_op -> SHR_ASGN .)
    BINARY_LIT      reduce using rule 141 (assign_op -> SHR_ASGN .)
    .               reduce using rule 141 (assign_op -> SHR_ASGN .)


state 114

    (142) assign_op -> SHL_ASGN .
    AND             reduce using rule 142 (assign_op -> SHL_ASGN .)
    EXCLM           reduce using rule 142 (assign_op -> SHL_ASGN .)
    MINUS           reduce using rule 142 (assign_op -> SHL_ASGN .)
    (               reduce using rule 142 (assign_op -> SHL_ASGN .)
    IDENTIFIER      reduce using rule 142 (assign_op -> SHL_ASGN .)
    STRING          reduce using rule 142 (assign_op -> SHL_ASGN .)
    BOOL            reduce using rule 142 (assign_op -> SHL_ASGN .)
    RUNE            reduce using rule 142 (assign_op -> SHL_ASGN .)
    FN              reduce using rule 142 (assign_op -> SHL_ASGN .)
    DECIMAL_LIT     reduce using rule 142 (assign_op -> SHL_ASGN .)
    FALSE           reduce using rule 142 (assign_op -> SHL_ASGN .)
    TRUE            reduce using rule 142 (assign_op -> SHL_ASGN .)
    RUNE_LIT        reduce using rule 142 (assign_op -> SHL_ASGN .)
    STRING_LIT      reduce using rule 142 (assign_op -> SHL_ASGN .)
    F32             reduce using rule 142 (assign_op -> SHL_ASGN .)
    F64             reduce using rule 142 (assign_op -> SHL_ASGN .)
    INT             reduce using rule 142 (assign_op -> SHL_ASGN .)
    ISIZE           reduce using rule 142 (assign_op -> SHL_ASGN .)
    I64             reduce using rule 142 (assign_op -> SHL_ASGN .)
    I32             reduce using rule 142 (assign_op -> SHL_ASGN .)
    I16             reduce using rule 142 (assign_op -> SHL_ASGN .)
    I8              reduce using rule 142 (assign_op -> SHL_ASGN .)
    UINT            reduce using rule 142 (assign_op -> SHL_ASGN .)
    USIZE           reduce using rule 142 (assign_op -> SHL_ASGN .)
    U64             reduce using rule 142 (assign_op -> SHL_ASGN .)
    U32             reduce using rule 142 (assign_op -> SHL_ASGN .)
    U16             reduce using rule 142 (assign_op -> SHL_ASGN .)
    U8              reduce using rule 142 (assign_op -> SHL_ASGN .)
    HEX_LIT         reduce using rule 142 (assign_op -> SHL_ASGN .)
    OCTAL_LIT       reduce using rule 142 (assign_op -> SHL_ASGN .)
    BINARY_LIT      reduce using rule 142 (assign_op -> SHL_ASGN .)
    .               reduce using rule 142 (assign_op -> SHL_ASGN .)


state 115

    (143) assign_op -> MOD_ASGN .
    AND             reduce using rule 143 (assign_op -> MOD_ASGN .)
    EXCLM           reduce using rule 143 (assign_op -> MOD_ASGN .)
    MINUS           reduce using rule 143 (assign_op -> MOD_ASGN .)
    (               reduce using rule 143 (assign_op -> MOD_ASGN .)
    IDENTIFIER      reduce using rule 143 (assign_op -> MOD_ASGN .)
    STRING          reduce using rule 143 (assign_op -> MOD_ASGN .)
    BOOL            reduce using rule 143 (assign_op -> MOD_ASGN .)
    RUNE            reduce using rule 143 (assign_op -> MOD_ASGN .)
    FN              reduce using rule 143 (assign_op -> MOD_ASGN .)
    DECIMAL_LIT     reduce using rule 143 (assign_op -> MOD_ASGN .)
    FALSE           reduce using rule 143 (assign_op -> MOD_ASGN .)
    TRUE            reduce using rule 143 (assign_op -> MOD_ASGN .)
    RUNE_LIT        reduce using rule 143 (assign_op -> MOD_ASGN .)
    STRING_LIT      reduce using rule 143 (assign_op -> MOD_ASGN .)
    F32             reduce using rule 143 (assign_op -> MOD_ASGN .)
    F64             reduce using rule 143 (assign_op -> MOD_ASGN .)
    INT             reduce using rule 143 (assign_op -> MOD_ASGN .)
    ISIZE           reduce using rule 143 (assign_op -> MOD_ASGN .)
    I64             reduce using rule 143 (assign_op -> MOD_ASGN .)
    I32             reduce using rule 143 (assign_op -> MOD_ASGN .)
    I16             reduce using rule 143 (assign_op -> MOD_ASGN .)
    I8              reduce using rule 143 (assign_op -> MOD_ASGN .)
    UINT            reduce using rule 143 (assign_op -> MOD_ASGN .)
    USIZE           reduce using rule 143 (assign_op -> MOD_ASGN .)
    U64             reduce using rule 143 (assign_op -> MOD_ASGN .)
    U32             reduce using rule 143 (assign_op -> MOD_ASGN .)
    U16             reduce using rule 143 (assign_op -> MOD_ASGN .)
    U8              reduce using rule 143 (assign_op -> MOD_ASGN .)
    HEX_LIT         reduce using rule 143 (assign_op -> MOD_ASGN .)
    OCTAL_LIT       reduce using rule 143 (assign_op -> MOD_ASGN .)
    BINARY_LIT      reduce using rule 143 (assign_op -> MOD_ASGN .)
    .               reduce using rule 143 (assign_op -> MOD_ASGN .)


state 116

    (144) assign_op -> DIV_ASGN .
    AND             reduce using rule 144 (assign_op -> DIV_ASGN .)
    EXCLM           reduce using rule 144 (assign_op -> DIV_ASGN .)
    MINUS           reduce using rule 144 (assign_op -> DIV_ASGN .)
    (               reduce using rule 144 (assign_op -> DIV_ASGN .)
    IDENTIFIER      reduce using rule 144 (assign_op -> DIV_ASGN .)
    STRING          reduce using rule 144 (assign_op -> DIV_ASGN .)
    BOOL            reduce using rule 144 (assign_op -> DIV_ASGN .)
    RUNE            reduce using rule 144 (assign_op -> DIV_ASGN .)
    FN              reduce using rule 144 (assign_op -> DIV_ASGN .)
    DECIMAL_LIT     reduce using rule 144 (assign_op -> DIV_ASGN .)
    FALSE           reduce using rule 144 (assign_op -> DIV_ASGN .)
    TRUE            reduce using rule 144 (assign_op -> DIV_ASGN .)
    RUNE_LIT        reduce using rule 144 (assign_op -> DIV_ASGN .)
    STRING_LIT      reduce using rule 144 (assign_op -> DIV_ASGN .)
    F32             reduce using rule 144 (assign_op -> DIV_ASGN .)
    F64             reduce using rule 144 (assign_op -> DIV_ASGN .)
    INT             reduce using rule 144 (assign_op -> DIV_ASGN .)
    ISIZE           reduce using rule 144 (assign_op -> DIV_ASGN .)
    I64             reduce using rule 144 (assign_op -> DIV_ASGN .)
    I32             reduce using rule 144 (assign_op -> DIV_ASGN .)
    I16             reduce using rule 144 (assign_op -> DIV_ASGN .)
    I8              reduce using rule 144 (assign_op -> DIV_ASGN .)
    UINT            reduce using rule 144 (assign_op -> DIV_ASGN .)
    USIZE           reduce using rule 144 (assign_op -> DIV_ASGN .)
    U64             reduce using rule 144 (assign_op -> DIV_ASGN .)
    U32             reduce using rule 144 (assign_op -> DIV_ASGN .)
    U16             reduce using rule 144 (assign_op -> DIV_ASGN .)
    U8              reduce using rule 144 (assign_op -> DIV_ASGN .)
    HEX_LIT         reduce using rule 144 (assign_op -> DIV_ASGN .)
    OCTAL_LIT       reduce using rule 144 (assign_op -> DIV_ASGN .)
    BINARY_LIT      reduce using rule 144 (assign_op -> DIV_ASGN .)
    .               reduce using rule 144 (assign_op -> DIV_ASGN .)


state 117

    (145) assign_op -> OR_ASGN .
    AND             reduce using rule 145 (assign_op -> OR_ASGN .)
    EXCLM           reduce using rule 145 (assign_op -> OR_ASGN .)
    MINUS           reduce using rule 145 (assign_op -> OR_ASGN .)
    (               reduce using rule 145 (assign_op -> OR_ASGN .)
    IDENTIFIER      reduce using rule 145 (assign_op -> OR_ASGN .)
    STRING          reduce using rule 145 (assign_op -> OR_ASGN .)
    BOOL            reduce using rule 145 (assign_op -> OR_ASGN .)
    RUNE            reduce using rule 145 (assign_op -> OR_ASGN .)
    FN              reduce using rule 145 (assign_op -> OR_ASGN .)
    DECIMAL_LIT     reduce using rule 145 (assign_op -> OR_ASGN .)
    FALSE           reduce using rule 145 (assign_op -> OR_ASGN .)
    TRUE            reduce using rule 145 (assign_op -> OR_ASGN .)
    RUNE_LIT        reduce using rule 145 (assign_op -> OR_ASGN .)
    STRING_LIT      reduce using rule 145 (assign_op -> OR_ASGN .)
    F32             reduce using rule 145 (assign_op -> OR_ASGN .)
    F64             reduce using rule 145 (assign_op -> OR_ASGN .)
    INT             reduce using rule 145 (assign_op -> OR_ASGN .)
    ISIZE           reduce using rule 145 (assign_op -> OR_ASGN .)
    I64             reduce using rule 145 (assign_op -> OR_ASGN .)
    I32             reduce using rule 145 (assign_op -> OR_ASGN .)
    I16             reduce using rule 145 (assign_op -> OR_ASGN .)
    I8              reduce using rule 145 (assign_op -> OR_ASGN .)
    UINT            reduce using rule 145 (assign_op -> OR_ASGN .)
    USIZE           reduce using rule 145 (assign_op -> OR_ASGN .)
    U64             reduce using rule 145 (assign_op -> OR_ASGN .)
    U32             reduce using rule 145 (assign_op -> OR_ASGN .)
    U16             reduce using rule 145 (assign_op -> OR_ASGN .)
    U8              reduce using rule 145 (assign_op -> OR_ASGN .)
    HEX_LIT         reduce using rule 145 (assign_op -> OR_ASGN .)
    OCTAL_LIT       reduce using rule 145 (assign_op -> OR_ASGN .)
    BINARY_LIT      reduce using rule 145 (assign_op -> OR_ASGN .)
    .               reduce using rule 145 (assign_op -> OR_ASGN .)


state 118

    (146) assign_op -> AND_ASGN .
    AND             reduce using rule 146 (assign_op -> AND_ASGN .)
    EXCLM           reduce using rule 146 (assign_op -> AND_ASGN .)
    MINUS           reduce using rule 146 (assign_op -> AND_ASGN .)
    (               reduce using rule 146 (assign_op -> AND_ASGN .)
    IDENTIFIER      reduce using rule 146 (assign_op -> AND_ASGN .)
    STRING          reduce using rule 146 (assign_op -> AND_ASGN .)
    BOOL            reduce using rule 146 (assign_op -> AND_ASGN .)
    RUNE            reduce using rule 146 (assign_op -> AND_ASGN .)
    FN              reduce using rule 146 (assign_op -> AND_ASGN .)
    DECIMAL_LIT     reduce using rule 146 (assign_op -> AND_ASGN .)
    FALSE           reduce using rule 146 (assign_op -> AND_ASGN .)
    TRUE            reduce using rule 146 (assign_op -> AND_ASGN .)
    RUNE_LIT        reduce using rule 146 (assign_op -> AND_ASGN .)
    STRING_LIT      reduce using rule 146 (assign_op -> AND_ASGN .)
    F32             reduce using rule 146 (assign_op -> AND_ASGN .)
    F64             reduce using rule 146 (assign_op -> AND_ASGN .)
    INT             reduce using rule 146 (assign_op -> AND_ASGN .)
    ISIZE           reduce using rule 146 (assign_op -> AND_ASGN .)
    I64             reduce using rule 146 (assign_op -> AND_ASGN .)
    I32             reduce using rule 146 (assign_op -> AND_ASGN .)
    I16             reduce using rule 146 (assign_op -> AND_ASGN .)
    I8              reduce using rule 146 (assign_op -> AND_ASGN .)
    UINT            reduce using rule 146 (assign_op -> AND_ASGN .)
    USIZE           reduce using rule 146 (assign_op -> AND_ASGN .)
    U64             reduce using rule 146 (assign_op -> AND_ASGN .)
    U32             reduce using rule 146 (assign_op -> AND_ASGN .)
    U16             reduce using rule 146 (assign_op -> AND_ASGN .)
    U8              reduce using rule 146 (assign_op -> AND_ASGN .)
    HEX_LIT         reduce using rule 146 (assign_op -> AND_ASGN .)
    OCTAL_LIT       reduce using rule 146 (assign_op -> AND_ASGN .)
    BINARY_LIT      reduce using rule 146 (assign_op -> AND_ASGN .)
    .               reduce using rule 146 (assign_op -> AND_ASGN .)


state 119

    (147) assign_op -> STAR_ASGN .
    AND             reduce using rule 147 (assign_op -> STAR_ASGN .)
    EXCLM           reduce using rule 147 (assign_op -> STAR_ASGN .)
    MINUS           reduce using rule 147 (assign_op -> STAR_ASGN .)
    (               reduce using rule 147 (assign_op -> STAR_ASGN .)
    IDENTIFIER      reduce using rule 147 (assign_op -> STAR_ASGN .)
    STRING          reduce using rule 147 (assign_op -> STAR_ASGN .)
    BOOL            reduce using rule 147 (assign_op -> STAR_ASGN .)
    RUNE            reduce using rule 147 (assign_op -> STAR_ASGN .)
    FN              reduce using rule 147 (assign_op -> STAR_ASGN .)
    DECIMAL_LIT     reduce using rule 147 (assign_op -> STAR_ASGN .)
    FALSE           reduce using rule 147 (assign_op -> STAR_ASGN .)
    TRUE            reduce using rule 147 (assign_op -> STAR_ASGN .)
    RUNE_LIT        reduce using rule 147 (assign_op -> STAR_ASGN .)
    STRING_LIT      reduce using rule 147 (assign_op -> STAR_ASGN .)
    F32             reduce using rule 147 (assign_op -> STAR_ASGN .)
    F64             reduce using rule 147 (assign_op -> STAR_ASGN .)
    INT             reduce using rule 147 (assign_op -> STAR_ASGN .)
    ISIZE           reduce using rule 147 (assign_op -> STAR_ASGN .)
    I64             reduce using rule 147 (assign_op -> STAR_ASGN .)
    I32             reduce using rule 147 (assign_op -> STAR_ASGN .)
    I16             reduce using rule 147 (assign_op -> STAR_ASGN .)
    I8              reduce using rule 147 (assign_op -> STAR_ASGN .)
    UINT            reduce using rule 147 (assign_op -> STAR_ASGN .)
    USIZE           reduce using rule 147 (assign_op -> STAR_ASGN .)
    U64             reduce using rule 147 (assign_op -> STAR_ASGN .)
    U32             reduce using rule 147 (assign_op -> STAR_ASGN .)
    U16             reduce using rule 147 (assign_op -> STAR_ASGN .)
    U8              reduce using rule 147 (assign_op -> STAR_ASGN .)
    HEX_LIT         reduce using rule 147 (assign_op -> STAR_ASGN .)
    OCTAL_LIT       reduce using rule 147 (assign_op -> STAR_ASGN .)
    BINARY_LIT      reduce using rule 147 (assign_op -> STAR_ASGN .)
    .               reduce using rule 147 (assign_op -> STAR_ASGN .)


state 120

    (148) assign_op -> XOR_ASGN .
    AND             reduce using rule 148 (assign_op -> XOR_ASGN .)
    EXCLM           reduce using rule 148 (assign_op -> XOR_ASGN .)
    MINUS           reduce using rule 148 (assign_op -> XOR_ASGN .)
    (               reduce using rule 148 (assign_op -> XOR_ASGN .)
    IDENTIFIER      reduce using rule 148 (assign_op -> XOR_ASGN .)
    STRING          reduce using rule 148 (assign_op -> XOR_ASGN .)
    BOOL            reduce using rule 148 (assign_op -> XOR_ASGN .)
    RUNE            reduce using rule 148 (assign_op -> XOR_ASGN .)
    FN              reduce using rule 148 (assign_op -> XOR_ASGN .)
    DECIMAL_LIT     reduce using rule 148 (assign_op -> XOR_ASGN .)
    FALSE           reduce using rule 148 (assign_op -> XOR_ASGN .)
    TRUE            reduce using rule 148 (assign_op -> XOR_ASGN .)
    RUNE_LIT        reduce using rule 148 (assign_op -> XOR_ASGN .)
    STRING_LIT      reduce using rule 148 (assign_op -> XOR_ASGN .)
    F32             reduce using rule 148 (assign_op -> XOR_ASGN .)
    F64             reduce using rule 148 (assign_op -> XOR_ASGN .)
    INT             reduce using rule 148 (assign_op -> XOR_ASGN .)
    ISIZE           reduce using rule 148 (assign_op -> XOR_ASGN .)
    I64             reduce using rule 148 (assign_op -> XOR_ASGN .)
    I32             reduce using rule 148 (assign_op -> XOR_ASGN .)
    I16             reduce using rule 148 (assign_op -> XOR_ASGN .)
    I8              reduce using rule 148 (assign_op -> XOR_ASGN .)
    UINT            reduce using rule 148 (assign_op -> XOR_ASGN .)
    USIZE           reduce using rule 148 (assign_op -> XOR_ASGN .)
    U64             reduce using rule 148 (assign_op -> XOR_ASGN .)
    U32             reduce using rule 148 (assign_op -> XOR_ASGN .)
    U16             reduce using rule 148 (assign_op -> XOR_ASGN .)
    U8              reduce using rule 148 (assign_op -> XOR_ASGN .)
    HEX_LIT         reduce using rule 148 (assign_op -> XOR_ASGN .)
    OCTAL_LIT       reduce using rule 148 (assign_op -> XOR_ASGN .)
    BINARY_LIT      reduce using rule 148 (assign_op -> XOR_ASGN .)
    .               reduce using rule 148 (assign_op -> XOR_ASGN .)


state 121

    (149) assign_op -> MINUS_ASGN .
    AND             reduce using rule 149 (assign_op -> MINUS_ASGN .)
    EXCLM           reduce using rule 149 (assign_op -> MINUS_ASGN .)
    MINUS           reduce using rule 149 (assign_op -> MINUS_ASGN .)
    (               reduce using rule 149 (assign_op -> MINUS_ASGN .)
    IDENTIFIER      reduce using rule 149 (assign_op -> MINUS_ASGN .)
    STRING          reduce using rule 149 (assign_op -> MINUS_ASGN .)
    BOOL            reduce using rule 149 (assign_op -> MINUS_ASGN .)
    RUNE            reduce using rule 149 (assign_op -> MINUS_ASGN .)
    FN              reduce using rule 149 (assign_op -> MINUS_ASGN .)
    DECIMAL_LIT     reduce using rule 149 (assign_op -> MINUS_ASGN .)
    FALSE           reduce using rule 149 (assign_op -> MINUS_ASGN .)
    TRUE            reduce using rule 149 (assign_op -> MINUS_ASGN .)
    RUNE_LIT        reduce using rule 149 (assign_op -> MINUS_ASGN .)
    STRING_LIT      reduce using rule 149 (assign_op -> MINUS_ASGN .)
    F32             reduce using rule 149 (assign_op -> MINUS_ASGN .)
    F64             reduce using rule 149 (assign_op -> MINUS_ASGN .)
    INT             reduce using rule 149 (assign_op -> MINUS_ASGN .)
    ISIZE           reduce using rule 149 (assign_op -> MINUS_ASGN .)
    I64             reduce using rule 149 (assign_op -> MINUS_ASGN .)
    I32             reduce using rule 149 (assign_op -> MINUS_ASGN .)
    I16             reduce using rule 149 (assign_op -> MINUS_ASGN .)
    I8              reduce using rule 149 (assign_op -> MINUS_ASGN .)
    UINT            reduce using rule 149 (assign_op -> MINUS_ASGN .)
    USIZE           reduce using rule 149 (assign_op -> MINUS_ASGN .)
    U64             reduce using rule 149 (assign_op -> MINUS_ASGN .)
    U32             reduce using rule 149 (assign_op -> MINUS_ASGN .)
    U16             reduce using rule 149 (assign_op -> MINUS_ASGN .)
    U8              reduce using rule 149 (assign_op -> MINUS_ASGN .)
    HEX_LIT         reduce using rule 149 (assign_op -> MINUS_ASGN .)
    OCTAL_LIT       reduce using rule 149 (assign_op -> MINUS_ASGN .)
    BINARY_LIT      reduce using rule 149 (assign_op -> MINUS_ASGN .)
    .               reduce using rule 149 (assign_op -> MINUS_ASGN .)


state 122

    (150) assign_op -> PLUS_ASGN .
    AND             reduce using rule 150 (assign_op -> PLUS_ASGN .)
    EXCLM           reduce using rule 150 (assign_op -> PLUS_ASGN .)
    MINUS           reduce using rule 150 (assign_op -> PLUS_ASGN .)
    (               reduce using rule 150 (assign_op -> PLUS_ASGN .)
    IDENTIFIER      reduce using rule 150 (assign_op -> PLUS_ASGN .)
    STRING          reduce using rule 150 (assign_op -> PLUS_ASGN .)
    BOOL            reduce using rule 150 (assign_op -> PLUS_ASGN .)
    RUNE            reduce using rule 150 (assign_op -> PLUS_ASGN .)
    FN              reduce using rule 150 (assign_op -> PLUS_ASGN .)
    DECIMAL_LIT     reduce using rule 150 (assign_op -> PLUS_ASGN .)
    FALSE           reduce using rule 150 (assign_op -> PLUS_ASGN .)
    TRUE            reduce using rule 150 (assign_op -> PLUS_ASGN .)
    RUNE_LIT        reduce using rule 150 (assign_op -> PLUS_ASGN .)
    STRING_LIT      reduce using rule 150 (assign_op -> PLUS_ASGN .)
    F32             reduce using rule 150 (assign_op -> PLUS_ASGN .)
    F64             reduce using rule 150 (assign_op -> PLUS_ASGN .)
    INT             reduce using rule 150 (assign_op -> PLUS_ASGN .)
    ISIZE           reduce using rule 150 (assign_op -> PLUS_ASGN .)
    I64             reduce using rule 150 (assign_op -> PLUS_ASGN .)
    I32             reduce using rule 150 (assign_op -> PLUS_ASGN .)
    I16             reduce using rule 150 (assign_op -> PLUS_ASGN .)
    I8              reduce using rule 150 (assign_op -> PLUS_ASGN .)
    UINT            reduce using rule 150 (assign_op -> PLUS_ASGN .)
    USIZE           reduce using rule 150 (assign_op -> PLUS_ASGN .)
    U64             reduce using rule 150 (assign_op -> PLUS_ASGN .)
    U32             reduce using rule 150 (assign_op -> PLUS_ASGN .)
    U16             reduce using rule 150 (assign_op -> PLUS_ASGN .)
    U8              reduce using rule 150 (assign_op -> PLUS_ASGN .)
    HEX_LIT         reduce using rule 150 (assign_op -> PLUS_ASGN .)
    OCTAL_LIT       reduce using rule 150 (assign_op -> PLUS_ASGN .)
    BINARY_LIT      reduce using rule 150 (assign_op -> PLUS_ASGN .)
    .               reduce using rule 150 (assign_op -> PLUS_ASGN .)


state 123

    (151) assign_op -> ASSIGN .
    AND             reduce using rule 151 (assign_op -> ASSIGN .)
    EXCLM           reduce using rule 151 (assign_op -> ASSIGN .)
    MINUS           reduce using rule 151 (assign_op -> ASSIGN .)
    (               reduce using rule 151 (assign_op -> ASSIGN .)
    IDENTIFIER      reduce using rule 151 (assign_op -> ASSIGN .)
    STRING          reduce using rule 151 (assign_op -> ASSIGN .)
    BOOL            reduce using rule 151 (assign_op -> ASSIGN .)
    RUNE            reduce using rule 151 (assign_op -> ASSIGN .)
    FN              reduce using rule 151 (assign_op -> ASSIGN .)
    DECIMAL_LIT     reduce using rule 151 (assign_op -> ASSIGN .)
    FALSE           reduce using rule 151 (assign_op -> ASSIGN .)
    TRUE            reduce using rule 151 (assign_op -> ASSIGN .)
    RUNE_LIT        reduce using rule 151 (assign_op -> ASSIGN .)
    STRING_LIT      reduce using rule 151 (assign_op -> ASSIGN .)
    F32             reduce using rule 151 (assign_op -> ASSIGN .)
    F64             reduce using rule 151 (assign_op -> ASSIGN .)
    INT             reduce using rule 151 (assign_op -> ASSIGN .)
    ISIZE           reduce using rule 151 (assign_op -> ASSIGN .)
    I64             reduce using rule 151 (assign_op -> ASSIGN .)
    I32             reduce using rule 151 (assign_op -> ASSIGN .)
    I16             reduce using rule 151 (assign_op -> ASSIGN .)
    I8              reduce using rule 151 (assign_op -> ASSIGN .)
    UINT            reduce using rule 151 (assign_op -> ASSIGN .)
    USIZE           reduce using rule 151 (assign_op -> ASSIGN .)
    U64             reduce using rule 151 (assign_op -> ASSIGN .)
    U32             reduce using rule 151 (assign_op -> ASSIGN .)
    U16             reduce using rule 151 (assign_op -> ASSIGN .)
    U8              reduce using rule 151 (assign_op -> ASSIGN .)
    HEX_LIT         reduce using rule 151 (assign_op -> ASSIGN .)
    OCTAL_LIT       reduce using rule 151 (assign_op -> ASSIGN .)
    BINARY_LIT      reduce using rule 151 (assign_op -> ASSIGN .)
    .               reduce using rule 151 (assign_op -> ASSIGN .)


state 124

    (89) expression -> expression BINARY_OP . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    IDENTIFIER      shift and go to state 108
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 109
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    unaryExpr                      shift and go to state 197
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 125

    (152) BINARY_OP -> MUL_OP .
    AND             reduce using rule 152 (BINARY_OP -> MUL_OP .)
    EXCLM           reduce using rule 152 (BINARY_OP -> MUL_OP .)
    MINUS           reduce using rule 152 (BINARY_OP -> MUL_OP .)
    (               reduce using rule 152 (BINARY_OP -> MUL_OP .)
    IDENTIFIER      reduce using rule 152 (BINARY_OP -> MUL_OP .)
    STRING          reduce using rule 152 (BINARY_OP -> MUL_OP .)
    BOOL            reduce using rule 152 (BINARY_OP -> MUL_OP .)
    RUNE            reduce using rule 152 (BINARY_OP -> MUL_OP .)
    FN              reduce using rule 152 (BINARY_OP -> MUL_OP .)
    DECIMAL_LIT     reduce using rule 152 (BINARY_OP -> MUL_OP .)
    FALSE           reduce using rule 152 (BINARY_OP -> MUL_OP .)
    TRUE            reduce using rule 152 (BINARY_OP -> MUL_OP .)
    RUNE_LIT        reduce using rule 152 (BINARY_OP -> MUL_OP .)
    STRING_LIT      reduce using rule 152 (BINARY_OP -> MUL_OP .)
    F32             reduce using rule 152 (BINARY_OP -> MUL_OP .)
    F64             reduce using rule 152 (BINARY_OP -> MUL_OP .)
    INT             reduce using rule 152 (BINARY_OP -> MUL_OP .)
    ISIZE           reduce using rule 152 (BINARY_OP -> MUL_OP .)
    I64             reduce using rule 152 (BINARY_OP -> MUL_OP .)
    I32             reduce using rule 152 (BINARY_OP -> MUL_OP .)
    I16             reduce using rule 152 (BINARY_OP -> MUL_OP .)
    I8              reduce using rule 152 (BINARY_OP -> MUL_OP .)
    UINT            reduce using rule 152 (BINARY_OP -> MUL_OP .)
    USIZE           reduce using rule 152 (BINARY_OP -> MUL_OP .)
    U64             reduce using rule 152 (BINARY_OP -> MUL_OP .)
    U32             reduce using rule 152 (BINARY_OP -> MUL_OP .)
    U16             reduce using rule 152 (BINARY_OP -> MUL_OP .)
    U8              reduce using rule 152 (BINARY_OP -> MUL_OP .)
    HEX_LIT         reduce using rule 152 (BINARY_OP -> MUL_OP .)
    OCTAL_LIT       reduce using rule 152 (BINARY_OP -> MUL_OP .)
    BINARY_LIT      reduce using rule 152 (BINARY_OP -> MUL_OP .)
    .               reduce using rule 152 (BINARY_OP -> MUL_OP .)


state 126

    (153) BINARY_OP -> ADD_OP .
    AND             reduce using rule 153 (BINARY_OP -> ADD_OP .)
    EXCLM           reduce using rule 153 (BINARY_OP -> ADD_OP .)
    MINUS           reduce using rule 153 (BINARY_OP -> ADD_OP .)
    (               reduce using rule 153 (BINARY_OP -> ADD_OP .)
    IDENTIFIER      reduce using rule 153 (BINARY_OP -> ADD_OP .)
    STRING          reduce using rule 153 (BINARY_OP -> ADD_OP .)
    BOOL            reduce using rule 153 (BINARY_OP -> ADD_OP .)
    RUNE            reduce using rule 153 (BINARY_OP -> ADD_OP .)
    FN              reduce using rule 153 (BINARY_OP -> ADD_OP .)
    DECIMAL_LIT     reduce using rule 153 (BINARY_OP -> ADD_OP .)
    FALSE           reduce using rule 153 (BINARY_OP -> ADD_OP .)
    TRUE            reduce using rule 153 (BINARY_OP -> ADD_OP .)
    RUNE_LIT        reduce using rule 153 (BINARY_OP -> ADD_OP .)
    STRING_LIT      reduce using rule 153 (BINARY_OP -> ADD_OP .)
    F32             reduce using rule 153 (BINARY_OP -> ADD_OP .)
    F64             reduce using rule 153 (BINARY_OP -> ADD_OP .)
    INT             reduce using rule 153 (BINARY_OP -> ADD_OP .)
    ISIZE           reduce using rule 153 (BINARY_OP -> ADD_OP .)
    I64             reduce using rule 153 (BINARY_OP -> ADD_OP .)
    I32             reduce using rule 153 (BINARY_OP -> ADD_OP .)
    I16             reduce using rule 153 (BINARY_OP -> ADD_OP .)
    I8              reduce using rule 153 (BINARY_OP -> ADD_OP .)
    UINT            reduce using rule 153 (BINARY_OP -> ADD_OP .)
    USIZE           reduce using rule 153 (BINARY_OP -> ADD_OP .)
    U64             reduce using rule 153 (BINARY_OP -> ADD_OP .)
    U32             reduce using rule 153 (BINARY_OP -> ADD_OP .)
    U16             reduce using rule 153 (BINARY_OP -> ADD_OP .)
    U8              reduce using rule 153 (BINARY_OP -> ADD_OP .)
    HEX_LIT         reduce using rule 153 (BINARY_OP -> ADD_OP .)
    OCTAL_LIT       reduce using rule 153 (BINARY_OP -> ADD_OP .)
    BINARY_LIT      reduce using rule 153 (BINARY_OP -> ADD_OP .)
    .               reduce using rule 153 (BINARY_OP -> ADD_OP .)


state 127

    (154) BINARY_OP -> REL_OP .
    AND             reduce using rule 154 (BINARY_OP -> REL_OP .)
    EXCLM           reduce using rule 154 (BINARY_OP -> REL_OP .)
    MINUS           reduce using rule 154 (BINARY_OP -> REL_OP .)
    (               reduce using rule 154 (BINARY_OP -> REL_OP .)
    IDENTIFIER      reduce using rule 154 (BINARY_OP -> REL_OP .)
    STRING          reduce using rule 154 (BINARY_OP -> REL_OP .)
    BOOL            reduce using rule 154 (BINARY_OP -> REL_OP .)
    RUNE            reduce using rule 154 (BINARY_OP -> REL_OP .)
    FN              reduce using rule 154 (BINARY_OP -> REL_OP .)
    DECIMAL_LIT     reduce using rule 154 (BINARY_OP -> REL_OP .)
    FALSE           reduce using rule 154 (BINARY_OP -> REL_OP .)
    TRUE            reduce using rule 154 (BINARY_OP -> REL_OP .)
    RUNE_LIT        reduce using rule 154 (BINARY_OP -> REL_OP .)
    STRING_LIT      reduce using rule 154 (BINARY_OP -> REL_OP .)
    F32             reduce using rule 154 (BINARY_OP -> REL_OP .)
    F64             reduce using rule 154 (BINARY_OP -> REL_OP .)
    INT             reduce using rule 154 (BINARY_OP -> REL_OP .)
    ISIZE           reduce using rule 154 (BINARY_OP -> REL_OP .)
    I64             reduce using rule 154 (BINARY_OP -> REL_OP .)
    I32             reduce using rule 154 (BINARY_OP -> REL_OP .)
    I16             reduce using rule 154 (BINARY_OP -> REL_OP .)
    I8              reduce using rule 154 (BINARY_OP -> REL_OP .)
    UINT            reduce using rule 154 (BINARY_OP -> REL_OP .)
    USIZE           reduce using rule 154 (BINARY_OP -> REL_OP .)
    U64             reduce using rule 154 (BINARY_OP -> REL_OP .)
    U32             reduce using rule 154 (BINARY_OP -> REL_OP .)
    U16             reduce using rule 154 (BINARY_OP -> REL_OP .)
    U8              reduce using rule 154 (BINARY_OP -> REL_OP .)
    HEX_LIT         reduce using rule 154 (BINARY_OP -> REL_OP .)
    OCTAL_LIT       reduce using rule 154 (BINARY_OP -> REL_OP .)
    BINARY_LIT      reduce using rule 154 (BINARY_OP -> REL_OP .)
    .               reduce using rule 154 (BINARY_OP -> REL_OP .)


state 128

    (155) BINARY_OP -> LOGIC_AND .
    AND             reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    EXCLM           reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    MINUS           reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    (               reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    IDENTIFIER      reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    STRING          reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    BOOL            reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    RUNE            reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    FN              reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    DECIMAL_LIT     reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    FALSE           reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    TRUE            reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    RUNE_LIT        reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    STRING_LIT      reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    F32             reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    F64             reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    INT             reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    ISIZE           reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    I64             reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    I32             reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    I16             reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    I8              reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    UINT            reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    USIZE           reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    U64             reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    U32             reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    U16             reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    U8              reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    HEX_LIT         reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    OCTAL_LIT       reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    BINARY_LIT      reduce using rule 155 (BINARY_OP -> LOGIC_AND .)
    .               reduce using rule 155 (BINARY_OP -> LOGIC_AND .)


state 129

    (156) BINARY_OP -> LOGIC_OR .
    AND             reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    EXCLM           reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    MINUS           reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    (               reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    IDENTIFIER      reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    STRING          reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    BOOL            reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    RUNE            reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    FN              reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    DECIMAL_LIT     reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    FALSE           reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    TRUE            reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    RUNE_LIT        reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    STRING_LIT      reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    F32             reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    F64             reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    INT             reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    ISIZE           reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    I64             reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    I32             reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    I16             reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    I8              reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    UINT            reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    USIZE           reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    U64             reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    U32             reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    U16             reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    U8              reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    HEX_LIT         reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    OCTAL_LIT       reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    BINARY_LIT      reduce using rule 156 (BINARY_OP -> LOGIC_OR .)
    .               reduce using rule 156 (BINARY_OP -> LOGIC_OR .)


state 130

    (167) MUL_OP -> SHR .
    AND             reduce using rule 167 (MUL_OP -> SHR .)
    EXCLM           reduce using rule 167 (MUL_OP -> SHR .)
    MINUS           reduce using rule 167 (MUL_OP -> SHR .)
    (               reduce using rule 167 (MUL_OP -> SHR .)
    IDENTIFIER      reduce using rule 167 (MUL_OP -> SHR .)
    STRING          reduce using rule 167 (MUL_OP -> SHR .)
    BOOL            reduce using rule 167 (MUL_OP -> SHR .)
    RUNE            reduce using rule 167 (MUL_OP -> SHR .)
    FN              reduce using rule 167 (MUL_OP -> SHR .)
    DECIMAL_LIT     reduce using rule 167 (MUL_OP -> SHR .)
    FALSE           reduce using rule 167 (MUL_OP -> SHR .)
    TRUE            reduce using rule 167 (MUL_OP -> SHR .)
    RUNE_LIT        reduce using rule 167 (MUL_OP -> SHR .)
    STRING_LIT      reduce using rule 167 (MUL_OP -> SHR .)
    F32             reduce using rule 167 (MUL_OP -> SHR .)
    F64             reduce using rule 167 (MUL_OP -> SHR .)
    INT             reduce using rule 167 (MUL_OP -> SHR .)
    ISIZE           reduce using rule 167 (MUL_OP -> SHR .)
    I64             reduce using rule 167 (MUL_OP -> SHR .)
    I32             reduce using rule 167 (MUL_OP -> SHR .)
    I16             reduce using rule 167 (MUL_OP -> SHR .)
    I8              reduce using rule 167 (MUL_OP -> SHR .)
    UINT            reduce using rule 167 (MUL_OP -> SHR .)
    USIZE           reduce using rule 167 (MUL_OP -> SHR .)
    U64             reduce using rule 167 (MUL_OP -> SHR .)
    U32             reduce using rule 167 (MUL_OP -> SHR .)
    U16             reduce using rule 167 (MUL_OP -> SHR .)
    U8              reduce using rule 167 (MUL_OP -> SHR .)
    HEX_LIT         reduce using rule 167 (MUL_OP -> SHR .)
    OCTAL_LIT       reduce using rule 167 (MUL_OP -> SHR .)
    BINARY_LIT      reduce using rule 167 (MUL_OP -> SHR .)
    .               reduce using rule 167 (MUL_OP -> SHR .)


state 131

    (168) MUL_OP -> SHL .
    AND             reduce using rule 168 (MUL_OP -> SHL .)
    EXCLM           reduce using rule 168 (MUL_OP -> SHL .)
    MINUS           reduce using rule 168 (MUL_OP -> SHL .)
    (               reduce using rule 168 (MUL_OP -> SHL .)
    IDENTIFIER      reduce using rule 168 (MUL_OP -> SHL .)
    STRING          reduce using rule 168 (MUL_OP -> SHL .)
    BOOL            reduce using rule 168 (MUL_OP -> SHL .)
    RUNE            reduce using rule 168 (MUL_OP -> SHL .)
    FN              reduce using rule 168 (MUL_OP -> SHL .)
    DECIMAL_LIT     reduce using rule 168 (MUL_OP -> SHL .)
    FALSE           reduce using rule 168 (MUL_OP -> SHL .)
    TRUE            reduce using rule 168 (MUL_OP -> SHL .)
    RUNE_LIT        reduce using rule 168 (MUL_OP -> SHL .)
    STRING_LIT      reduce using rule 168 (MUL_OP -> SHL .)
    F32             reduce using rule 168 (MUL_OP -> SHL .)
    F64             reduce using rule 168 (MUL_OP -> SHL .)
    INT             reduce using rule 168 (MUL_OP -> SHL .)
    ISIZE           reduce using rule 168 (MUL_OP -> SHL .)
    I64             reduce using rule 168 (MUL_OP -> SHL .)
    I32             reduce using rule 168 (MUL_OP -> SHL .)
    I16             reduce using rule 168 (MUL_OP -> SHL .)
    I8              reduce using rule 168 (MUL_OP -> SHL .)
    UINT            reduce using rule 168 (MUL_OP -> SHL .)
    USIZE           reduce using rule 168 (MUL_OP -> SHL .)
    U64             reduce using rule 168 (MUL_OP -> SHL .)
    U32             reduce using rule 168 (MUL_OP -> SHL .)
    U16             reduce using rule 168 (MUL_OP -> SHL .)
    U8              reduce using rule 168 (MUL_OP -> SHL .)
    HEX_LIT         reduce using rule 168 (MUL_OP -> SHL .)
    OCTAL_LIT       reduce using rule 168 (MUL_OP -> SHL .)
    BINARY_LIT      reduce using rule 168 (MUL_OP -> SHL .)
    .               reduce using rule 168 (MUL_OP -> SHL .)


state 132

    (169) MUL_OP -> AND .
    AND             reduce using rule 169 (MUL_OP -> AND .)
    EXCLM           reduce using rule 169 (MUL_OP -> AND .)
    MINUS           reduce using rule 169 (MUL_OP -> AND .)
    (               reduce using rule 169 (MUL_OP -> AND .)
    IDENTIFIER      reduce using rule 169 (MUL_OP -> AND .)
    STRING          reduce using rule 169 (MUL_OP -> AND .)
    BOOL            reduce using rule 169 (MUL_OP -> AND .)
    RUNE            reduce using rule 169 (MUL_OP -> AND .)
    FN              reduce using rule 169 (MUL_OP -> AND .)
    DECIMAL_LIT     reduce using rule 169 (MUL_OP -> AND .)
    FALSE           reduce using rule 169 (MUL_OP -> AND .)
    TRUE            reduce using rule 169 (MUL_OP -> AND .)
    RUNE_LIT        reduce using rule 169 (MUL_OP -> AND .)
    STRING_LIT      reduce using rule 169 (MUL_OP -> AND .)
    F32             reduce using rule 169 (MUL_OP -> AND .)
    F64             reduce using rule 169 (MUL_OP -> AND .)
    INT             reduce using rule 169 (MUL_OP -> AND .)
    ISIZE           reduce using rule 169 (MUL_OP -> AND .)
    I64             reduce using rule 169 (MUL_OP -> AND .)
    I32             reduce using rule 169 (MUL_OP -> AND .)
    I16             reduce using rule 169 (MUL_OP -> AND .)
    I8              reduce using rule 169 (MUL_OP -> AND .)
    UINT            reduce using rule 169 (MUL_OP -> AND .)
    USIZE           reduce using rule 169 (MUL_OP -> AND .)
    U64             reduce using rule 169 (MUL_OP -> AND .)
    U32             reduce using rule 169 (MUL_OP -> AND .)
    U16             reduce using rule 169 (MUL_OP -> AND .)
    U8              reduce using rule 169 (MUL_OP -> AND .)
    HEX_LIT         reduce using rule 169 (MUL_OP -> AND .)
    OCTAL_LIT       reduce using rule 169 (MUL_OP -> AND .)
    BINARY_LIT      reduce using rule 169 (MUL_OP -> AND .)
    .               reduce using rule 169 (MUL_OP -> AND .)


state 133

    (170) MUL_OP -> MOD .
    AND             reduce using rule 170 (MUL_OP -> MOD .)
    EXCLM           reduce using rule 170 (MUL_OP -> MOD .)
    MINUS           reduce using rule 170 (MUL_OP -> MOD .)
    (               reduce using rule 170 (MUL_OP -> MOD .)
    IDENTIFIER      reduce using rule 170 (MUL_OP -> MOD .)
    STRING          reduce using rule 170 (MUL_OP -> MOD .)
    BOOL            reduce using rule 170 (MUL_OP -> MOD .)
    RUNE            reduce using rule 170 (MUL_OP -> MOD .)
    FN              reduce using rule 170 (MUL_OP -> MOD .)
    DECIMAL_LIT     reduce using rule 170 (MUL_OP -> MOD .)
    FALSE           reduce using rule 170 (MUL_OP -> MOD .)
    TRUE            reduce using rule 170 (MUL_OP -> MOD .)
    RUNE_LIT        reduce using rule 170 (MUL_OP -> MOD .)
    STRING_LIT      reduce using rule 170 (MUL_OP -> MOD .)
    F32             reduce using rule 170 (MUL_OP -> MOD .)
    F64             reduce using rule 170 (MUL_OP -> MOD .)
    INT             reduce using rule 170 (MUL_OP -> MOD .)
    ISIZE           reduce using rule 170 (MUL_OP -> MOD .)
    I64             reduce using rule 170 (MUL_OP -> MOD .)
    I32             reduce using rule 170 (MUL_OP -> MOD .)
    I16             reduce using rule 170 (MUL_OP -> MOD .)
    I8              reduce using rule 170 (MUL_OP -> MOD .)
    UINT            reduce using rule 170 (MUL_OP -> MOD .)
    USIZE           reduce using rule 170 (MUL_OP -> MOD .)
    U64             reduce using rule 170 (MUL_OP -> MOD .)
    U32             reduce using rule 170 (MUL_OP -> MOD .)
    U16             reduce using rule 170 (MUL_OP -> MOD .)
    U8              reduce using rule 170 (MUL_OP -> MOD .)
    HEX_LIT         reduce using rule 170 (MUL_OP -> MOD .)
    OCTAL_LIT       reduce using rule 170 (MUL_OP -> MOD .)
    BINARY_LIT      reduce using rule 170 (MUL_OP -> MOD .)
    .               reduce using rule 170 (MUL_OP -> MOD .)


state 134

    (171) MUL_OP -> DIV .
    AND             reduce using rule 171 (MUL_OP -> DIV .)
    EXCLM           reduce using rule 171 (MUL_OP -> DIV .)
    MINUS           reduce using rule 171 (MUL_OP -> DIV .)
    (               reduce using rule 171 (MUL_OP -> DIV .)
    IDENTIFIER      reduce using rule 171 (MUL_OP -> DIV .)
    STRING          reduce using rule 171 (MUL_OP -> DIV .)
    BOOL            reduce using rule 171 (MUL_OP -> DIV .)
    RUNE            reduce using rule 171 (MUL_OP -> DIV .)
    FN              reduce using rule 171 (MUL_OP -> DIV .)
    DECIMAL_LIT     reduce using rule 171 (MUL_OP -> DIV .)
    FALSE           reduce using rule 171 (MUL_OP -> DIV .)
    TRUE            reduce using rule 171 (MUL_OP -> DIV .)
    RUNE_LIT        reduce using rule 171 (MUL_OP -> DIV .)
    STRING_LIT      reduce using rule 171 (MUL_OP -> DIV .)
    F32             reduce using rule 171 (MUL_OP -> DIV .)
    F64             reduce using rule 171 (MUL_OP -> DIV .)
    INT             reduce using rule 171 (MUL_OP -> DIV .)
    ISIZE           reduce using rule 171 (MUL_OP -> DIV .)
    I64             reduce using rule 171 (MUL_OP -> DIV .)
    I32             reduce using rule 171 (MUL_OP -> DIV .)
    I16             reduce using rule 171 (MUL_OP -> DIV .)
    I8              reduce using rule 171 (MUL_OP -> DIV .)
    UINT            reduce using rule 171 (MUL_OP -> DIV .)
    USIZE           reduce using rule 171 (MUL_OP -> DIV .)
    U64             reduce using rule 171 (MUL_OP -> DIV .)
    U32             reduce using rule 171 (MUL_OP -> DIV .)
    U16             reduce using rule 171 (MUL_OP -> DIV .)
    U8              reduce using rule 171 (MUL_OP -> DIV .)
    HEX_LIT         reduce using rule 171 (MUL_OP -> DIV .)
    OCTAL_LIT       reduce using rule 171 (MUL_OP -> DIV .)
    BINARY_LIT      reduce using rule 171 (MUL_OP -> DIV .)
    .               reduce using rule 171 (MUL_OP -> DIV .)


state 135

    (172) MUL_OP -> STAR .
    AND             reduce using rule 172 (MUL_OP -> STAR .)
    EXCLM           reduce using rule 172 (MUL_OP -> STAR .)
    MINUS           reduce using rule 172 (MUL_OP -> STAR .)
    (               reduce using rule 172 (MUL_OP -> STAR .)
    IDENTIFIER      reduce using rule 172 (MUL_OP -> STAR .)
    STRING          reduce using rule 172 (MUL_OP -> STAR .)
    BOOL            reduce using rule 172 (MUL_OP -> STAR .)
    RUNE            reduce using rule 172 (MUL_OP -> STAR .)
    FN              reduce using rule 172 (MUL_OP -> STAR .)
    DECIMAL_LIT     reduce using rule 172 (MUL_OP -> STAR .)
    FALSE           reduce using rule 172 (MUL_OP -> STAR .)
    TRUE            reduce using rule 172 (MUL_OP -> STAR .)
    RUNE_LIT        reduce using rule 172 (MUL_OP -> STAR .)
    STRING_LIT      reduce using rule 172 (MUL_OP -> STAR .)
    F32             reduce using rule 172 (MUL_OP -> STAR .)
    F64             reduce using rule 172 (MUL_OP -> STAR .)
    INT             reduce using rule 172 (MUL_OP -> STAR .)
    ISIZE           reduce using rule 172 (MUL_OP -> STAR .)
    I64             reduce using rule 172 (MUL_OP -> STAR .)
    I32             reduce using rule 172 (MUL_OP -> STAR .)
    I16             reduce using rule 172 (MUL_OP -> STAR .)
    I8              reduce using rule 172 (MUL_OP -> STAR .)
    UINT            reduce using rule 172 (MUL_OP -> STAR .)
    USIZE           reduce using rule 172 (MUL_OP -> STAR .)
    U64             reduce using rule 172 (MUL_OP -> STAR .)
    U32             reduce using rule 172 (MUL_OP -> STAR .)
    U16             reduce using rule 172 (MUL_OP -> STAR .)
    U8              reduce using rule 172 (MUL_OP -> STAR .)
    HEX_LIT         reduce using rule 172 (MUL_OP -> STAR .)
    OCTAL_LIT       reduce using rule 172 (MUL_OP -> STAR .)
    BINARY_LIT      reduce using rule 172 (MUL_OP -> STAR .)
    .               reduce using rule 172 (MUL_OP -> STAR .)


state 136

    (163) ADD_OP -> XOR .
    AND             reduce using rule 163 (ADD_OP -> XOR .)
    EXCLM           reduce using rule 163 (ADD_OP -> XOR .)
    MINUS           reduce using rule 163 (ADD_OP -> XOR .)
    (               reduce using rule 163 (ADD_OP -> XOR .)
    IDENTIFIER      reduce using rule 163 (ADD_OP -> XOR .)
    STRING          reduce using rule 163 (ADD_OP -> XOR .)
    BOOL            reduce using rule 163 (ADD_OP -> XOR .)
    RUNE            reduce using rule 163 (ADD_OP -> XOR .)
    FN              reduce using rule 163 (ADD_OP -> XOR .)
    DECIMAL_LIT     reduce using rule 163 (ADD_OP -> XOR .)
    FALSE           reduce using rule 163 (ADD_OP -> XOR .)
    TRUE            reduce using rule 163 (ADD_OP -> XOR .)
    RUNE_LIT        reduce using rule 163 (ADD_OP -> XOR .)
    STRING_LIT      reduce using rule 163 (ADD_OP -> XOR .)
    F32             reduce using rule 163 (ADD_OP -> XOR .)
    F64             reduce using rule 163 (ADD_OP -> XOR .)
    INT             reduce using rule 163 (ADD_OP -> XOR .)
    ISIZE           reduce using rule 163 (ADD_OP -> XOR .)
    I64             reduce using rule 163 (ADD_OP -> XOR .)
    I32             reduce using rule 163 (ADD_OP -> XOR .)
    I16             reduce using rule 163 (ADD_OP -> XOR .)
    I8              reduce using rule 163 (ADD_OP -> XOR .)
    UINT            reduce using rule 163 (ADD_OP -> XOR .)
    USIZE           reduce using rule 163 (ADD_OP -> XOR .)
    U64             reduce using rule 163 (ADD_OP -> XOR .)
    U32             reduce using rule 163 (ADD_OP -> XOR .)
    U16             reduce using rule 163 (ADD_OP -> XOR .)
    U8              reduce using rule 163 (ADD_OP -> XOR .)
    HEX_LIT         reduce using rule 163 (ADD_OP -> XOR .)
    OCTAL_LIT       reduce using rule 163 (ADD_OP -> XOR .)
    BINARY_LIT      reduce using rule 163 (ADD_OP -> XOR .)
    .               reduce using rule 163 (ADD_OP -> XOR .)


state 137

    (164) ADD_OP -> OR .
    AND             reduce using rule 164 (ADD_OP -> OR .)
    EXCLM           reduce using rule 164 (ADD_OP -> OR .)
    MINUS           reduce using rule 164 (ADD_OP -> OR .)
    (               reduce using rule 164 (ADD_OP -> OR .)
    IDENTIFIER      reduce using rule 164 (ADD_OP -> OR .)
    STRING          reduce using rule 164 (ADD_OP -> OR .)
    BOOL            reduce using rule 164 (ADD_OP -> OR .)
    RUNE            reduce using rule 164 (ADD_OP -> OR .)
    FN              reduce using rule 164 (ADD_OP -> OR .)
    DECIMAL_LIT     reduce using rule 164 (ADD_OP -> OR .)
    FALSE           reduce using rule 164 (ADD_OP -> OR .)
    TRUE            reduce using rule 164 (ADD_OP -> OR .)
    RUNE_LIT        reduce using rule 164 (ADD_OP -> OR .)
    STRING_LIT      reduce using rule 164 (ADD_OP -> OR .)
    F32             reduce using rule 164 (ADD_OP -> OR .)
    F64             reduce using rule 164 (ADD_OP -> OR .)
    INT             reduce using rule 164 (ADD_OP -> OR .)
    ISIZE           reduce using rule 164 (ADD_OP -> OR .)
    I64             reduce using rule 164 (ADD_OP -> OR .)
    I32             reduce using rule 164 (ADD_OP -> OR .)
    I16             reduce using rule 164 (ADD_OP -> OR .)
    I8              reduce using rule 164 (ADD_OP -> OR .)
    UINT            reduce using rule 164 (ADD_OP -> OR .)
    USIZE           reduce using rule 164 (ADD_OP -> OR .)
    U64             reduce using rule 164 (ADD_OP -> OR .)
    U32             reduce using rule 164 (ADD_OP -> OR .)
    U16             reduce using rule 164 (ADD_OP -> OR .)
    U8              reduce using rule 164 (ADD_OP -> OR .)
    HEX_LIT         reduce using rule 164 (ADD_OP -> OR .)
    OCTAL_LIT       reduce using rule 164 (ADD_OP -> OR .)
    BINARY_LIT      reduce using rule 164 (ADD_OP -> OR .)
    .               reduce using rule 164 (ADD_OP -> OR .)


state 138

    (165) ADD_OP -> MINUS .
    AND             reduce using rule 165 (ADD_OP -> MINUS .)
    EXCLM           reduce using rule 165 (ADD_OP -> MINUS .)
    MINUS           reduce using rule 165 (ADD_OP -> MINUS .)
    (               reduce using rule 165 (ADD_OP -> MINUS .)
    IDENTIFIER      reduce using rule 165 (ADD_OP -> MINUS .)
    STRING          reduce using rule 165 (ADD_OP -> MINUS .)
    BOOL            reduce using rule 165 (ADD_OP -> MINUS .)
    RUNE            reduce using rule 165 (ADD_OP -> MINUS .)
    FN              reduce using rule 165 (ADD_OP -> MINUS .)
    DECIMAL_LIT     reduce using rule 165 (ADD_OP -> MINUS .)
    FALSE           reduce using rule 165 (ADD_OP -> MINUS .)
    TRUE            reduce using rule 165 (ADD_OP -> MINUS .)
    RUNE_LIT        reduce using rule 165 (ADD_OP -> MINUS .)
    STRING_LIT      reduce using rule 165 (ADD_OP -> MINUS .)
    F32             reduce using rule 165 (ADD_OP -> MINUS .)
    F64             reduce using rule 165 (ADD_OP -> MINUS .)
    INT             reduce using rule 165 (ADD_OP -> MINUS .)
    ISIZE           reduce using rule 165 (ADD_OP -> MINUS .)
    I64             reduce using rule 165 (ADD_OP -> MINUS .)
    I32             reduce using rule 165 (ADD_OP -> MINUS .)
    I16             reduce using rule 165 (ADD_OP -> MINUS .)
    I8              reduce using rule 165 (ADD_OP -> MINUS .)
    UINT            reduce using rule 165 (ADD_OP -> MINUS .)
    USIZE           reduce using rule 165 (ADD_OP -> MINUS .)
    U64             reduce using rule 165 (ADD_OP -> MINUS .)
    U32             reduce using rule 165 (ADD_OP -> MINUS .)
    U16             reduce using rule 165 (ADD_OP -> MINUS .)
    U8              reduce using rule 165 (ADD_OP -> MINUS .)
    HEX_LIT         reduce using rule 165 (ADD_OP -> MINUS .)
    OCTAL_LIT       reduce using rule 165 (ADD_OP -> MINUS .)
    BINARY_LIT      reduce using rule 165 (ADD_OP -> MINUS .)
    .               reduce using rule 165 (ADD_OP -> MINUS .)


state 139

    (166) ADD_OP -> PLUS .
    AND             reduce using rule 166 (ADD_OP -> PLUS .)
    EXCLM           reduce using rule 166 (ADD_OP -> PLUS .)
    MINUS           reduce using rule 166 (ADD_OP -> PLUS .)
    (               reduce using rule 166 (ADD_OP -> PLUS .)
    IDENTIFIER      reduce using rule 166 (ADD_OP -> PLUS .)
    STRING          reduce using rule 166 (ADD_OP -> PLUS .)
    BOOL            reduce using rule 166 (ADD_OP -> PLUS .)
    RUNE            reduce using rule 166 (ADD_OP -> PLUS .)
    FN              reduce using rule 166 (ADD_OP -> PLUS .)
    DECIMAL_LIT     reduce using rule 166 (ADD_OP -> PLUS .)
    FALSE           reduce using rule 166 (ADD_OP -> PLUS .)
    TRUE            reduce using rule 166 (ADD_OP -> PLUS .)
    RUNE_LIT        reduce using rule 166 (ADD_OP -> PLUS .)
    STRING_LIT      reduce using rule 166 (ADD_OP -> PLUS .)
    F32             reduce using rule 166 (ADD_OP -> PLUS .)
    F64             reduce using rule 166 (ADD_OP -> PLUS .)
    INT             reduce using rule 166 (ADD_OP -> PLUS .)
    ISIZE           reduce using rule 166 (ADD_OP -> PLUS .)
    I64             reduce using rule 166 (ADD_OP -> PLUS .)
    I32             reduce using rule 166 (ADD_OP -> PLUS .)
    I16             reduce using rule 166 (ADD_OP -> PLUS .)
    I8              reduce using rule 166 (ADD_OP -> PLUS .)
    UINT            reduce using rule 166 (ADD_OP -> PLUS .)
    USIZE           reduce using rule 166 (ADD_OP -> PLUS .)
    U64             reduce using rule 166 (ADD_OP -> PLUS .)
    U32             reduce using rule 166 (ADD_OP -> PLUS .)
    U16             reduce using rule 166 (ADD_OP -> PLUS .)
    U8              reduce using rule 166 (ADD_OP -> PLUS .)
    HEX_LIT         reduce using rule 166 (ADD_OP -> PLUS .)
    OCTAL_LIT       reduce using rule 166 (ADD_OP -> PLUS .)
    BINARY_LIT      reduce using rule 166 (ADD_OP -> PLUS .)
    .               reduce using rule 166 (ADD_OP -> PLUS .)


state 140

    (157) REL_OP -> GE .
    AND             reduce using rule 157 (REL_OP -> GE .)
    EXCLM           reduce using rule 157 (REL_OP -> GE .)
    MINUS           reduce using rule 157 (REL_OP -> GE .)
    (               reduce using rule 157 (REL_OP -> GE .)
    IDENTIFIER      reduce using rule 157 (REL_OP -> GE .)
    STRING          reduce using rule 157 (REL_OP -> GE .)
    BOOL            reduce using rule 157 (REL_OP -> GE .)
    RUNE            reduce using rule 157 (REL_OP -> GE .)
    FN              reduce using rule 157 (REL_OP -> GE .)
    DECIMAL_LIT     reduce using rule 157 (REL_OP -> GE .)
    FALSE           reduce using rule 157 (REL_OP -> GE .)
    TRUE            reduce using rule 157 (REL_OP -> GE .)
    RUNE_LIT        reduce using rule 157 (REL_OP -> GE .)
    STRING_LIT      reduce using rule 157 (REL_OP -> GE .)
    F32             reduce using rule 157 (REL_OP -> GE .)
    F64             reduce using rule 157 (REL_OP -> GE .)
    INT             reduce using rule 157 (REL_OP -> GE .)
    ISIZE           reduce using rule 157 (REL_OP -> GE .)
    I64             reduce using rule 157 (REL_OP -> GE .)
    I32             reduce using rule 157 (REL_OP -> GE .)
    I16             reduce using rule 157 (REL_OP -> GE .)
    I8              reduce using rule 157 (REL_OP -> GE .)
    UINT            reduce using rule 157 (REL_OP -> GE .)
    USIZE           reduce using rule 157 (REL_OP -> GE .)
    U64             reduce using rule 157 (REL_OP -> GE .)
    U32             reduce using rule 157 (REL_OP -> GE .)
    U16             reduce using rule 157 (REL_OP -> GE .)
    U8              reduce using rule 157 (REL_OP -> GE .)
    HEX_LIT         reduce using rule 157 (REL_OP -> GE .)
    OCTAL_LIT       reduce using rule 157 (REL_OP -> GE .)
    BINARY_LIT      reduce using rule 157 (REL_OP -> GE .)
    .               reduce using rule 157 (REL_OP -> GE .)


state 141

    (158) REL_OP -> GT .
    AND             reduce using rule 158 (REL_OP -> GT .)
    EXCLM           reduce using rule 158 (REL_OP -> GT .)
    MINUS           reduce using rule 158 (REL_OP -> GT .)
    (               reduce using rule 158 (REL_OP -> GT .)
    IDENTIFIER      reduce using rule 158 (REL_OP -> GT .)
    STRING          reduce using rule 158 (REL_OP -> GT .)
    BOOL            reduce using rule 158 (REL_OP -> GT .)
    RUNE            reduce using rule 158 (REL_OP -> GT .)
    FN              reduce using rule 158 (REL_OP -> GT .)
    DECIMAL_LIT     reduce using rule 158 (REL_OP -> GT .)
    FALSE           reduce using rule 158 (REL_OP -> GT .)
    TRUE            reduce using rule 158 (REL_OP -> GT .)
    RUNE_LIT        reduce using rule 158 (REL_OP -> GT .)
    STRING_LIT      reduce using rule 158 (REL_OP -> GT .)
    F32             reduce using rule 158 (REL_OP -> GT .)
    F64             reduce using rule 158 (REL_OP -> GT .)
    INT             reduce using rule 158 (REL_OP -> GT .)
    ISIZE           reduce using rule 158 (REL_OP -> GT .)
    I64             reduce using rule 158 (REL_OP -> GT .)
    I32             reduce using rule 158 (REL_OP -> GT .)
    I16             reduce using rule 158 (REL_OP -> GT .)
    I8              reduce using rule 158 (REL_OP -> GT .)
    UINT            reduce using rule 158 (REL_OP -> GT .)
    USIZE           reduce using rule 158 (REL_OP -> GT .)
    U64             reduce using rule 158 (REL_OP -> GT .)
    U32             reduce using rule 158 (REL_OP -> GT .)
    U16             reduce using rule 158 (REL_OP -> GT .)
    U8              reduce using rule 158 (REL_OP -> GT .)
    HEX_LIT         reduce using rule 158 (REL_OP -> GT .)
    OCTAL_LIT       reduce using rule 158 (REL_OP -> GT .)
    BINARY_LIT      reduce using rule 158 (REL_OP -> GT .)
    .               reduce using rule 158 (REL_OP -> GT .)


state 142

    (159) REL_OP -> LE .
    AND             reduce using rule 159 (REL_OP -> LE .)
    EXCLM           reduce using rule 159 (REL_OP -> LE .)
    MINUS           reduce using rule 159 (REL_OP -> LE .)
    (               reduce using rule 159 (REL_OP -> LE .)
    IDENTIFIER      reduce using rule 159 (REL_OP -> LE .)
    STRING          reduce using rule 159 (REL_OP -> LE .)
    BOOL            reduce using rule 159 (REL_OP -> LE .)
    RUNE            reduce using rule 159 (REL_OP -> LE .)
    FN              reduce using rule 159 (REL_OP -> LE .)
    DECIMAL_LIT     reduce using rule 159 (REL_OP -> LE .)
    FALSE           reduce using rule 159 (REL_OP -> LE .)
    TRUE            reduce using rule 159 (REL_OP -> LE .)
    RUNE_LIT        reduce using rule 159 (REL_OP -> LE .)
    STRING_LIT      reduce using rule 159 (REL_OP -> LE .)
    F32             reduce using rule 159 (REL_OP -> LE .)
    F64             reduce using rule 159 (REL_OP -> LE .)
    INT             reduce using rule 159 (REL_OP -> LE .)
    ISIZE           reduce using rule 159 (REL_OP -> LE .)
    I64             reduce using rule 159 (REL_OP -> LE .)
    I32             reduce using rule 159 (REL_OP -> LE .)
    I16             reduce using rule 159 (REL_OP -> LE .)
    I8              reduce using rule 159 (REL_OP -> LE .)
    UINT            reduce using rule 159 (REL_OP -> LE .)
    USIZE           reduce using rule 159 (REL_OP -> LE .)
    U64             reduce using rule 159 (REL_OP -> LE .)
    U32             reduce using rule 159 (REL_OP -> LE .)
    U16             reduce using rule 159 (REL_OP -> LE .)
    U8              reduce using rule 159 (REL_OP -> LE .)
    HEX_LIT         reduce using rule 159 (REL_OP -> LE .)
    OCTAL_LIT       reduce using rule 159 (REL_OP -> LE .)
    BINARY_LIT      reduce using rule 159 (REL_OP -> LE .)
    .               reduce using rule 159 (REL_OP -> LE .)


state 143

    (160) REL_OP -> LT .
    AND             reduce using rule 160 (REL_OP -> LT .)
    EXCLM           reduce using rule 160 (REL_OP -> LT .)
    MINUS           reduce using rule 160 (REL_OP -> LT .)
    (               reduce using rule 160 (REL_OP -> LT .)
    IDENTIFIER      reduce using rule 160 (REL_OP -> LT .)
    STRING          reduce using rule 160 (REL_OP -> LT .)
    BOOL            reduce using rule 160 (REL_OP -> LT .)
    RUNE            reduce using rule 160 (REL_OP -> LT .)
    FN              reduce using rule 160 (REL_OP -> LT .)
    DECIMAL_LIT     reduce using rule 160 (REL_OP -> LT .)
    FALSE           reduce using rule 160 (REL_OP -> LT .)
    TRUE            reduce using rule 160 (REL_OP -> LT .)
    RUNE_LIT        reduce using rule 160 (REL_OP -> LT .)
    STRING_LIT      reduce using rule 160 (REL_OP -> LT .)
    F32             reduce using rule 160 (REL_OP -> LT .)
    F64             reduce using rule 160 (REL_OP -> LT .)
    INT             reduce using rule 160 (REL_OP -> LT .)
    ISIZE           reduce using rule 160 (REL_OP -> LT .)
    I64             reduce using rule 160 (REL_OP -> LT .)
    I32             reduce using rule 160 (REL_OP -> LT .)
    I16             reduce using rule 160 (REL_OP -> LT .)
    I8              reduce using rule 160 (REL_OP -> LT .)
    UINT            reduce using rule 160 (REL_OP -> LT .)
    USIZE           reduce using rule 160 (REL_OP -> LT .)
    U64             reduce using rule 160 (REL_OP -> LT .)
    U32             reduce using rule 160 (REL_OP -> LT .)
    U16             reduce using rule 160 (REL_OP -> LT .)
    U8              reduce using rule 160 (REL_OP -> LT .)
    HEX_LIT         reduce using rule 160 (REL_OP -> LT .)
    OCTAL_LIT       reduce using rule 160 (REL_OP -> LT .)
    BINARY_LIT      reduce using rule 160 (REL_OP -> LT .)
    .               reduce using rule 160 (REL_OP -> LT .)


state 144

    (161) REL_OP -> NE .
    AND             reduce using rule 161 (REL_OP -> NE .)
    EXCLM           reduce using rule 161 (REL_OP -> NE .)
    MINUS           reduce using rule 161 (REL_OP -> NE .)
    (               reduce using rule 161 (REL_OP -> NE .)
    IDENTIFIER      reduce using rule 161 (REL_OP -> NE .)
    STRING          reduce using rule 161 (REL_OP -> NE .)
    BOOL            reduce using rule 161 (REL_OP -> NE .)
    RUNE            reduce using rule 161 (REL_OP -> NE .)
    FN              reduce using rule 161 (REL_OP -> NE .)
    DECIMAL_LIT     reduce using rule 161 (REL_OP -> NE .)
    FALSE           reduce using rule 161 (REL_OP -> NE .)
    TRUE            reduce using rule 161 (REL_OP -> NE .)
    RUNE_LIT        reduce using rule 161 (REL_OP -> NE .)
    STRING_LIT      reduce using rule 161 (REL_OP -> NE .)
    F32             reduce using rule 161 (REL_OP -> NE .)
    F64             reduce using rule 161 (REL_OP -> NE .)
    INT             reduce using rule 161 (REL_OP -> NE .)
    ISIZE           reduce using rule 161 (REL_OP -> NE .)
    I64             reduce using rule 161 (REL_OP -> NE .)
    I32             reduce using rule 161 (REL_OP -> NE .)
    I16             reduce using rule 161 (REL_OP -> NE .)
    I8              reduce using rule 161 (REL_OP -> NE .)
    UINT            reduce using rule 161 (REL_OP -> NE .)
    USIZE           reduce using rule 161 (REL_OP -> NE .)
    U64             reduce using rule 161 (REL_OP -> NE .)
    U32             reduce using rule 161 (REL_OP -> NE .)
    U16             reduce using rule 161 (REL_OP -> NE .)
    U8              reduce using rule 161 (REL_OP -> NE .)
    HEX_LIT         reduce using rule 161 (REL_OP -> NE .)
    OCTAL_LIT       reduce using rule 161 (REL_OP -> NE .)
    BINARY_LIT      reduce using rule 161 (REL_OP -> NE .)
    .               reduce using rule 161 (REL_OP -> NE .)


state 145

    (162) REL_OP -> EQ .
    AND             reduce using rule 162 (REL_OP -> EQ .)
    EXCLM           reduce using rule 162 (REL_OP -> EQ .)
    MINUS           reduce using rule 162 (REL_OP -> EQ .)
    (               reduce using rule 162 (REL_OP -> EQ .)
    IDENTIFIER      reduce using rule 162 (REL_OP -> EQ .)
    STRING          reduce using rule 162 (REL_OP -> EQ .)
    BOOL            reduce using rule 162 (REL_OP -> EQ .)
    RUNE            reduce using rule 162 (REL_OP -> EQ .)
    FN              reduce using rule 162 (REL_OP -> EQ .)
    DECIMAL_LIT     reduce using rule 162 (REL_OP -> EQ .)
    FALSE           reduce using rule 162 (REL_OP -> EQ .)
    TRUE            reduce using rule 162 (REL_OP -> EQ .)
    RUNE_LIT        reduce using rule 162 (REL_OP -> EQ .)
    STRING_LIT      reduce using rule 162 (REL_OP -> EQ .)
    F32             reduce using rule 162 (REL_OP -> EQ .)
    F64             reduce using rule 162 (REL_OP -> EQ .)
    INT             reduce using rule 162 (REL_OP -> EQ .)
    ISIZE           reduce using rule 162 (REL_OP -> EQ .)
    I64             reduce using rule 162 (REL_OP -> EQ .)
    I32             reduce using rule 162 (REL_OP -> EQ .)
    I16             reduce using rule 162 (REL_OP -> EQ .)
    I8              reduce using rule 162 (REL_OP -> EQ .)
    UINT            reduce using rule 162 (REL_OP -> EQ .)
    USIZE           reduce using rule 162 (REL_OP -> EQ .)
    U64             reduce using rule 162 (REL_OP -> EQ .)
    U32             reduce using rule 162 (REL_OP -> EQ .)
    U16             reduce using rule 162 (REL_OP -> EQ .)
    U8              reduce using rule 162 (REL_OP -> EQ .)
    HEX_LIT         reduce using rule 162 (REL_OP -> EQ .)
    OCTAL_LIT       reduce using rule 162 (REL_OP -> EQ .)
    BINARY_LIT      reduce using rule 162 (REL_OP -> EQ .)
    .               reduce using rule 162 (REL_OP -> EQ .)


state 146

    (91) unaryExpr -> UNARY_OP unaryExpr .
    LOGIC_AND       reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    LOGIC_OR        reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    SHR             reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    SHL             reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    AND             reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    MOD             reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    DIV             reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    STAR            reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    XOR             reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    OR              reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    MINUS           reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    PLUS            reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    GE              reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    GT              reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    LE              reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    LT              reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    NE              reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    EQ              reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    NEWL            reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    ;               reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    )               reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    ,               reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    }               reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)
    IDENTIFIER      reduce using rule 91 (unaryExpr -> UNARY_OP unaryExpr .)


state 147

    (93) primaryExpr -> primaryExpr arguments .
    (               reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    LOGIC_AND       reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    LOGIC_OR        reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    SHR             reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    SHL             reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    AND             reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    MOD             reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    DIV             reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    STAR            reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    XOR             reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    OR              reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    MINUS           reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    PLUS            reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    GE              reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    GT              reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    LE              reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    LT              reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    NE              reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    EQ              reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    NEWL            reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    ;               reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    )               reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    ,               reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    }               reduce using rule 93 (primaryExpr -> primaryExpr arguments .)
    IDENTIFIER      reduce using rule 93 (primaryExpr -> primaryExpr arguments .)


state 148

    (82) arguments -> ( . type_ , expressionList , )
    (83) arguments -> ( . type_ , expressionList )
    (84) arguments -> ( . type_ , )
    (85) arguments -> ( . type_ )
    (86) arguments -> ( . expressionList , )
    (87) arguments -> ( . expressionList )
    (88) arguments -> ( . )
    (103) type_ -> . typeName
    (71) expressionList -> . expressionList , expression
    (72) expressionList -> . expression
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    )               shift and go to state 200
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    IDENTIFIER      shift and go to state 108
    FN              shift and go to state 109
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    type_                          shift and go to state 198
    expressionList                 shift and go to state 199
    typeName                       shift and go to state 39
    expression                     shift and go to state 172
    numericType                    shift and go to state 42
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 149

    (102) conversion -> type_ ( . expression )
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    IDENTIFIER      shift and go to state 108
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 109
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    type_                          shift and go to state 36
    expression                     shift and go to state 201
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 150

    (125) basicLit -> FLOAT_LIT EXPONENT .
    (               reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    LOGIC_AND       reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    LOGIC_OR        reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    SHR             reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    SHL             reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    AND             reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    MOD             reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    DIV             reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    STAR            reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    XOR             reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    OR              reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    MINUS           reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    PLUS            reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    GE              reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    GT              reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    LE              reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    LT              reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    NE              reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    EQ              reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    NEWL            reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    ;               reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    )               reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    ,               reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    }               reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)
    IDENTIFIER      reduce using rule 125 (basicLit -> FLOAT_LIT EXPONENT .)


state 151

    (124) basicLit -> DECIMAL_LIT EXPONENT .
    (               reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    LOGIC_AND       reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    LOGIC_OR        reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    SHR             reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    SHL             reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    AND             reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    MOD             reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    DIV             reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    STAR            reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    XOR             reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    OR              reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    MINUS           reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    PLUS            reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    GE              reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    GT              reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    LE              reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    LT              reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    NE              reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    EQ              reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    NEWL            reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    ;               reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    )               reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    ,               reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    }               reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)
    IDENTIFIER      reduce using rule 124 (basicLit -> DECIMAL_LIT EXPONENT .)


state 152

    (131) FLOAT_LIT -> DECIMAL_LIT . .
    (132) FLOAT_LIT -> DECIMAL_LIT . . DECIMAL_LIT
    EXPONENT        reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    (               reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    LOGIC_AND       reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    LOGIC_OR        reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    SHR             reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    SHL             reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    AND             reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    MOD             reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    DIV             reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    STAR            reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    XOR             reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    OR              reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    MINUS           reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    PLUS            reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    GE              reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    GT              reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    LE              reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    LT              reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    NE              reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    EQ              reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    NEWL            reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    ;               reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    )               reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    ,               reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    }               reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    IDENTIFIER      reduce using rule 131 (FLOAT_LIT -> DECIMAL_LIT . .)
    DECIMAL_LIT     shift and go to state 202


state 153

    (130) FLOAT_LIT -> . DECIMAL_LIT .
    EXPONENT        reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    (               reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    SHR             reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    SHL             reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    AND             reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    MOD             reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    DIV             reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    STAR            reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    XOR             reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    OR              reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    MINUS           reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    PLUS            reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    GE              reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    GT              reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    LE              reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    LT              reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    NE              reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    EQ              reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    NEWL            reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    ;               reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    )               reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    ,               reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    }               reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)
    IDENTIFIER      reduce using rule 130 (FLOAT_LIT -> . DECIMAL_LIT .)


state 154

    (39) topLevelDecls -> topLevelDecls topLevelDecl eos .
    (137) eos -> eos . NEWL
    (139) eos -> eos . ;
    FN              reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    CONST           reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    IDENTIFIER      reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    AND             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    EXCLM           reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    MINUS           reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    (               reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    STRING          reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    BOOL            reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    RUNE            reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    DECIMAL_LIT     reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    FALSE           reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    TRUE            reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    RUNE_LIT        reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    STRING_LIT      reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    F32             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    F64             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    INT             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    ISIZE           reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I64             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I32             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I16             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I8              reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    UINT            reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    USIZE           reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U64             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U32             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U16             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U8              reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    HEX_LIT         reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    OCTAL_LIT       reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    BINARY_LIT      reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    .               reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    $end            reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    NEWL            shift and go to state 167
    ;               shift and go to state 168


state 155

    (18) sourceFile -> moduleClause topLevelDecls orphanStmtList .
    $end            reduce using rule 18 (sourceFile -> moduleClause topLevelDecls orphanStmtList .)


state 156

    (7) sourceFile -> moduleClause importDecls topLevelDecls .
    (23) sourceFile -> moduleClause importDecls topLevelDecls . orphanStmtList
    (39) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (43) topLevelDecl -> . constDecl
    (73) statementList -> . statementList eos statement
    (74) statementList -> . statement
    (56) functionDecl -> . FN IDENTIFIER signature
    (57) functionDecl -> . FN IDENTIFIER function_
    (46) constDecl -> . CONST ( eos constSpecs )
    (47) constDecl -> . CONST ( constSpecs )
    (48) constDecl -> . CONST constSpec
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 7 (sourceFile -> moduleClause importDecls topLevelDecls .)
    FN              shift and go to state 18
    CONST           shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    orphanStmtList                 shift and go to state 203
    topLevelDecl                   shift and go to state 72
    statementList                  shift and go to state 12
    functionDecl                   shift and go to state 13
    constDecl                      shift and go to state 14
    statement                      shift and go to state 17
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 157

    (15) sourceFile -> moduleClause importDecls orphanStmtList .
    $end            reduce using rule 15 (sourceFile -> moduleClause importDecls orphanStmtList .)


state 158

    (19) sourceFile -> cPreprocessors topLevelDecls orphanStmtList .
    $end            reduce using rule 19 (sourceFile -> cPreprocessors topLevelDecls orphanStmtList .)


state 159

    (5) sourceFile -> cPreprocessors moduleClause topLevelDecls .
    (21) sourceFile -> cPreprocessors moduleClause topLevelDecls . orphanStmtList
    (39) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (43) topLevelDecl -> . constDecl
    (73) statementList -> . statementList eos statement
    (74) statementList -> . statement
    (56) functionDecl -> . FN IDENTIFIER signature
    (57) functionDecl -> . FN IDENTIFIER function_
    (46) constDecl -> . CONST ( eos constSpecs )
    (47) constDecl -> . CONST ( constSpecs )
    (48) constDecl -> . CONST constSpec
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 5 (sourceFile -> cPreprocessors moduleClause topLevelDecls .)
    FN              shift and go to state 18
    CONST           shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    orphanStmtList                 shift and go to state 204
    topLevelDecl                   shift and go to state 72
    statementList                  shift and go to state 12
    functionDecl                   shift and go to state 13
    constDecl                      shift and go to state 14
    statement                      shift and go to state 17
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 160

    (8) sourceFile -> cPreprocessors moduleClause importDecls . topLevelDecls
    (16) sourceFile -> cPreprocessors moduleClause importDecls . orphanStmtList
    (24) sourceFile -> cPreprocessors moduleClause importDecls . topLevelDecls orphanStmtList
    (31) importDecls -> importDecls . importDecl eos
    (39) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (40) topLevelDecls -> . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (33) importDecl -> . IMPORT importSpec
    (42) topLevelDecl -> . functionDecl
    (43) topLevelDecl -> . constDecl
    (73) statementList -> . statementList eos statement
    (74) statementList -> . statement
    (56) functionDecl -> . FN IDENTIFIER signature
    (57) functionDecl -> . FN IDENTIFIER function_
    (46) constDecl -> . CONST ( eos constSpecs )
    (47) constDecl -> . CONST ( constSpecs )
    (48) constDecl -> . CONST constSpec
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IMPORT          shift and go to state 16
    FN              shift and go to state 18
    CONST           shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    topLevelDecls                  shift and go to state 205
    orphanStmtList                 shift and go to state 206
    importDecl                     shift and go to state 83
    topLevelDecl                   shift and go to state 7
    statementList                  shift and go to state 12
    functionDecl                   shift and go to state 13
    constDecl                      shift and go to state 14
    statement                      shift and go to state 17
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 161

    (13) sourceFile -> cPreprocessors moduleClause orphanStmtList .
    $end            reduce using rule 13 (sourceFile -> cPreprocessors moduleClause orphanStmtList .)


state 162

    (6) sourceFile -> cPreprocessors importDecls topLevelDecls .
    (22) sourceFile -> cPreprocessors importDecls topLevelDecls . orphanStmtList
    (39) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (43) topLevelDecl -> . constDecl
    (73) statementList -> . statementList eos statement
    (74) statementList -> . statement
    (56) functionDecl -> . FN IDENTIFIER signature
    (57) functionDecl -> . FN IDENTIFIER function_
    (46) constDecl -> . CONST ( eos constSpecs )
    (47) constDecl -> . CONST ( constSpecs )
    (48) constDecl -> . CONST constSpec
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 6 (sourceFile -> cPreprocessors importDecls topLevelDecls .)
    FN              shift and go to state 18
    CONST           shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    orphanStmtList                 shift and go to state 207
    topLevelDecl                   shift and go to state 72
    statementList                  shift and go to state 12
    functionDecl                   shift and go to state 13
    constDecl                      shift and go to state 14
    statement                      shift and go to state 17
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 163

    (14) sourceFile -> cPreprocessors importDecls orphanStmtList .
    $end            reduce using rule 14 (sourceFile -> cPreprocessors importDecls orphanStmtList .)


state 164

    (26) cPreprocessors -> cPreprocessors cPreprocessor eos .
    (137) eos -> eos . NEWL
    (139) eos -> eos . ;
    MODULE          reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    C_PREPR         reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    IMPORT          reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    FN              reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    CONST           reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    IDENTIFIER      reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    AND             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    EXCLM           reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    MINUS           reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    (               reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    STRING          reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    BOOL            reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    RUNE            reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    DECIMAL_LIT     reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    FALSE           reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    TRUE            reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    RUNE_LIT        reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    STRING_LIT      reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    F32             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    F64             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    INT             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    ISIZE           reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    I64             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    I32             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    I16             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    I8              reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    UINT            reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    USIZE           reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    U64             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    U32             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    U16             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    U8              reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    HEX_LIT         reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    OCTAL_LIT       reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    BINARY_LIT      reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    .               reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    NEWL            shift and go to state 167
    ;               shift and go to state 168


state 165

    (20) sourceFile -> importDecls topLevelDecls orphanStmtList .
    $end            reduce using rule 20 (sourceFile -> importDecls topLevelDecls orphanStmtList .)


state 166

    (31) importDecls -> importDecls importDecl eos .
    (137) eos -> eos . NEWL
    (139) eos -> eos . ;
    IMPORT          reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    FN              reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    CONST           reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    IDENTIFIER      reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    AND             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    EXCLM           reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    MINUS           reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    (               reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    STRING          reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    BOOL            reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    RUNE            reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    DECIMAL_LIT     reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    FALSE           reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    TRUE            reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    RUNE_LIT        reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    STRING_LIT      reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    F32             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    F64             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    INT             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    ISIZE           reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    I64             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    I32             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    I16             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    I8              reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    UINT            reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    USIZE           reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    U64             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    U32             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    U16             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    U8              reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    HEX_LIT         reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    OCTAL_LIT       reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    BINARY_LIT      reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    .               reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    NEWL            shift and go to state 167
    ;               shift and go to state 168


state 167

    (137) eos -> eos NEWL .
    NEWL            reduce using rule 137 (eos -> eos NEWL .)
    ;               reduce using rule 137 (eos -> eos NEWL .)
    FN              reduce using rule 137 (eos -> eos NEWL .)
    CONST           reduce using rule 137 (eos -> eos NEWL .)
    IDENTIFIER      reduce using rule 137 (eos -> eos NEWL .)
    AND             reduce using rule 137 (eos -> eos NEWL .)
    EXCLM           reduce using rule 137 (eos -> eos NEWL .)
    MINUS           reduce using rule 137 (eos -> eos NEWL .)
    (               reduce using rule 137 (eos -> eos NEWL .)
    STRING          reduce using rule 137 (eos -> eos NEWL .)
    BOOL            reduce using rule 137 (eos -> eos NEWL .)
    RUNE            reduce using rule 137 (eos -> eos NEWL .)
    DECIMAL_LIT     reduce using rule 137 (eos -> eos NEWL .)
    FALSE           reduce using rule 137 (eos -> eos NEWL .)
    TRUE            reduce using rule 137 (eos -> eos NEWL .)
    RUNE_LIT        reduce using rule 137 (eos -> eos NEWL .)
    STRING_LIT      reduce using rule 137 (eos -> eos NEWL .)
    F32             reduce using rule 137 (eos -> eos NEWL .)
    F64             reduce using rule 137 (eos -> eos NEWL .)
    INT             reduce using rule 137 (eos -> eos NEWL .)
    ISIZE           reduce using rule 137 (eos -> eos NEWL .)
    I64             reduce using rule 137 (eos -> eos NEWL .)
    I32             reduce using rule 137 (eos -> eos NEWL .)
    I16             reduce using rule 137 (eos -> eos NEWL .)
    I8              reduce using rule 137 (eos -> eos NEWL .)
    UINT            reduce using rule 137 (eos -> eos NEWL .)
    USIZE           reduce using rule 137 (eos -> eos NEWL .)
    U64             reduce using rule 137 (eos -> eos NEWL .)
    U32             reduce using rule 137 (eos -> eos NEWL .)
    U16             reduce using rule 137 (eos -> eos NEWL .)
    U8              reduce using rule 137 (eos -> eos NEWL .)
    HEX_LIT         reduce using rule 137 (eos -> eos NEWL .)
    OCTAL_LIT       reduce using rule 137 (eos -> eos NEWL .)
    BINARY_LIT      reduce using rule 137 (eos -> eos NEWL .)
    .               reduce using rule 137 (eos -> eos NEWL .)
    $end            reduce using rule 137 (eos -> eos NEWL .)
    MODULE          reduce using rule 137 (eos -> eos NEWL .)
    C_PREPR         reduce using rule 137 (eos -> eos NEWL .)
    IMPORT          reduce using rule 137 (eos -> eos NEWL .)
    )               reduce using rule 137 (eos -> eos NEWL .)


state 168

    (139) eos -> eos ; .
    NEWL            reduce using rule 139 (eos -> eos ; .)
    ;               reduce using rule 139 (eos -> eos ; .)
    FN              reduce using rule 139 (eos -> eos ; .)
    CONST           reduce using rule 139 (eos -> eos ; .)
    IDENTIFIER      reduce using rule 139 (eos -> eos ; .)
    AND             reduce using rule 139 (eos -> eos ; .)
    EXCLM           reduce using rule 139 (eos -> eos ; .)
    MINUS           reduce using rule 139 (eos -> eos ; .)
    (               reduce using rule 139 (eos -> eos ; .)
    STRING          reduce using rule 139 (eos -> eos ; .)
    BOOL            reduce using rule 139 (eos -> eos ; .)
    RUNE            reduce using rule 139 (eos -> eos ; .)
    DECIMAL_LIT     reduce using rule 139 (eos -> eos ; .)
    FALSE           reduce using rule 139 (eos -> eos ; .)
    TRUE            reduce using rule 139 (eos -> eos ; .)
    RUNE_LIT        reduce using rule 139 (eos -> eos ; .)
    STRING_LIT      reduce using rule 139 (eos -> eos ; .)
    F32             reduce using rule 139 (eos -> eos ; .)
    F64             reduce using rule 139 (eos -> eos ; .)
    INT             reduce using rule 139 (eos -> eos ; .)
    ISIZE           reduce using rule 139 (eos -> eos ; .)
    I64             reduce using rule 139 (eos -> eos ; .)
    I32             reduce using rule 139 (eos -> eos ; .)
    I16             reduce using rule 139 (eos -> eos ; .)
    I8              reduce using rule 139 (eos -> eos ; .)
    UINT            reduce using rule 139 (eos -> eos ; .)
    USIZE           reduce using rule 139 (eos -> eos ; .)
    U64             reduce using rule 139 (eos -> eos ; .)
    U32             reduce using rule 139 (eos -> eos ; .)
    U16             reduce using rule 139 (eos -> eos ; .)
    U8              reduce using rule 139 (eos -> eos ; .)
    HEX_LIT         reduce using rule 139 (eos -> eos ; .)
    OCTAL_LIT       reduce using rule 139 (eos -> eos ; .)
    BINARY_LIT      reduce using rule 139 (eos -> eos ; .)
    .               reduce using rule 139 (eos -> eos ; .)
    $end            reduce using rule 139 (eos -> eos ; .)
    MODULE          reduce using rule 139 (eos -> eos ; .)
    C_PREPR         reduce using rule 139 (eos -> eos ; .)
    IMPORT          reduce using rule 139 (eos -> eos ; .)
    )               reduce using rule 139 (eos -> eos ; .)


state 169

    (25) moduleClause -> MODULE IDENTIFIER eos .
    (137) eos -> eos . NEWL
    (139) eos -> eos . ;
    IMPORT          reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    FN              reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    CONST           reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    IDENTIFIER      reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    AND             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    EXCLM           reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    MINUS           reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    (               reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    STRING          reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    BOOL            reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    RUNE            reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    DECIMAL_LIT     reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    FALSE           reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    TRUE            reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    RUNE_LIT        reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    STRING_LIT      reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    F32             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    F64             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    INT             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    ISIZE           reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    I64             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    I32             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    I16             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    I8              reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    UINT            reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    USIZE           reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    U64             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    U32             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    U16             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    U8              reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    HEX_LIT         reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    OCTAL_LIT       reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    BINARY_LIT      reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    .               reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    NEWL            shift and go to state 167
    ;               shift and go to state 168


state 170

    (73) statementList -> statementList eos statement .
    NEWL            reduce using rule 73 (statementList -> statementList eos statement .)
    ;               reduce using rule 73 (statementList -> statementList eos statement .)
    }               reduce using rule 73 (statementList -> statementList eos statement .)


state 171

    (30) cPreprocessor -> C_PREPR IDENTIFIER expressionList .
    (71) expressionList -> expressionList . , expression
    NEWL            reduce using rule 30 (cPreprocessor -> C_PREPR IDENTIFIER expressionList .)
    ;               reduce using rule 30 (cPreprocessor -> C_PREPR IDENTIFIER expressionList .)
    ,               shift and go to state 208


state 172

    (72) expressionList -> expression .
    (89) expression -> expression . BINARY_OP unaryExpr
    (152) BINARY_OP -> . MUL_OP
    (153) BINARY_OP -> . ADD_OP
    (154) BINARY_OP -> . REL_OP
    (155) BINARY_OP -> . LOGIC_AND
    (156) BINARY_OP -> . LOGIC_OR
    (167) MUL_OP -> . SHR
    (168) MUL_OP -> . SHL
    (169) MUL_OP -> . AND
    (170) MUL_OP -> . MOD
    (171) MUL_OP -> . DIV
    (172) MUL_OP -> . STAR
    (163) ADD_OP -> . XOR
    (164) ADD_OP -> . OR
    (165) ADD_OP -> . MINUS
    (166) ADD_OP -> . PLUS
    (157) REL_OP -> . GE
    (158) REL_OP -> . GT
    (159) REL_OP -> . LE
    (160) REL_OP -> . LT
    (161) REL_OP -> . NE
    (162) REL_OP -> . EQ
    ,               reduce using rule 72 (expressionList -> expression .)
    NEWL            reduce using rule 72 (expressionList -> expression .)
    ;               reduce using rule 72 (expressionList -> expression .)
    }               reduce using rule 72 (expressionList -> expression .)
    )               reduce using rule 72 (expressionList -> expression .)
    LOGIC_AND       shift and go to state 128
    LOGIC_OR        shift and go to state 129
    SHR             shift and go to state 130
    SHL             shift and go to state 131
    AND             shift and go to state 132
    MOD             shift and go to state 133
    DIV             shift and go to state 134
    STAR            shift and go to state 135
    XOR             shift and go to state 136
    OR              shift and go to state 137
    MINUS           shift and go to state 138
    PLUS            shift and go to state 139
    GE              shift and go to state 140
    GT              shift and go to state 141
    LE              shift and go to state 142
    LT              shift and go to state 143
    NE              shift and go to state 144
    EQ              shift and go to state 145

    BINARY_OP                      shift and go to state 124
    MUL_OP                         shift and go to state 125
    ADD_OP                         shift and go to state 126
    REL_OP                         shift and go to state 127

state 173

    (38) importPath -> IDENTIFIER .
    NEWL            reduce using rule 38 (importPath -> IDENTIFIER .)
    ;               reduce using rule 38 (importPath -> IDENTIFIER .)


state 174

    (35) importSpec -> IDENTIFIER importPath .
    NEWL            reduce using rule 35 (importSpec -> IDENTIFIER importPath .)
    ;               reduce using rule 35 (importSpec -> IDENTIFIER importPath .)


state 175

    (36) importSpec -> . importPath .
    NEWL            reduce using rule 36 (importSpec -> . importPath .)
    ;               reduce using rule 36 (importSpec -> . importPath .)


state 176

    (56) functionDecl -> FN IDENTIFIER signature .
    (58) function_ -> signature . block
    (75) block -> . { statementList }
    NEWL            reduce using rule 56 (functionDecl -> FN IDENTIFIER signature .)
    ;               reduce using rule 56 (functionDecl -> FN IDENTIFIER signature .)
    {               shift and go to state 179

    block                          shift and go to state 178

state 177

    (57) functionDecl -> FN IDENTIFIER function_ .
    NEWL            reduce using rule 57 (functionDecl -> FN IDENTIFIER function_ .)
    ;               reduce using rule 57 (functionDecl -> FN IDENTIFIER function_ .)


state 178

    (58) function_ -> signature block .
    (               reduce using rule 58 (function_ -> signature block .)
    LOGIC_AND       reduce using rule 58 (function_ -> signature block .)
    LOGIC_OR        reduce using rule 58 (function_ -> signature block .)
    SHR             reduce using rule 58 (function_ -> signature block .)
    SHL             reduce using rule 58 (function_ -> signature block .)
    AND             reduce using rule 58 (function_ -> signature block .)
    MOD             reduce using rule 58 (function_ -> signature block .)
    DIV             reduce using rule 58 (function_ -> signature block .)
    STAR            reduce using rule 58 (function_ -> signature block .)
    XOR             reduce using rule 58 (function_ -> signature block .)
    OR              reduce using rule 58 (function_ -> signature block .)
    MINUS           reduce using rule 58 (function_ -> signature block .)
    PLUS            reduce using rule 58 (function_ -> signature block .)
    GE              reduce using rule 58 (function_ -> signature block .)
    GT              reduce using rule 58 (function_ -> signature block .)
    LE              reduce using rule 58 (function_ -> signature block .)
    LT              reduce using rule 58 (function_ -> signature block .)
    NE              reduce using rule 58 (function_ -> signature block .)
    EQ              reduce using rule 58 (function_ -> signature block .)
    NEWL            reduce using rule 58 (function_ -> signature block .)
    ;               reduce using rule 58 (function_ -> signature block .)
    )               reduce using rule 58 (function_ -> signature block .)
    ,               reduce using rule 58 (function_ -> signature block .)
    }               reduce using rule 58 (function_ -> signature block .)
    IDENTIFIER      reduce using rule 58 (function_ -> signature block .)


state 179

    (75) block -> { . statementList }
    (73) statementList -> . statementList eos statement
    (74) statementList -> . statement
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 109
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    statementList                  shift and go to state 209
    statement                      shift and go to state 17
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 180

    (62) result -> parameters .
    {               reduce using rule 62 (result -> parameters .)
    NEWL            reduce using rule 62 (result -> parameters .)
    ;               reduce using rule 62 (result -> parameters .)


state 181

    (60) signature -> parameters result .
    {               reduce using rule 60 (signature -> parameters result .)
    NEWL            reduce using rule 60 (signature -> parameters result .)
    ;               reduce using rule 60 (signature -> parameters result .)


state 182

    (61) result -> type_ .
    {               reduce using rule 61 (result -> type_ .)
    NEWL            reduce using rule 61 (result -> type_ .)
    ;               reduce using rule 61 (result -> type_ .)


state 183

    (63) parameters -> ( parameterList . , )
    (64) parameters -> ( parameterList . )
    (66) parameterList -> parameterList . , parameterDecl
    ,               shift and go to state 210
    )               shift and go to state 211


state 184

    (65) parameters -> ( ) .
    (               reduce using rule 65 (parameters -> ( ) .)
    STRING          reduce using rule 65 (parameters -> ( ) .)
    BOOL            reduce using rule 65 (parameters -> ( ) .)
    RUNE            reduce using rule 65 (parameters -> ( ) .)
    F32             reduce using rule 65 (parameters -> ( ) .)
    F64             reduce using rule 65 (parameters -> ( ) .)
    INT             reduce using rule 65 (parameters -> ( ) .)
    ISIZE           reduce using rule 65 (parameters -> ( ) .)
    I64             reduce using rule 65 (parameters -> ( ) .)
    I32             reduce using rule 65 (parameters -> ( ) .)
    I16             reduce using rule 65 (parameters -> ( ) .)
    I8              reduce using rule 65 (parameters -> ( ) .)
    UINT            reduce using rule 65 (parameters -> ( ) .)
    USIZE           reduce using rule 65 (parameters -> ( ) .)
    U64             reduce using rule 65 (parameters -> ( ) .)
    U32             reduce using rule 65 (parameters -> ( ) .)
    U16             reduce using rule 65 (parameters -> ( ) .)
    U8              reduce using rule 65 (parameters -> ( ) .)
    {               reduce using rule 65 (parameters -> ( ) .)
    NEWL            reduce using rule 65 (parameters -> ( ) .)
    ;               reduce using rule 65 (parameters -> ( ) .)


state 185

    (67) parameterList -> parameterDecl .
    ,               reduce using rule 67 (parameterList -> parameterDecl .)
    )               reduce using rule 67 (parameterList -> parameterDecl .)


state 186

    (68) parameterDecl -> type_ .
    ,               reduce using rule 68 (parameterDecl -> type_ .)
    )               reduce using rule 68 (parameterDecl -> type_ .)


state 187

    (69) parameterDecl -> identifierList . type_
    (54) identifierList -> identifierList . , IDENTIFIER
    (103) type_ -> . typeName
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    ,               shift and go to state 112
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66

    type_                          shift and go to state 212
    typeName                       shift and go to state 39
    numericType                    shift and go to state 42

state 188

    (55) identifierList -> IDENTIFIER .
    ,               reduce using rule 55 (identifierList -> IDENTIFIER .)
    STRING          reduce using rule 55 (identifierList -> IDENTIFIER .)
    BOOL            reduce using rule 55 (identifierList -> IDENTIFIER .)
    RUNE            reduce using rule 55 (identifierList -> IDENTIFIER .)
    F32             reduce using rule 55 (identifierList -> IDENTIFIER .)
    F64             reduce using rule 55 (identifierList -> IDENTIFIER .)
    INT             reduce using rule 55 (identifierList -> IDENTIFIER .)
    ISIZE           reduce using rule 55 (identifierList -> IDENTIFIER .)
    I64             reduce using rule 55 (identifierList -> IDENTIFIER .)
    I32             reduce using rule 55 (identifierList -> IDENTIFIER .)
    I16             reduce using rule 55 (identifierList -> IDENTIFIER .)
    I8              reduce using rule 55 (identifierList -> IDENTIFIER .)
    UINT            reduce using rule 55 (identifierList -> IDENTIFIER .)
    USIZE           reduce using rule 55 (identifierList -> IDENTIFIER .)
    U64             reduce using rule 55 (identifierList -> IDENTIFIER .)
    U32             reduce using rule 55 (identifierList -> IDENTIFIER .)
    U16             reduce using rule 55 (identifierList -> IDENTIFIER .)
    U8              reduce using rule 55 (identifierList -> IDENTIFIER .)


state 189

    (46) constDecl -> CONST ( eos . constSpecs )
    (137) eos -> eos . NEWL
    (139) eos -> eos . ;
    (49) constSpecs -> . constSpecs constSpec
    (50) constSpecs -> . constSpec
    (51) constSpecs -> . constSpecs constSpec eos
    (52) constSpecs -> . constSpec eos
    (53) constSpec -> . IDENTIFIER ASSIGN expression
    NEWL            shift and go to state 167
    ;               shift and go to state 168
    IDENTIFIER      shift and go to state 106

    constSpecs                     shift and go to state 213
    constSpec                      shift and go to state 191

state 190

    (47) constDecl -> CONST ( constSpecs . )
    (49) constSpecs -> constSpecs . constSpec
    (51) constSpecs -> constSpecs . constSpec eos
    (53) constSpec -> . IDENTIFIER ASSIGN expression
    )               shift and go to state 214
    IDENTIFIER      shift and go to state 106

    constSpec                      shift and go to state 215

state 191

    (50) constSpecs -> constSpec .
    (52) constSpecs -> constSpec . eos
    (137) eos -> . eos NEWL
    (138) eos -> . NEWL
    (139) eos -> . eos ;
    (140) eos -> . ;
    )               reduce using rule 50 (constSpecs -> constSpec .)
    IDENTIFIER      reduce using rule 50 (constSpecs -> constSpec .)
    NEWL            shift and go to state 85
    ;               shift and go to state 86

    eos                            shift and go to state 216

state 192

    (53) constSpec -> IDENTIFIER ASSIGN . expression
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    IDENTIFIER      shift and go to state 108
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 109
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    expression                     shift and go to state 217
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 193

    (96) operand -> ( expression ) .
    (               reduce using rule 96 (operand -> ( expression ) .)
    LOGIC_AND       reduce using rule 96 (operand -> ( expression ) .)
    LOGIC_OR        reduce using rule 96 (operand -> ( expression ) .)
    SHR             reduce using rule 96 (operand -> ( expression ) .)
    SHL             reduce using rule 96 (operand -> ( expression ) .)
    AND             reduce using rule 96 (operand -> ( expression ) .)
    MOD             reduce using rule 96 (operand -> ( expression ) .)
    DIV             reduce using rule 96 (operand -> ( expression ) .)
    STAR            reduce using rule 96 (operand -> ( expression ) .)
    XOR             reduce using rule 96 (operand -> ( expression ) .)
    OR              reduce using rule 96 (operand -> ( expression ) .)
    MINUS           reduce using rule 96 (operand -> ( expression ) .)
    PLUS            reduce using rule 96 (operand -> ( expression ) .)
    GE              reduce using rule 96 (operand -> ( expression ) .)
    GT              reduce using rule 96 (operand -> ( expression ) .)
    LE              reduce using rule 96 (operand -> ( expression ) .)
    LT              reduce using rule 96 (operand -> ( expression ) .)
    NE              reduce using rule 96 (operand -> ( expression ) .)
    EQ              reduce using rule 96 (operand -> ( expression ) .)
    NEWL            reduce using rule 96 (operand -> ( expression ) .)
    ;               reduce using rule 96 (operand -> ( expression ) .)
    )               reduce using rule 96 (operand -> ( expression ) .)
    ,               reduce using rule 96 (operand -> ( expression ) .)
    }               reduce using rule 96 (operand -> ( expression ) .)
    IDENTIFIER      reduce using rule 96 (operand -> ( expression ) .)


state 194

    (81) assignment -> identifierList assign_op expressionList .
    (71) expressionList -> expressionList . , expression
    NEWL            reduce using rule 81 (assignment -> identifierList assign_op expressionList .)
    ;               reduce using rule 81 (assignment -> identifierList assign_op expressionList .)
    }               reduce using rule 81 (assignment -> identifierList assign_op expressionList .)
    ,               shift and go to state 208


state 195

    (45) varDecl -> identifierList DECL_ASGN expressionList .
    (71) expressionList -> expressionList . , expression
    NEWL            reduce using rule 45 (varDecl -> identifierList DECL_ASGN expressionList .)
    ;               reduce using rule 45 (varDecl -> identifierList DECL_ASGN expressionList .)
    }               reduce using rule 45 (varDecl -> identifierList DECL_ASGN expressionList .)
    ,               shift and go to state 208


state 196

    (54) identifierList -> identifierList , IDENTIFIER .
    DECL_ASGN       reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    ,               reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    SHR_ASGN        reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    SHL_ASGN        reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    MOD_ASGN        reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    DIV_ASGN        reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    OR_ASGN         reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    AND_ASGN        reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    STAR_ASGN       reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    XOR_ASGN        reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    MINUS_ASGN      reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    PLUS_ASGN       reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    ASSIGN          reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    STRING          reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    BOOL            reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    RUNE            reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    F32             reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    F64             reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    INT             reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    ISIZE           reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    I64             reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    I32             reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    I16             reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    I8              reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    UINT            reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    USIZE           reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    U64             reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    U32             reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    U16             reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)
    U8              reduce using rule 54 (identifierList -> identifierList , IDENTIFIER .)


state 197

    (89) expression -> expression BINARY_OP unaryExpr .
    LOGIC_AND       reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    LOGIC_OR        reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    SHR             reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    SHL             reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    AND             reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    MOD             reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    DIV             reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    STAR            reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    XOR             reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    OR              reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    MINUS           reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    PLUS            reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    GE              reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    GT              reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    LE              reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    LT              reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    NE              reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    EQ              reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    NEWL            reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    ;               reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    )               reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    ,               reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    }               reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)
    IDENTIFIER      reduce using rule 89 (expression -> expression BINARY_OP unaryExpr .)


state 198

    (82) arguments -> ( type_ . , expressionList , )
    (83) arguments -> ( type_ . , expressionList )
    (84) arguments -> ( type_ . , )
    (85) arguments -> ( type_ . )
    (102) conversion -> type_ . ( expression )
    ,               shift and go to state 218
    )               shift and go to state 219
    (               shift and go to state 149


state 199

    (86) arguments -> ( expressionList . , )
    (87) arguments -> ( expressionList . )
    (71) expressionList -> expressionList . , expression
    ,               shift and go to state 220
    )               shift and go to state 221


state 200

    (88) arguments -> ( ) .
    (               reduce using rule 88 (arguments -> ( ) .)
    LOGIC_AND       reduce using rule 88 (arguments -> ( ) .)
    LOGIC_OR        reduce using rule 88 (arguments -> ( ) .)
    SHR             reduce using rule 88 (arguments -> ( ) .)
    SHL             reduce using rule 88 (arguments -> ( ) .)
    AND             reduce using rule 88 (arguments -> ( ) .)
    MOD             reduce using rule 88 (arguments -> ( ) .)
    DIV             reduce using rule 88 (arguments -> ( ) .)
    STAR            reduce using rule 88 (arguments -> ( ) .)
    XOR             reduce using rule 88 (arguments -> ( ) .)
    OR              reduce using rule 88 (arguments -> ( ) .)
    MINUS           reduce using rule 88 (arguments -> ( ) .)
    PLUS            reduce using rule 88 (arguments -> ( ) .)
    GE              reduce using rule 88 (arguments -> ( ) .)
    GT              reduce using rule 88 (arguments -> ( ) .)
    LE              reduce using rule 88 (arguments -> ( ) .)
    LT              reduce using rule 88 (arguments -> ( ) .)
    NE              reduce using rule 88 (arguments -> ( ) .)
    EQ              reduce using rule 88 (arguments -> ( ) .)
    NEWL            reduce using rule 88 (arguments -> ( ) .)
    ;               reduce using rule 88 (arguments -> ( ) .)
    )               reduce using rule 88 (arguments -> ( ) .)
    ,               reduce using rule 88 (arguments -> ( ) .)
    }               reduce using rule 88 (arguments -> ( ) .)
    IDENTIFIER      reduce using rule 88 (arguments -> ( ) .)


state 201

    (102) conversion -> type_ ( expression . )
    (89) expression -> expression . BINARY_OP unaryExpr
    (152) BINARY_OP -> . MUL_OP
    (153) BINARY_OP -> . ADD_OP
    (154) BINARY_OP -> . REL_OP
    (155) BINARY_OP -> . LOGIC_AND
    (156) BINARY_OP -> . LOGIC_OR
    (167) MUL_OP -> . SHR
    (168) MUL_OP -> . SHL
    (169) MUL_OP -> . AND
    (170) MUL_OP -> . MOD
    (171) MUL_OP -> . DIV
    (172) MUL_OP -> . STAR
    (163) ADD_OP -> . XOR
    (164) ADD_OP -> . OR
    (165) ADD_OP -> . MINUS
    (166) ADD_OP -> . PLUS
    (157) REL_OP -> . GE
    (158) REL_OP -> . GT
    (159) REL_OP -> . LE
    (160) REL_OP -> . LT
    (161) REL_OP -> . NE
    (162) REL_OP -> . EQ
    )               shift and go to state 222
    LOGIC_AND       shift and go to state 128
    LOGIC_OR        shift and go to state 129
    SHR             shift and go to state 130
    SHL             shift and go to state 131
    AND             shift and go to state 132
    MOD             shift and go to state 133
    DIV             shift and go to state 134
    STAR            shift and go to state 135
    XOR             shift and go to state 136
    OR              shift and go to state 137
    MINUS           shift and go to state 138
    PLUS            shift and go to state 139
    GE              shift and go to state 140
    GT              shift and go to state 141
    LE              shift and go to state 142
    LT              shift and go to state 143
    NE              shift and go to state 144
    EQ              shift and go to state 145

    BINARY_OP                      shift and go to state 124
    MUL_OP                         shift and go to state 125
    ADD_OP                         shift and go to state 126
    REL_OP                         shift and go to state 127

state 202

    (132) FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .
    EXPONENT        reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    (               reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    SHR             reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    SHL             reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    AND             reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    MOD             reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    DIV             reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    STAR            reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    XOR             reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    OR              reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    MINUS           reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    PLUS            reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    GE              reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    GT              reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LE              reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LT              reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    NE              reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    EQ              reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    NEWL            reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    ;               reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    )               reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    ,               reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    }               reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    IDENTIFIER      reduce using rule 132 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)


state 203

    (23) sourceFile -> moduleClause importDecls topLevelDecls orphanStmtList .
    $end            reduce using rule 23 (sourceFile -> moduleClause importDecls topLevelDecls orphanStmtList .)


state 204

    (21) sourceFile -> cPreprocessors moduleClause topLevelDecls orphanStmtList .
    $end            reduce using rule 21 (sourceFile -> cPreprocessors moduleClause topLevelDecls orphanStmtList .)


state 205

    (8) sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls .
    (24) sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls . orphanStmtList
    (39) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (43) topLevelDecl -> . constDecl
    (73) statementList -> . statementList eos statement
    (74) statementList -> . statement
    (56) functionDecl -> . FN IDENTIFIER signature
    (57) functionDecl -> . FN IDENTIFIER function_
    (46) constDecl -> . CONST ( eos constSpecs )
    (47) constDecl -> . CONST ( constSpecs )
    (48) constDecl -> . CONST constSpec
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 8 (sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls .)
    FN              shift and go to state 18
    CONST           shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    orphanStmtList                 shift and go to state 223
    topLevelDecl                   shift and go to state 72
    statementList                  shift and go to state 12
    functionDecl                   shift and go to state 13
    constDecl                      shift and go to state 14
    statement                      shift and go to state 17
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 206

    (16) sourceFile -> cPreprocessors moduleClause importDecls orphanStmtList .
    $end            reduce using rule 16 (sourceFile -> cPreprocessors moduleClause importDecls orphanStmtList .)


state 207

    (22) sourceFile -> cPreprocessors importDecls topLevelDecls orphanStmtList .
    $end            reduce using rule 22 (sourceFile -> cPreprocessors importDecls topLevelDecls orphanStmtList .)


state 208

    (71) expressionList -> expressionList , . expression
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    IDENTIFIER      shift and go to state 108
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 109
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    expression                     shift and go to state 224
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 209

    (75) block -> { statementList . }
    (73) statementList -> statementList . eos statement
    (137) eos -> . eos NEWL
    (138) eos -> . NEWL
    (139) eos -> . eos ;
    (140) eos -> . ;
    }               shift and go to state 225
    NEWL            shift and go to state 85
    ;               shift and go to state 86

    eos                            shift and go to state 226

state 210

    (63) parameters -> ( parameterList , . )
    (66) parameterList -> parameterList , . parameterDecl
    (68) parameterDecl -> . type_
    (69) parameterDecl -> . identifierList type_
    (103) type_ -> . typeName
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    )               shift and go to state 227
    IDENTIFIER      shift and go to state 188
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66

    parameterDecl                  shift and go to state 228
    type_                          shift and go to state 186
    identifierList                 shift and go to state 187
    typeName                       shift and go to state 39
    numericType                    shift and go to state 42

state 211

    (64) parameters -> ( parameterList ) .
    (               reduce using rule 64 (parameters -> ( parameterList ) .)
    STRING          reduce using rule 64 (parameters -> ( parameterList ) .)
    BOOL            reduce using rule 64 (parameters -> ( parameterList ) .)
    RUNE            reduce using rule 64 (parameters -> ( parameterList ) .)
    F32             reduce using rule 64 (parameters -> ( parameterList ) .)
    F64             reduce using rule 64 (parameters -> ( parameterList ) .)
    INT             reduce using rule 64 (parameters -> ( parameterList ) .)
    ISIZE           reduce using rule 64 (parameters -> ( parameterList ) .)
    I64             reduce using rule 64 (parameters -> ( parameterList ) .)
    I32             reduce using rule 64 (parameters -> ( parameterList ) .)
    I16             reduce using rule 64 (parameters -> ( parameterList ) .)
    I8              reduce using rule 64 (parameters -> ( parameterList ) .)
    UINT            reduce using rule 64 (parameters -> ( parameterList ) .)
    USIZE           reduce using rule 64 (parameters -> ( parameterList ) .)
    U64             reduce using rule 64 (parameters -> ( parameterList ) .)
    U32             reduce using rule 64 (parameters -> ( parameterList ) .)
    U16             reduce using rule 64 (parameters -> ( parameterList ) .)
    U8              reduce using rule 64 (parameters -> ( parameterList ) .)
    {               reduce using rule 64 (parameters -> ( parameterList ) .)
    NEWL            reduce using rule 64 (parameters -> ( parameterList ) .)
    ;               reduce using rule 64 (parameters -> ( parameterList ) .)


state 212

    (69) parameterDecl -> identifierList type_ .
    ,               reduce using rule 69 (parameterDecl -> identifierList type_ .)
    )               reduce using rule 69 (parameterDecl -> identifierList type_ .)


state 213

    (46) constDecl -> CONST ( eos constSpecs . )
    (49) constSpecs -> constSpecs . constSpec
    (51) constSpecs -> constSpecs . constSpec eos
    (53) constSpec -> . IDENTIFIER ASSIGN expression
    )               shift and go to state 229
    IDENTIFIER      shift and go to state 106

    constSpec                      shift and go to state 215

state 214

    (47) constDecl -> CONST ( constSpecs ) .
    NEWL            reduce using rule 47 (constDecl -> CONST ( constSpecs ) .)
    ;               reduce using rule 47 (constDecl -> CONST ( constSpecs ) .)


state 215

    (49) constSpecs -> constSpecs constSpec .
    (51) constSpecs -> constSpecs constSpec . eos
    (137) eos -> . eos NEWL
    (138) eos -> . NEWL
    (139) eos -> . eos ;
    (140) eos -> . ;
    )               reduce using rule 49 (constSpecs -> constSpecs constSpec .)
    IDENTIFIER      reduce using rule 49 (constSpecs -> constSpecs constSpec .)
    NEWL            shift and go to state 85
    ;               shift and go to state 86

    eos                            shift and go to state 230

state 216

    (52) constSpecs -> constSpec eos .
    (137) eos -> eos . NEWL
    (139) eos -> eos . ;
    )               reduce using rule 52 (constSpecs -> constSpec eos .)
    IDENTIFIER      reduce using rule 52 (constSpecs -> constSpec eos .)
    NEWL            shift and go to state 167
    ;               shift and go to state 168


state 217

    (53) constSpec -> IDENTIFIER ASSIGN expression .
    (89) expression -> expression . BINARY_OP unaryExpr
    (152) BINARY_OP -> . MUL_OP
    (153) BINARY_OP -> . ADD_OP
    (154) BINARY_OP -> . REL_OP
    (155) BINARY_OP -> . LOGIC_AND
    (156) BINARY_OP -> . LOGIC_OR
    (167) MUL_OP -> . SHR
    (168) MUL_OP -> . SHL
    (169) MUL_OP -> . AND
    (170) MUL_OP -> . MOD
    (171) MUL_OP -> . DIV
    (172) MUL_OP -> . STAR
    (163) ADD_OP -> . XOR
    (164) ADD_OP -> . OR
    (165) ADD_OP -> . MINUS
    (166) ADD_OP -> . PLUS
    (157) REL_OP -> . GE
    (158) REL_OP -> . GT
    (159) REL_OP -> . LE
    (160) REL_OP -> . LT
    (161) REL_OP -> . NE
    (162) REL_OP -> . EQ
    NEWL            reduce using rule 53 (constSpec -> IDENTIFIER ASSIGN expression .)
    ;               reduce using rule 53 (constSpec -> IDENTIFIER ASSIGN expression .)
    )               reduce using rule 53 (constSpec -> IDENTIFIER ASSIGN expression .)
    IDENTIFIER      reduce using rule 53 (constSpec -> IDENTIFIER ASSIGN expression .)
    LOGIC_AND       shift and go to state 128
    LOGIC_OR        shift and go to state 129
    SHR             shift and go to state 130
    SHL             shift and go to state 131
    AND             shift and go to state 132
    MOD             shift and go to state 133
    DIV             shift and go to state 134
    STAR            shift and go to state 135
    XOR             shift and go to state 136
    OR              shift and go to state 137
    MINUS           shift and go to state 138
    PLUS            shift and go to state 139
    GE              shift and go to state 140
    GT              shift and go to state 141
    LE              shift and go to state 142
    LT              shift and go to state 143
    NE              shift and go to state 144
    EQ              shift and go to state 145

    BINARY_OP                      shift and go to state 124
    MUL_OP                         shift and go to state 125
    ADD_OP                         shift and go to state 126
    REL_OP                         shift and go to state 127

state 218

    (82) arguments -> ( type_ , . expressionList , )
    (83) arguments -> ( type_ , . expressionList )
    (84) arguments -> ( type_ , . )
    (71) expressionList -> . expressionList , expression
    (72) expressionList -> . expression
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    )               shift and go to state 232
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    IDENTIFIER      shift and go to state 108
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 109
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    type_                          shift and go to state 36
    expressionList                 shift and go to state 231
    expression                     shift and go to state 172
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 219

    (85) arguments -> ( type_ ) .
    (               reduce using rule 85 (arguments -> ( type_ ) .)
    LOGIC_AND       reduce using rule 85 (arguments -> ( type_ ) .)
    LOGIC_OR        reduce using rule 85 (arguments -> ( type_ ) .)
    SHR             reduce using rule 85 (arguments -> ( type_ ) .)
    SHL             reduce using rule 85 (arguments -> ( type_ ) .)
    AND             reduce using rule 85 (arguments -> ( type_ ) .)
    MOD             reduce using rule 85 (arguments -> ( type_ ) .)
    DIV             reduce using rule 85 (arguments -> ( type_ ) .)
    STAR            reduce using rule 85 (arguments -> ( type_ ) .)
    XOR             reduce using rule 85 (arguments -> ( type_ ) .)
    OR              reduce using rule 85 (arguments -> ( type_ ) .)
    MINUS           reduce using rule 85 (arguments -> ( type_ ) .)
    PLUS            reduce using rule 85 (arguments -> ( type_ ) .)
    GE              reduce using rule 85 (arguments -> ( type_ ) .)
    GT              reduce using rule 85 (arguments -> ( type_ ) .)
    LE              reduce using rule 85 (arguments -> ( type_ ) .)
    LT              reduce using rule 85 (arguments -> ( type_ ) .)
    NE              reduce using rule 85 (arguments -> ( type_ ) .)
    EQ              reduce using rule 85 (arguments -> ( type_ ) .)
    NEWL            reduce using rule 85 (arguments -> ( type_ ) .)
    ;               reduce using rule 85 (arguments -> ( type_ ) .)
    )               reduce using rule 85 (arguments -> ( type_ ) .)
    ,               reduce using rule 85 (arguments -> ( type_ ) .)
    }               reduce using rule 85 (arguments -> ( type_ ) .)
    IDENTIFIER      reduce using rule 85 (arguments -> ( type_ ) .)


state 220

    (86) arguments -> ( expressionList , . )
    (71) expressionList -> expressionList , . expression
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    )               shift and go to state 233
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    IDENTIFIER      shift and go to state 108
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 109
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    expression                     shift and go to state 224
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 221

    (87) arguments -> ( expressionList ) .
    (               reduce using rule 87 (arguments -> ( expressionList ) .)
    LOGIC_AND       reduce using rule 87 (arguments -> ( expressionList ) .)
    LOGIC_OR        reduce using rule 87 (arguments -> ( expressionList ) .)
    SHR             reduce using rule 87 (arguments -> ( expressionList ) .)
    SHL             reduce using rule 87 (arguments -> ( expressionList ) .)
    AND             reduce using rule 87 (arguments -> ( expressionList ) .)
    MOD             reduce using rule 87 (arguments -> ( expressionList ) .)
    DIV             reduce using rule 87 (arguments -> ( expressionList ) .)
    STAR            reduce using rule 87 (arguments -> ( expressionList ) .)
    XOR             reduce using rule 87 (arguments -> ( expressionList ) .)
    OR              reduce using rule 87 (arguments -> ( expressionList ) .)
    MINUS           reduce using rule 87 (arguments -> ( expressionList ) .)
    PLUS            reduce using rule 87 (arguments -> ( expressionList ) .)
    GE              reduce using rule 87 (arguments -> ( expressionList ) .)
    GT              reduce using rule 87 (arguments -> ( expressionList ) .)
    LE              reduce using rule 87 (arguments -> ( expressionList ) .)
    LT              reduce using rule 87 (arguments -> ( expressionList ) .)
    NE              reduce using rule 87 (arguments -> ( expressionList ) .)
    EQ              reduce using rule 87 (arguments -> ( expressionList ) .)
    NEWL            reduce using rule 87 (arguments -> ( expressionList ) .)
    ;               reduce using rule 87 (arguments -> ( expressionList ) .)
    )               reduce using rule 87 (arguments -> ( expressionList ) .)
    ,               reduce using rule 87 (arguments -> ( expressionList ) .)
    }               reduce using rule 87 (arguments -> ( expressionList ) .)
    IDENTIFIER      reduce using rule 87 (arguments -> ( expressionList ) .)


state 222

    (102) conversion -> type_ ( expression ) .
    (               reduce using rule 102 (conversion -> type_ ( expression ) .)
    LOGIC_AND       reduce using rule 102 (conversion -> type_ ( expression ) .)
    LOGIC_OR        reduce using rule 102 (conversion -> type_ ( expression ) .)
    SHR             reduce using rule 102 (conversion -> type_ ( expression ) .)
    SHL             reduce using rule 102 (conversion -> type_ ( expression ) .)
    AND             reduce using rule 102 (conversion -> type_ ( expression ) .)
    MOD             reduce using rule 102 (conversion -> type_ ( expression ) .)
    DIV             reduce using rule 102 (conversion -> type_ ( expression ) .)
    STAR            reduce using rule 102 (conversion -> type_ ( expression ) .)
    XOR             reduce using rule 102 (conversion -> type_ ( expression ) .)
    OR              reduce using rule 102 (conversion -> type_ ( expression ) .)
    MINUS           reduce using rule 102 (conversion -> type_ ( expression ) .)
    PLUS            reduce using rule 102 (conversion -> type_ ( expression ) .)
    GE              reduce using rule 102 (conversion -> type_ ( expression ) .)
    GT              reduce using rule 102 (conversion -> type_ ( expression ) .)
    LE              reduce using rule 102 (conversion -> type_ ( expression ) .)
    LT              reduce using rule 102 (conversion -> type_ ( expression ) .)
    NE              reduce using rule 102 (conversion -> type_ ( expression ) .)
    EQ              reduce using rule 102 (conversion -> type_ ( expression ) .)
    NEWL            reduce using rule 102 (conversion -> type_ ( expression ) .)
    ;               reduce using rule 102 (conversion -> type_ ( expression ) .)
    )               reduce using rule 102 (conversion -> type_ ( expression ) .)
    ,               reduce using rule 102 (conversion -> type_ ( expression ) .)
    }               reduce using rule 102 (conversion -> type_ ( expression ) .)
    IDENTIFIER      reduce using rule 102 (conversion -> type_ ( expression ) .)


state 223

    (24) sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls orphanStmtList .
    $end            reduce using rule 24 (sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls orphanStmtList .)


state 224

    (71) expressionList -> expressionList , expression .
    (89) expression -> expression . BINARY_OP unaryExpr
    (152) BINARY_OP -> . MUL_OP
    (153) BINARY_OP -> . ADD_OP
    (154) BINARY_OP -> . REL_OP
    (155) BINARY_OP -> . LOGIC_AND
    (156) BINARY_OP -> . LOGIC_OR
    (167) MUL_OP -> . SHR
    (168) MUL_OP -> . SHL
    (169) MUL_OP -> . AND
    (170) MUL_OP -> . MOD
    (171) MUL_OP -> . DIV
    (172) MUL_OP -> . STAR
    (163) ADD_OP -> . XOR
    (164) ADD_OP -> . OR
    (165) ADD_OP -> . MINUS
    (166) ADD_OP -> . PLUS
    (157) REL_OP -> . GE
    (158) REL_OP -> . GT
    (159) REL_OP -> . LE
    (160) REL_OP -> . LT
    (161) REL_OP -> . NE
    (162) REL_OP -> . EQ
    ,               reduce using rule 71 (expressionList -> expressionList , expression .)
    NEWL            reduce using rule 71 (expressionList -> expressionList , expression .)
    ;               reduce using rule 71 (expressionList -> expressionList , expression .)
    }               reduce using rule 71 (expressionList -> expressionList , expression .)
    )               reduce using rule 71 (expressionList -> expressionList , expression .)
    LOGIC_AND       shift and go to state 128
    LOGIC_OR        shift and go to state 129
    SHR             shift and go to state 130
    SHL             shift and go to state 131
    AND             shift and go to state 132
    MOD             shift and go to state 133
    DIV             shift and go to state 134
    STAR            shift and go to state 135
    XOR             shift and go to state 136
    OR              shift and go to state 137
    MINUS           shift and go to state 138
    PLUS            shift and go to state 139
    GE              shift and go to state 140
    GT              shift and go to state 141
    LE              shift and go to state 142
    LT              shift and go to state 143
    NE              shift and go to state 144
    EQ              shift and go to state 145

    BINARY_OP                      shift and go to state 124
    MUL_OP                         shift and go to state 125
    ADD_OP                         shift and go to state 126
    REL_OP                         shift and go to state 127

state 225

    (75) block -> { statementList } .
    (               reduce using rule 75 (block -> { statementList } .)
    LOGIC_AND       reduce using rule 75 (block -> { statementList } .)
    LOGIC_OR        reduce using rule 75 (block -> { statementList } .)
    SHR             reduce using rule 75 (block -> { statementList } .)
    SHL             reduce using rule 75 (block -> { statementList } .)
    AND             reduce using rule 75 (block -> { statementList } .)
    MOD             reduce using rule 75 (block -> { statementList } .)
    DIV             reduce using rule 75 (block -> { statementList } .)
    STAR            reduce using rule 75 (block -> { statementList } .)
    XOR             reduce using rule 75 (block -> { statementList } .)
    OR              reduce using rule 75 (block -> { statementList } .)
    MINUS           reduce using rule 75 (block -> { statementList } .)
    PLUS            reduce using rule 75 (block -> { statementList } .)
    GE              reduce using rule 75 (block -> { statementList } .)
    GT              reduce using rule 75 (block -> { statementList } .)
    LE              reduce using rule 75 (block -> { statementList } .)
    LT              reduce using rule 75 (block -> { statementList } .)
    NE              reduce using rule 75 (block -> { statementList } .)
    EQ              reduce using rule 75 (block -> { statementList } .)
    NEWL            reduce using rule 75 (block -> { statementList } .)
    ;               reduce using rule 75 (block -> { statementList } .)
    )               reduce using rule 75 (block -> { statementList } .)
    ,               reduce using rule 75 (block -> { statementList } .)
    }               reduce using rule 75 (block -> { statementList } .)
    IDENTIFIER      reduce using rule 75 (block -> { statementList } .)


state 226

    (73) statementList -> statementList eos . statement
    (137) eos -> eos . NEWL
    (139) eos -> eos . ;
    (76) statement -> . simpleStmt
    (77) statement -> . declaration
    (78) simpleStmt -> . assignment
    (79) simpleStmt -> . expressionStmt
    (44) declaration -> . varDecl
    (81) assignment -> . identifierList assign_op expressionList
    (80) expressionStmt -> . expression
    (45) varDecl -> . identifierList DECL_ASGN expressionList
    (54) identifierList -> . identifierList , IDENTIFIER
    (55) identifierList -> . IDENTIFIER
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    NEWL            shift and go to state 167
    ;               shift and go to state 168
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 109
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    statement                      shift and go to state 170
    simpleStmt                     shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    expressionStmt                 shift and go to state 24
    varDecl                        shift and go to state 25
    identifierList                 shift and go to state 26
    expression                     shift and go to state 27
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    type_                          shift and go to state 36
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 227

    (63) parameters -> ( parameterList , ) .
    (               reduce using rule 63 (parameters -> ( parameterList , ) .)
    STRING          reduce using rule 63 (parameters -> ( parameterList , ) .)
    BOOL            reduce using rule 63 (parameters -> ( parameterList , ) .)
    RUNE            reduce using rule 63 (parameters -> ( parameterList , ) .)
    F32             reduce using rule 63 (parameters -> ( parameterList , ) .)
    F64             reduce using rule 63 (parameters -> ( parameterList , ) .)
    INT             reduce using rule 63 (parameters -> ( parameterList , ) .)
    ISIZE           reduce using rule 63 (parameters -> ( parameterList , ) .)
    I64             reduce using rule 63 (parameters -> ( parameterList , ) .)
    I32             reduce using rule 63 (parameters -> ( parameterList , ) .)
    I16             reduce using rule 63 (parameters -> ( parameterList , ) .)
    I8              reduce using rule 63 (parameters -> ( parameterList , ) .)
    UINT            reduce using rule 63 (parameters -> ( parameterList , ) .)
    USIZE           reduce using rule 63 (parameters -> ( parameterList , ) .)
    U64             reduce using rule 63 (parameters -> ( parameterList , ) .)
    U32             reduce using rule 63 (parameters -> ( parameterList , ) .)
    U16             reduce using rule 63 (parameters -> ( parameterList , ) .)
    U8              reduce using rule 63 (parameters -> ( parameterList , ) .)
    {               reduce using rule 63 (parameters -> ( parameterList , ) .)
    NEWL            reduce using rule 63 (parameters -> ( parameterList , ) .)
    ;               reduce using rule 63 (parameters -> ( parameterList , ) .)


state 228

    (66) parameterList -> parameterList , parameterDecl .
    ,               reduce using rule 66 (parameterList -> parameterList , parameterDecl .)
    )               reduce using rule 66 (parameterList -> parameterList , parameterDecl .)


state 229

    (46) constDecl -> CONST ( eos constSpecs ) .
    NEWL            reduce using rule 46 (constDecl -> CONST ( eos constSpecs ) .)
    ;               reduce using rule 46 (constDecl -> CONST ( eos constSpecs ) .)


state 230

    (51) constSpecs -> constSpecs constSpec eos .
    (137) eos -> eos . NEWL
    (139) eos -> eos . ;
    )               reduce using rule 51 (constSpecs -> constSpecs constSpec eos .)
    IDENTIFIER      reduce using rule 51 (constSpecs -> constSpecs constSpec eos .)
    NEWL            shift and go to state 167
    ;               shift and go to state 168


state 231

    (82) arguments -> ( type_ , expressionList . , )
    (83) arguments -> ( type_ , expressionList . )
    (71) expressionList -> expressionList . , expression
    ,               shift and go to state 234
    )               shift and go to state 235


state 232

    (84) arguments -> ( type_ , ) .
    (               reduce using rule 84 (arguments -> ( type_ , ) .)
    LOGIC_AND       reduce using rule 84 (arguments -> ( type_ , ) .)
    LOGIC_OR        reduce using rule 84 (arguments -> ( type_ , ) .)
    SHR             reduce using rule 84 (arguments -> ( type_ , ) .)
    SHL             reduce using rule 84 (arguments -> ( type_ , ) .)
    AND             reduce using rule 84 (arguments -> ( type_ , ) .)
    MOD             reduce using rule 84 (arguments -> ( type_ , ) .)
    DIV             reduce using rule 84 (arguments -> ( type_ , ) .)
    STAR            reduce using rule 84 (arguments -> ( type_ , ) .)
    XOR             reduce using rule 84 (arguments -> ( type_ , ) .)
    OR              reduce using rule 84 (arguments -> ( type_ , ) .)
    MINUS           reduce using rule 84 (arguments -> ( type_ , ) .)
    PLUS            reduce using rule 84 (arguments -> ( type_ , ) .)
    GE              reduce using rule 84 (arguments -> ( type_ , ) .)
    GT              reduce using rule 84 (arguments -> ( type_ , ) .)
    LE              reduce using rule 84 (arguments -> ( type_ , ) .)
    LT              reduce using rule 84 (arguments -> ( type_ , ) .)
    NE              reduce using rule 84 (arguments -> ( type_ , ) .)
    EQ              reduce using rule 84 (arguments -> ( type_ , ) .)
    NEWL            reduce using rule 84 (arguments -> ( type_ , ) .)
    ;               reduce using rule 84 (arguments -> ( type_ , ) .)
    )               reduce using rule 84 (arguments -> ( type_ , ) .)
    ,               reduce using rule 84 (arguments -> ( type_ , ) .)
    }               reduce using rule 84 (arguments -> ( type_ , ) .)
    IDENTIFIER      reduce using rule 84 (arguments -> ( type_ , ) .)


state 233

    (86) arguments -> ( expressionList , ) .
    (               reduce using rule 86 (arguments -> ( expressionList , ) .)
    LOGIC_AND       reduce using rule 86 (arguments -> ( expressionList , ) .)
    LOGIC_OR        reduce using rule 86 (arguments -> ( expressionList , ) .)
    SHR             reduce using rule 86 (arguments -> ( expressionList , ) .)
    SHL             reduce using rule 86 (arguments -> ( expressionList , ) .)
    AND             reduce using rule 86 (arguments -> ( expressionList , ) .)
    MOD             reduce using rule 86 (arguments -> ( expressionList , ) .)
    DIV             reduce using rule 86 (arguments -> ( expressionList , ) .)
    STAR            reduce using rule 86 (arguments -> ( expressionList , ) .)
    XOR             reduce using rule 86 (arguments -> ( expressionList , ) .)
    OR              reduce using rule 86 (arguments -> ( expressionList , ) .)
    MINUS           reduce using rule 86 (arguments -> ( expressionList , ) .)
    PLUS            reduce using rule 86 (arguments -> ( expressionList , ) .)
    GE              reduce using rule 86 (arguments -> ( expressionList , ) .)
    GT              reduce using rule 86 (arguments -> ( expressionList , ) .)
    LE              reduce using rule 86 (arguments -> ( expressionList , ) .)
    LT              reduce using rule 86 (arguments -> ( expressionList , ) .)
    NE              reduce using rule 86 (arguments -> ( expressionList , ) .)
    EQ              reduce using rule 86 (arguments -> ( expressionList , ) .)
    NEWL            reduce using rule 86 (arguments -> ( expressionList , ) .)
    ;               reduce using rule 86 (arguments -> ( expressionList , ) .)
    )               reduce using rule 86 (arguments -> ( expressionList , ) .)
    ,               reduce using rule 86 (arguments -> ( expressionList , ) .)
    }               reduce using rule 86 (arguments -> ( expressionList , ) .)
    IDENTIFIER      reduce using rule 86 (arguments -> ( expressionList , ) .)


state 234

    (82) arguments -> ( type_ , expressionList , . )
    (71) expressionList -> expressionList , . expression
    (89) expression -> . expression BINARY_OP unaryExpr
    (90) expression -> . unaryExpr
    (91) unaryExpr -> . UNARY_OP unaryExpr
    (92) unaryExpr -> . primaryExpr
    (173) UNARY_OP -> . AND
    (174) UNARY_OP -> . EXCLM
    (175) UNARY_OP -> . MINUS
    (93) primaryExpr -> . primaryExpr arguments
    (94) primaryExpr -> . conversion
    (95) primaryExpr -> . operand
    (102) conversion -> . type_ ( expression )
    (96) operand -> . ( expression )
    (97) operand -> . operandName
    (98) operand -> . literal
    (103) type_ -> . typeName
    (99) operandName -> . IDENTIFIER
    (100) literal -> . functionLit
    (101) literal -> . basicLit
    (104) typeName -> . numericType
    (105) typeName -> . STRING
    (106) typeName -> . BOOL
    (107) typeName -> . RUNE
    (70) functionLit -> . FN function_
    (122) basicLit -> . INT_LIT
    (123) basicLit -> . FLOAT_LIT
    (124) basicLit -> . DECIMAL_LIT EXPONENT
    (125) basicLit -> . FLOAT_LIT EXPONENT
    (126) basicLit -> . FALSE
    (127) basicLit -> . TRUE
    (128) basicLit -> . RUNE_LIT
    (129) basicLit -> . STRING_LIT
    (108) numericType -> . F32
    (109) numericType -> . F64
    (110) numericType -> . INT
    (111) numericType -> . ISIZE
    (112) numericType -> . I64
    (113) numericType -> . I32
    (114) numericType -> . I16
    (115) numericType -> . I8
    (116) numericType -> . UINT
    (117) numericType -> . USIZE
    (118) numericType -> . U64
    (119) numericType -> . U32
    (120) numericType -> . U16
    (121) numericType -> . U8
    (133) INT_LIT -> . HEX_LIT
    (134) INT_LIT -> . OCTAL_LIT
    (135) INT_LIT -> . BINARY_LIT
    (136) INT_LIT -> . DECIMAL_LIT
    (130) FLOAT_LIT -> . . DECIMAL_LIT
    (131) FLOAT_LIT -> . DECIMAL_LIT .
    (132) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    )               shift and go to state 236
    AND             shift and go to state 31
    EXCLM           shift and go to state 32
    MINUS           shift and go to state 33
    (               shift and go to state 20
    IDENTIFIER      shift and go to state 108
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 109
    DECIMAL_LIT     shift and go to state 48
    FALSE           shift and go to state 49
    TRUE            shift and go to state 50
    RUNE_LIT        shift and go to state 51
    STRING_LIT      shift and go to state 52
    F32             shift and go to state 53
    F64             shift and go to state 54
    INT             shift and go to state 55
    ISIZE           shift and go to state 56
    I64             shift and go to state 57
    I32             shift and go to state 58
    I16             shift and go to state 59
    I8              shift and go to state 60
    UINT            shift and go to state 61
    USIZE           shift and go to state 62
    U64             shift and go to state 63
    U32             shift and go to state 64
    U16             shift and go to state 65
    U8              shift and go to state 66
    HEX_LIT         shift and go to state 67
    OCTAL_LIT       shift and go to state 68
    BINARY_LIT      shift and go to state 69
    .               shift and go to state 70

    type_                          shift and go to state 36
    expression                     shift and go to state 224
    unaryExpr                      shift and go to state 28
    UNARY_OP                       shift and go to state 29
    primaryExpr                    shift and go to state 30
    conversion                     shift and go to state 34
    operand                        shift and go to state 35
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 46
    FLOAT_LIT                      shift and go to state 47

state 235

    (83) arguments -> ( type_ , expressionList ) .
    (               reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    LOGIC_AND       reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    LOGIC_OR        reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    SHR             reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    SHL             reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    AND             reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    MOD             reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    DIV             reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    STAR            reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    XOR             reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    OR              reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    MINUS           reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    PLUS            reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    GE              reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    GT              reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    LE              reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    LT              reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    NE              reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    EQ              reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    NEWL            reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    ;               reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    )               reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    ,               reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    }               reduce using rule 83 (arguments -> ( type_ , expressionList ) .)
    IDENTIFIER      reduce using rule 83 (arguments -> ( type_ , expressionList ) .)


state 236

    (82) arguments -> ( type_ , expressionList , ) .
    (               reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    LOGIC_AND       reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    LOGIC_OR        reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    SHR             reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    SHL             reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    AND             reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    MOD             reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    DIV             reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    STAR            reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    XOR             reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    OR              reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    MINUS           reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    PLUS            reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    GE              reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    GT              reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    LE              reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    LT              reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    NE              reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    EQ              reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    NEWL            reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    ;               reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    )               reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    ,               reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    }               reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
    IDENTIFIER      reduce using rule 82 (arguments -> ( type_ , expressionList , ) .)
