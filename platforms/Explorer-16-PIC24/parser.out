Grammar:

Rule 0     S' -> sourceFile
Rule 1     sourceFile -> importDecls topLevelDecls orphanStmtList
Rule 2     sourceFile -> topLevelDecls orphanStmtList
Rule 3     sourceFile -> orphanStmtList
Rule 4     importDecls -> importDecls importDecl eos
Rule 5     importDecls -> importDecl eos
Rule 6     importDecl -> IMPORT importSpec
Rule 7     importSpec -> importPath
Rule 8     importSpec -> IDENTIFIER importPath
Rule 9     importSpec -> . importPath
Rule 10    importPath -> STRING_LIT
Rule 11    importPath -> IDENTIFIER
Rule 12    topLevelDecls -> topLevelDecls topLevelDecl eos
Rule 13    topLevelDecls -> topLevelDecl eos
Rule 14    orphanStmtList -> statementList eos
Rule 15    topLevelDecl -> declaration
Rule 16    declaration -> varDecl
Rule 17    varDecl -> identifierList DECL_ASGN expressionList
Rule 18    identifierList -> identifierList , IDENTIFIER
Rule 19    identifierList -> IDENTIFIER
Rule 20    expressionList -> expressionList , expression
Rule 21    expressionList -> expression
Rule 22    statementList -> statementList eos statement
Rule 23    statementList -> statement
Rule 24    statement -> simpleStmt
Rule 25    simpleStmt -> assignment
Rule 26    simpleStmt -> expressionStmt
Rule 27    expressionStmt -> expression
Rule 28    assignment -> identifierList assign_op expressionList
Rule 29    expression -> expression BINARY_OP unaryExpr
Rule 30    expression -> unaryExpr
Rule 31    unaryExpr -> UNARY_OP unaryExpr  [precedence=right, level=7]
Rule 32    unaryExpr -> primaryExpr
Rule 33    primaryExpr -> conversion
Rule 34    primaryExpr -> operand
Rule 35    operand -> ( expression )
Rule 36    operand -> operandName
Rule 37    operand -> literal
Rule 38    operandName -> qualifiedIdent
Rule 39    operandName -> IDENTIFIER
Rule 40    literal -> basicLit
Rule 41    conversion -> type_ ( expression )
Rule 42    type_ -> qualifiedIdent
Rule 43    type_ -> typeName
Rule 44    qualifiedIdent -> IDENTIFIER . IDENTIFIER
Rule 45    typeName -> numericType
Rule 46    typeName -> STRING
Rule 47    typeName -> BOOL
Rule 48    typeName -> RUNE
Rule 49    numericType -> F32
Rule 50    numericType -> F64
Rule 51    numericType -> INT
Rule 52    numericType -> ISIZE
Rule 53    numericType -> I64
Rule 54    numericType -> I32
Rule 55    numericType -> I16
Rule 56    numericType -> I8
Rule 57    numericType -> UINT
Rule 58    numericType -> USIZE
Rule 59    numericType -> U64
Rule 60    numericType -> U32
Rule 61    numericType -> U16
Rule 62    numericType -> U8
Rule 63    basicLit -> INT_LIT
Rule 64    basicLit -> FLOAT_LIT
Rule 65    basicLit -> DECIMAL_LIT EXPONENT
Rule 66    basicLit -> FLOAT_LIT EXPONENT
Rule 67    basicLit -> FALSE
Rule 68    basicLit -> TRUE
Rule 69    basicLit -> RUNE_LIT
Rule 70    basicLit -> STRING_LIT
Rule 71    FLOAT_LIT -> . DECIMAL_LIT
Rule 72    FLOAT_LIT -> DECIMAL_LIT .
Rule 73    FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT
Rule 74    INT_LIT -> HEX_LIT
Rule 75    INT_LIT -> OCTAL_LIT
Rule 76    INT_LIT -> BINARY_LIT
Rule 77    INT_LIT -> DECIMAL_LIT
Rule 78    eos -> eos NEWL
Rule 79    eos -> NEWL
Rule 80    eos -> eos ;
Rule 81    eos -> ;
Rule 82    assign_op -> SHR_ASGN  [precedence=right, level=8]
Rule 83    assign_op -> SHL_ASGN  [precedence=right, level=8]
Rule 84    assign_op -> MOD_ASGN  [precedence=right, level=8]
Rule 85    assign_op -> DIV_ASGN  [precedence=right, level=8]
Rule 86    assign_op -> OR_ASGN  [precedence=right, level=8]
Rule 87    assign_op -> AND_ASGN  [precedence=right, level=8]
Rule 88    assign_op -> STAR_ASGN  [precedence=right, level=8]
Rule 89    assign_op -> XOR_ASGN  [precedence=right, level=8]
Rule 90    assign_op -> MINUS_ASGN  [precedence=right, level=8]
Rule 91    assign_op -> PLUS_ASGN  [precedence=right, level=8]
Rule 92    assign_op -> ASSIGN  [precedence=right, level=8]
Rule 93    BINARY_OP -> MUL_OP
Rule 94    BINARY_OP -> ADD_OP
Rule 95    BINARY_OP -> REL_OP
Rule 96    BINARY_OP -> LOGIC_AND  [precedence=left, level=2]
Rule 97    BINARY_OP -> LOGIC_OR  [precedence=left, level=1]
Rule 98    REL_OP -> GE  [precedence=left, level=3]
Rule 99    REL_OP -> GT  [precedence=left, level=3]
Rule 100   REL_OP -> LE  [precedence=left, level=3]
Rule 101   REL_OP -> LT  [precedence=left, level=3]
Rule 102   REL_OP -> NE  [precedence=left, level=3]
Rule 103   REL_OP -> EQ  [precedence=left, level=3]
Rule 104   ADD_OP -> XOR  [precedence=left, level=4]
Rule 105   ADD_OP -> OR  [precedence=left, level=4]
Rule 106   ADD_OP -> MINUS  [precedence=left, level=4]
Rule 107   ADD_OP -> PLUS  [precedence=left, level=4]
Rule 108   MUL_OP -> SHR  [precedence=left, level=5]
Rule 109   MUL_OP -> SHL  [precedence=left, level=5]
Rule 110   MUL_OP -> AND  [precedence=left, level=5]
Rule 111   MUL_OP -> MOD  [precedence=left, level=5]
Rule 112   MUL_OP -> DIV  [precedence=left, level=5]
Rule 113   MUL_OP -> STAR  [precedence=left, level=5]
Rule 114   UNARY_OP -> AND  [precedence=left, level=5]
Rule 115   UNARY_OP -> EXCLM
Rule 116   UNARY_OP -> MINUS  [precedence=left, level=4]

Unused terminals:

    FOR
    TYPE
    AS
    MINUS_MINUS
    ELSE
    STRUCT
    STATIC
    FN
    MATCH
    IN
    BREAK
    RETURN
    PLUS_PLUS
    CONST
    ENUM
    MAP
    IF
    CONTINUE

Terminals, with rules where they appear:

(                    : 35 41
)                    : 35 41
,                    : 18 20
.                    : 9 44 71 72 73
;                    : 80 81
AND                  : 110 114
AND_ASGN             : 87
AS                   : 
ASSIGN               : 92
BINARY_LIT           : 76
BOOL                 : 47
BREAK                : 
CONST                : 
CONTINUE             : 
DECIMAL_LIT          : 65 71 72 73 73 77
DECL_ASGN            : 17
DIV                  : 112
DIV_ASGN             : 85
ELSE                 : 
ENUM                 : 
EQ                   : 103
EXCLM                : 115
EXPONENT             : 65 66
F32                  : 49
F64                  : 50
FALSE                : 67
FN                   : 
FOR                  : 
GE                   : 98
GT                   : 99
HEX_LIT              : 74
I16                  : 55
I32                  : 54
I64                  : 53
I8                   : 56
IDENTIFIER           : 8 11 18 19 39 44 44
IF                   : 
IMPORT               : 6
IN                   : 
INT                  : 51
ISIZE                : 52
LE                   : 100
LOGIC_AND            : 96
LOGIC_OR             : 97
LT                   : 101
MAP                  : 
MATCH                : 
MINUS                : 106 116
MINUS_ASGN           : 90
MINUS_MINUS          : 
MOD                  : 111
MOD_ASGN             : 84
NE                   : 102
NEWL                 : 78 79
OCTAL_LIT            : 75
OR                   : 105
OR_ASGN              : 86
PLUS                 : 107
PLUS_ASGN            : 91
PLUS_PLUS            : 
RETURN               : 
RUNE                 : 48
RUNE_LIT             : 69
SHL                  : 109
SHL_ASGN             : 83
SHR                  : 108
SHR_ASGN             : 82
STAR                 : 113
STAR_ASGN            : 88
STATIC               : 
STRING               : 46
STRING_LIT           : 10 70
STRUCT               : 
TRUE                 : 68
TYPE                 : 
U16                  : 61
U32                  : 60
U64                  : 59
U8                   : 62
UINT                 : 57
USIZE                : 58
XOR                  : 104
XOR_ASGN             : 89
error                : 

Nonterminals, with rules where they appear:

ADD_OP               : 94
BINARY_OP            : 29
FLOAT_LIT            : 64 66
INT_LIT              : 63
MUL_OP               : 93
REL_OP               : 95
UNARY_OP             : 31
assign_op            : 28
assignment           : 25
basicLit             : 40
conversion           : 33
declaration          : 15
eos                  : 4 5 12 13 14 22 78 80
expression           : 20 21 27 29 35 41
expressionList       : 17 20 28
expressionStmt       : 26
identifierList       : 17 18 28
importDecl           : 4 5
importDecls          : 1 4
importPath           : 7 8 9
importSpec           : 6
literal              : 37
numericType          : 45
operand              : 34
operandName          : 36
orphanStmtList       : 1 2 3
primaryExpr          : 32
qualifiedIdent       : 38 42
simpleStmt           : 24
sourceFile           : 0
statement            : 22 23
statementList        : 14 22
topLevelDecl         : 12 13
topLevelDecls        : 1 2 12
typeName             : 43
type_                : 41
unaryExpr            : 29 30 31
varDecl              : 16


state 0

    (0) S' -> . sourceFile
    (1) sourceFile -> . importDecls topLevelDecls orphanStmtList
    (2) sourceFile -> . topLevelDecls orphanStmtList
    (3) sourceFile -> . orphanStmtList
    (4) importDecls -> . importDecls importDecl eos
    (5) importDecls -> . importDecl eos
    (12) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (13) topLevelDecls -> . topLevelDecl eos
    (14) orphanStmtList -> . statementList eos
    (6) importDecl -> . IMPORT importSpec
    (15) topLevelDecl -> . declaration
    (22) statementList -> . statementList eos statement
    (23) statementList -> . statement
    (16) declaration -> . varDecl
    (24) statement -> . simpleStmt
    (17) varDecl -> . identifierList DECL_ASGN expressionList
    (25) simpleStmt -> . assignment
    (26) simpleStmt -> . expressionStmt
    (18) identifierList -> . identifierList , IDENTIFIER
    (19) identifierList -> . IDENTIFIER
    (28) assignment -> . identifierList assign_op expressionList
    (27) expressionStmt -> . expression
    (29) expression -> . expression BINARY_OP unaryExpr
    (30) expression -> . unaryExpr
    (31) unaryExpr -> . UNARY_OP unaryExpr
    (32) unaryExpr -> . primaryExpr
    (114) UNARY_OP -> . AND
    (115) UNARY_OP -> . EXCLM
    (116) UNARY_OP -> . MINUS
    (33) primaryExpr -> . conversion
    (34) primaryExpr -> . operand
    (41) conversion -> . type_ ( expression )
    (35) operand -> . ( expression )
    (36) operand -> . operandName
    (37) operand -> . literal
    (42) type_ -> . qualifiedIdent
    (43) type_ -> . typeName
    (38) operandName -> . qualifiedIdent
    (39) operandName -> . IDENTIFIER
    (40) literal -> . basicLit
    (44) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (45) typeName -> . numericType
    (46) typeName -> . STRING
    (47) typeName -> . BOOL
    (48) typeName -> . RUNE
    (63) basicLit -> . INT_LIT
    (64) basicLit -> . FLOAT_LIT
    (65) basicLit -> . DECIMAL_LIT EXPONENT
    (66) basicLit -> . FLOAT_LIT EXPONENT
    (67) basicLit -> . FALSE
    (68) basicLit -> . TRUE
    (69) basicLit -> . RUNE_LIT
    (70) basicLit -> . STRING_LIT
    (49) numericType -> . F32
    (50) numericType -> . F64
    (51) numericType -> . INT
    (52) numericType -> . ISIZE
    (53) numericType -> . I64
    (54) numericType -> . I32
    (55) numericType -> . I16
    (56) numericType -> . I8
    (57) numericType -> . UINT
    (58) numericType -> . USIZE
    (59) numericType -> . U64
    (60) numericType -> . U32
    (61) numericType -> . U16
    (62) numericType -> . U8
    (74) INT_LIT -> . HEX_LIT
    (75) INT_LIT -> . OCTAL_LIT
    (76) INT_LIT -> . BINARY_LIT
    (77) INT_LIT -> . DECIMAL_LIT
    (71) FLOAT_LIT -> . . DECIMAL_LIT
    (72) FLOAT_LIT -> . DECIMAL_LIT .
    (73) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IMPORT          shift and go to state 8
    IDENTIFIER      shift and go to state 16
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    sourceFile                     shift and go to state 1
    importDecls                    shift and go to state 2
    topLevelDecls                  shift and go to state 3
    orphanStmtList                 shift and go to state 4
    importDecl                     shift and go to state 5
    topLevelDecl                   shift and go to state 6
    statementList                  shift and go to state 7
    declaration                    shift and go to state 9
    statement                      shift and go to state 10
    varDecl                        shift and go to state 11
    simpleStmt                     shift and go to state 12
    identifierList                 shift and go to state 13
    assignment                     shift and go to state 14
    expressionStmt                 shift and go to state 15
    expression                     shift and go to state 17
    unaryExpr                      shift and go to state 18
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 1

    (0) S' -> sourceFile .


state 2

    (1) sourceFile -> importDecls . topLevelDecls orphanStmtList
    (4) importDecls -> importDecls . importDecl eos
    (12) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (13) topLevelDecls -> . topLevelDecl eos
    (6) importDecl -> . IMPORT importSpec
    (15) topLevelDecl -> . declaration
    (16) declaration -> . varDecl
    (17) varDecl -> . identifierList DECL_ASGN expressionList
    (18) identifierList -> . identifierList , IDENTIFIER
    (19) identifierList -> . IDENTIFIER
    IMPORT          shift and go to state 8
    IDENTIFIER      shift and go to state 65

    topLevelDecls                  shift and go to state 62
    importDecl                     shift and go to state 63
    topLevelDecl                   shift and go to state 6
    declaration                    shift and go to state 9
    varDecl                        shift and go to state 11
    identifierList                 shift and go to state 64

state 3

    (2) sourceFile -> topLevelDecls . orphanStmtList
    (12) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (14) orphanStmtList -> . statementList eos
    (15) topLevelDecl -> . declaration
    (22) statementList -> . statementList eos statement
    (23) statementList -> . statement
    (16) declaration -> . varDecl
    (24) statement -> . simpleStmt
    (17) varDecl -> . identifierList DECL_ASGN expressionList
    (25) simpleStmt -> . assignment
    (26) simpleStmt -> . expressionStmt
    (18) identifierList -> . identifierList , IDENTIFIER
    (19) identifierList -> . IDENTIFIER
    (28) assignment -> . identifierList assign_op expressionList
    (27) expressionStmt -> . expression
    (29) expression -> . expression BINARY_OP unaryExpr
    (30) expression -> . unaryExpr
    (31) unaryExpr -> . UNARY_OP unaryExpr
    (32) unaryExpr -> . primaryExpr
    (114) UNARY_OP -> . AND
    (115) UNARY_OP -> . EXCLM
    (116) UNARY_OP -> . MINUS
    (33) primaryExpr -> . conversion
    (34) primaryExpr -> . operand
    (41) conversion -> . type_ ( expression )
    (35) operand -> . ( expression )
    (36) operand -> . operandName
    (37) operand -> . literal
    (42) type_ -> . qualifiedIdent
    (43) type_ -> . typeName
    (38) operandName -> . qualifiedIdent
    (39) operandName -> . IDENTIFIER
    (40) literal -> . basicLit
    (44) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (45) typeName -> . numericType
    (46) typeName -> . STRING
    (47) typeName -> . BOOL
    (48) typeName -> . RUNE
    (63) basicLit -> . INT_LIT
    (64) basicLit -> . FLOAT_LIT
    (65) basicLit -> . DECIMAL_LIT EXPONENT
    (66) basicLit -> . FLOAT_LIT EXPONENT
    (67) basicLit -> . FALSE
    (68) basicLit -> . TRUE
    (69) basicLit -> . RUNE_LIT
    (70) basicLit -> . STRING_LIT
    (49) numericType -> . F32
    (50) numericType -> . F64
    (51) numericType -> . INT
    (52) numericType -> . ISIZE
    (53) numericType -> . I64
    (54) numericType -> . I32
    (55) numericType -> . I16
    (56) numericType -> . I8
    (57) numericType -> . UINT
    (58) numericType -> . USIZE
    (59) numericType -> . U64
    (60) numericType -> . U32
    (61) numericType -> . U16
    (62) numericType -> . U8
    (74) INT_LIT -> . HEX_LIT
    (75) INT_LIT -> . OCTAL_LIT
    (76) INT_LIT -> . BINARY_LIT
    (77) INT_LIT -> . DECIMAL_LIT
    (71) FLOAT_LIT -> . . DECIMAL_LIT
    (72) FLOAT_LIT -> . DECIMAL_LIT .
    (73) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IDENTIFIER      shift and go to state 16
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    orphanStmtList                 shift and go to state 66
    topLevelDecl                   shift and go to state 67
    statementList                  shift and go to state 7
    declaration                    shift and go to state 9
    statement                      shift and go to state 10
    varDecl                        shift and go to state 11
    simpleStmt                     shift and go to state 12
    identifierList                 shift and go to state 13
    assignment                     shift and go to state 14
    expressionStmt                 shift and go to state 15
    expression                     shift and go to state 17
    unaryExpr                      shift and go to state 18
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 4

    (3) sourceFile -> orphanStmtList .
    $end            reduce using rule 3 (sourceFile -> orphanStmtList .)


state 5

    (5) importDecls -> importDecl . eos
    (78) eos -> . eos NEWL
    (79) eos -> . NEWL
    (80) eos -> . eos ;
    (81) eos -> . ;
    NEWL            shift and go to state 69
    ;               shift and go to state 70

    eos                            shift and go to state 68

state 6

    (13) topLevelDecls -> topLevelDecl . eos
    (78) eos -> . eos NEWL
    (79) eos -> . NEWL
    (80) eos -> . eos ;
    (81) eos -> . ;
    NEWL            shift and go to state 69
    ;               shift and go to state 70

    eos                            shift and go to state 71

state 7

    (14) orphanStmtList -> statementList . eos
    (22) statementList -> statementList . eos statement
    (78) eos -> . eos NEWL
    (79) eos -> . NEWL
    (80) eos -> . eos ;
    (81) eos -> . ;
    NEWL            shift and go to state 69
    ;               shift and go to state 70

    eos                            shift and go to state 72

state 8

    (6) importDecl -> IMPORT . importSpec
    (7) importSpec -> . importPath
    (8) importSpec -> . IDENTIFIER importPath
    (9) importSpec -> . . importPath
    (10) importPath -> . STRING_LIT
    (11) importPath -> . IDENTIFIER
    IDENTIFIER      shift and go to state 75
    .               shift and go to state 76
    STRING_LIT      shift and go to state 77

    importSpec                     shift and go to state 73
    importPath                     shift and go to state 74

state 9

    (15) topLevelDecl -> declaration .
    NEWL            reduce using rule 15 (topLevelDecl -> declaration .)
    ;               reduce using rule 15 (topLevelDecl -> declaration .)


state 10

    (23) statementList -> statement .
    NEWL            reduce using rule 23 (statementList -> statement .)
    ;               reduce using rule 23 (statementList -> statement .)


state 11

    (16) declaration -> varDecl .
    NEWL            reduce using rule 16 (declaration -> varDecl .)
    ;               reduce using rule 16 (declaration -> varDecl .)


state 12

    (24) statement -> simpleStmt .
    NEWL            reduce using rule 24 (statement -> simpleStmt .)
    ;               reduce using rule 24 (statement -> simpleStmt .)


state 13

    (17) varDecl -> identifierList . DECL_ASGN expressionList
    (18) identifierList -> identifierList . , IDENTIFIER
    (28) assignment -> identifierList . assign_op expressionList
    (82) assign_op -> . SHR_ASGN
    (83) assign_op -> . SHL_ASGN
    (84) assign_op -> . MOD_ASGN
    (85) assign_op -> . DIV_ASGN
    (86) assign_op -> . OR_ASGN
    (87) assign_op -> . AND_ASGN
    (88) assign_op -> . STAR_ASGN
    (89) assign_op -> . XOR_ASGN
    (90) assign_op -> . MINUS_ASGN
    (91) assign_op -> . PLUS_ASGN
    (92) assign_op -> . ASSIGN
    DECL_ASGN       shift and go to state 78
    ,               shift and go to state 79
    SHR_ASGN        shift and go to state 81
    SHL_ASGN        shift and go to state 82
    MOD_ASGN        shift and go to state 83
    DIV_ASGN        shift and go to state 84
    OR_ASGN         shift and go to state 85
    AND_ASGN        shift and go to state 86
    STAR_ASGN       shift and go to state 87
    XOR_ASGN        shift and go to state 88
    MINUS_ASGN      shift and go to state 89
    PLUS_ASGN       shift and go to state 90
    ASSIGN          shift and go to state 91

    assign_op                      shift and go to state 80

state 14

    (25) simpleStmt -> assignment .
    NEWL            reduce using rule 25 (simpleStmt -> assignment .)
    ;               reduce using rule 25 (simpleStmt -> assignment .)


state 15

    (26) simpleStmt -> expressionStmt .
    NEWL            reduce using rule 26 (simpleStmt -> expressionStmt .)
    ;               reduce using rule 26 (simpleStmt -> expressionStmt .)


state 16

    (19) identifierList -> IDENTIFIER .
    (39) operandName -> IDENTIFIER .
    (44) qualifiedIdent -> IDENTIFIER . . IDENTIFIER
    DECL_ASGN       reduce using rule 19 (identifierList -> IDENTIFIER .)
    ,               reduce using rule 19 (identifierList -> IDENTIFIER .)
    SHR_ASGN        reduce using rule 19 (identifierList -> IDENTIFIER .)
    SHL_ASGN        reduce using rule 19 (identifierList -> IDENTIFIER .)
    MOD_ASGN        reduce using rule 19 (identifierList -> IDENTIFIER .)
    DIV_ASGN        reduce using rule 19 (identifierList -> IDENTIFIER .)
    OR_ASGN         reduce using rule 19 (identifierList -> IDENTIFIER .)
    AND_ASGN        reduce using rule 19 (identifierList -> IDENTIFIER .)
    STAR_ASGN       reduce using rule 19 (identifierList -> IDENTIFIER .)
    XOR_ASGN        reduce using rule 19 (identifierList -> IDENTIFIER .)
    MINUS_ASGN      reduce using rule 19 (identifierList -> IDENTIFIER .)
    PLUS_ASGN       reduce using rule 19 (identifierList -> IDENTIFIER .)
    ASSIGN          reduce using rule 19 (identifierList -> IDENTIFIER .)
    LOGIC_AND       reduce using rule 39 (operandName -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 39 (operandName -> IDENTIFIER .)
    SHR             reduce using rule 39 (operandName -> IDENTIFIER .)
    SHL             reduce using rule 39 (operandName -> IDENTIFIER .)
    AND             reduce using rule 39 (operandName -> IDENTIFIER .)
    MOD             reduce using rule 39 (operandName -> IDENTIFIER .)
    DIV             reduce using rule 39 (operandName -> IDENTIFIER .)
    STAR            reduce using rule 39 (operandName -> IDENTIFIER .)
    XOR             reduce using rule 39 (operandName -> IDENTIFIER .)
    OR              reduce using rule 39 (operandName -> IDENTIFIER .)
    MINUS           reduce using rule 39 (operandName -> IDENTIFIER .)
    PLUS            reduce using rule 39 (operandName -> IDENTIFIER .)
    GE              reduce using rule 39 (operandName -> IDENTIFIER .)
    GT              reduce using rule 39 (operandName -> IDENTIFIER .)
    LE              reduce using rule 39 (operandName -> IDENTIFIER .)
    LT              reduce using rule 39 (operandName -> IDENTIFIER .)
    NE              reduce using rule 39 (operandName -> IDENTIFIER .)
    EQ              reduce using rule 39 (operandName -> IDENTIFIER .)
    NEWL            reduce using rule 39 (operandName -> IDENTIFIER .)
    ;               reduce using rule 39 (operandName -> IDENTIFIER .)
    .               shift and go to state 92


state 17

    (27) expressionStmt -> expression .
    (29) expression -> expression . BINARY_OP unaryExpr
    (93) BINARY_OP -> . MUL_OP
    (94) BINARY_OP -> . ADD_OP
    (95) BINARY_OP -> . REL_OP
    (96) BINARY_OP -> . LOGIC_AND
    (97) BINARY_OP -> . LOGIC_OR
    (108) MUL_OP -> . SHR
    (109) MUL_OP -> . SHL
    (110) MUL_OP -> . AND
    (111) MUL_OP -> . MOD
    (112) MUL_OP -> . DIV
    (113) MUL_OP -> . STAR
    (104) ADD_OP -> . XOR
    (105) ADD_OP -> . OR
    (106) ADD_OP -> . MINUS
    (107) ADD_OP -> . PLUS
    (98) REL_OP -> . GE
    (99) REL_OP -> . GT
    (100) REL_OP -> . LE
    (101) REL_OP -> . LT
    (102) REL_OP -> . NE
    (103) REL_OP -> . EQ
    NEWL            reduce using rule 27 (expressionStmt -> expression .)
    ;               reduce using rule 27 (expressionStmt -> expression .)
    LOGIC_AND       shift and go to state 97
    LOGIC_OR        shift and go to state 98
    SHR             shift and go to state 99
    SHL             shift and go to state 100
    AND             shift and go to state 101
    MOD             shift and go to state 102
    DIV             shift and go to state 103
    STAR            shift and go to state 104
    XOR             shift and go to state 105
    OR              shift and go to state 106
    MINUS           shift and go to state 107
    PLUS            shift and go to state 108
    GE              shift and go to state 109
    GT              shift and go to state 110
    LE              shift and go to state 111
    LT              shift and go to state 112
    NE              shift and go to state 113
    EQ              shift and go to state 114

    BINARY_OP                      shift and go to state 93
    MUL_OP                         shift and go to state 94
    ADD_OP                         shift and go to state 95
    REL_OP                         shift and go to state 96

state 18

    (30) expression -> unaryExpr .
    LOGIC_AND       reduce using rule 30 (expression -> unaryExpr .)
    LOGIC_OR        reduce using rule 30 (expression -> unaryExpr .)
    SHR             reduce using rule 30 (expression -> unaryExpr .)
    SHL             reduce using rule 30 (expression -> unaryExpr .)
    AND             reduce using rule 30 (expression -> unaryExpr .)
    MOD             reduce using rule 30 (expression -> unaryExpr .)
    DIV             reduce using rule 30 (expression -> unaryExpr .)
    STAR            reduce using rule 30 (expression -> unaryExpr .)
    XOR             reduce using rule 30 (expression -> unaryExpr .)
    OR              reduce using rule 30 (expression -> unaryExpr .)
    MINUS           reduce using rule 30 (expression -> unaryExpr .)
    PLUS            reduce using rule 30 (expression -> unaryExpr .)
    GE              reduce using rule 30 (expression -> unaryExpr .)
    GT              reduce using rule 30 (expression -> unaryExpr .)
    LE              reduce using rule 30 (expression -> unaryExpr .)
    LT              reduce using rule 30 (expression -> unaryExpr .)
    NE              reduce using rule 30 (expression -> unaryExpr .)
    EQ              reduce using rule 30 (expression -> unaryExpr .)
    NEWL            reduce using rule 30 (expression -> unaryExpr .)
    ;               reduce using rule 30 (expression -> unaryExpr .)
    )               reduce using rule 30 (expression -> unaryExpr .)
    ,               reduce using rule 30 (expression -> unaryExpr .)


state 19

    (31) unaryExpr -> UNARY_OP . unaryExpr
    (31) unaryExpr -> . UNARY_OP unaryExpr
    (32) unaryExpr -> . primaryExpr
    (114) UNARY_OP -> . AND
    (115) UNARY_OP -> . EXCLM
    (116) UNARY_OP -> . MINUS
    (33) primaryExpr -> . conversion
    (34) primaryExpr -> . operand
    (41) conversion -> . type_ ( expression )
    (35) operand -> . ( expression )
    (36) operand -> . operandName
    (37) operand -> . literal
    (42) type_ -> . qualifiedIdent
    (43) type_ -> . typeName
    (38) operandName -> . qualifiedIdent
    (39) operandName -> . IDENTIFIER
    (40) literal -> . basicLit
    (44) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (45) typeName -> . numericType
    (46) typeName -> . STRING
    (47) typeName -> . BOOL
    (48) typeName -> . RUNE
    (63) basicLit -> . INT_LIT
    (64) basicLit -> . FLOAT_LIT
    (65) basicLit -> . DECIMAL_LIT EXPONENT
    (66) basicLit -> . FLOAT_LIT EXPONENT
    (67) basicLit -> . FALSE
    (68) basicLit -> . TRUE
    (69) basicLit -> . RUNE_LIT
    (70) basicLit -> . STRING_LIT
    (49) numericType -> . F32
    (50) numericType -> . F64
    (51) numericType -> . INT
    (52) numericType -> . ISIZE
    (53) numericType -> . I64
    (54) numericType -> . I32
    (55) numericType -> . I16
    (56) numericType -> . I8
    (57) numericType -> . UINT
    (58) numericType -> . USIZE
    (59) numericType -> . U64
    (60) numericType -> . U32
    (61) numericType -> . U16
    (62) numericType -> . U8
    (74) INT_LIT -> . HEX_LIT
    (75) INT_LIT -> . OCTAL_LIT
    (76) INT_LIT -> . BINARY_LIT
    (77) INT_LIT -> . DECIMAL_LIT
    (71) FLOAT_LIT -> . . DECIMAL_LIT
    (72) FLOAT_LIT -> . DECIMAL_LIT .
    (73) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    IDENTIFIER      shift and go to state 116
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    UNARY_OP                       shift and go to state 19
    unaryExpr                      shift and go to state 115
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 20

    (32) unaryExpr -> primaryExpr .
    LOGIC_AND       reduce using rule 32 (unaryExpr -> primaryExpr .)
    LOGIC_OR        reduce using rule 32 (unaryExpr -> primaryExpr .)
    SHR             reduce using rule 32 (unaryExpr -> primaryExpr .)
    SHL             reduce using rule 32 (unaryExpr -> primaryExpr .)
    AND             reduce using rule 32 (unaryExpr -> primaryExpr .)
    MOD             reduce using rule 32 (unaryExpr -> primaryExpr .)
    DIV             reduce using rule 32 (unaryExpr -> primaryExpr .)
    STAR            reduce using rule 32 (unaryExpr -> primaryExpr .)
    XOR             reduce using rule 32 (unaryExpr -> primaryExpr .)
    OR              reduce using rule 32 (unaryExpr -> primaryExpr .)
    MINUS           reduce using rule 32 (unaryExpr -> primaryExpr .)
    PLUS            reduce using rule 32 (unaryExpr -> primaryExpr .)
    GE              reduce using rule 32 (unaryExpr -> primaryExpr .)
    GT              reduce using rule 32 (unaryExpr -> primaryExpr .)
    LE              reduce using rule 32 (unaryExpr -> primaryExpr .)
    LT              reduce using rule 32 (unaryExpr -> primaryExpr .)
    NE              reduce using rule 32 (unaryExpr -> primaryExpr .)
    EQ              reduce using rule 32 (unaryExpr -> primaryExpr .)
    NEWL            reduce using rule 32 (unaryExpr -> primaryExpr .)
    ;               reduce using rule 32 (unaryExpr -> primaryExpr .)
    )               reduce using rule 32 (unaryExpr -> primaryExpr .)
    ,               reduce using rule 32 (unaryExpr -> primaryExpr .)


state 21

    (114) UNARY_OP -> AND .
    AND             reduce using rule 114 (UNARY_OP -> AND .)
    EXCLM           reduce using rule 114 (UNARY_OP -> AND .)
    MINUS           reduce using rule 114 (UNARY_OP -> AND .)
    (               reduce using rule 114 (UNARY_OP -> AND .)
    IDENTIFIER      reduce using rule 114 (UNARY_OP -> AND .)
    STRING          reduce using rule 114 (UNARY_OP -> AND .)
    BOOL            reduce using rule 114 (UNARY_OP -> AND .)
    RUNE            reduce using rule 114 (UNARY_OP -> AND .)
    DECIMAL_LIT     reduce using rule 114 (UNARY_OP -> AND .)
    FALSE           reduce using rule 114 (UNARY_OP -> AND .)
    TRUE            reduce using rule 114 (UNARY_OP -> AND .)
    RUNE_LIT        reduce using rule 114 (UNARY_OP -> AND .)
    STRING_LIT      reduce using rule 114 (UNARY_OP -> AND .)
    F32             reduce using rule 114 (UNARY_OP -> AND .)
    F64             reduce using rule 114 (UNARY_OP -> AND .)
    INT             reduce using rule 114 (UNARY_OP -> AND .)
    ISIZE           reduce using rule 114 (UNARY_OP -> AND .)
    I64             reduce using rule 114 (UNARY_OP -> AND .)
    I32             reduce using rule 114 (UNARY_OP -> AND .)
    I16             reduce using rule 114 (UNARY_OP -> AND .)
    I8              reduce using rule 114 (UNARY_OP -> AND .)
    UINT            reduce using rule 114 (UNARY_OP -> AND .)
    USIZE           reduce using rule 114 (UNARY_OP -> AND .)
    U64             reduce using rule 114 (UNARY_OP -> AND .)
    U32             reduce using rule 114 (UNARY_OP -> AND .)
    U16             reduce using rule 114 (UNARY_OP -> AND .)
    U8              reduce using rule 114 (UNARY_OP -> AND .)
    HEX_LIT         reduce using rule 114 (UNARY_OP -> AND .)
    OCTAL_LIT       reduce using rule 114 (UNARY_OP -> AND .)
    BINARY_LIT      reduce using rule 114 (UNARY_OP -> AND .)
    .               reduce using rule 114 (UNARY_OP -> AND .)


state 22

    (115) UNARY_OP -> EXCLM .
    AND             reduce using rule 115 (UNARY_OP -> EXCLM .)
    EXCLM           reduce using rule 115 (UNARY_OP -> EXCLM .)
    MINUS           reduce using rule 115 (UNARY_OP -> EXCLM .)
    (               reduce using rule 115 (UNARY_OP -> EXCLM .)
    IDENTIFIER      reduce using rule 115 (UNARY_OP -> EXCLM .)
    STRING          reduce using rule 115 (UNARY_OP -> EXCLM .)
    BOOL            reduce using rule 115 (UNARY_OP -> EXCLM .)
    RUNE            reduce using rule 115 (UNARY_OP -> EXCLM .)
    DECIMAL_LIT     reduce using rule 115 (UNARY_OP -> EXCLM .)
    FALSE           reduce using rule 115 (UNARY_OP -> EXCLM .)
    TRUE            reduce using rule 115 (UNARY_OP -> EXCLM .)
    RUNE_LIT        reduce using rule 115 (UNARY_OP -> EXCLM .)
    STRING_LIT      reduce using rule 115 (UNARY_OP -> EXCLM .)
    F32             reduce using rule 115 (UNARY_OP -> EXCLM .)
    F64             reduce using rule 115 (UNARY_OP -> EXCLM .)
    INT             reduce using rule 115 (UNARY_OP -> EXCLM .)
    ISIZE           reduce using rule 115 (UNARY_OP -> EXCLM .)
    I64             reduce using rule 115 (UNARY_OP -> EXCLM .)
    I32             reduce using rule 115 (UNARY_OP -> EXCLM .)
    I16             reduce using rule 115 (UNARY_OP -> EXCLM .)
    I8              reduce using rule 115 (UNARY_OP -> EXCLM .)
    UINT            reduce using rule 115 (UNARY_OP -> EXCLM .)
    USIZE           reduce using rule 115 (UNARY_OP -> EXCLM .)
    U64             reduce using rule 115 (UNARY_OP -> EXCLM .)
    U32             reduce using rule 115 (UNARY_OP -> EXCLM .)
    U16             reduce using rule 115 (UNARY_OP -> EXCLM .)
    U8              reduce using rule 115 (UNARY_OP -> EXCLM .)
    HEX_LIT         reduce using rule 115 (UNARY_OP -> EXCLM .)
    OCTAL_LIT       reduce using rule 115 (UNARY_OP -> EXCLM .)
    BINARY_LIT      reduce using rule 115 (UNARY_OP -> EXCLM .)
    .               reduce using rule 115 (UNARY_OP -> EXCLM .)


state 23

    (116) UNARY_OP -> MINUS .
    AND             reduce using rule 116 (UNARY_OP -> MINUS .)
    EXCLM           reduce using rule 116 (UNARY_OP -> MINUS .)
    MINUS           reduce using rule 116 (UNARY_OP -> MINUS .)
    (               reduce using rule 116 (UNARY_OP -> MINUS .)
    IDENTIFIER      reduce using rule 116 (UNARY_OP -> MINUS .)
    STRING          reduce using rule 116 (UNARY_OP -> MINUS .)
    BOOL            reduce using rule 116 (UNARY_OP -> MINUS .)
    RUNE            reduce using rule 116 (UNARY_OP -> MINUS .)
    DECIMAL_LIT     reduce using rule 116 (UNARY_OP -> MINUS .)
    FALSE           reduce using rule 116 (UNARY_OP -> MINUS .)
    TRUE            reduce using rule 116 (UNARY_OP -> MINUS .)
    RUNE_LIT        reduce using rule 116 (UNARY_OP -> MINUS .)
    STRING_LIT      reduce using rule 116 (UNARY_OP -> MINUS .)
    F32             reduce using rule 116 (UNARY_OP -> MINUS .)
    F64             reduce using rule 116 (UNARY_OP -> MINUS .)
    INT             reduce using rule 116 (UNARY_OP -> MINUS .)
    ISIZE           reduce using rule 116 (UNARY_OP -> MINUS .)
    I64             reduce using rule 116 (UNARY_OP -> MINUS .)
    I32             reduce using rule 116 (UNARY_OP -> MINUS .)
    I16             reduce using rule 116 (UNARY_OP -> MINUS .)
    I8              reduce using rule 116 (UNARY_OP -> MINUS .)
    UINT            reduce using rule 116 (UNARY_OP -> MINUS .)
    USIZE           reduce using rule 116 (UNARY_OP -> MINUS .)
    U64             reduce using rule 116 (UNARY_OP -> MINUS .)
    U32             reduce using rule 116 (UNARY_OP -> MINUS .)
    U16             reduce using rule 116 (UNARY_OP -> MINUS .)
    U8              reduce using rule 116 (UNARY_OP -> MINUS .)
    HEX_LIT         reduce using rule 116 (UNARY_OP -> MINUS .)
    OCTAL_LIT       reduce using rule 116 (UNARY_OP -> MINUS .)
    BINARY_LIT      reduce using rule 116 (UNARY_OP -> MINUS .)
    .               reduce using rule 116 (UNARY_OP -> MINUS .)


state 24

    (33) primaryExpr -> conversion .
    LOGIC_AND       reduce using rule 33 (primaryExpr -> conversion .)
    LOGIC_OR        reduce using rule 33 (primaryExpr -> conversion .)
    SHR             reduce using rule 33 (primaryExpr -> conversion .)
    SHL             reduce using rule 33 (primaryExpr -> conversion .)
    AND             reduce using rule 33 (primaryExpr -> conversion .)
    MOD             reduce using rule 33 (primaryExpr -> conversion .)
    DIV             reduce using rule 33 (primaryExpr -> conversion .)
    STAR            reduce using rule 33 (primaryExpr -> conversion .)
    XOR             reduce using rule 33 (primaryExpr -> conversion .)
    OR              reduce using rule 33 (primaryExpr -> conversion .)
    MINUS           reduce using rule 33 (primaryExpr -> conversion .)
    PLUS            reduce using rule 33 (primaryExpr -> conversion .)
    GE              reduce using rule 33 (primaryExpr -> conversion .)
    GT              reduce using rule 33 (primaryExpr -> conversion .)
    LE              reduce using rule 33 (primaryExpr -> conversion .)
    LT              reduce using rule 33 (primaryExpr -> conversion .)
    NE              reduce using rule 33 (primaryExpr -> conversion .)
    EQ              reduce using rule 33 (primaryExpr -> conversion .)
    NEWL            reduce using rule 33 (primaryExpr -> conversion .)
    ;               reduce using rule 33 (primaryExpr -> conversion .)
    )               reduce using rule 33 (primaryExpr -> conversion .)
    ,               reduce using rule 33 (primaryExpr -> conversion .)


state 25

    (34) primaryExpr -> operand .
    LOGIC_AND       reduce using rule 34 (primaryExpr -> operand .)
    LOGIC_OR        reduce using rule 34 (primaryExpr -> operand .)
    SHR             reduce using rule 34 (primaryExpr -> operand .)
    SHL             reduce using rule 34 (primaryExpr -> operand .)
    AND             reduce using rule 34 (primaryExpr -> operand .)
    MOD             reduce using rule 34 (primaryExpr -> operand .)
    DIV             reduce using rule 34 (primaryExpr -> operand .)
    STAR            reduce using rule 34 (primaryExpr -> operand .)
    XOR             reduce using rule 34 (primaryExpr -> operand .)
    OR              reduce using rule 34 (primaryExpr -> operand .)
    MINUS           reduce using rule 34 (primaryExpr -> operand .)
    PLUS            reduce using rule 34 (primaryExpr -> operand .)
    GE              reduce using rule 34 (primaryExpr -> operand .)
    GT              reduce using rule 34 (primaryExpr -> operand .)
    LE              reduce using rule 34 (primaryExpr -> operand .)
    LT              reduce using rule 34 (primaryExpr -> operand .)
    NE              reduce using rule 34 (primaryExpr -> operand .)
    EQ              reduce using rule 34 (primaryExpr -> operand .)
    NEWL            reduce using rule 34 (primaryExpr -> operand .)
    ;               reduce using rule 34 (primaryExpr -> operand .)
    )               reduce using rule 34 (primaryExpr -> operand .)
    ,               reduce using rule 34 (primaryExpr -> operand .)


state 26

    (41) conversion -> type_ . ( expression )
    (               shift and go to state 117


state 27

    (35) operand -> ( . expression )
    (29) expression -> . expression BINARY_OP unaryExpr
    (30) expression -> . unaryExpr
    (31) unaryExpr -> . UNARY_OP unaryExpr
    (32) unaryExpr -> . primaryExpr
    (114) UNARY_OP -> . AND
    (115) UNARY_OP -> . EXCLM
    (116) UNARY_OP -> . MINUS
    (33) primaryExpr -> . conversion
    (34) primaryExpr -> . operand
    (41) conversion -> . type_ ( expression )
    (35) operand -> . ( expression )
    (36) operand -> . operandName
    (37) operand -> . literal
    (42) type_ -> . qualifiedIdent
    (43) type_ -> . typeName
    (38) operandName -> . qualifiedIdent
    (39) operandName -> . IDENTIFIER
    (40) literal -> . basicLit
    (44) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (45) typeName -> . numericType
    (46) typeName -> . STRING
    (47) typeName -> . BOOL
    (48) typeName -> . RUNE
    (63) basicLit -> . INT_LIT
    (64) basicLit -> . FLOAT_LIT
    (65) basicLit -> . DECIMAL_LIT EXPONENT
    (66) basicLit -> . FLOAT_LIT EXPONENT
    (67) basicLit -> . FALSE
    (68) basicLit -> . TRUE
    (69) basicLit -> . RUNE_LIT
    (70) basicLit -> . STRING_LIT
    (49) numericType -> . F32
    (50) numericType -> . F64
    (51) numericType -> . INT
    (52) numericType -> . ISIZE
    (53) numericType -> . I64
    (54) numericType -> . I32
    (55) numericType -> . I16
    (56) numericType -> . I8
    (57) numericType -> . UINT
    (58) numericType -> . USIZE
    (59) numericType -> . U64
    (60) numericType -> . U32
    (61) numericType -> . U16
    (62) numericType -> . U8
    (74) INT_LIT -> . HEX_LIT
    (75) INT_LIT -> . OCTAL_LIT
    (76) INT_LIT -> . BINARY_LIT
    (77) INT_LIT -> . DECIMAL_LIT
    (71) FLOAT_LIT -> . . DECIMAL_LIT
    (72) FLOAT_LIT -> . DECIMAL_LIT .
    (73) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    IDENTIFIER      shift and go to state 116
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    expression                     shift and go to state 118
    unaryExpr                      shift and go to state 18
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 28

    (36) operand -> operandName .
    LOGIC_AND       reduce using rule 36 (operand -> operandName .)
    LOGIC_OR        reduce using rule 36 (operand -> operandName .)
    SHR             reduce using rule 36 (operand -> operandName .)
    SHL             reduce using rule 36 (operand -> operandName .)
    AND             reduce using rule 36 (operand -> operandName .)
    MOD             reduce using rule 36 (operand -> operandName .)
    DIV             reduce using rule 36 (operand -> operandName .)
    STAR            reduce using rule 36 (operand -> operandName .)
    XOR             reduce using rule 36 (operand -> operandName .)
    OR              reduce using rule 36 (operand -> operandName .)
    MINUS           reduce using rule 36 (operand -> operandName .)
    PLUS            reduce using rule 36 (operand -> operandName .)
    GE              reduce using rule 36 (operand -> operandName .)
    GT              reduce using rule 36 (operand -> operandName .)
    LE              reduce using rule 36 (operand -> operandName .)
    LT              reduce using rule 36 (operand -> operandName .)
    NE              reduce using rule 36 (operand -> operandName .)
    EQ              reduce using rule 36 (operand -> operandName .)
    NEWL            reduce using rule 36 (operand -> operandName .)
    ;               reduce using rule 36 (operand -> operandName .)
    )               reduce using rule 36 (operand -> operandName .)
    ,               reduce using rule 36 (operand -> operandName .)


state 29

    (37) operand -> literal .
    LOGIC_AND       reduce using rule 37 (operand -> literal .)
    LOGIC_OR        reduce using rule 37 (operand -> literal .)
    SHR             reduce using rule 37 (operand -> literal .)
    SHL             reduce using rule 37 (operand -> literal .)
    AND             reduce using rule 37 (operand -> literal .)
    MOD             reduce using rule 37 (operand -> literal .)
    DIV             reduce using rule 37 (operand -> literal .)
    STAR            reduce using rule 37 (operand -> literal .)
    XOR             reduce using rule 37 (operand -> literal .)
    OR              reduce using rule 37 (operand -> literal .)
    MINUS           reduce using rule 37 (operand -> literal .)
    PLUS            reduce using rule 37 (operand -> literal .)
    GE              reduce using rule 37 (operand -> literal .)
    GT              reduce using rule 37 (operand -> literal .)
    LE              reduce using rule 37 (operand -> literal .)
    LT              reduce using rule 37 (operand -> literal .)
    NE              reduce using rule 37 (operand -> literal .)
    EQ              reduce using rule 37 (operand -> literal .)
    NEWL            reduce using rule 37 (operand -> literal .)
    ;               reduce using rule 37 (operand -> literal .)
    )               reduce using rule 37 (operand -> literal .)
    ,               reduce using rule 37 (operand -> literal .)


state 30

    (42) type_ -> qualifiedIdent .
    (38) operandName -> qualifiedIdent .
    (               reduce using rule 42 (type_ -> qualifiedIdent .)
    LOGIC_AND       reduce using rule 38 (operandName -> qualifiedIdent .)
    LOGIC_OR        reduce using rule 38 (operandName -> qualifiedIdent .)
    SHR             reduce using rule 38 (operandName -> qualifiedIdent .)
    SHL             reduce using rule 38 (operandName -> qualifiedIdent .)
    AND             reduce using rule 38 (operandName -> qualifiedIdent .)
    MOD             reduce using rule 38 (operandName -> qualifiedIdent .)
    DIV             reduce using rule 38 (operandName -> qualifiedIdent .)
    STAR            reduce using rule 38 (operandName -> qualifiedIdent .)
    XOR             reduce using rule 38 (operandName -> qualifiedIdent .)
    OR              reduce using rule 38 (operandName -> qualifiedIdent .)
    MINUS           reduce using rule 38 (operandName -> qualifiedIdent .)
    PLUS            reduce using rule 38 (operandName -> qualifiedIdent .)
    GE              reduce using rule 38 (operandName -> qualifiedIdent .)
    GT              reduce using rule 38 (operandName -> qualifiedIdent .)
    LE              reduce using rule 38 (operandName -> qualifiedIdent .)
    LT              reduce using rule 38 (operandName -> qualifiedIdent .)
    NE              reduce using rule 38 (operandName -> qualifiedIdent .)
    EQ              reduce using rule 38 (operandName -> qualifiedIdent .)
    NEWL            reduce using rule 38 (operandName -> qualifiedIdent .)
    ;               reduce using rule 38 (operandName -> qualifiedIdent .)
    )               reduce using rule 38 (operandName -> qualifiedIdent .)
    ,               reduce using rule 38 (operandName -> qualifiedIdent .)


state 31

    (43) type_ -> typeName .
    (               reduce using rule 43 (type_ -> typeName .)


state 32

    (40) literal -> basicLit .
    LOGIC_AND       reduce using rule 40 (literal -> basicLit .)
    LOGIC_OR        reduce using rule 40 (literal -> basicLit .)
    SHR             reduce using rule 40 (literal -> basicLit .)
    SHL             reduce using rule 40 (literal -> basicLit .)
    AND             reduce using rule 40 (literal -> basicLit .)
    MOD             reduce using rule 40 (literal -> basicLit .)
    DIV             reduce using rule 40 (literal -> basicLit .)
    STAR            reduce using rule 40 (literal -> basicLit .)
    XOR             reduce using rule 40 (literal -> basicLit .)
    OR              reduce using rule 40 (literal -> basicLit .)
    MINUS           reduce using rule 40 (literal -> basicLit .)
    PLUS            reduce using rule 40 (literal -> basicLit .)
    GE              reduce using rule 40 (literal -> basicLit .)
    GT              reduce using rule 40 (literal -> basicLit .)
    LE              reduce using rule 40 (literal -> basicLit .)
    LT              reduce using rule 40 (literal -> basicLit .)
    NE              reduce using rule 40 (literal -> basicLit .)
    EQ              reduce using rule 40 (literal -> basicLit .)
    NEWL            reduce using rule 40 (literal -> basicLit .)
    ;               reduce using rule 40 (literal -> basicLit .)
    )               reduce using rule 40 (literal -> basicLit .)
    ,               reduce using rule 40 (literal -> basicLit .)


state 33

    (71) FLOAT_LIT -> . . DECIMAL_LIT
    DECIMAL_LIT     shift and go to state 119


state 34

    (45) typeName -> numericType .
    (               reduce using rule 45 (typeName -> numericType .)


state 35

    (46) typeName -> STRING .
    (               reduce using rule 46 (typeName -> STRING .)


state 36

    (47) typeName -> BOOL .
    (               reduce using rule 47 (typeName -> BOOL .)


state 37

    (48) typeName -> RUNE .
    (               reduce using rule 48 (typeName -> RUNE .)


state 38

    (63) basicLit -> INT_LIT .
    LOGIC_AND       reduce using rule 63 (basicLit -> INT_LIT .)
    LOGIC_OR        reduce using rule 63 (basicLit -> INT_LIT .)
    SHR             reduce using rule 63 (basicLit -> INT_LIT .)
    SHL             reduce using rule 63 (basicLit -> INT_LIT .)
    AND             reduce using rule 63 (basicLit -> INT_LIT .)
    MOD             reduce using rule 63 (basicLit -> INT_LIT .)
    DIV             reduce using rule 63 (basicLit -> INT_LIT .)
    STAR            reduce using rule 63 (basicLit -> INT_LIT .)
    XOR             reduce using rule 63 (basicLit -> INT_LIT .)
    OR              reduce using rule 63 (basicLit -> INT_LIT .)
    MINUS           reduce using rule 63 (basicLit -> INT_LIT .)
    PLUS            reduce using rule 63 (basicLit -> INT_LIT .)
    GE              reduce using rule 63 (basicLit -> INT_LIT .)
    GT              reduce using rule 63 (basicLit -> INT_LIT .)
    LE              reduce using rule 63 (basicLit -> INT_LIT .)
    LT              reduce using rule 63 (basicLit -> INT_LIT .)
    NE              reduce using rule 63 (basicLit -> INT_LIT .)
    EQ              reduce using rule 63 (basicLit -> INT_LIT .)
    NEWL            reduce using rule 63 (basicLit -> INT_LIT .)
    ;               reduce using rule 63 (basicLit -> INT_LIT .)
    )               reduce using rule 63 (basicLit -> INT_LIT .)
    ,               reduce using rule 63 (basicLit -> INT_LIT .)


state 39

    (64) basicLit -> FLOAT_LIT .
    (66) basicLit -> FLOAT_LIT . EXPONENT
    LOGIC_AND       reduce using rule 64 (basicLit -> FLOAT_LIT .)
    LOGIC_OR        reduce using rule 64 (basicLit -> FLOAT_LIT .)
    SHR             reduce using rule 64 (basicLit -> FLOAT_LIT .)
    SHL             reduce using rule 64 (basicLit -> FLOAT_LIT .)
    AND             reduce using rule 64 (basicLit -> FLOAT_LIT .)
    MOD             reduce using rule 64 (basicLit -> FLOAT_LIT .)
    DIV             reduce using rule 64 (basicLit -> FLOAT_LIT .)
    STAR            reduce using rule 64 (basicLit -> FLOAT_LIT .)
    XOR             reduce using rule 64 (basicLit -> FLOAT_LIT .)
    OR              reduce using rule 64 (basicLit -> FLOAT_LIT .)
    MINUS           reduce using rule 64 (basicLit -> FLOAT_LIT .)
    PLUS            reduce using rule 64 (basicLit -> FLOAT_LIT .)
    GE              reduce using rule 64 (basicLit -> FLOAT_LIT .)
    GT              reduce using rule 64 (basicLit -> FLOAT_LIT .)
    LE              reduce using rule 64 (basicLit -> FLOAT_LIT .)
    LT              reduce using rule 64 (basicLit -> FLOAT_LIT .)
    NE              reduce using rule 64 (basicLit -> FLOAT_LIT .)
    EQ              reduce using rule 64 (basicLit -> FLOAT_LIT .)
    NEWL            reduce using rule 64 (basicLit -> FLOAT_LIT .)
    ;               reduce using rule 64 (basicLit -> FLOAT_LIT .)
    )               reduce using rule 64 (basicLit -> FLOAT_LIT .)
    ,               reduce using rule 64 (basicLit -> FLOAT_LIT .)
    EXPONENT        shift and go to state 120


state 40

    (65) basicLit -> DECIMAL_LIT . EXPONENT
    (77) INT_LIT -> DECIMAL_LIT .
    (72) FLOAT_LIT -> DECIMAL_LIT . .
    (73) FLOAT_LIT -> DECIMAL_LIT . . DECIMAL_LIT
    EXPONENT        shift and go to state 121
    LOGIC_AND       reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    SHR             reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    SHL             reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    AND             reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    MOD             reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    DIV             reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    STAR            reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    XOR             reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    OR              reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    MINUS           reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    PLUS            reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    GE              reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    GT              reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    LE              reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    LT              reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    NE              reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    EQ              reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    NEWL            reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    ;               reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    )               reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    ,               reduce using rule 77 (INT_LIT -> DECIMAL_LIT .)
    .               shift and go to state 122


state 41

    (67) basicLit -> FALSE .
    LOGIC_AND       reduce using rule 67 (basicLit -> FALSE .)
    LOGIC_OR        reduce using rule 67 (basicLit -> FALSE .)
    SHR             reduce using rule 67 (basicLit -> FALSE .)
    SHL             reduce using rule 67 (basicLit -> FALSE .)
    AND             reduce using rule 67 (basicLit -> FALSE .)
    MOD             reduce using rule 67 (basicLit -> FALSE .)
    DIV             reduce using rule 67 (basicLit -> FALSE .)
    STAR            reduce using rule 67 (basicLit -> FALSE .)
    XOR             reduce using rule 67 (basicLit -> FALSE .)
    OR              reduce using rule 67 (basicLit -> FALSE .)
    MINUS           reduce using rule 67 (basicLit -> FALSE .)
    PLUS            reduce using rule 67 (basicLit -> FALSE .)
    GE              reduce using rule 67 (basicLit -> FALSE .)
    GT              reduce using rule 67 (basicLit -> FALSE .)
    LE              reduce using rule 67 (basicLit -> FALSE .)
    LT              reduce using rule 67 (basicLit -> FALSE .)
    NE              reduce using rule 67 (basicLit -> FALSE .)
    EQ              reduce using rule 67 (basicLit -> FALSE .)
    NEWL            reduce using rule 67 (basicLit -> FALSE .)
    ;               reduce using rule 67 (basicLit -> FALSE .)
    )               reduce using rule 67 (basicLit -> FALSE .)
    ,               reduce using rule 67 (basicLit -> FALSE .)


state 42

    (68) basicLit -> TRUE .
    LOGIC_AND       reduce using rule 68 (basicLit -> TRUE .)
    LOGIC_OR        reduce using rule 68 (basicLit -> TRUE .)
    SHR             reduce using rule 68 (basicLit -> TRUE .)
    SHL             reduce using rule 68 (basicLit -> TRUE .)
    AND             reduce using rule 68 (basicLit -> TRUE .)
    MOD             reduce using rule 68 (basicLit -> TRUE .)
    DIV             reduce using rule 68 (basicLit -> TRUE .)
    STAR            reduce using rule 68 (basicLit -> TRUE .)
    XOR             reduce using rule 68 (basicLit -> TRUE .)
    OR              reduce using rule 68 (basicLit -> TRUE .)
    MINUS           reduce using rule 68 (basicLit -> TRUE .)
    PLUS            reduce using rule 68 (basicLit -> TRUE .)
    GE              reduce using rule 68 (basicLit -> TRUE .)
    GT              reduce using rule 68 (basicLit -> TRUE .)
    LE              reduce using rule 68 (basicLit -> TRUE .)
    LT              reduce using rule 68 (basicLit -> TRUE .)
    NE              reduce using rule 68 (basicLit -> TRUE .)
    EQ              reduce using rule 68 (basicLit -> TRUE .)
    NEWL            reduce using rule 68 (basicLit -> TRUE .)
    ;               reduce using rule 68 (basicLit -> TRUE .)
    )               reduce using rule 68 (basicLit -> TRUE .)
    ,               reduce using rule 68 (basicLit -> TRUE .)


state 43

    (69) basicLit -> RUNE_LIT .
    LOGIC_AND       reduce using rule 69 (basicLit -> RUNE_LIT .)
    LOGIC_OR        reduce using rule 69 (basicLit -> RUNE_LIT .)
    SHR             reduce using rule 69 (basicLit -> RUNE_LIT .)
    SHL             reduce using rule 69 (basicLit -> RUNE_LIT .)
    AND             reduce using rule 69 (basicLit -> RUNE_LIT .)
    MOD             reduce using rule 69 (basicLit -> RUNE_LIT .)
    DIV             reduce using rule 69 (basicLit -> RUNE_LIT .)
    STAR            reduce using rule 69 (basicLit -> RUNE_LIT .)
    XOR             reduce using rule 69 (basicLit -> RUNE_LIT .)
    OR              reduce using rule 69 (basicLit -> RUNE_LIT .)
    MINUS           reduce using rule 69 (basicLit -> RUNE_LIT .)
    PLUS            reduce using rule 69 (basicLit -> RUNE_LIT .)
    GE              reduce using rule 69 (basicLit -> RUNE_LIT .)
    GT              reduce using rule 69 (basicLit -> RUNE_LIT .)
    LE              reduce using rule 69 (basicLit -> RUNE_LIT .)
    LT              reduce using rule 69 (basicLit -> RUNE_LIT .)
    NE              reduce using rule 69 (basicLit -> RUNE_LIT .)
    EQ              reduce using rule 69 (basicLit -> RUNE_LIT .)
    NEWL            reduce using rule 69 (basicLit -> RUNE_LIT .)
    ;               reduce using rule 69 (basicLit -> RUNE_LIT .)
    )               reduce using rule 69 (basicLit -> RUNE_LIT .)
    ,               reduce using rule 69 (basicLit -> RUNE_LIT .)


state 44

    (70) basicLit -> STRING_LIT .
    LOGIC_AND       reduce using rule 70 (basicLit -> STRING_LIT .)
    LOGIC_OR        reduce using rule 70 (basicLit -> STRING_LIT .)
    SHR             reduce using rule 70 (basicLit -> STRING_LIT .)
    SHL             reduce using rule 70 (basicLit -> STRING_LIT .)
    AND             reduce using rule 70 (basicLit -> STRING_LIT .)
    MOD             reduce using rule 70 (basicLit -> STRING_LIT .)
    DIV             reduce using rule 70 (basicLit -> STRING_LIT .)
    STAR            reduce using rule 70 (basicLit -> STRING_LIT .)
    XOR             reduce using rule 70 (basicLit -> STRING_LIT .)
    OR              reduce using rule 70 (basicLit -> STRING_LIT .)
    MINUS           reduce using rule 70 (basicLit -> STRING_LIT .)
    PLUS            reduce using rule 70 (basicLit -> STRING_LIT .)
    GE              reduce using rule 70 (basicLit -> STRING_LIT .)
    GT              reduce using rule 70 (basicLit -> STRING_LIT .)
    LE              reduce using rule 70 (basicLit -> STRING_LIT .)
    LT              reduce using rule 70 (basicLit -> STRING_LIT .)
    NE              reduce using rule 70 (basicLit -> STRING_LIT .)
    EQ              reduce using rule 70 (basicLit -> STRING_LIT .)
    NEWL            reduce using rule 70 (basicLit -> STRING_LIT .)
    ;               reduce using rule 70 (basicLit -> STRING_LIT .)
    )               reduce using rule 70 (basicLit -> STRING_LIT .)
    ,               reduce using rule 70 (basicLit -> STRING_LIT .)


state 45

    (49) numericType -> F32 .
    (               reduce using rule 49 (numericType -> F32 .)


state 46

    (50) numericType -> F64 .
    (               reduce using rule 50 (numericType -> F64 .)


state 47

    (51) numericType -> INT .
    (               reduce using rule 51 (numericType -> INT .)


state 48

    (52) numericType -> ISIZE .
    (               reduce using rule 52 (numericType -> ISIZE .)


state 49

    (53) numericType -> I64 .
    (               reduce using rule 53 (numericType -> I64 .)


state 50

    (54) numericType -> I32 .
    (               reduce using rule 54 (numericType -> I32 .)


state 51

    (55) numericType -> I16 .
    (               reduce using rule 55 (numericType -> I16 .)


state 52

    (56) numericType -> I8 .
    (               reduce using rule 56 (numericType -> I8 .)


state 53

    (57) numericType -> UINT .
    (               reduce using rule 57 (numericType -> UINT .)


state 54

    (58) numericType -> USIZE .
    (               reduce using rule 58 (numericType -> USIZE .)


state 55

    (59) numericType -> U64 .
    (               reduce using rule 59 (numericType -> U64 .)


state 56

    (60) numericType -> U32 .
    (               reduce using rule 60 (numericType -> U32 .)


state 57

    (61) numericType -> U16 .
    (               reduce using rule 61 (numericType -> U16 .)


state 58

    (62) numericType -> U8 .
    (               reduce using rule 62 (numericType -> U8 .)


state 59

    (74) INT_LIT -> HEX_LIT .
    LOGIC_AND       reduce using rule 74 (INT_LIT -> HEX_LIT .)
    LOGIC_OR        reduce using rule 74 (INT_LIT -> HEX_LIT .)
    SHR             reduce using rule 74 (INT_LIT -> HEX_LIT .)
    SHL             reduce using rule 74 (INT_LIT -> HEX_LIT .)
    AND             reduce using rule 74 (INT_LIT -> HEX_LIT .)
    MOD             reduce using rule 74 (INT_LIT -> HEX_LIT .)
    DIV             reduce using rule 74 (INT_LIT -> HEX_LIT .)
    STAR            reduce using rule 74 (INT_LIT -> HEX_LIT .)
    XOR             reduce using rule 74 (INT_LIT -> HEX_LIT .)
    OR              reduce using rule 74 (INT_LIT -> HEX_LIT .)
    MINUS           reduce using rule 74 (INT_LIT -> HEX_LIT .)
    PLUS            reduce using rule 74 (INT_LIT -> HEX_LIT .)
    GE              reduce using rule 74 (INT_LIT -> HEX_LIT .)
    GT              reduce using rule 74 (INT_LIT -> HEX_LIT .)
    LE              reduce using rule 74 (INT_LIT -> HEX_LIT .)
    LT              reduce using rule 74 (INT_LIT -> HEX_LIT .)
    NE              reduce using rule 74 (INT_LIT -> HEX_LIT .)
    EQ              reduce using rule 74 (INT_LIT -> HEX_LIT .)
    NEWL            reduce using rule 74 (INT_LIT -> HEX_LIT .)
    ;               reduce using rule 74 (INT_LIT -> HEX_LIT .)
    )               reduce using rule 74 (INT_LIT -> HEX_LIT .)
    ,               reduce using rule 74 (INT_LIT -> HEX_LIT .)


state 60

    (75) INT_LIT -> OCTAL_LIT .
    LOGIC_AND       reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    LOGIC_OR        reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    SHR             reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    SHL             reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    AND             reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    MOD             reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    DIV             reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    STAR            reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    XOR             reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    OR              reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    MINUS           reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    PLUS            reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    GE              reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    GT              reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    LE              reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    LT              reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    NE              reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    EQ              reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    NEWL            reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    ;               reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    )               reduce using rule 75 (INT_LIT -> OCTAL_LIT .)
    ,               reduce using rule 75 (INT_LIT -> OCTAL_LIT .)


state 61

    (76) INT_LIT -> BINARY_LIT .
    LOGIC_AND       reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    LOGIC_OR        reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    SHR             reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    SHL             reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    AND             reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    MOD             reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    DIV             reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    STAR            reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    XOR             reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    OR              reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    MINUS           reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    PLUS            reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    GE              reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    GT              reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    LE              reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    LT              reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    NE              reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    EQ              reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    NEWL            reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    ;               reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    )               reduce using rule 76 (INT_LIT -> BINARY_LIT .)
    ,               reduce using rule 76 (INT_LIT -> BINARY_LIT .)


state 62

    (1) sourceFile -> importDecls topLevelDecls . orphanStmtList
    (12) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (14) orphanStmtList -> . statementList eos
    (15) topLevelDecl -> . declaration
    (22) statementList -> . statementList eos statement
    (23) statementList -> . statement
    (16) declaration -> . varDecl
    (24) statement -> . simpleStmt
    (17) varDecl -> . identifierList DECL_ASGN expressionList
    (25) simpleStmt -> . assignment
    (26) simpleStmt -> . expressionStmt
    (18) identifierList -> . identifierList , IDENTIFIER
    (19) identifierList -> . IDENTIFIER
    (28) assignment -> . identifierList assign_op expressionList
    (27) expressionStmt -> . expression
    (29) expression -> . expression BINARY_OP unaryExpr
    (30) expression -> . unaryExpr
    (31) unaryExpr -> . UNARY_OP unaryExpr
    (32) unaryExpr -> . primaryExpr
    (114) UNARY_OP -> . AND
    (115) UNARY_OP -> . EXCLM
    (116) UNARY_OP -> . MINUS
    (33) primaryExpr -> . conversion
    (34) primaryExpr -> . operand
    (41) conversion -> . type_ ( expression )
    (35) operand -> . ( expression )
    (36) operand -> . operandName
    (37) operand -> . literal
    (42) type_ -> . qualifiedIdent
    (43) type_ -> . typeName
    (38) operandName -> . qualifiedIdent
    (39) operandName -> . IDENTIFIER
    (40) literal -> . basicLit
    (44) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (45) typeName -> . numericType
    (46) typeName -> . STRING
    (47) typeName -> . BOOL
    (48) typeName -> . RUNE
    (63) basicLit -> . INT_LIT
    (64) basicLit -> . FLOAT_LIT
    (65) basicLit -> . DECIMAL_LIT EXPONENT
    (66) basicLit -> . FLOAT_LIT EXPONENT
    (67) basicLit -> . FALSE
    (68) basicLit -> . TRUE
    (69) basicLit -> . RUNE_LIT
    (70) basicLit -> . STRING_LIT
    (49) numericType -> . F32
    (50) numericType -> . F64
    (51) numericType -> . INT
    (52) numericType -> . ISIZE
    (53) numericType -> . I64
    (54) numericType -> . I32
    (55) numericType -> . I16
    (56) numericType -> . I8
    (57) numericType -> . UINT
    (58) numericType -> . USIZE
    (59) numericType -> . U64
    (60) numericType -> . U32
    (61) numericType -> . U16
    (62) numericType -> . U8
    (74) INT_LIT -> . HEX_LIT
    (75) INT_LIT -> . OCTAL_LIT
    (76) INT_LIT -> . BINARY_LIT
    (77) INT_LIT -> . DECIMAL_LIT
    (71) FLOAT_LIT -> . . DECIMAL_LIT
    (72) FLOAT_LIT -> . DECIMAL_LIT .
    (73) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IDENTIFIER      shift and go to state 16
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    orphanStmtList                 shift and go to state 123
    topLevelDecl                   shift and go to state 67
    statementList                  shift and go to state 7
    declaration                    shift and go to state 9
    statement                      shift and go to state 10
    varDecl                        shift and go to state 11
    simpleStmt                     shift and go to state 12
    identifierList                 shift and go to state 13
    assignment                     shift and go to state 14
    expressionStmt                 shift and go to state 15
    expression                     shift and go to state 17
    unaryExpr                      shift and go to state 18
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 63

    (4) importDecls -> importDecls importDecl . eos
    (78) eos -> . eos NEWL
    (79) eos -> . NEWL
    (80) eos -> . eos ;
    (81) eos -> . ;
    NEWL            shift and go to state 69
    ;               shift and go to state 70

    eos                            shift and go to state 124

state 64

    (17) varDecl -> identifierList . DECL_ASGN expressionList
    (18) identifierList -> identifierList . , IDENTIFIER
    DECL_ASGN       shift and go to state 78
    ,               shift and go to state 79


state 65

    (19) identifierList -> IDENTIFIER .
    DECL_ASGN       reduce using rule 19 (identifierList -> IDENTIFIER .)
    ,               reduce using rule 19 (identifierList -> IDENTIFIER .)


state 66

    (2) sourceFile -> topLevelDecls orphanStmtList .
    $end            reduce using rule 2 (sourceFile -> topLevelDecls orphanStmtList .)


state 67

    (12) topLevelDecls -> topLevelDecls topLevelDecl . eos
    (78) eos -> . eos NEWL
    (79) eos -> . NEWL
    (80) eos -> . eos ;
    (81) eos -> . ;
    NEWL            shift and go to state 69
    ;               shift and go to state 70

    eos                            shift and go to state 125

state 68

    (5) importDecls -> importDecl eos .
    (78) eos -> eos . NEWL
    (80) eos -> eos . ;
    IMPORT          reduce using rule 5 (importDecls -> importDecl eos .)
    IDENTIFIER      reduce using rule 5 (importDecls -> importDecl eos .)
    NEWL            shift and go to state 126
    ;               shift and go to state 127


state 69

    (79) eos -> NEWL .
    NEWL            reduce using rule 79 (eos -> NEWL .)
    ;               reduce using rule 79 (eos -> NEWL .)
    IMPORT          reduce using rule 79 (eos -> NEWL .)
    IDENTIFIER      reduce using rule 79 (eos -> NEWL .)
    AND             reduce using rule 79 (eos -> NEWL .)
    EXCLM           reduce using rule 79 (eos -> NEWL .)
    MINUS           reduce using rule 79 (eos -> NEWL .)
    (               reduce using rule 79 (eos -> NEWL .)
    STRING          reduce using rule 79 (eos -> NEWL .)
    BOOL            reduce using rule 79 (eos -> NEWL .)
    RUNE            reduce using rule 79 (eos -> NEWL .)
    DECIMAL_LIT     reduce using rule 79 (eos -> NEWL .)
    FALSE           reduce using rule 79 (eos -> NEWL .)
    TRUE            reduce using rule 79 (eos -> NEWL .)
    RUNE_LIT        reduce using rule 79 (eos -> NEWL .)
    STRING_LIT      reduce using rule 79 (eos -> NEWL .)
    F32             reduce using rule 79 (eos -> NEWL .)
    F64             reduce using rule 79 (eos -> NEWL .)
    INT             reduce using rule 79 (eos -> NEWL .)
    ISIZE           reduce using rule 79 (eos -> NEWL .)
    I64             reduce using rule 79 (eos -> NEWL .)
    I32             reduce using rule 79 (eos -> NEWL .)
    I16             reduce using rule 79 (eos -> NEWL .)
    I8              reduce using rule 79 (eos -> NEWL .)
    UINT            reduce using rule 79 (eos -> NEWL .)
    USIZE           reduce using rule 79 (eos -> NEWL .)
    U64             reduce using rule 79 (eos -> NEWL .)
    U32             reduce using rule 79 (eos -> NEWL .)
    U16             reduce using rule 79 (eos -> NEWL .)
    U8              reduce using rule 79 (eos -> NEWL .)
    HEX_LIT         reduce using rule 79 (eos -> NEWL .)
    OCTAL_LIT       reduce using rule 79 (eos -> NEWL .)
    BINARY_LIT      reduce using rule 79 (eos -> NEWL .)
    .               reduce using rule 79 (eos -> NEWL .)
    $end            reduce using rule 79 (eos -> NEWL .)


state 70

    (81) eos -> ; .
    NEWL            reduce using rule 81 (eos -> ; .)
    ;               reduce using rule 81 (eos -> ; .)
    IMPORT          reduce using rule 81 (eos -> ; .)
    IDENTIFIER      reduce using rule 81 (eos -> ; .)
    AND             reduce using rule 81 (eos -> ; .)
    EXCLM           reduce using rule 81 (eos -> ; .)
    MINUS           reduce using rule 81 (eos -> ; .)
    (               reduce using rule 81 (eos -> ; .)
    STRING          reduce using rule 81 (eos -> ; .)
    BOOL            reduce using rule 81 (eos -> ; .)
    RUNE            reduce using rule 81 (eos -> ; .)
    DECIMAL_LIT     reduce using rule 81 (eos -> ; .)
    FALSE           reduce using rule 81 (eos -> ; .)
    TRUE            reduce using rule 81 (eos -> ; .)
    RUNE_LIT        reduce using rule 81 (eos -> ; .)
    STRING_LIT      reduce using rule 81 (eos -> ; .)
    F32             reduce using rule 81 (eos -> ; .)
    F64             reduce using rule 81 (eos -> ; .)
    INT             reduce using rule 81 (eos -> ; .)
    ISIZE           reduce using rule 81 (eos -> ; .)
    I64             reduce using rule 81 (eos -> ; .)
    I32             reduce using rule 81 (eos -> ; .)
    I16             reduce using rule 81 (eos -> ; .)
    I8              reduce using rule 81 (eos -> ; .)
    UINT            reduce using rule 81 (eos -> ; .)
    USIZE           reduce using rule 81 (eos -> ; .)
    U64             reduce using rule 81 (eos -> ; .)
    U32             reduce using rule 81 (eos -> ; .)
    U16             reduce using rule 81 (eos -> ; .)
    U8              reduce using rule 81 (eos -> ; .)
    HEX_LIT         reduce using rule 81 (eos -> ; .)
    OCTAL_LIT       reduce using rule 81 (eos -> ; .)
    BINARY_LIT      reduce using rule 81 (eos -> ; .)
    .               reduce using rule 81 (eos -> ; .)
    $end            reduce using rule 81 (eos -> ; .)


state 71

    (13) topLevelDecls -> topLevelDecl eos .
    (78) eos -> eos . NEWL
    (80) eos -> eos . ;
    IDENTIFIER      reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    AND             reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    EXCLM           reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    MINUS           reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    (               reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    STRING          reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    BOOL            reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    RUNE            reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    DECIMAL_LIT     reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    FALSE           reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    TRUE            reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    RUNE_LIT        reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    STRING_LIT      reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    F32             reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    F64             reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    INT             reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    ISIZE           reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    I64             reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    I32             reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    I16             reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    I8              reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    UINT            reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    USIZE           reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    U64             reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    U32             reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    U16             reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    U8              reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    HEX_LIT         reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    OCTAL_LIT       reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    BINARY_LIT      reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    .               reduce using rule 13 (topLevelDecls -> topLevelDecl eos .)
    NEWL            shift and go to state 126
    ;               shift and go to state 127


state 72

    (14) orphanStmtList -> statementList eos .
    (22) statementList -> statementList eos . statement
    (78) eos -> eos . NEWL
    (80) eos -> eos . ;
    (24) statement -> . simpleStmt
    (25) simpleStmt -> . assignment
    (26) simpleStmt -> . expressionStmt
    (28) assignment -> . identifierList assign_op expressionList
    (27) expressionStmt -> . expression
    (18) identifierList -> . identifierList , IDENTIFIER
    (19) identifierList -> . IDENTIFIER
    (29) expression -> . expression BINARY_OP unaryExpr
    (30) expression -> . unaryExpr
    (31) unaryExpr -> . UNARY_OP unaryExpr
    (32) unaryExpr -> . primaryExpr
    (114) UNARY_OP -> . AND
    (115) UNARY_OP -> . EXCLM
    (116) UNARY_OP -> . MINUS
    (33) primaryExpr -> . conversion
    (34) primaryExpr -> . operand
    (41) conversion -> . type_ ( expression )
    (35) operand -> . ( expression )
    (36) operand -> . operandName
    (37) operand -> . literal
    (42) type_ -> . qualifiedIdent
    (43) type_ -> . typeName
    (38) operandName -> . qualifiedIdent
    (39) operandName -> . IDENTIFIER
    (40) literal -> . basicLit
    (44) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (45) typeName -> . numericType
    (46) typeName -> . STRING
    (47) typeName -> . BOOL
    (48) typeName -> . RUNE
    (63) basicLit -> . INT_LIT
    (64) basicLit -> . FLOAT_LIT
    (65) basicLit -> . DECIMAL_LIT EXPONENT
    (66) basicLit -> . FLOAT_LIT EXPONENT
    (67) basicLit -> . FALSE
    (68) basicLit -> . TRUE
    (69) basicLit -> . RUNE_LIT
    (70) basicLit -> . STRING_LIT
    (49) numericType -> . F32
    (50) numericType -> . F64
    (51) numericType -> . INT
    (52) numericType -> . ISIZE
    (53) numericType -> . I64
    (54) numericType -> . I32
    (55) numericType -> . I16
    (56) numericType -> . I8
    (57) numericType -> . UINT
    (58) numericType -> . USIZE
    (59) numericType -> . U64
    (60) numericType -> . U32
    (61) numericType -> . U16
    (62) numericType -> . U8
    (74) INT_LIT -> . HEX_LIT
    (75) INT_LIT -> . OCTAL_LIT
    (76) INT_LIT -> . BINARY_LIT
    (77) INT_LIT -> . DECIMAL_LIT
    (71) FLOAT_LIT -> . . DECIMAL_LIT
    (72) FLOAT_LIT -> . DECIMAL_LIT .
    (73) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 14 (orphanStmtList -> statementList eos .)
    NEWL            shift and go to state 126
    ;               shift and go to state 127
    IDENTIFIER      shift and go to state 16
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    statement                      shift and go to state 128
    simpleStmt                     shift and go to state 12
    assignment                     shift and go to state 14
    expressionStmt                 shift and go to state 15
    identifierList                 shift and go to state 129
    expression                     shift and go to state 17
    unaryExpr                      shift and go to state 18
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 73

    (6) importDecl -> IMPORT importSpec .
    NEWL            reduce using rule 6 (importDecl -> IMPORT importSpec .)
    ;               reduce using rule 6 (importDecl -> IMPORT importSpec .)


state 74

    (7) importSpec -> importPath .
    NEWL            reduce using rule 7 (importSpec -> importPath .)
    ;               reduce using rule 7 (importSpec -> importPath .)


state 75

    (8) importSpec -> IDENTIFIER . importPath
    (11) importPath -> IDENTIFIER .
    (10) importPath -> . STRING_LIT
    (11) importPath -> . IDENTIFIER
    NEWL            reduce using rule 11 (importPath -> IDENTIFIER .)
    ;               reduce using rule 11 (importPath -> IDENTIFIER .)
    STRING_LIT      shift and go to state 77
    IDENTIFIER      shift and go to state 130

    importPath                     shift and go to state 131

state 76

    (9) importSpec -> . . importPath
    (10) importPath -> . STRING_LIT
    (11) importPath -> . IDENTIFIER
    STRING_LIT      shift and go to state 77
    IDENTIFIER      shift and go to state 130

    importPath                     shift and go to state 132

state 77

    (10) importPath -> STRING_LIT .
    NEWL            reduce using rule 10 (importPath -> STRING_LIT .)
    ;               reduce using rule 10 (importPath -> STRING_LIT .)


state 78

    (17) varDecl -> identifierList DECL_ASGN . expressionList
    (20) expressionList -> . expressionList , expression
    (21) expressionList -> . expression
    (29) expression -> . expression BINARY_OP unaryExpr
    (30) expression -> . unaryExpr
    (31) unaryExpr -> . UNARY_OP unaryExpr
    (32) unaryExpr -> . primaryExpr
    (114) UNARY_OP -> . AND
    (115) UNARY_OP -> . EXCLM
    (116) UNARY_OP -> . MINUS
    (33) primaryExpr -> . conversion
    (34) primaryExpr -> . operand
    (41) conversion -> . type_ ( expression )
    (35) operand -> . ( expression )
    (36) operand -> . operandName
    (37) operand -> . literal
    (42) type_ -> . qualifiedIdent
    (43) type_ -> . typeName
    (38) operandName -> . qualifiedIdent
    (39) operandName -> . IDENTIFIER
    (40) literal -> . basicLit
    (44) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (45) typeName -> . numericType
    (46) typeName -> . STRING
    (47) typeName -> . BOOL
    (48) typeName -> . RUNE
    (63) basicLit -> . INT_LIT
    (64) basicLit -> . FLOAT_LIT
    (65) basicLit -> . DECIMAL_LIT EXPONENT
    (66) basicLit -> . FLOAT_LIT EXPONENT
    (67) basicLit -> . FALSE
    (68) basicLit -> . TRUE
    (69) basicLit -> . RUNE_LIT
    (70) basicLit -> . STRING_LIT
    (49) numericType -> . F32
    (50) numericType -> . F64
    (51) numericType -> . INT
    (52) numericType -> . ISIZE
    (53) numericType -> . I64
    (54) numericType -> . I32
    (55) numericType -> . I16
    (56) numericType -> . I8
    (57) numericType -> . UINT
    (58) numericType -> . USIZE
    (59) numericType -> . U64
    (60) numericType -> . U32
    (61) numericType -> . U16
    (62) numericType -> . U8
    (74) INT_LIT -> . HEX_LIT
    (75) INT_LIT -> . OCTAL_LIT
    (76) INT_LIT -> . BINARY_LIT
    (77) INT_LIT -> . DECIMAL_LIT
    (71) FLOAT_LIT -> . . DECIMAL_LIT
    (72) FLOAT_LIT -> . DECIMAL_LIT .
    (73) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    IDENTIFIER      shift and go to state 116
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    expressionList                 shift and go to state 133
    expression                     shift and go to state 134
    unaryExpr                      shift and go to state 18
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 79

    (18) identifierList -> identifierList , . IDENTIFIER
    IDENTIFIER      shift and go to state 135


state 80

    (28) assignment -> identifierList assign_op . expressionList
    (20) expressionList -> . expressionList , expression
    (21) expressionList -> . expression
    (29) expression -> . expression BINARY_OP unaryExpr
    (30) expression -> . unaryExpr
    (31) unaryExpr -> . UNARY_OP unaryExpr
    (32) unaryExpr -> . primaryExpr
    (114) UNARY_OP -> . AND
    (115) UNARY_OP -> . EXCLM
    (116) UNARY_OP -> . MINUS
    (33) primaryExpr -> . conversion
    (34) primaryExpr -> . operand
    (41) conversion -> . type_ ( expression )
    (35) operand -> . ( expression )
    (36) operand -> . operandName
    (37) operand -> . literal
    (42) type_ -> . qualifiedIdent
    (43) type_ -> . typeName
    (38) operandName -> . qualifiedIdent
    (39) operandName -> . IDENTIFIER
    (40) literal -> . basicLit
    (44) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (45) typeName -> . numericType
    (46) typeName -> . STRING
    (47) typeName -> . BOOL
    (48) typeName -> . RUNE
    (63) basicLit -> . INT_LIT
    (64) basicLit -> . FLOAT_LIT
    (65) basicLit -> . DECIMAL_LIT EXPONENT
    (66) basicLit -> . FLOAT_LIT EXPONENT
    (67) basicLit -> . FALSE
    (68) basicLit -> . TRUE
    (69) basicLit -> . RUNE_LIT
    (70) basicLit -> . STRING_LIT
    (49) numericType -> . F32
    (50) numericType -> . F64
    (51) numericType -> . INT
    (52) numericType -> . ISIZE
    (53) numericType -> . I64
    (54) numericType -> . I32
    (55) numericType -> . I16
    (56) numericType -> . I8
    (57) numericType -> . UINT
    (58) numericType -> . USIZE
    (59) numericType -> . U64
    (60) numericType -> . U32
    (61) numericType -> . U16
    (62) numericType -> . U8
    (74) INT_LIT -> . HEX_LIT
    (75) INT_LIT -> . OCTAL_LIT
    (76) INT_LIT -> . BINARY_LIT
    (77) INT_LIT -> . DECIMAL_LIT
    (71) FLOAT_LIT -> . . DECIMAL_LIT
    (72) FLOAT_LIT -> . DECIMAL_LIT .
    (73) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    IDENTIFIER      shift and go to state 116
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    expressionList                 shift and go to state 136
    expression                     shift and go to state 134
    unaryExpr                      shift and go to state 18
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 81

    (82) assign_op -> SHR_ASGN .
    AND             reduce using rule 82 (assign_op -> SHR_ASGN .)
    EXCLM           reduce using rule 82 (assign_op -> SHR_ASGN .)
    MINUS           reduce using rule 82 (assign_op -> SHR_ASGN .)
    (               reduce using rule 82 (assign_op -> SHR_ASGN .)
    IDENTIFIER      reduce using rule 82 (assign_op -> SHR_ASGN .)
    STRING          reduce using rule 82 (assign_op -> SHR_ASGN .)
    BOOL            reduce using rule 82 (assign_op -> SHR_ASGN .)
    RUNE            reduce using rule 82 (assign_op -> SHR_ASGN .)
    DECIMAL_LIT     reduce using rule 82 (assign_op -> SHR_ASGN .)
    FALSE           reduce using rule 82 (assign_op -> SHR_ASGN .)
    TRUE            reduce using rule 82 (assign_op -> SHR_ASGN .)
    RUNE_LIT        reduce using rule 82 (assign_op -> SHR_ASGN .)
    STRING_LIT      reduce using rule 82 (assign_op -> SHR_ASGN .)
    F32             reduce using rule 82 (assign_op -> SHR_ASGN .)
    F64             reduce using rule 82 (assign_op -> SHR_ASGN .)
    INT             reduce using rule 82 (assign_op -> SHR_ASGN .)
    ISIZE           reduce using rule 82 (assign_op -> SHR_ASGN .)
    I64             reduce using rule 82 (assign_op -> SHR_ASGN .)
    I32             reduce using rule 82 (assign_op -> SHR_ASGN .)
    I16             reduce using rule 82 (assign_op -> SHR_ASGN .)
    I8              reduce using rule 82 (assign_op -> SHR_ASGN .)
    UINT            reduce using rule 82 (assign_op -> SHR_ASGN .)
    USIZE           reduce using rule 82 (assign_op -> SHR_ASGN .)
    U64             reduce using rule 82 (assign_op -> SHR_ASGN .)
    U32             reduce using rule 82 (assign_op -> SHR_ASGN .)
    U16             reduce using rule 82 (assign_op -> SHR_ASGN .)
    U8              reduce using rule 82 (assign_op -> SHR_ASGN .)
    HEX_LIT         reduce using rule 82 (assign_op -> SHR_ASGN .)
    OCTAL_LIT       reduce using rule 82 (assign_op -> SHR_ASGN .)
    BINARY_LIT      reduce using rule 82 (assign_op -> SHR_ASGN .)
    .               reduce using rule 82 (assign_op -> SHR_ASGN .)


state 82

    (83) assign_op -> SHL_ASGN .
    AND             reduce using rule 83 (assign_op -> SHL_ASGN .)
    EXCLM           reduce using rule 83 (assign_op -> SHL_ASGN .)
    MINUS           reduce using rule 83 (assign_op -> SHL_ASGN .)
    (               reduce using rule 83 (assign_op -> SHL_ASGN .)
    IDENTIFIER      reduce using rule 83 (assign_op -> SHL_ASGN .)
    STRING          reduce using rule 83 (assign_op -> SHL_ASGN .)
    BOOL            reduce using rule 83 (assign_op -> SHL_ASGN .)
    RUNE            reduce using rule 83 (assign_op -> SHL_ASGN .)
    DECIMAL_LIT     reduce using rule 83 (assign_op -> SHL_ASGN .)
    FALSE           reduce using rule 83 (assign_op -> SHL_ASGN .)
    TRUE            reduce using rule 83 (assign_op -> SHL_ASGN .)
    RUNE_LIT        reduce using rule 83 (assign_op -> SHL_ASGN .)
    STRING_LIT      reduce using rule 83 (assign_op -> SHL_ASGN .)
    F32             reduce using rule 83 (assign_op -> SHL_ASGN .)
    F64             reduce using rule 83 (assign_op -> SHL_ASGN .)
    INT             reduce using rule 83 (assign_op -> SHL_ASGN .)
    ISIZE           reduce using rule 83 (assign_op -> SHL_ASGN .)
    I64             reduce using rule 83 (assign_op -> SHL_ASGN .)
    I32             reduce using rule 83 (assign_op -> SHL_ASGN .)
    I16             reduce using rule 83 (assign_op -> SHL_ASGN .)
    I8              reduce using rule 83 (assign_op -> SHL_ASGN .)
    UINT            reduce using rule 83 (assign_op -> SHL_ASGN .)
    USIZE           reduce using rule 83 (assign_op -> SHL_ASGN .)
    U64             reduce using rule 83 (assign_op -> SHL_ASGN .)
    U32             reduce using rule 83 (assign_op -> SHL_ASGN .)
    U16             reduce using rule 83 (assign_op -> SHL_ASGN .)
    U8              reduce using rule 83 (assign_op -> SHL_ASGN .)
    HEX_LIT         reduce using rule 83 (assign_op -> SHL_ASGN .)
    OCTAL_LIT       reduce using rule 83 (assign_op -> SHL_ASGN .)
    BINARY_LIT      reduce using rule 83 (assign_op -> SHL_ASGN .)
    .               reduce using rule 83 (assign_op -> SHL_ASGN .)


state 83

    (84) assign_op -> MOD_ASGN .
    AND             reduce using rule 84 (assign_op -> MOD_ASGN .)
    EXCLM           reduce using rule 84 (assign_op -> MOD_ASGN .)
    MINUS           reduce using rule 84 (assign_op -> MOD_ASGN .)
    (               reduce using rule 84 (assign_op -> MOD_ASGN .)
    IDENTIFIER      reduce using rule 84 (assign_op -> MOD_ASGN .)
    STRING          reduce using rule 84 (assign_op -> MOD_ASGN .)
    BOOL            reduce using rule 84 (assign_op -> MOD_ASGN .)
    RUNE            reduce using rule 84 (assign_op -> MOD_ASGN .)
    DECIMAL_LIT     reduce using rule 84 (assign_op -> MOD_ASGN .)
    FALSE           reduce using rule 84 (assign_op -> MOD_ASGN .)
    TRUE            reduce using rule 84 (assign_op -> MOD_ASGN .)
    RUNE_LIT        reduce using rule 84 (assign_op -> MOD_ASGN .)
    STRING_LIT      reduce using rule 84 (assign_op -> MOD_ASGN .)
    F32             reduce using rule 84 (assign_op -> MOD_ASGN .)
    F64             reduce using rule 84 (assign_op -> MOD_ASGN .)
    INT             reduce using rule 84 (assign_op -> MOD_ASGN .)
    ISIZE           reduce using rule 84 (assign_op -> MOD_ASGN .)
    I64             reduce using rule 84 (assign_op -> MOD_ASGN .)
    I32             reduce using rule 84 (assign_op -> MOD_ASGN .)
    I16             reduce using rule 84 (assign_op -> MOD_ASGN .)
    I8              reduce using rule 84 (assign_op -> MOD_ASGN .)
    UINT            reduce using rule 84 (assign_op -> MOD_ASGN .)
    USIZE           reduce using rule 84 (assign_op -> MOD_ASGN .)
    U64             reduce using rule 84 (assign_op -> MOD_ASGN .)
    U32             reduce using rule 84 (assign_op -> MOD_ASGN .)
    U16             reduce using rule 84 (assign_op -> MOD_ASGN .)
    U8              reduce using rule 84 (assign_op -> MOD_ASGN .)
    HEX_LIT         reduce using rule 84 (assign_op -> MOD_ASGN .)
    OCTAL_LIT       reduce using rule 84 (assign_op -> MOD_ASGN .)
    BINARY_LIT      reduce using rule 84 (assign_op -> MOD_ASGN .)
    .               reduce using rule 84 (assign_op -> MOD_ASGN .)


state 84

    (85) assign_op -> DIV_ASGN .
    AND             reduce using rule 85 (assign_op -> DIV_ASGN .)
    EXCLM           reduce using rule 85 (assign_op -> DIV_ASGN .)
    MINUS           reduce using rule 85 (assign_op -> DIV_ASGN .)
    (               reduce using rule 85 (assign_op -> DIV_ASGN .)
    IDENTIFIER      reduce using rule 85 (assign_op -> DIV_ASGN .)
    STRING          reduce using rule 85 (assign_op -> DIV_ASGN .)
    BOOL            reduce using rule 85 (assign_op -> DIV_ASGN .)
    RUNE            reduce using rule 85 (assign_op -> DIV_ASGN .)
    DECIMAL_LIT     reduce using rule 85 (assign_op -> DIV_ASGN .)
    FALSE           reduce using rule 85 (assign_op -> DIV_ASGN .)
    TRUE            reduce using rule 85 (assign_op -> DIV_ASGN .)
    RUNE_LIT        reduce using rule 85 (assign_op -> DIV_ASGN .)
    STRING_LIT      reduce using rule 85 (assign_op -> DIV_ASGN .)
    F32             reduce using rule 85 (assign_op -> DIV_ASGN .)
    F64             reduce using rule 85 (assign_op -> DIV_ASGN .)
    INT             reduce using rule 85 (assign_op -> DIV_ASGN .)
    ISIZE           reduce using rule 85 (assign_op -> DIV_ASGN .)
    I64             reduce using rule 85 (assign_op -> DIV_ASGN .)
    I32             reduce using rule 85 (assign_op -> DIV_ASGN .)
    I16             reduce using rule 85 (assign_op -> DIV_ASGN .)
    I8              reduce using rule 85 (assign_op -> DIV_ASGN .)
    UINT            reduce using rule 85 (assign_op -> DIV_ASGN .)
    USIZE           reduce using rule 85 (assign_op -> DIV_ASGN .)
    U64             reduce using rule 85 (assign_op -> DIV_ASGN .)
    U32             reduce using rule 85 (assign_op -> DIV_ASGN .)
    U16             reduce using rule 85 (assign_op -> DIV_ASGN .)
    U8              reduce using rule 85 (assign_op -> DIV_ASGN .)
    HEX_LIT         reduce using rule 85 (assign_op -> DIV_ASGN .)
    OCTAL_LIT       reduce using rule 85 (assign_op -> DIV_ASGN .)
    BINARY_LIT      reduce using rule 85 (assign_op -> DIV_ASGN .)
    .               reduce using rule 85 (assign_op -> DIV_ASGN .)


state 85

    (86) assign_op -> OR_ASGN .
    AND             reduce using rule 86 (assign_op -> OR_ASGN .)
    EXCLM           reduce using rule 86 (assign_op -> OR_ASGN .)
    MINUS           reduce using rule 86 (assign_op -> OR_ASGN .)
    (               reduce using rule 86 (assign_op -> OR_ASGN .)
    IDENTIFIER      reduce using rule 86 (assign_op -> OR_ASGN .)
    STRING          reduce using rule 86 (assign_op -> OR_ASGN .)
    BOOL            reduce using rule 86 (assign_op -> OR_ASGN .)
    RUNE            reduce using rule 86 (assign_op -> OR_ASGN .)
    DECIMAL_LIT     reduce using rule 86 (assign_op -> OR_ASGN .)
    FALSE           reduce using rule 86 (assign_op -> OR_ASGN .)
    TRUE            reduce using rule 86 (assign_op -> OR_ASGN .)
    RUNE_LIT        reduce using rule 86 (assign_op -> OR_ASGN .)
    STRING_LIT      reduce using rule 86 (assign_op -> OR_ASGN .)
    F32             reduce using rule 86 (assign_op -> OR_ASGN .)
    F64             reduce using rule 86 (assign_op -> OR_ASGN .)
    INT             reduce using rule 86 (assign_op -> OR_ASGN .)
    ISIZE           reduce using rule 86 (assign_op -> OR_ASGN .)
    I64             reduce using rule 86 (assign_op -> OR_ASGN .)
    I32             reduce using rule 86 (assign_op -> OR_ASGN .)
    I16             reduce using rule 86 (assign_op -> OR_ASGN .)
    I8              reduce using rule 86 (assign_op -> OR_ASGN .)
    UINT            reduce using rule 86 (assign_op -> OR_ASGN .)
    USIZE           reduce using rule 86 (assign_op -> OR_ASGN .)
    U64             reduce using rule 86 (assign_op -> OR_ASGN .)
    U32             reduce using rule 86 (assign_op -> OR_ASGN .)
    U16             reduce using rule 86 (assign_op -> OR_ASGN .)
    U8              reduce using rule 86 (assign_op -> OR_ASGN .)
    HEX_LIT         reduce using rule 86 (assign_op -> OR_ASGN .)
    OCTAL_LIT       reduce using rule 86 (assign_op -> OR_ASGN .)
    BINARY_LIT      reduce using rule 86 (assign_op -> OR_ASGN .)
    .               reduce using rule 86 (assign_op -> OR_ASGN .)


state 86

    (87) assign_op -> AND_ASGN .
    AND             reduce using rule 87 (assign_op -> AND_ASGN .)
    EXCLM           reduce using rule 87 (assign_op -> AND_ASGN .)
    MINUS           reduce using rule 87 (assign_op -> AND_ASGN .)
    (               reduce using rule 87 (assign_op -> AND_ASGN .)
    IDENTIFIER      reduce using rule 87 (assign_op -> AND_ASGN .)
    STRING          reduce using rule 87 (assign_op -> AND_ASGN .)
    BOOL            reduce using rule 87 (assign_op -> AND_ASGN .)
    RUNE            reduce using rule 87 (assign_op -> AND_ASGN .)
    DECIMAL_LIT     reduce using rule 87 (assign_op -> AND_ASGN .)
    FALSE           reduce using rule 87 (assign_op -> AND_ASGN .)
    TRUE            reduce using rule 87 (assign_op -> AND_ASGN .)
    RUNE_LIT        reduce using rule 87 (assign_op -> AND_ASGN .)
    STRING_LIT      reduce using rule 87 (assign_op -> AND_ASGN .)
    F32             reduce using rule 87 (assign_op -> AND_ASGN .)
    F64             reduce using rule 87 (assign_op -> AND_ASGN .)
    INT             reduce using rule 87 (assign_op -> AND_ASGN .)
    ISIZE           reduce using rule 87 (assign_op -> AND_ASGN .)
    I64             reduce using rule 87 (assign_op -> AND_ASGN .)
    I32             reduce using rule 87 (assign_op -> AND_ASGN .)
    I16             reduce using rule 87 (assign_op -> AND_ASGN .)
    I8              reduce using rule 87 (assign_op -> AND_ASGN .)
    UINT            reduce using rule 87 (assign_op -> AND_ASGN .)
    USIZE           reduce using rule 87 (assign_op -> AND_ASGN .)
    U64             reduce using rule 87 (assign_op -> AND_ASGN .)
    U32             reduce using rule 87 (assign_op -> AND_ASGN .)
    U16             reduce using rule 87 (assign_op -> AND_ASGN .)
    U8              reduce using rule 87 (assign_op -> AND_ASGN .)
    HEX_LIT         reduce using rule 87 (assign_op -> AND_ASGN .)
    OCTAL_LIT       reduce using rule 87 (assign_op -> AND_ASGN .)
    BINARY_LIT      reduce using rule 87 (assign_op -> AND_ASGN .)
    .               reduce using rule 87 (assign_op -> AND_ASGN .)


state 87

    (88) assign_op -> STAR_ASGN .
    AND             reduce using rule 88 (assign_op -> STAR_ASGN .)
    EXCLM           reduce using rule 88 (assign_op -> STAR_ASGN .)
    MINUS           reduce using rule 88 (assign_op -> STAR_ASGN .)
    (               reduce using rule 88 (assign_op -> STAR_ASGN .)
    IDENTIFIER      reduce using rule 88 (assign_op -> STAR_ASGN .)
    STRING          reduce using rule 88 (assign_op -> STAR_ASGN .)
    BOOL            reduce using rule 88 (assign_op -> STAR_ASGN .)
    RUNE            reduce using rule 88 (assign_op -> STAR_ASGN .)
    DECIMAL_LIT     reduce using rule 88 (assign_op -> STAR_ASGN .)
    FALSE           reduce using rule 88 (assign_op -> STAR_ASGN .)
    TRUE            reduce using rule 88 (assign_op -> STAR_ASGN .)
    RUNE_LIT        reduce using rule 88 (assign_op -> STAR_ASGN .)
    STRING_LIT      reduce using rule 88 (assign_op -> STAR_ASGN .)
    F32             reduce using rule 88 (assign_op -> STAR_ASGN .)
    F64             reduce using rule 88 (assign_op -> STAR_ASGN .)
    INT             reduce using rule 88 (assign_op -> STAR_ASGN .)
    ISIZE           reduce using rule 88 (assign_op -> STAR_ASGN .)
    I64             reduce using rule 88 (assign_op -> STAR_ASGN .)
    I32             reduce using rule 88 (assign_op -> STAR_ASGN .)
    I16             reduce using rule 88 (assign_op -> STAR_ASGN .)
    I8              reduce using rule 88 (assign_op -> STAR_ASGN .)
    UINT            reduce using rule 88 (assign_op -> STAR_ASGN .)
    USIZE           reduce using rule 88 (assign_op -> STAR_ASGN .)
    U64             reduce using rule 88 (assign_op -> STAR_ASGN .)
    U32             reduce using rule 88 (assign_op -> STAR_ASGN .)
    U16             reduce using rule 88 (assign_op -> STAR_ASGN .)
    U8              reduce using rule 88 (assign_op -> STAR_ASGN .)
    HEX_LIT         reduce using rule 88 (assign_op -> STAR_ASGN .)
    OCTAL_LIT       reduce using rule 88 (assign_op -> STAR_ASGN .)
    BINARY_LIT      reduce using rule 88 (assign_op -> STAR_ASGN .)
    .               reduce using rule 88 (assign_op -> STAR_ASGN .)


state 88

    (89) assign_op -> XOR_ASGN .
    AND             reduce using rule 89 (assign_op -> XOR_ASGN .)
    EXCLM           reduce using rule 89 (assign_op -> XOR_ASGN .)
    MINUS           reduce using rule 89 (assign_op -> XOR_ASGN .)
    (               reduce using rule 89 (assign_op -> XOR_ASGN .)
    IDENTIFIER      reduce using rule 89 (assign_op -> XOR_ASGN .)
    STRING          reduce using rule 89 (assign_op -> XOR_ASGN .)
    BOOL            reduce using rule 89 (assign_op -> XOR_ASGN .)
    RUNE            reduce using rule 89 (assign_op -> XOR_ASGN .)
    DECIMAL_LIT     reduce using rule 89 (assign_op -> XOR_ASGN .)
    FALSE           reduce using rule 89 (assign_op -> XOR_ASGN .)
    TRUE            reduce using rule 89 (assign_op -> XOR_ASGN .)
    RUNE_LIT        reduce using rule 89 (assign_op -> XOR_ASGN .)
    STRING_LIT      reduce using rule 89 (assign_op -> XOR_ASGN .)
    F32             reduce using rule 89 (assign_op -> XOR_ASGN .)
    F64             reduce using rule 89 (assign_op -> XOR_ASGN .)
    INT             reduce using rule 89 (assign_op -> XOR_ASGN .)
    ISIZE           reduce using rule 89 (assign_op -> XOR_ASGN .)
    I64             reduce using rule 89 (assign_op -> XOR_ASGN .)
    I32             reduce using rule 89 (assign_op -> XOR_ASGN .)
    I16             reduce using rule 89 (assign_op -> XOR_ASGN .)
    I8              reduce using rule 89 (assign_op -> XOR_ASGN .)
    UINT            reduce using rule 89 (assign_op -> XOR_ASGN .)
    USIZE           reduce using rule 89 (assign_op -> XOR_ASGN .)
    U64             reduce using rule 89 (assign_op -> XOR_ASGN .)
    U32             reduce using rule 89 (assign_op -> XOR_ASGN .)
    U16             reduce using rule 89 (assign_op -> XOR_ASGN .)
    U8              reduce using rule 89 (assign_op -> XOR_ASGN .)
    HEX_LIT         reduce using rule 89 (assign_op -> XOR_ASGN .)
    OCTAL_LIT       reduce using rule 89 (assign_op -> XOR_ASGN .)
    BINARY_LIT      reduce using rule 89 (assign_op -> XOR_ASGN .)
    .               reduce using rule 89 (assign_op -> XOR_ASGN .)


state 89

    (90) assign_op -> MINUS_ASGN .
    AND             reduce using rule 90 (assign_op -> MINUS_ASGN .)
    EXCLM           reduce using rule 90 (assign_op -> MINUS_ASGN .)
    MINUS           reduce using rule 90 (assign_op -> MINUS_ASGN .)
    (               reduce using rule 90 (assign_op -> MINUS_ASGN .)
    IDENTIFIER      reduce using rule 90 (assign_op -> MINUS_ASGN .)
    STRING          reduce using rule 90 (assign_op -> MINUS_ASGN .)
    BOOL            reduce using rule 90 (assign_op -> MINUS_ASGN .)
    RUNE            reduce using rule 90 (assign_op -> MINUS_ASGN .)
    DECIMAL_LIT     reduce using rule 90 (assign_op -> MINUS_ASGN .)
    FALSE           reduce using rule 90 (assign_op -> MINUS_ASGN .)
    TRUE            reduce using rule 90 (assign_op -> MINUS_ASGN .)
    RUNE_LIT        reduce using rule 90 (assign_op -> MINUS_ASGN .)
    STRING_LIT      reduce using rule 90 (assign_op -> MINUS_ASGN .)
    F32             reduce using rule 90 (assign_op -> MINUS_ASGN .)
    F64             reduce using rule 90 (assign_op -> MINUS_ASGN .)
    INT             reduce using rule 90 (assign_op -> MINUS_ASGN .)
    ISIZE           reduce using rule 90 (assign_op -> MINUS_ASGN .)
    I64             reduce using rule 90 (assign_op -> MINUS_ASGN .)
    I32             reduce using rule 90 (assign_op -> MINUS_ASGN .)
    I16             reduce using rule 90 (assign_op -> MINUS_ASGN .)
    I8              reduce using rule 90 (assign_op -> MINUS_ASGN .)
    UINT            reduce using rule 90 (assign_op -> MINUS_ASGN .)
    USIZE           reduce using rule 90 (assign_op -> MINUS_ASGN .)
    U64             reduce using rule 90 (assign_op -> MINUS_ASGN .)
    U32             reduce using rule 90 (assign_op -> MINUS_ASGN .)
    U16             reduce using rule 90 (assign_op -> MINUS_ASGN .)
    U8              reduce using rule 90 (assign_op -> MINUS_ASGN .)
    HEX_LIT         reduce using rule 90 (assign_op -> MINUS_ASGN .)
    OCTAL_LIT       reduce using rule 90 (assign_op -> MINUS_ASGN .)
    BINARY_LIT      reduce using rule 90 (assign_op -> MINUS_ASGN .)
    .               reduce using rule 90 (assign_op -> MINUS_ASGN .)


state 90

    (91) assign_op -> PLUS_ASGN .
    AND             reduce using rule 91 (assign_op -> PLUS_ASGN .)
    EXCLM           reduce using rule 91 (assign_op -> PLUS_ASGN .)
    MINUS           reduce using rule 91 (assign_op -> PLUS_ASGN .)
    (               reduce using rule 91 (assign_op -> PLUS_ASGN .)
    IDENTIFIER      reduce using rule 91 (assign_op -> PLUS_ASGN .)
    STRING          reduce using rule 91 (assign_op -> PLUS_ASGN .)
    BOOL            reduce using rule 91 (assign_op -> PLUS_ASGN .)
    RUNE            reduce using rule 91 (assign_op -> PLUS_ASGN .)
    DECIMAL_LIT     reduce using rule 91 (assign_op -> PLUS_ASGN .)
    FALSE           reduce using rule 91 (assign_op -> PLUS_ASGN .)
    TRUE            reduce using rule 91 (assign_op -> PLUS_ASGN .)
    RUNE_LIT        reduce using rule 91 (assign_op -> PLUS_ASGN .)
    STRING_LIT      reduce using rule 91 (assign_op -> PLUS_ASGN .)
    F32             reduce using rule 91 (assign_op -> PLUS_ASGN .)
    F64             reduce using rule 91 (assign_op -> PLUS_ASGN .)
    INT             reduce using rule 91 (assign_op -> PLUS_ASGN .)
    ISIZE           reduce using rule 91 (assign_op -> PLUS_ASGN .)
    I64             reduce using rule 91 (assign_op -> PLUS_ASGN .)
    I32             reduce using rule 91 (assign_op -> PLUS_ASGN .)
    I16             reduce using rule 91 (assign_op -> PLUS_ASGN .)
    I8              reduce using rule 91 (assign_op -> PLUS_ASGN .)
    UINT            reduce using rule 91 (assign_op -> PLUS_ASGN .)
    USIZE           reduce using rule 91 (assign_op -> PLUS_ASGN .)
    U64             reduce using rule 91 (assign_op -> PLUS_ASGN .)
    U32             reduce using rule 91 (assign_op -> PLUS_ASGN .)
    U16             reduce using rule 91 (assign_op -> PLUS_ASGN .)
    U8              reduce using rule 91 (assign_op -> PLUS_ASGN .)
    HEX_LIT         reduce using rule 91 (assign_op -> PLUS_ASGN .)
    OCTAL_LIT       reduce using rule 91 (assign_op -> PLUS_ASGN .)
    BINARY_LIT      reduce using rule 91 (assign_op -> PLUS_ASGN .)
    .               reduce using rule 91 (assign_op -> PLUS_ASGN .)


state 91

    (92) assign_op -> ASSIGN .
    AND             reduce using rule 92 (assign_op -> ASSIGN .)
    EXCLM           reduce using rule 92 (assign_op -> ASSIGN .)
    MINUS           reduce using rule 92 (assign_op -> ASSIGN .)
    (               reduce using rule 92 (assign_op -> ASSIGN .)
    IDENTIFIER      reduce using rule 92 (assign_op -> ASSIGN .)
    STRING          reduce using rule 92 (assign_op -> ASSIGN .)
    BOOL            reduce using rule 92 (assign_op -> ASSIGN .)
    RUNE            reduce using rule 92 (assign_op -> ASSIGN .)
    DECIMAL_LIT     reduce using rule 92 (assign_op -> ASSIGN .)
    FALSE           reduce using rule 92 (assign_op -> ASSIGN .)
    TRUE            reduce using rule 92 (assign_op -> ASSIGN .)
    RUNE_LIT        reduce using rule 92 (assign_op -> ASSIGN .)
    STRING_LIT      reduce using rule 92 (assign_op -> ASSIGN .)
    F32             reduce using rule 92 (assign_op -> ASSIGN .)
    F64             reduce using rule 92 (assign_op -> ASSIGN .)
    INT             reduce using rule 92 (assign_op -> ASSIGN .)
    ISIZE           reduce using rule 92 (assign_op -> ASSIGN .)
    I64             reduce using rule 92 (assign_op -> ASSIGN .)
    I32             reduce using rule 92 (assign_op -> ASSIGN .)
    I16             reduce using rule 92 (assign_op -> ASSIGN .)
    I8              reduce using rule 92 (assign_op -> ASSIGN .)
    UINT            reduce using rule 92 (assign_op -> ASSIGN .)
    USIZE           reduce using rule 92 (assign_op -> ASSIGN .)
    U64             reduce using rule 92 (assign_op -> ASSIGN .)
    U32             reduce using rule 92 (assign_op -> ASSIGN .)
    U16             reduce using rule 92 (assign_op -> ASSIGN .)
    U8              reduce using rule 92 (assign_op -> ASSIGN .)
    HEX_LIT         reduce using rule 92 (assign_op -> ASSIGN .)
    OCTAL_LIT       reduce using rule 92 (assign_op -> ASSIGN .)
    BINARY_LIT      reduce using rule 92 (assign_op -> ASSIGN .)
    .               reduce using rule 92 (assign_op -> ASSIGN .)


state 92

    (44) qualifiedIdent -> IDENTIFIER . . IDENTIFIER
    IDENTIFIER      shift and go to state 137


state 93

    (29) expression -> expression BINARY_OP . unaryExpr
    (31) unaryExpr -> . UNARY_OP unaryExpr
    (32) unaryExpr -> . primaryExpr
    (114) UNARY_OP -> . AND
    (115) UNARY_OP -> . EXCLM
    (116) UNARY_OP -> . MINUS
    (33) primaryExpr -> . conversion
    (34) primaryExpr -> . operand
    (41) conversion -> . type_ ( expression )
    (35) operand -> . ( expression )
    (36) operand -> . operandName
    (37) operand -> . literal
    (42) type_ -> . qualifiedIdent
    (43) type_ -> . typeName
    (38) operandName -> . qualifiedIdent
    (39) operandName -> . IDENTIFIER
    (40) literal -> . basicLit
    (44) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (45) typeName -> . numericType
    (46) typeName -> . STRING
    (47) typeName -> . BOOL
    (48) typeName -> . RUNE
    (63) basicLit -> . INT_LIT
    (64) basicLit -> . FLOAT_LIT
    (65) basicLit -> . DECIMAL_LIT EXPONENT
    (66) basicLit -> . FLOAT_LIT EXPONENT
    (67) basicLit -> . FALSE
    (68) basicLit -> . TRUE
    (69) basicLit -> . RUNE_LIT
    (70) basicLit -> . STRING_LIT
    (49) numericType -> . F32
    (50) numericType -> . F64
    (51) numericType -> . INT
    (52) numericType -> . ISIZE
    (53) numericType -> . I64
    (54) numericType -> . I32
    (55) numericType -> . I16
    (56) numericType -> . I8
    (57) numericType -> . UINT
    (58) numericType -> . USIZE
    (59) numericType -> . U64
    (60) numericType -> . U32
    (61) numericType -> . U16
    (62) numericType -> . U8
    (74) INT_LIT -> . HEX_LIT
    (75) INT_LIT -> . OCTAL_LIT
    (76) INT_LIT -> . BINARY_LIT
    (77) INT_LIT -> . DECIMAL_LIT
    (71) FLOAT_LIT -> . . DECIMAL_LIT
    (72) FLOAT_LIT -> . DECIMAL_LIT .
    (73) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    IDENTIFIER      shift and go to state 116
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    unaryExpr                      shift and go to state 138
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 94

    (93) BINARY_OP -> MUL_OP .
    AND             reduce using rule 93 (BINARY_OP -> MUL_OP .)
    EXCLM           reduce using rule 93 (BINARY_OP -> MUL_OP .)
    MINUS           reduce using rule 93 (BINARY_OP -> MUL_OP .)
    (               reduce using rule 93 (BINARY_OP -> MUL_OP .)
    IDENTIFIER      reduce using rule 93 (BINARY_OP -> MUL_OP .)
    STRING          reduce using rule 93 (BINARY_OP -> MUL_OP .)
    BOOL            reduce using rule 93 (BINARY_OP -> MUL_OP .)
    RUNE            reduce using rule 93 (BINARY_OP -> MUL_OP .)
    DECIMAL_LIT     reduce using rule 93 (BINARY_OP -> MUL_OP .)
    FALSE           reduce using rule 93 (BINARY_OP -> MUL_OP .)
    TRUE            reduce using rule 93 (BINARY_OP -> MUL_OP .)
    RUNE_LIT        reduce using rule 93 (BINARY_OP -> MUL_OP .)
    STRING_LIT      reduce using rule 93 (BINARY_OP -> MUL_OP .)
    F32             reduce using rule 93 (BINARY_OP -> MUL_OP .)
    F64             reduce using rule 93 (BINARY_OP -> MUL_OP .)
    INT             reduce using rule 93 (BINARY_OP -> MUL_OP .)
    ISIZE           reduce using rule 93 (BINARY_OP -> MUL_OP .)
    I64             reduce using rule 93 (BINARY_OP -> MUL_OP .)
    I32             reduce using rule 93 (BINARY_OP -> MUL_OP .)
    I16             reduce using rule 93 (BINARY_OP -> MUL_OP .)
    I8              reduce using rule 93 (BINARY_OP -> MUL_OP .)
    UINT            reduce using rule 93 (BINARY_OP -> MUL_OP .)
    USIZE           reduce using rule 93 (BINARY_OP -> MUL_OP .)
    U64             reduce using rule 93 (BINARY_OP -> MUL_OP .)
    U32             reduce using rule 93 (BINARY_OP -> MUL_OP .)
    U16             reduce using rule 93 (BINARY_OP -> MUL_OP .)
    U8              reduce using rule 93 (BINARY_OP -> MUL_OP .)
    HEX_LIT         reduce using rule 93 (BINARY_OP -> MUL_OP .)
    OCTAL_LIT       reduce using rule 93 (BINARY_OP -> MUL_OP .)
    BINARY_LIT      reduce using rule 93 (BINARY_OP -> MUL_OP .)
    .               reduce using rule 93 (BINARY_OP -> MUL_OP .)


state 95

    (94) BINARY_OP -> ADD_OP .
    AND             reduce using rule 94 (BINARY_OP -> ADD_OP .)
    EXCLM           reduce using rule 94 (BINARY_OP -> ADD_OP .)
    MINUS           reduce using rule 94 (BINARY_OP -> ADD_OP .)
    (               reduce using rule 94 (BINARY_OP -> ADD_OP .)
    IDENTIFIER      reduce using rule 94 (BINARY_OP -> ADD_OP .)
    STRING          reduce using rule 94 (BINARY_OP -> ADD_OP .)
    BOOL            reduce using rule 94 (BINARY_OP -> ADD_OP .)
    RUNE            reduce using rule 94 (BINARY_OP -> ADD_OP .)
    DECIMAL_LIT     reduce using rule 94 (BINARY_OP -> ADD_OP .)
    FALSE           reduce using rule 94 (BINARY_OP -> ADD_OP .)
    TRUE            reduce using rule 94 (BINARY_OP -> ADD_OP .)
    RUNE_LIT        reduce using rule 94 (BINARY_OP -> ADD_OP .)
    STRING_LIT      reduce using rule 94 (BINARY_OP -> ADD_OP .)
    F32             reduce using rule 94 (BINARY_OP -> ADD_OP .)
    F64             reduce using rule 94 (BINARY_OP -> ADD_OP .)
    INT             reduce using rule 94 (BINARY_OP -> ADD_OP .)
    ISIZE           reduce using rule 94 (BINARY_OP -> ADD_OP .)
    I64             reduce using rule 94 (BINARY_OP -> ADD_OP .)
    I32             reduce using rule 94 (BINARY_OP -> ADD_OP .)
    I16             reduce using rule 94 (BINARY_OP -> ADD_OP .)
    I8              reduce using rule 94 (BINARY_OP -> ADD_OP .)
    UINT            reduce using rule 94 (BINARY_OP -> ADD_OP .)
    USIZE           reduce using rule 94 (BINARY_OP -> ADD_OP .)
    U64             reduce using rule 94 (BINARY_OP -> ADD_OP .)
    U32             reduce using rule 94 (BINARY_OP -> ADD_OP .)
    U16             reduce using rule 94 (BINARY_OP -> ADD_OP .)
    U8              reduce using rule 94 (BINARY_OP -> ADD_OP .)
    HEX_LIT         reduce using rule 94 (BINARY_OP -> ADD_OP .)
    OCTAL_LIT       reduce using rule 94 (BINARY_OP -> ADD_OP .)
    BINARY_LIT      reduce using rule 94 (BINARY_OP -> ADD_OP .)
    .               reduce using rule 94 (BINARY_OP -> ADD_OP .)


state 96

    (95) BINARY_OP -> REL_OP .
    AND             reduce using rule 95 (BINARY_OP -> REL_OP .)
    EXCLM           reduce using rule 95 (BINARY_OP -> REL_OP .)
    MINUS           reduce using rule 95 (BINARY_OP -> REL_OP .)
    (               reduce using rule 95 (BINARY_OP -> REL_OP .)
    IDENTIFIER      reduce using rule 95 (BINARY_OP -> REL_OP .)
    STRING          reduce using rule 95 (BINARY_OP -> REL_OP .)
    BOOL            reduce using rule 95 (BINARY_OP -> REL_OP .)
    RUNE            reduce using rule 95 (BINARY_OP -> REL_OP .)
    DECIMAL_LIT     reduce using rule 95 (BINARY_OP -> REL_OP .)
    FALSE           reduce using rule 95 (BINARY_OP -> REL_OP .)
    TRUE            reduce using rule 95 (BINARY_OP -> REL_OP .)
    RUNE_LIT        reduce using rule 95 (BINARY_OP -> REL_OP .)
    STRING_LIT      reduce using rule 95 (BINARY_OP -> REL_OP .)
    F32             reduce using rule 95 (BINARY_OP -> REL_OP .)
    F64             reduce using rule 95 (BINARY_OP -> REL_OP .)
    INT             reduce using rule 95 (BINARY_OP -> REL_OP .)
    ISIZE           reduce using rule 95 (BINARY_OP -> REL_OP .)
    I64             reduce using rule 95 (BINARY_OP -> REL_OP .)
    I32             reduce using rule 95 (BINARY_OP -> REL_OP .)
    I16             reduce using rule 95 (BINARY_OP -> REL_OP .)
    I8              reduce using rule 95 (BINARY_OP -> REL_OP .)
    UINT            reduce using rule 95 (BINARY_OP -> REL_OP .)
    USIZE           reduce using rule 95 (BINARY_OP -> REL_OP .)
    U64             reduce using rule 95 (BINARY_OP -> REL_OP .)
    U32             reduce using rule 95 (BINARY_OP -> REL_OP .)
    U16             reduce using rule 95 (BINARY_OP -> REL_OP .)
    U8              reduce using rule 95 (BINARY_OP -> REL_OP .)
    HEX_LIT         reduce using rule 95 (BINARY_OP -> REL_OP .)
    OCTAL_LIT       reduce using rule 95 (BINARY_OP -> REL_OP .)
    BINARY_LIT      reduce using rule 95 (BINARY_OP -> REL_OP .)
    .               reduce using rule 95 (BINARY_OP -> REL_OP .)


state 97

    (96) BINARY_OP -> LOGIC_AND .
    AND             reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    EXCLM           reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    MINUS           reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    (               reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    IDENTIFIER      reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    STRING          reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    BOOL            reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    RUNE            reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    DECIMAL_LIT     reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    FALSE           reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    TRUE            reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    RUNE_LIT        reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    STRING_LIT      reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    F32             reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    F64             reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    INT             reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    ISIZE           reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    I64             reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    I32             reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    I16             reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    I8              reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    UINT            reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    USIZE           reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    U64             reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    U32             reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    U16             reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    U8              reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    HEX_LIT         reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    OCTAL_LIT       reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    BINARY_LIT      reduce using rule 96 (BINARY_OP -> LOGIC_AND .)
    .               reduce using rule 96 (BINARY_OP -> LOGIC_AND .)


state 98

    (97) BINARY_OP -> LOGIC_OR .
    AND             reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    EXCLM           reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    MINUS           reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    (               reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    IDENTIFIER      reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    STRING          reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    BOOL            reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    RUNE            reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    DECIMAL_LIT     reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    FALSE           reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    TRUE            reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    RUNE_LIT        reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    STRING_LIT      reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    F32             reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    F64             reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    INT             reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    ISIZE           reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    I64             reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    I32             reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    I16             reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    I8              reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    UINT            reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    USIZE           reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    U64             reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    U32             reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    U16             reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    U8              reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    HEX_LIT         reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    OCTAL_LIT       reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    BINARY_LIT      reduce using rule 97 (BINARY_OP -> LOGIC_OR .)
    .               reduce using rule 97 (BINARY_OP -> LOGIC_OR .)


state 99

    (108) MUL_OP -> SHR .
    AND             reduce using rule 108 (MUL_OP -> SHR .)
    EXCLM           reduce using rule 108 (MUL_OP -> SHR .)
    MINUS           reduce using rule 108 (MUL_OP -> SHR .)
    (               reduce using rule 108 (MUL_OP -> SHR .)
    IDENTIFIER      reduce using rule 108 (MUL_OP -> SHR .)
    STRING          reduce using rule 108 (MUL_OP -> SHR .)
    BOOL            reduce using rule 108 (MUL_OP -> SHR .)
    RUNE            reduce using rule 108 (MUL_OP -> SHR .)
    DECIMAL_LIT     reduce using rule 108 (MUL_OP -> SHR .)
    FALSE           reduce using rule 108 (MUL_OP -> SHR .)
    TRUE            reduce using rule 108 (MUL_OP -> SHR .)
    RUNE_LIT        reduce using rule 108 (MUL_OP -> SHR .)
    STRING_LIT      reduce using rule 108 (MUL_OP -> SHR .)
    F32             reduce using rule 108 (MUL_OP -> SHR .)
    F64             reduce using rule 108 (MUL_OP -> SHR .)
    INT             reduce using rule 108 (MUL_OP -> SHR .)
    ISIZE           reduce using rule 108 (MUL_OP -> SHR .)
    I64             reduce using rule 108 (MUL_OP -> SHR .)
    I32             reduce using rule 108 (MUL_OP -> SHR .)
    I16             reduce using rule 108 (MUL_OP -> SHR .)
    I8              reduce using rule 108 (MUL_OP -> SHR .)
    UINT            reduce using rule 108 (MUL_OP -> SHR .)
    USIZE           reduce using rule 108 (MUL_OP -> SHR .)
    U64             reduce using rule 108 (MUL_OP -> SHR .)
    U32             reduce using rule 108 (MUL_OP -> SHR .)
    U16             reduce using rule 108 (MUL_OP -> SHR .)
    U8              reduce using rule 108 (MUL_OP -> SHR .)
    HEX_LIT         reduce using rule 108 (MUL_OP -> SHR .)
    OCTAL_LIT       reduce using rule 108 (MUL_OP -> SHR .)
    BINARY_LIT      reduce using rule 108 (MUL_OP -> SHR .)
    .               reduce using rule 108 (MUL_OP -> SHR .)


state 100

    (109) MUL_OP -> SHL .
    AND             reduce using rule 109 (MUL_OP -> SHL .)
    EXCLM           reduce using rule 109 (MUL_OP -> SHL .)
    MINUS           reduce using rule 109 (MUL_OP -> SHL .)
    (               reduce using rule 109 (MUL_OP -> SHL .)
    IDENTIFIER      reduce using rule 109 (MUL_OP -> SHL .)
    STRING          reduce using rule 109 (MUL_OP -> SHL .)
    BOOL            reduce using rule 109 (MUL_OP -> SHL .)
    RUNE            reduce using rule 109 (MUL_OP -> SHL .)
    DECIMAL_LIT     reduce using rule 109 (MUL_OP -> SHL .)
    FALSE           reduce using rule 109 (MUL_OP -> SHL .)
    TRUE            reduce using rule 109 (MUL_OP -> SHL .)
    RUNE_LIT        reduce using rule 109 (MUL_OP -> SHL .)
    STRING_LIT      reduce using rule 109 (MUL_OP -> SHL .)
    F32             reduce using rule 109 (MUL_OP -> SHL .)
    F64             reduce using rule 109 (MUL_OP -> SHL .)
    INT             reduce using rule 109 (MUL_OP -> SHL .)
    ISIZE           reduce using rule 109 (MUL_OP -> SHL .)
    I64             reduce using rule 109 (MUL_OP -> SHL .)
    I32             reduce using rule 109 (MUL_OP -> SHL .)
    I16             reduce using rule 109 (MUL_OP -> SHL .)
    I8              reduce using rule 109 (MUL_OP -> SHL .)
    UINT            reduce using rule 109 (MUL_OP -> SHL .)
    USIZE           reduce using rule 109 (MUL_OP -> SHL .)
    U64             reduce using rule 109 (MUL_OP -> SHL .)
    U32             reduce using rule 109 (MUL_OP -> SHL .)
    U16             reduce using rule 109 (MUL_OP -> SHL .)
    U8              reduce using rule 109 (MUL_OP -> SHL .)
    HEX_LIT         reduce using rule 109 (MUL_OP -> SHL .)
    OCTAL_LIT       reduce using rule 109 (MUL_OP -> SHL .)
    BINARY_LIT      reduce using rule 109 (MUL_OP -> SHL .)
    .               reduce using rule 109 (MUL_OP -> SHL .)


state 101

    (110) MUL_OP -> AND .
    AND             reduce using rule 110 (MUL_OP -> AND .)
    EXCLM           reduce using rule 110 (MUL_OP -> AND .)
    MINUS           reduce using rule 110 (MUL_OP -> AND .)
    (               reduce using rule 110 (MUL_OP -> AND .)
    IDENTIFIER      reduce using rule 110 (MUL_OP -> AND .)
    STRING          reduce using rule 110 (MUL_OP -> AND .)
    BOOL            reduce using rule 110 (MUL_OP -> AND .)
    RUNE            reduce using rule 110 (MUL_OP -> AND .)
    DECIMAL_LIT     reduce using rule 110 (MUL_OP -> AND .)
    FALSE           reduce using rule 110 (MUL_OP -> AND .)
    TRUE            reduce using rule 110 (MUL_OP -> AND .)
    RUNE_LIT        reduce using rule 110 (MUL_OP -> AND .)
    STRING_LIT      reduce using rule 110 (MUL_OP -> AND .)
    F32             reduce using rule 110 (MUL_OP -> AND .)
    F64             reduce using rule 110 (MUL_OP -> AND .)
    INT             reduce using rule 110 (MUL_OP -> AND .)
    ISIZE           reduce using rule 110 (MUL_OP -> AND .)
    I64             reduce using rule 110 (MUL_OP -> AND .)
    I32             reduce using rule 110 (MUL_OP -> AND .)
    I16             reduce using rule 110 (MUL_OP -> AND .)
    I8              reduce using rule 110 (MUL_OP -> AND .)
    UINT            reduce using rule 110 (MUL_OP -> AND .)
    USIZE           reduce using rule 110 (MUL_OP -> AND .)
    U64             reduce using rule 110 (MUL_OP -> AND .)
    U32             reduce using rule 110 (MUL_OP -> AND .)
    U16             reduce using rule 110 (MUL_OP -> AND .)
    U8              reduce using rule 110 (MUL_OP -> AND .)
    HEX_LIT         reduce using rule 110 (MUL_OP -> AND .)
    OCTAL_LIT       reduce using rule 110 (MUL_OP -> AND .)
    BINARY_LIT      reduce using rule 110 (MUL_OP -> AND .)
    .               reduce using rule 110 (MUL_OP -> AND .)


state 102

    (111) MUL_OP -> MOD .
    AND             reduce using rule 111 (MUL_OP -> MOD .)
    EXCLM           reduce using rule 111 (MUL_OP -> MOD .)
    MINUS           reduce using rule 111 (MUL_OP -> MOD .)
    (               reduce using rule 111 (MUL_OP -> MOD .)
    IDENTIFIER      reduce using rule 111 (MUL_OP -> MOD .)
    STRING          reduce using rule 111 (MUL_OP -> MOD .)
    BOOL            reduce using rule 111 (MUL_OP -> MOD .)
    RUNE            reduce using rule 111 (MUL_OP -> MOD .)
    DECIMAL_LIT     reduce using rule 111 (MUL_OP -> MOD .)
    FALSE           reduce using rule 111 (MUL_OP -> MOD .)
    TRUE            reduce using rule 111 (MUL_OP -> MOD .)
    RUNE_LIT        reduce using rule 111 (MUL_OP -> MOD .)
    STRING_LIT      reduce using rule 111 (MUL_OP -> MOD .)
    F32             reduce using rule 111 (MUL_OP -> MOD .)
    F64             reduce using rule 111 (MUL_OP -> MOD .)
    INT             reduce using rule 111 (MUL_OP -> MOD .)
    ISIZE           reduce using rule 111 (MUL_OP -> MOD .)
    I64             reduce using rule 111 (MUL_OP -> MOD .)
    I32             reduce using rule 111 (MUL_OP -> MOD .)
    I16             reduce using rule 111 (MUL_OP -> MOD .)
    I8              reduce using rule 111 (MUL_OP -> MOD .)
    UINT            reduce using rule 111 (MUL_OP -> MOD .)
    USIZE           reduce using rule 111 (MUL_OP -> MOD .)
    U64             reduce using rule 111 (MUL_OP -> MOD .)
    U32             reduce using rule 111 (MUL_OP -> MOD .)
    U16             reduce using rule 111 (MUL_OP -> MOD .)
    U8              reduce using rule 111 (MUL_OP -> MOD .)
    HEX_LIT         reduce using rule 111 (MUL_OP -> MOD .)
    OCTAL_LIT       reduce using rule 111 (MUL_OP -> MOD .)
    BINARY_LIT      reduce using rule 111 (MUL_OP -> MOD .)
    .               reduce using rule 111 (MUL_OP -> MOD .)


state 103

    (112) MUL_OP -> DIV .
    AND             reduce using rule 112 (MUL_OP -> DIV .)
    EXCLM           reduce using rule 112 (MUL_OP -> DIV .)
    MINUS           reduce using rule 112 (MUL_OP -> DIV .)
    (               reduce using rule 112 (MUL_OP -> DIV .)
    IDENTIFIER      reduce using rule 112 (MUL_OP -> DIV .)
    STRING          reduce using rule 112 (MUL_OP -> DIV .)
    BOOL            reduce using rule 112 (MUL_OP -> DIV .)
    RUNE            reduce using rule 112 (MUL_OP -> DIV .)
    DECIMAL_LIT     reduce using rule 112 (MUL_OP -> DIV .)
    FALSE           reduce using rule 112 (MUL_OP -> DIV .)
    TRUE            reduce using rule 112 (MUL_OP -> DIV .)
    RUNE_LIT        reduce using rule 112 (MUL_OP -> DIV .)
    STRING_LIT      reduce using rule 112 (MUL_OP -> DIV .)
    F32             reduce using rule 112 (MUL_OP -> DIV .)
    F64             reduce using rule 112 (MUL_OP -> DIV .)
    INT             reduce using rule 112 (MUL_OP -> DIV .)
    ISIZE           reduce using rule 112 (MUL_OP -> DIV .)
    I64             reduce using rule 112 (MUL_OP -> DIV .)
    I32             reduce using rule 112 (MUL_OP -> DIV .)
    I16             reduce using rule 112 (MUL_OP -> DIV .)
    I8              reduce using rule 112 (MUL_OP -> DIV .)
    UINT            reduce using rule 112 (MUL_OP -> DIV .)
    USIZE           reduce using rule 112 (MUL_OP -> DIV .)
    U64             reduce using rule 112 (MUL_OP -> DIV .)
    U32             reduce using rule 112 (MUL_OP -> DIV .)
    U16             reduce using rule 112 (MUL_OP -> DIV .)
    U8              reduce using rule 112 (MUL_OP -> DIV .)
    HEX_LIT         reduce using rule 112 (MUL_OP -> DIV .)
    OCTAL_LIT       reduce using rule 112 (MUL_OP -> DIV .)
    BINARY_LIT      reduce using rule 112 (MUL_OP -> DIV .)
    .               reduce using rule 112 (MUL_OP -> DIV .)


state 104

    (113) MUL_OP -> STAR .
    AND             reduce using rule 113 (MUL_OP -> STAR .)
    EXCLM           reduce using rule 113 (MUL_OP -> STAR .)
    MINUS           reduce using rule 113 (MUL_OP -> STAR .)
    (               reduce using rule 113 (MUL_OP -> STAR .)
    IDENTIFIER      reduce using rule 113 (MUL_OP -> STAR .)
    STRING          reduce using rule 113 (MUL_OP -> STAR .)
    BOOL            reduce using rule 113 (MUL_OP -> STAR .)
    RUNE            reduce using rule 113 (MUL_OP -> STAR .)
    DECIMAL_LIT     reduce using rule 113 (MUL_OP -> STAR .)
    FALSE           reduce using rule 113 (MUL_OP -> STAR .)
    TRUE            reduce using rule 113 (MUL_OP -> STAR .)
    RUNE_LIT        reduce using rule 113 (MUL_OP -> STAR .)
    STRING_LIT      reduce using rule 113 (MUL_OP -> STAR .)
    F32             reduce using rule 113 (MUL_OP -> STAR .)
    F64             reduce using rule 113 (MUL_OP -> STAR .)
    INT             reduce using rule 113 (MUL_OP -> STAR .)
    ISIZE           reduce using rule 113 (MUL_OP -> STAR .)
    I64             reduce using rule 113 (MUL_OP -> STAR .)
    I32             reduce using rule 113 (MUL_OP -> STAR .)
    I16             reduce using rule 113 (MUL_OP -> STAR .)
    I8              reduce using rule 113 (MUL_OP -> STAR .)
    UINT            reduce using rule 113 (MUL_OP -> STAR .)
    USIZE           reduce using rule 113 (MUL_OP -> STAR .)
    U64             reduce using rule 113 (MUL_OP -> STAR .)
    U32             reduce using rule 113 (MUL_OP -> STAR .)
    U16             reduce using rule 113 (MUL_OP -> STAR .)
    U8              reduce using rule 113 (MUL_OP -> STAR .)
    HEX_LIT         reduce using rule 113 (MUL_OP -> STAR .)
    OCTAL_LIT       reduce using rule 113 (MUL_OP -> STAR .)
    BINARY_LIT      reduce using rule 113 (MUL_OP -> STAR .)
    .               reduce using rule 113 (MUL_OP -> STAR .)


state 105

    (104) ADD_OP -> XOR .
    AND             reduce using rule 104 (ADD_OP -> XOR .)
    EXCLM           reduce using rule 104 (ADD_OP -> XOR .)
    MINUS           reduce using rule 104 (ADD_OP -> XOR .)
    (               reduce using rule 104 (ADD_OP -> XOR .)
    IDENTIFIER      reduce using rule 104 (ADD_OP -> XOR .)
    STRING          reduce using rule 104 (ADD_OP -> XOR .)
    BOOL            reduce using rule 104 (ADD_OP -> XOR .)
    RUNE            reduce using rule 104 (ADD_OP -> XOR .)
    DECIMAL_LIT     reduce using rule 104 (ADD_OP -> XOR .)
    FALSE           reduce using rule 104 (ADD_OP -> XOR .)
    TRUE            reduce using rule 104 (ADD_OP -> XOR .)
    RUNE_LIT        reduce using rule 104 (ADD_OP -> XOR .)
    STRING_LIT      reduce using rule 104 (ADD_OP -> XOR .)
    F32             reduce using rule 104 (ADD_OP -> XOR .)
    F64             reduce using rule 104 (ADD_OP -> XOR .)
    INT             reduce using rule 104 (ADD_OP -> XOR .)
    ISIZE           reduce using rule 104 (ADD_OP -> XOR .)
    I64             reduce using rule 104 (ADD_OP -> XOR .)
    I32             reduce using rule 104 (ADD_OP -> XOR .)
    I16             reduce using rule 104 (ADD_OP -> XOR .)
    I8              reduce using rule 104 (ADD_OP -> XOR .)
    UINT            reduce using rule 104 (ADD_OP -> XOR .)
    USIZE           reduce using rule 104 (ADD_OP -> XOR .)
    U64             reduce using rule 104 (ADD_OP -> XOR .)
    U32             reduce using rule 104 (ADD_OP -> XOR .)
    U16             reduce using rule 104 (ADD_OP -> XOR .)
    U8              reduce using rule 104 (ADD_OP -> XOR .)
    HEX_LIT         reduce using rule 104 (ADD_OP -> XOR .)
    OCTAL_LIT       reduce using rule 104 (ADD_OP -> XOR .)
    BINARY_LIT      reduce using rule 104 (ADD_OP -> XOR .)
    .               reduce using rule 104 (ADD_OP -> XOR .)


state 106

    (105) ADD_OP -> OR .
    AND             reduce using rule 105 (ADD_OP -> OR .)
    EXCLM           reduce using rule 105 (ADD_OP -> OR .)
    MINUS           reduce using rule 105 (ADD_OP -> OR .)
    (               reduce using rule 105 (ADD_OP -> OR .)
    IDENTIFIER      reduce using rule 105 (ADD_OP -> OR .)
    STRING          reduce using rule 105 (ADD_OP -> OR .)
    BOOL            reduce using rule 105 (ADD_OP -> OR .)
    RUNE            reduce using rule 105 (ADD_OP -> OR .)
    DECIMAL_LIT     reduce using rule 105 (ADD_OP -> OR .)
    FALSE           reduce using rule 105 (ADD_OP -> OR .)
    TRUE            reduce using rule 105 (ADD_OP -> OR .)
    RUNE_LIT        reduce using rule 105 (ADD_OP -> OR .)
    STRING_LIT      reduce using rule 105 (ADD_OP -> OR .)
    F32             reduce using rule 105 (ADD_OP -> OR .)
    F64             reduce using rule 105 (ADD_OP -> OR .)
    INT             reduce using rule 105 (ADD_OP -> OR .)
    ISIZE           reduce using rule 105 (ADD_OP -> OR .)
    I64             reduce using rule 105 (ADD_OP -> OR .)
    I32             reduce using rule 105 (ADD_OP -> OR .)
    I16             reduce using rule 105 (ADD_OP -> OR .)
    I8              reduce using rule 105 (ADD_OP -> OR .)
    UINT            reduce using rule 105 (ADD_OP -> OR .)
    USIZE           reduce using rule 105 (ADD_OP -> OR .)
    U64             reduce using rule 105 (ADD_OP -> OR .)
    U32             reduce using rule 105 (ADD_OP -> OR .)
    U16             reduce using rule 105 (ADD_OP -> OR .)
    U8              reduce using rule 105 (ADD_OP -> OR .)
    HEX_LIT         reduce using rule 105 (ADD_OP -> OR .)
    OCTAL_LIT       reduce using rule 105 (ADD_OP -> OR .)
    BINARY_LIT      reduce using rule 105 (ADD_OP -> OR .)
    .               reduce using rule 105 (ADD_OP -> OR .)


state 107

    (106) ADD_OP -> MINUS .
    AND             reduce using rule 106 (ADD_OP -> MINUS .)
    EXCLM           reduce using rule 106 (ADD_OP -> MINUS .)
    MINUS           reduce using rule 106 (ADD_OP -> MINUS .)
    (               reduce using rule 106 (ADD_OP -> MINUS .)
    IDENTIFIER      reduce using rule 106 (ADD_OP -> MINUS .)
    STRING          reduce using rule 106 (ADD_OP -> MINUS .)
    BOOL            reduce using rule 106 (ADD_OP -> MINUS .)
    RUNE            reduce using rule 106 (ADD_OP -> MINUS .)
    DECIMAL_LIT     reduce using rule 106 (ADD_OP -> MINUS .)
    FALSE           reduce using rule 106 (ADD_OP -> MINUS .)
    TRUE            reduce using rule 106 (ADD_OP -> MINUS .)
    RUNE_LIT        reduce using rule 106 (ADD_OP -> MINUS .)
    STRING_LIT      reduce using rule 106 (ADD_OP -> MINUS .)
    F32             reduce using rule 106 (ADD_OP -> MINUS .)
    F64             reduce using rule 106 (ADD_OP -> MINUS .)
    INT             reduce using rule 106 (ADD_OP -> MINUS .)
    ISIZE           reduce using rule 106 (ADD_OP -> MINUS .)
    I64             reduce using rule 106 (ADD_OP -> MINUS .)
    I32             reduce using rule 106 (ADD_OP -> MINUS .)
    I16             reduce using rule 106 (ADD_OP -> MINUS .)
    I8              reduce using rule 106 (ADD_OP -> MINUS .)
    UINT            reduce using rule 106 (ADD_OP -> MINUS .)
    USIZE           reduce using rule 106 (ADD_OP -> MINUS .)
    U64             reduce using rule 106 (ADD_OP -> MINUS .)
    U32             reduce using rule 106 (ADD_OP -> MINUS .)
    U16             reduce using rule 106 (ADD_OP -> MINUS .)
    U8              reduce using rule 106 (ADD_OP -> MINUS .)
    HEX_LIT         reduce using rule 106 (ADD_OP -> MINUS .)
    OCTAL_LIT       reduce using rule 106 (ADD_OP -> MINUS .)
    BINARY_LIT      reduce using rule 106 (ADD_OP -> MINUS .)
    .               reduce using rule 106 (ADD_OP -> MINUS .)


state 108

    (107) ADD_OP -> PLUS .
    AND             reduce using rule 107 (ADD_OP -> PLUS .)
    EXCLM           reduce using rule 107 (ADD_OP -> PLUS .)
    MINUS           reduce using rule 107 (ADD_OP -> PLUS .)
    (               reduce using rule 107 (ADD_OP -> PLUS .)
    IDENTIFIER      reduce using rule 107 (ADD_OP -> PLUS .)
    STRING          reduce using rule 107 (ADD_OP -> PLUS .)
    BOOL            reduce using rule 107 (ADD_OP -> PLUS .)
    RUNE            reduce using rule 107 (ADD_OP -> PLUS .)
    DECIMAL_LIT     reduce using rule 107 (ADD_OP -> PLUS .)
    FALSE           reduce using rule 107 (ADD_OP -> PLUS .)
    TRUE            reduce using rule 107 (ADD_OP -> PLUS .)
    RUNE_LIT        reduce using rule 107 (ADD_OP -> PLUS .)
    STRING_LIT      reduce using rule 107 (ADD_OP -> PLUS .)
    F32             reduce using rule 107 (ADD_OP -> PLUS .)
    F64             reduce using rule 107 (ADD_OP -> PLUS .)
    INT             reduce using rule 107 (ADD_OP -> PLUS .)
    ISIZE           reduce using rule 107 (ADD_OP -> PLUS .)
    I64             reduce using rule 107 (ADD_OP -> PLUS .)
    I32             reduce using rule 107 (ADD_OP -> PLUS .)
    I16             reduce using rule 107 (ADD_OP -> PLUS .)
    I8              reduce using rule 107 (ADD_OP -> PLUS .)
    UINT            reduce using rule 107 (ADD_OP -> PLUS .)
    USIZE           reduce using rule 107 (ADD_OP -> PLUS .)
    U64             reduce using rule 107 (ADD_OP -> PLUS .)
    U32             reduce using rule 107 (ADD_OP -> PLUS .)
    U16             reduce using rule 107 (ADD_OP -> PLUS .)
    U8              reduce using rule 107 (ADD_OP -> PLUS .)
    HEX_LIT         reduce using rule 107 (ADD_OP -> PLUS .)
    OCTAL_LIT       reduce using rule 107 (ADD_OP -> PLUS .)
    BINARY_LIT      reduce using rule 107 (ADD_OP -> PLUS .)
    .               reduce using rule 107 (ADD_OP -> PLUS .)


state 109

    (98) REL_OP -> GE .
    AND             reduce using rule 98 (REL_OP -> GE .)
    EXCLM           reduce using rule 98 (REL_OP -> GE .)
    MINUS           reduce using rule 98 (REL_OP -> GE .)
    (               reduce using rule 98 (REL_OP -> GE .)
    IDENTIFIER      reduce using rule 98 (REL_OP -> GE .)
    STRING          reduce using rule 98 (REL_OP -> GE .)
    BOOL            reduce using rule 98 (REL_OP -> GE .)
    RUNE            reduce using rule 98 (REL_OP -> GE .)
    DECIMAL_LIT     reduce using rule 98 (REL_OP -> GE .)
    FALSE           reduce using rule 98 (REL_OP -> GE .)
    TRUE            reduce using rule 98 (REL_OP -> GE .)
    RUNE_LIT        reduce using rule 98 (REL_OP -> GE .)
    STRING_LIT      reduce using rule 98 (REL_OP -> GE .)
    F32             reduce using rule 98 (REL_OP -> GE .)
    F64             reduce using rule 98 (REL_OP -> GE .)
    INT             reduce using rule 98 (REL_OP -> GE .)
    ISIZE           reduce using rule 98 (REL_OP -> GE .)
    I64             reduce using rule 98 (REL_OP -> GE .)
    I32             reduce using rule 98 (REL_OP -> GE .)
    I16             reduce using rule 98 (REL_OP -> GE .)
    I8              reduce using rule 98 (REL_OP -> GE .)
    UINT            reduce using rule 98 (REL_OP -> GE .)
    USIZE           reduce using rule 98 (REL_OP -> GE .)
    U64             reduce using rule 98 (REL_OP -> GE .)
    U32             reduce using rule 98 (REL_OP -> GE .)
    U16             reduce using rule 98 (REL_OP -> GE .)
    U8              reduce using rule 98 (REL_OP -> GE .)
    HEX_LIT         reduce using rule 98 (REL_OP -> GE .)
    OCTAL_LIT       reduce using rule 98 (REL_OP -> GE .)
    BINARY_LIT      reduce using rule 98 (REL_OP -> GE .)
    .               reduce using rule 98 (REL_OP -> GE .)


state 110

    (99) REL_OP -> GT .
    AND             reduce using rule 99 (REL_OP -> GT .)
    EXCLM           reduce using rule 99 (REL_OP -> GT .)
    MINUS           reduce using rule 99 (REL_OP -> GT .)
    (               reduce using rule 99 (REL_OP -> GT .)
    IDENTIFIER      reduce using rule 99 (REL_OP -> GT .)
    STRING          reduce using rule 99 (REL_OP -> GT .)
    BOOL            reduce using rule 99 (REL_OP -> GT .)
    RUNE            reduce using rule 99 (REL_OP -> GT .)
    DECIMAL_LIT     reduce using rule 99 (REL_OP -> GT .)
    FALSE           reduce using rule 99 (REL_OP -> GT .)
    TRUE            reduce using rule 99 (REL_OP -> GT .)
    RUNE_LIT        reduce using rule 99 (REL_OP -> GT .)
    STRING_LIT      reduce using rule 99 (REL_OP -> GT .)
    F32             reduce using rule 99 (REL_OP -> GT .)
    F64             reduce using rule 99 (REL_OP -> GT .)
    INT             reduce using rule 99 (REL_OP -> GT .)
    ISIZE           reduce using rule 99 (REL_OP -> GT .)
    I64             reduce using rule 99 (REL_OP -> GT .)
    I32             reduce using rule 99 (REL_OP -> GT .)
    I16             reduce using rule 99 (REL_OP -> GT .)
    I8              reduce using rule 99 (REL_OP -> GT .)
    UINT            reduce using rule 99 (REL_OP -> GT .)
    USIZE           reduce using rule 99 (REL_OP -> GT .)
    U64             reduce using rule 99 (REL_OP -> GT .)
    U32             reduce using rule 99 (REL_OP -> GT .)
    U16             reduce using rule 99 (REL_OP -> GT .)
    U8              reduce using rule 99 (REL_OP -> GT .)
    HEX_LIT         reduce using rule 99 (REL_OP -> GT .)
    OCTAL_LIT       reduce using rule 99 (REL_OP -> GT .)
    BINARY_LIT      reduce using rule 99 (REL_OP -> GT .)
    .               reduce using rule 99 (REL_OP -> GT .)


state 111

    (100) REL_OP -> LE .
    AND             reduce using rule 100 (REL_OP -> LE .)
    EXCLM           reduce using rule 100 (REL_OP -> LE .)
    MINUS           reduce using rule 100 (REL_OP -> LE .)
    (               reduce using rule 100 (REL_OP -> LE .)
    IDENTIFIER      reduce using rule 100 (REL_OP -> LE .)
    STRING          reduce using rule 100 (REL_OP -> LE .)
    BOOL            reduce using rule 100 (REL_OP -> LE .)
    RUNE            reduce using rule 100 (REL_OP -> LE .)
    DECIMAL_LIT     reduce using rule 100 (REL_OP -> LE .)
    FALSE           reduce using rule 100 (REL_OP -> LE .)
    TRUE            reduce using rule 100 (REL_OP -> LE .)
    RUNE_LIT        reduce using rule 100 (REL_OP -> LE .)
    STRING_LIT      reduce using rule 100 (REL_OP -> LE .)
    F32             reduce using rule 100 (REL_OP -> LE .)
    F64             reduce using rule 100 (REL_OP -> LE .)
    INT             reduce using rule 100 (REL_OP -> LE .)
    ISIZE           reduce using rule 100 (REL_OP -> LE .)
    I64             reduce using rule 100 (REL_OP -> LE .)
    I32             reduce using rule 100 (REL_OP -> LE .)
    I16             reduce using rule 100 (REL_OP -> LE .)
    I8              reduce using rule 100 (REL_OP -> LE .)
    UINT            reduce using rule 100 (REL_OP -> LE .)
    USIZE           reduce using rule 100 (REL_OP -> LE .)
    U64             reduce using rule 100 (REL_OP -> LE .)
    U32             reduce using rule 100 (REL_OP -> LE .)
    U16             reduce using rule 100 (REL_OP -> LE .)
    U8              reduce using rule 100 (REL_OP -> LE .)
    HEX_LIT         reduce using rule 100 (REL_OP -> LE .)
    OCTAL_LIT       reduce using rule 100 (REL_OP -> LE .)
    BINARY_LIT      reduce using rule 100 (REL_OP -> LE .)
    .               reduce using rule 100 (REL_OP -> LE .)


state 112

    (101) REL_OP -> LT .
    AND             reduce using rule 101 (REL_OP -> LT .)
    EXCLM           reduce using rule 101 (REL_OP -> LT .)
    MINUS           reduce using rule 101 (REL_OP -> LT .)
    (               reduce using rule 101 (REL_OP -> LT .)
    IDENTIFIER      reduce using rule 101 (REL_OP -> LT .)
    STRING          reduce using rule 101 (REL_OP -> LT .)
    BOOL            reduce using rule 101 (REL_OP -> LT .)
    RUNE            reduce using rule 101 (REL_OP -> LT .)
    DECIMAL_LIT     reduce using rule 101 (REL_OP -> LT .)
    FALSE           reduce using rule 101 (REL_OP -> LT .)
    TRUE            reduce using rule 101 (REL_OP -> LT .)
    RUNE_LIT        reduce using rule 101 (REL_OP -> LT .)
    STRING_LIT      reduce using rule 101 (REL_OP -> LT .)
    F32             reduce using rule 101 (REL_OP -> LT .)
    F64             reduce using rule 101 (REL_OP -> LT .)
    INT             reduce using rule 101 (REL_OP -> LT .)
    ISIZE           reduce using rule 101 (REL_OP -> LT .)
    I64             reduce using rule 101 (REL_OP -> LT .)
    I32             reduce using rule 101 (REL_OP -> LT .)
    I16             reduce using rule 101 (REL_OP -> LT .)
    I8              reduce using rule 101 (REL_OP -> LT .)
    UINT            reduce using rule 101 (REL_OP -> LT .)
    USIZE           reduce using rule 101 (REL_OP -> LT .)
    U64             reduce using rule 101 (REL_OP -> LT .)
    U32             reduce using rule 101 (REL_OP -> LT .)
    U16             reduce using rule 101 (REL_OP -> LT .)
    U8              reduce using rule 101 (REL_OP -> LT .)
    HEX_LIT         reduce using rule 101 (REL_OP -> LT .)
    OCTAL_LIT       reduce using rule 101 (REL_OP -> LT .)
    BINARY_LIT      reduce using rule 101 (REL_OP -> LT .)
    .               reduce using rule 101 (REL_OP -> LT .)


state 113

    (102) REL_OP -> NE .
    AND             reduce using rule 102 (REL_OP -> NE .)
    EXCLM           reduce using rule 102 (REL_OP -> NE .)
    MINUS           reduce using rule 102 (REL_OP -> NE .)
    (               reduce using rule 102 (REL_OP -> NE .)
    IDENTIFIER      reduce using rule 102 (REL_OP -> NE .)
    STRING          reduce using rule 102 (REL_OP -> NE .)
    BOOL            reduce using rule 102 (REL_OP -> NE .)
    RUNE            reduce using rule 102 (REL_OP -> NE .)
    DECIMAL_LIT     reduce using rule 102 (REL_OP -> NE .)
    FALSE           reduce using rule 102 (REL_OP -> NE .)
    TRUE            reduce using rule 102 (REL_OP -> NE .)
    RUNE_LIT        reduce using rule 102 (REL_OP -> NE .)
    STRING_LIT      reduce using rule 102 (REL_OP -> NE .)
    F32             reduce using rule 102 (REL_OP -> NE .)
    F64             reduce using rule 102 (REL_OP -> NE .)
    INT             reduce using rule 102 (REL_OP -> NE .)
    ISIZE           reduce using rule 102 (REL_OP -> NE .)
    I64             reduce using rule 102 (REL_OP -> NE .)
    I32             reduce using rule 102 (REL_OP -> NE .)
    I16             reduce using rule 102 (REL_OP -> NE .)
    I8              reduce using rule 102 (REL_OP -> NE .)
    UINT            reduce using rule 102 (REL_OP -> NE .)
    USIZE           reduce using rule 102 (REL_OP -> NE .)
    U64             reduce using rule 102 (REL_OP -> NE .)
    U32             reduce using rule 102 (REL_OP -> NE .)
    U16             reduce using rule 102 (REL_OP -> NE .)
    U8              reduce using rule 102 (REL_OP -> NE .)
    HEX_LIT         reduce using rule 102 (REL_OP -> NE .)
    OCTAL_LIT       reduce using rule 102 (REL_OP -> NE .)
    BINARY_LIT      reduce using rule 102 (REL_OP -> NE .)
    .               reduce using rule 102 (REL_OP -> NE .)


state 114

    (103) REL_OP -> EQ .
    AND             reduce using rule 103 (REL_OP -> EQ .)
    EXCLM           reduce using rule 103 (REL_OP -> EQ .)
    MINUS           reduce using rule 103 (REL_OP -> EQ .)
    (               reduce using rule 103 (REL_OP -> EQ .)
    IDENTIFIER      reduce using rule 103 (REL_OP -> EQ .)
    STRING          reduce using rule 103 (REL_OP -> EQ .)
    BOOL            reduce using rule 103 (REL_OP -> EQ .)
    RUNE            reduce using rule 103 (REL_OP -> EQ .)
    DECIMAL_LIT     reduce using rule 103 (REL_OP -> EQ .)
    FALSE           reduce using rule 103 (REL_OP -> EQ .)
    TRUE            reduce using rule 103 (REL_OP -> EQ .)
    RUNE_LIT        reduce using rule 103 (REL_OP -> EQ .)
    STRING_LIT      reduce using rule 103 (REL_OP -> EQ .)
    F32             reduce using rule 103 (REL_OP -> EQ .)
    F64             reduce using rule 103 (REL_OP -> EQ .)
    INT             reduce using rule 103 (REL_OP -> EQ .)
    ISIZE           reduce using rule 103 (REL_OP -> EQ .)
    I64             reduce using rule 103 (REL_OP -> EQ .)
    I32             reduce using rule 103 (REL_OP -> EQ .)
    I16             reduce using rule 103 (REL_OP -> EQ .)
    I8              reduce using rule 103 (REL_OP -> EQ .)
    UINT            reduce using rule 103 (REL_OP -> EQ .)
    USIZE           reduce using rule 103 (REL_OP -> EQ .)
    U64             reduce using rule 103 (REL_OP -> EQ .)
    U32             reduce using rule 103 (REL_OP -> EQ .)
    U16             reduce using rule 103 (REL_OP -> EQ .)
    U8              reduce using rule 103 (REL_OP -> EQ .)
    HEX_LIT         reduce using rule 103 (REL_OP -> EQ .)
    OCTAL_LIT       reduce using rule 103 (REL_OP -> EQ .)
    BINARY_LIT      reduce using rule 103 (REL_OP -> EQ .)
    .               reduce using rule 103 (REL_OP -> EQ .)


state 115

    (31) unaryExpr -> UNARY_OP unaryExpr .
    LOGIC_AND       reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    LOGIC_OR        reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    SHR             reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    SHL             reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    AND             reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    MOD             reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    DIV             reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    STAR            reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    XOR             reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    OR              reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    MINUS           reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    PLUS            reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    GE              reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    GT              reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    LE              reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    LT              reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    NE              reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    EQ              reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    NEWL            reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    ;               reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    )               reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)
    ,               reduce using rule 31 (unaryExpr -> UNARY_OP unaryExpr .)


state 116

    (39) operandName -> IDENTIFIER .
    (44) qualifiedIdent -> IDENTIFIER . . IDENTIFIER
    LOGIC_AND       reduce using rule 39 (operandName -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 39 (operandName -> IDENTIFIER .)
    SHR             reduce using rule 39 (operandName -> IDENTIFIER .)
    SHL             reduce using rule 39 (operandName -> IDENTIFIER .)
    AND             reduce using rule 39 (operandName -> IDENTIFIER .)
    MOD             reduce using rule 39 (operandName -> IDENTIFIER .)
    DIV             reduce using rule 39 (operandName -> IDENTIFIER .)
    STAR            reduce using rule 39 (operandName -> IDENTIFIER .)
    XOR             reduce using rule 39 (operandName -> IDENTIFIER .)
    OR              reduce using rule 39 (operandName -> IDENTIFIER .)
    MINUS           reduce using rule 39 (operandName -> IDENTIFIER .)
    PLUS            reduce using rule 39 (operandName -> IDENTIFIER .)
    GE              reduce using rule 39 (operandName -> IDENTIFIER .)
    GT              reduce using rule 39 (operandName -> IDENTIFIER .)
    LE              reduce using rule 39 (operandName -> IDENTIFIER .)
    LT              reduce using rule 39 (operandName -> IDENTIFIER .)
    NE              reduce using rule 39 (operandName -> IDENTIFIER .)
    EQ              reduce using rule 39 (operandName -> IDENTIFIER .)
    NEWL            reduce using rule 39 (operandName -> IDENTIFIER .)
    ;               reduce using rule 39 (operandName -> IDENTIFIER .)
    )               reduce using rule 39 (operandName -> IDENTIFIER .)
    ,               reduce using rule 39 (operandName -> IDENTIFIER .)
    .               shift and go to state 92


state 117

    (41) conversion -> type_ ( . expression )
    (29) expression -> . expression BINARY_OP unaryExpr
    (30) expression -> . unaryExpr
    (31) unaryExpr -> . UNARY_OP unaryExpr
    (32) unaryExpr -> . primaryExpr
    (114) UNARY_OP -> . AND
    (115) UNARY_OP -> . EXCLM
    (116) UNARY_OP -> . MINUS
    (33) primaryExpr -> . conversion
    (34) primaryExpr -> . operand
    (41) conversion -> . type_ ( expression )
    (35) operand -> . ( expression )
    (36) operand -> . operandName
    (37) operand -> . literal
    (42) type_ -> . qualifiedIdent
    (43) type_ -> . typeName
    (38) operandName -> . qualifiedIdent
    (39) operandName -> . IDENTIFIER
    (40) literal -> . basicLit
    (44) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (45) typeName -> . numericType
    (46) typeName -> . STRING
    (47) typeName -> . BOOL
    (48) typeName -> . RUNE
    (63) basicLit -> . INT_LIT
    (64) basicLit -> . FLOAT_LIT
    (65) basicLit -> . DECIMAL_LIT EXPONENT
    (66) basicLit -> . FLOAT_LIT EXPONENT
    (67) basicLit -> . FALSE
    (68) basicLit -> . TRUE
    (69) basicLit -> . RUNE_LIT
    (70) basicLit -> . STRING_LIT
    (49) numericType -> . F32
    (50) numericType -> . F64
    (51) numericType -> . INT
    (52) numericType -> . ISIZE
    (53) numericType -> . I64
    (54) numericType -> . I32
    (55) numericType -> . I16
    (56) numericType -> . I8
    (57) numericType -> . UINT
    (58) numericType -> . USIZE
    (59) numericType -> . U64
    (60) numericType -> . U32
    (61) numericType -> . U16
    (62) numericType -> . U8
    (74) INT_LIT -> . HEX_LIT
    (75) INT_LIT -> . OCTAL_LIT
    (76) INT_LIT -> . BINARY_LIT
    (77) INT_LIT -> . DECIMAL_LIT
    (71) FLOAT_LIT -> . . DECIMAL_LIT
    (72) FLOAT_LIT -> . DECIMAL_LIT .
    (73) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    IDENTIFIER      shift and go to state 116
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    type_                          shift and go to state 26
    expression                     shift and go to state 139
    unaryExpr                      shift and go to state 18
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 118

    (35) operand -> ( expression . )
    (29) expression -> expression . BINARY_OP unaryExpr
    (93) BINARY_OP -> . MUL_OP
    (94) BINARY_OP -> . ADD_OP
    (95) BINARY_OP -> . REL_OP
    (96) BINARY_OP -> . LOGIC_AND
    (97) BINARY_OP -> . LOGIC_OR
    (108) MUL_OP -> . SHR
    (109) MUL_OP -> . SHL
    (110) MUL_OP -> . AND
    (111) MUL_OP -> . MOD
    (112) MUL_OP -> . DIV
    (113) MUL_OP -> . STAR
    (104) ADD_OP -> . XOR
    (105) ADD_OP -> . OR
    (106) ADD_OP -> . MINUS
    (107) ADD_OP -> . PLUS
    (98) REL_OP -> . GE
    (99) REL_OP -> . GT
    (100) REL_OP -> . LE
    (101) REL_OP -> . LT
    (102) REL_OP -> . NE
    (103) REL_OP -> . EQ
    )               shift and go to state 140
    LOGIC_AND       shift and go to state 97
    LOGIC_OR        shift and go to state 98
    SHR             shift and go to state 99
    SHL             shift and go to state 100
    AND             shift and go to state 101
    MOD             shift and go to state 102
    DIV             shift and go to state 103
    STAR            shift and go to state 104
    XOR             shift and go to state 105
    OR              shift and go to state 106
    MINUS           shift and go to state 107
    PLUS            shift and go to state 108
    GE              shift and go to state 109
    GT              shift and go to state 110
    LE              shift and go to state 111
    LT              shift and go to state 112
    NE              shift and go to state 113
    EQ              shift and go to state 114

    BINARY_OP                      shift and go to state 93
    MUL_OP                         shift and go to state 94
    ADD_OP                         shift and go to state 95
    REL_OP                         shift and go to state 96

state 119

    (71) FLOAT_LIT -> . DECIMAL_LIT .
    EXPONENT        reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    SHR             reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    SHL             reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    AND             reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    MOD             reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    DIV             reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    STAR            reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    XOR             reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    OR              reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    MINUS           reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    PLUS            reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    GE              reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    GT              reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    LE              reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    LT              reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    NE              reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    EQ              reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    NEWL            reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    ;               reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    )               reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)
    ,               reduce using rule 71 (FLOAT_LIT -> . DECIMAL_LIT .)


state 120

    (66) basicLit -> FLOAT_LIT EXPONENT .
    LOGIC_AND       reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    LOGIC_OR        reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    SHR             reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    SHL             reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    AND             reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    MOD             reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    DIV             reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    STAR            reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    XOR             reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    OR              reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    MINUS           reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    PLUS            reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    GE              reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    GT              reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    LE              reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    LT              reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    NE              reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    EQ              reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    NEWL            reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    ;               reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    )               reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)
    ,               reduce using rule 66 (basicLit -> FLOAT_LIT EXPONENT .)


state 121

    (65) basicLit -> DECIMAL_LIT EXPONENT .
    LOGIC_AND       reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    LOGIC_OR        reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    SHR             reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    SHL             reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    AND             reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    MOD             reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    DIV             reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    STAR            reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    XOR             reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    OR              reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    MINUS           reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    PLUS            reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    GE              reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    GT              reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    LE              reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    LT              reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    NE              reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    EQ              reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    NEWL            reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    ;               reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    )               reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)
    ,               reduce using rule 65 (basicLit -> DECIMAL_LIT EXPONENT .)


state 122

    (72) FLOAT_LIT -> DECIMAL_LIT . .
    (73) FLOAT_LIT -> DECIMAL_LIT . . DECIMAL_LIT
    EXPONENT        reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    LOGIC_AND       reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    LOGIC_OR        reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    SHR             reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    SHL             reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    AND             reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    MOD             reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    DIV             reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    STAR            reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    XOR             reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    OR              reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    MINUS           reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    PLUS            reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    GE              reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    GT              reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    LE              reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    LT              reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    NE              reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    EQ              reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    NEWL            reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    ;               reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    )               reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    ,               reduce using rule 72 (FLOAT_LIT -> DECIMAL_LIT . .)
    DECIMAL_LIT     shift and go to state 141


state 123

    (1) sourceFile -> importDecls topLevelDecls orphanStmtList .
    $end            reduce using rule 1 (sourceFile -> importDecls topLevelDecls orphanStmtList .)


state 124

    (4) importDecls -> importDecls importDecl eos .
    (78) eos -> eos . NEWL
    (80) eos -> eos . ;
    IMPORT          reduce using rule 4 (importDecls -> importDecls importDecl eos .)
    IDENTIFIER      reduce using rule 4 (importDecls -> importDecls importDecl eos .)
    NEWL            shift and go to state 126
    ;               shift and go to state 127


state 125

    (12) topLevelDecls -> topLevelDecls topLevelDecl eos .
    (78) eos -> eos . NEWL
    (80) eos -> eos . ;
    IDENTIFIER      reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    AND             reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    EXCLM           reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    MINUS           reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    (               reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    STRING          reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    BOOL            reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    RUNE            reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    DECIMAL_LIT     reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    FALSE           reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    TRUE            reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    RUNE_LIT        reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    STRING_LIT      reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    F32             reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    F64             reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    INT             reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    ISIZE           reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I64             reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I32             reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I16             reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I8              reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    UINT            reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    USIZE           reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U64             reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U32             reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U16             reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U8              reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    HEX_LIT         reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    OCTAL_LIT       reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    BINARY_LIT      reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    .               reduce using rule 12 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    NEWL            shift and go to state 126
    ;               shift and go to state 127


state 126

    (78) eos -> eos NEWL .
    NEWL            reduce using rule 78 (eos -> eos NEWL .)
    ;               reduce using rule 78 (eos -> eos NEWL .)
    IMPORT          reduce using rule 78 (eos -> eos NEWL .)
    IDENTIFIER      reduce using rule 78 (eos -> eos NEWL .)
    AND             reduce using rule 78 (eos -> eos NEWL .)
    EXCLM           reduce using rule 78 (eos -> eos NEWL .)
    MINUS           reduce using rule 78 (eos -> eos NEWL .)
    (               reduce using rule 78 (eos -> eos NEWL .)
    STRING          reduce using rule 78 (eos -> eos NEWL .)
    BOOL            reduce using rule 78 (eos -> eos NEWL .)
    RUNE            reduce using rule 78 (eos -> eos NEWL .)
    DECIMAL_LIT     reduce using rule 78 (eos -> eos NEWL .)
    FALSE           reduce using rule 78 (eos -> eos NEWL .)
    TRUE            reduce using rule 78 (eos -> eos NEWL .)
    RUNE_LIT        reduce using rule 78 (eos -> eos NEWL .)
    STRING_LIT      reduce using rule 78 (eos -> eos NEWL .)
    F32             reduce using rule 78 (eos -> eos NEWL .)
    F64             reduce using rule 78 (eos -> eos NEWL .)
    INT             reduce using rule 78 (eos -> eos NEWL .)
    ISIZE           reduce using rule 78 (eos -> eos NEWL .)
    I64             reduce using rule 78 (eos -> eos NEWL .)
    I32             reduce using rule 78 (eos -> eos NEWL .)
    I16             reduce using rule 78 (eos -> eos NEWL .)
    I8              reduce using rule 78 (eos -> eos NEWL .)
    UINT            reduce using rule 78 (eos -> eos NEWL .)
    USIZE           reduce using rule 78 (eos -> eos NEWL .)
    U64             reduce using rule 78 (eos -> eos NEWL .)
    U32             reduce using rule 78 (eos -> eos NEWL .)
    U16             reduce using rule 78 (eos -> eos NEWL .)
    U8              reduce using rule 78 (eos -> eos NEWL .)
    HEX_LIT         reduce using rule 78 (eos -> eos NEWL .)
    OCTAL_LIT       reduce using rule 78 (eos -> eos NEWL .)
    BINARY_LIT      reduce using rule 78 (eos -> eos NEWL .)
    .               reduce using rule 78 (eos -> eos NEWL .)
    $end            reduce using rule 78 (eos -> eos NEWL .)


state 127

    (80) eos -> eos ; .
    NEWL            reduce using rule 80 (eos -> eos ; .)
    ;               reduce using rule 80 (eos -> eos ; .)
    IMPORT          reduce using rule 80 (eos -> eos ; .)
    IDENTIFIER      reduce using rule 80 (eos -> eos ; .)
    AND             reduce using rule 80 (eos -> eos ; .)
    EXCLM           reduce using rule 80 (eos -> eos ; .)
    MINUS           reduce using rule 80 (eos -> eos ; .)
    (               reduce using rule 80 (eos -> eos ; .)
    STRING          reduce using rule 80 (eos -> eos ; .)
    BOOL            reduce using rule 80 (eos -> eos ; .)
    RUNE            reduce using rule 80 (eos -> eos ; .)
    DECIMAL_LIT     reduce using rule 80 (eos -> eos ; .)
    FALSE           reduce using rule 80 (eos -> eos ; .)
    TRUE            reduce using rule 80 (eos -> eos ; .)
    RUNE_LIT        reduce using rule 80 (eos -> eos ; .)
    STRING_LIT      reduce using rule 80 (eos -> eos ; .)
    F32             reduce using rule 80 (eos -> eos ; .)
    F64             reduce using rule 80 (eos -> eos ; .)
    INT             reduce using rule 80 (eos -> eos ; .)
    ISIZE           reduce using rule 80 (eos -> eos ; .)
    I64             reduce using rule 80 (eos -> eos ; .)
    I32             reduce using rule 80 (eos -> eos ; .)
    I16             reduce using rule 80 (eos -> eos ; .)
    I8              reduce using rule 80 (eos -> eos ; .)
    UINT            reduce using rule 80 (eos -> eos ; .)
    USIZE           reduce using rule 80 (eos -> eos ; .)
    U64             reduce using rule 80 (eos -> eos ; .)
    U32             reduce using rule 80 (eos -> eos ; .)
    U16             reduce using rule 80 (eos -> eos ; .)
    U8              reduce using rule 80 (eos -> eos ; .)
    HEX_LIT         reduce using rule 80 (eos -> eos ; .)
    OCTAL_LIT       reduce using rule 80 (eos -> eos ; .)
    BINARY_LIT      reduce using rule 80 (eos -> eos ; .)
    .               reduce using rule 80 (eos -> eos ; .)
    $end            reduce using rule 80 (eos -> eos ; .)


state 128

    (22) statementList -> statementList eos statement .
    NEWL            reduce using rule 22 (statementList -> statementList eos statement .)
    ;               reduce using rule 22 (statementList -> statementList eos statement .)


state 129

    (28) assignment -> identifierList . assign_op expressionList
    (18) identifierList -> identifierList . , IDENTIFIER
    (82) assign_op -> . SHR_ASGN
    (83) assign_op -> . SHL_ASGN
    (84) assign_op -> . MOD_ASGN
    (85) assign_op -> . DIV_ASGN
    (86) assign_op -> . OR_ASGN
    (87) assign_op -> . AND_ASGN
    (88) assign_op -> . STAR_ASGN
    (89) assign_op -> . XOR_ASGN
    (90) assign_op -> . MINUS_ASGN
    (91) assign_op -> . PLUS_ASGN
    (92) assign_op -> . ASSIGN
    ,               shift and go to state 79
    SHR_ASGN        shift and go to state 81
    SHL_ASGN        shift and go to state 82
    MOD_ASGN        shift and go to state 83
    DIV_ASGN        shift and go to state 84
    OR_ASGN         shift and go to state 85
    AND_ASGN        shift and go to state 86
    STAR_ASGN       shift and go to state 87
    XOR_ASGN        shift and go to state 88
    MINUS_ASGN      shift and go to state 89
    PLUS_ASGN       shift and go to state 90
    ASSIGN          shift and go to state 91

    assign_op                      shift and go to state 80

state 130

    (11) importPath -> IDENTIFIER .
    NEWL            reduce using rule 11 (importPath -> IDENTIFIER .)
    ;               reduce using rule 11 (importPath -> IDENTIFIER .)


state 131

    (8) importSpec -> IDENTIFIER importPath .
    NEWL            reduce using rule 8 (importSpec -> IDENTIFIER importPath .)
    ;               reduce using rule 8 (importSpec -> IDENTIFIER importPath .)


state 132

    (9) importSpec -> . importPath .
    NEWL            reduce using rule 9 (importSpec -> . importPath .)
    ;               reduce using rule 9 (importSpec -> . importPath .)


state 133

    (17) varDecl -> identifierList DECL_ASGN expressionList .
    (20) expressionList -> expressionList . , expression
    NEWL            reduce using rule 17 (varDecl -> identifierList DECL_ASGN expressionList .)
    ;               reduce using rule 17 (varDecl -> identifierList DECL_ASGN expressionList .)
    ,               shift and go to state 142


state 134

    (21) expressionList -> expression .
    (29) expression -> expression . BINARY_OP unaryExpr
    (93) BINARY_OP -> . MUL_OP
    (94) BINARY_OP -> . ADD_OP
    (95) BINARY_OP -> . REL_OP
    (96) BINARY_OP -> . LOGIC_AND
    (97) BINARY_OP -> . LOGIC_OR
    (108) MUL_OP -> . SHR
    (109) MUL_OP -> . SHL
    (110) MUL_OP -> . AND
    (111) MUL_OP -> . MOD
    (112) MUL_OP -> . DIV
    (113) MUL_OP -> . STAR
    (104) ADD_OP -> . XOR
    (105) ADD_OP -> . OR
    (106) ADD_OP -> . MINUS
    (107) ADD_OP -> . PLUS
    (98) REL_OP -> . GE
    (99) REL_OP -> . GT
    (100) REL_OP -> . LE
    (101) REL_OP -> . LT
    (102) REL_OP -> . NE
    (103) REL_OP -> . EQ
    ,               reduce using rule 21 (expressionList -> expression .)
    NEWL            reduce using rule 21 (expressionList -> expression .)
    ;               reduce using rule 21 (expressionList -> expression .)
    LOGIC_AND       shift and go to state 97
    LOGIC_OR        shift and go to state 98
    SHR             shift and go to state 99
    SHL             shift and go to state 100
    AND             shift and go to state 101
    MOD             shift and go to state 102
    DIV             shift and go to state 103
    STAR            shift and go to state 104
    XOR             shift and go to state 105
    OR              shift and go to state 106
    MINUS           shift and go to state 107
    PLUS            shift and go to state 108
    GE              shift and go to state 109
    GT              shift and go to state 110
    LE              shift and go to state 111
    LT              shift and go to state 112
    NE              shift and go to state 113
    EQ              shift and go to state 114

    BINARY_OP                      shift and go to state 93
    MUL_OP                         shift and go to state 94
    ADD_OP                         shift and go to state 95
    REL_OP                         shift and go to state 96

state 135

    (18) identifierList -> identifierList , IDENTIFIER .
    DECL_ASGN       reduce using rule 18 (identifierList -> identifierList , IDENTIFIER .)
    ,               reduce using rule 18 (identifierList -> identifierList , IDENTIFIER .)
    SHR_ASGN        reduce using rule 18 (identifierList -> identifierList , IDENTIFIER .)
    SHL_ASGN        reduce using rule 18 (identifierList -> identifierList , IDENTIFIER .)
    MOD_ASGN        reduce using rule 18 (identifierList -> identifierList , IDENTIFIER .)
    DIV_ASGN        reduce using rule 18 (identifierList -> identifierList , IDENTIFIER .)
    OR_ASGN         reduce using rule 18 (identifierList -> identifierList , IDENTIFIER .)
    AND_ASGN        reduce using rule 18 (identifierList -> identifierList , IDENTIFIER .)
    STAR_ASGN       reduce using rule 18 (identifierList -> identifierList , IDENTIFIER .)
    XOR_ASGN        reduce using rule 18 (identifierList -> identifierList , IDENTIFIER .)
    MINUS_ASGN      reduce using rule 18 (identifierList -> identifierList , IDENTIFIER .)
    PLUS_ASGN       reduce using rule 18 (identifierList -> identifierList , IDENTIFIER .)
    ASSIGN          reduce using rule 18 (identifierList -> identifierList , IDENTIFIER .)


state 136

    (28) assignment -> identifierList assign_op expressionList .
    (20) expressionList -> expressionList . , expression
    NEWL            reduce using rule 28 (assignment -> identifierList assign_op expressionList .)
    ;               reduce using rule 28 (assignment -> identifierList assign_op expressionList .)
    ,               shift and go to state 142


state 137

    (44) qualifiedIdent -> IDENTIFIER . IDENTIFIER .
    (               reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    LOGIC_AND       reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    LOGIC_OR        reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    SHR             reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    SHL             reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    AND             reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    MOD             reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    DIV             reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    STAR            reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    XOR             reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    OR              reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    MINUS           reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    PLUS            reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    GE              reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    GT              reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    LE              reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    LT              reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    NE              reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    EQ              reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    NEWL            reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    ;               reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    )               reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    ,               reduce using rule 44 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)


state 138

    (29) expression -> expression BINARY_OP unaryExpr .
    LOGIC_AND       reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    LOGIC_OR        reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    SHR             reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    SHL             reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    AND             reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    MOD             reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    DIV             reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    STAR            reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    XOR             reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    OR              reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    MINUS           reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    PLUS            reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    GE              reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    GT              reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    LE              reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    LT              reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    NE              reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    EQ              reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    NEWL            reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    ;               reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    )               reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)
    ,               reduce using rule 29 (expression -> expression BINARY_OP unaryExpr .)


state 139

    (41) conversion -> type_ ( expression . )
    (29) expression -> expression . BINARY_OP unaryExpr
    (93) BINARY_OP -> . MUL_OP
    (94) BINARY_OP -> . ADD_OP
    (95) BINARY_OP -> . REL_OP
    (96) BINARY_OP -> . LOGIC_AND
    (97) BINARY_OP -> . LOGIC_OR
    (108) MUL_OP -> . SHR
    (109) MUL_OP -> . SHL
    (110) MUL_OP -> . AND
    (111) MUL_OP -> . MOD
    (112) MUL_OP -> . DIV
    (113) MUL_OP -> . STAR
    (104) ADD_OP -> . XOR
    (105) ADD_OP -> . OR
    (106) ADD_OP -> . MINUS
    (107) ADD_OP -> . PLUS
    (98) REL_OP -> . GE
    (99) REL_OP -> . GT
    (100) REL_OP -> . LE
    (101) REL_OP -> . LT
    (102) REL_OP -> . NE
    (103) REL_OP -> . EQ
    )               shift and go to state 143
    LOGIC_AND       shift and go to state 97
    LOGIC_OR        shift and go to state 98
    SHR             shift and go to state 99
    SHL             shift and go to state 100
    AND             shift and go to state 101
    MOD             shift and go to state 102
    DIV             shift and go to state 103
    STAR            shift and go to state 104
    XOR             shift and go to state 105
    OR              shift and go to state 106
    MINUS           shift and go to state 107
    PLUS            shift and go to state 108
    GE              shift and go to state 109
    GT              shift and go to state 110
    LE              shift and go to state 111
    LT              shift and go to state 112
    NE              shift and go to state 113
    EQ              shift and go to state 114

    BINARY_OP                      shift and go to state 93
    MUL_OP                         shift and go to state 94
    ADD_OP                         shift and go to state 95
    REL_OP                         shift and go to state 96

state 140

    (35) operand -> ( expression ) .
    LOGIC_AND       reduce using rule 35 (operand -> ( expression ) .)
    LOGIC_OR        reduce using rule 35 (operand -> ( expression ) .)
    SHR             reduce using rule 35 (operand -> ( expression ) .)
    SHL             reduce using rule 35 (operand -> ( expression ) .)
    AND             reduce using rule 35 (operand -> ( expression ) .)
    MOD             reduce using rule 35 (operand -> ( expression ) .)
    DIV             reduce using rule 35 (operand -> ( expression ) .)
    STAR            reduce using rule 35 (operand -> ( expression ) .)
    XOR             reduce using rule 35 (operand -> ( expression ) .)
    OR              reduce using rule 35 (operand -> ( expression ) .)
    MINUS           reduce using rule 35 (operand -> ( expression ) .)
    PLUS            reduce using rule 35 (operand -> ( expression ) .)
    GE              reduce using rule 35 (operand -> ( expression ) .)
    GT              reduce using rule 35 (operand -> ( expression ) .)
    LE              reduce using rule 35 (operand -> ( expression ) .)
    LT              reduce using rule 35 (operand -> ( expression ) .)
    NE              reduce using rule 35 (operand -> ( expression ) .)
    EQ              reduce using rule 35 (operand -> ( expression ) .)
    NEWL            reduce using rule 35 (operand -> ( expression ) .)
    ;               reduce using rule 35 (operand -> ( expression ) .)
    )               reduce using rule 35 (operand -> ( expression ) .)
    ,               reduce using rule 35 (operand -> ( expression ) .)


state 141

    (73) FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .
    EXPONENT        reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    SHR             reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    SHL             reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    AND             reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    MOD             reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    DIV             reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    STAR            reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    XOR             reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    OR              reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    MINUS           reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    PLUS            reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    GE              reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    GT              reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LE              reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LT              reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    NE              reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    EQ              reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    NEWL            reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    ;               reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    )               reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    ,               reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)


state 142

    (20) expressionList -> expressionList , . expression
    (29) expression -> . expression BINARY_OP unaryExpr
    (30) expression -> . unaryExpr
    (31) unaryExpr -> . UNARY_OP unaryExpr
    (32) unaryExpr -> . primaryExpr
    (114) UNARY_OP -> . AND
    (115) UNARY_OP -> . EXCLM
    (116) UNARY_OP -> . MINUS
    (33) primaryExpr -> . conversion
    (34) primaryExpr -> . operand
    (41) conversion -> . type_ ( expression )
    (35) operand -> . ( expression )
    (36) operand -> . operandName
    (37) operand -> . literal
    (42) type_ -> . qualifiedIdent
    (43) type_ -> . typeName
    (38) operandName -> . qualifiedIdent
    (39) operandName -> . IDENTIFIER
    (40) literal -> . basicLit
    (44) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (45) typeName -> . numericType
    (46) typeName -> . STRING
    (47) typeName -> . BOOL
    (48) typeName -> . RUNE
    (63) basicLit -> . INT_LIT
    (64) basicLit -> . FLOAT_LIT
    (65) basicLit -> . DECIMAL_LIT EXPONENT
    (66) basicLit -> . FLOAT_LIT EXPONENT
    (67) basicLit -> . FALSE
    (68) basicLit -> . TRUE
    (69) basicLit -> . RUNE_LIT
    (70) basicLit -> . STRING_LIT
    (49) numericType -> . F32
    (50) numericType -> . F64
    (51) numericType -> . INT
    (52) numericType -> . ISIZE
    (53) numericType -> . I64
    (54) numericType -> . I32
    (55) numericType -> . I16
    (56) numericType -> . I8
    (57) numericType -> . UINT
    (58) numericType -> . USIZE
    (59) numericType -> . U64
    (60) numericType -> . U32
    (61) numericType -> . U16
    (62) numericType -> . U8
    (74) INT_LIT -> . HEX_LIT
    (75) INT_LIT -> . OCTAL_LIT
    (76) INT_LIT -> . BINARY_LIT
    (77) INT_LIT -> . DECIMAL_LIT
    (71) FLOAT_LIT -> . . DECIMAL_LIT
    (72) FLOAT_LIT -> . DECIMAL_LIT .
    (73) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    IDENTIFIER      shift and go to state 116
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    expression                     shift and go to state 144
    unaryExpr                      shift and go to state 18
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 143

    (41) conversion -> type_ ( expression ) .
    LOGIC_AND       reduce using rule 41 (conversion -> type_ ( expression ) .)
    LOGIC_OR        reduce using rule 41 (conversion -> type_ ( expression ) .)
    SHR             reduce using rule 41 (conversion -> type_ ( expression ) .)
    SHL             reduce using rule 41 (conversion -> type_ ( expression ) .)
    AND             reduce using rule 41 (conversion -> type_ ( expression ) .)
    MOD             reduce using rule 41 (conversion -> type_ ( expression ) .)
    DIV             reduce using rule 41 (conversion -> type_ ( expression ) .)
    STAR            reduce using rule 41 (conversion -> type_ ( expression ) .)
    XOR             reduce using rule 41 (conversion -> type_ ( expression ) .)
    OR              reduce using rule 41 (conversion -> type_ ( expression ) .)
    MINUS           reduce using rule 41 (conversion -> type_ ( expression ) .)
    PLUS            reduce using rule 41 (conversion -> type_ ( expression ) .)
    GE              reduce using rule 41 (conversion -> type_ ( expression ) .)
    GT              reduce using rule 41 (conversion -> type_ ( expression ) .)
    LE              reduce using rule 41 (conversion -> type_ ( expression ) .)
    LT              reduce using rule 41 (conversion -> type_ ( expression ) .)
    NE              reduce using rule 41 (conversion -> type_ ( expression ) .)
    EQ              reduce using rule 41 (conversion -> type_ ( expression ) .)
    NEWL            reduce using rule 41 (conversion -> type_ ( expression ) .)
    ;               reduce using rule 41 (conversion -> type_ ( expression ) .)
    )               reduce using rule 41 (conversion -> type_ ( expression ) .)
    ,               reduce using rule 41 (conversion -> type_ ( expression ) .)


state 144

    (20) expressionList -> expressionList , expression .
    (29) expression -> expression . BINARY_OP unaryExpr
    (93) BINARY_OP -> . MUL_OP
    (94) BINARY_OP -> . ADD_OP
    (95) BINARY_OP -> . REL_OP
    (96) BINARY_OP -> . LOGIC_AND
    (97) BINARY_OP -> . LOGIC_OR
    (108) MUL_OP -> . SHR
    (109) MUL_OP -> . SHL
    (110) MUL_OP -> . AND
    (111) MUL_OP -> . MOD
    (112) MUL_OP -> . DIV
    (113) MUL_OP -> . STAR
    (104) ADD_OP -> . XOR
    (105) ADD_OP -> . OR
    (106) ADD_OP -> . MINUS
    (107) ADD_OP -> . PLUS
    (98) REL_OP -> . GE
    (99) REL_OP -> . GT
    (100) REL_OP -> . LE
    (101) REL_OP -> . LT
    (102) REL_OP -> . NE
    (103) REL_OP -> . EQ
    ,               reduce using rule 20 (expressionList -> expressionList , expression .)
    NEWL            reduce using rule 20 (expressionList -> expressionList , expression .)
    ;               reduce using rule 20 (expressionList -> expressionList , expression .)
    LOGIC_AND       shift and go to state 97
    LOGIC_OR        shift and go to state 98
    SHR             shift and go to state 99
    SHL             shift and go to state 100
    AND             shift and go to state 101
    MOD             shift and go to state 102
    DIV             shift and go to state 103
    STAR            shift and go to state 104
    XOR             shift and go to state 105
    OR              shift and go to state 106
    MINUS           shift and go to state 107
    PLUS            shift and go to state 108
    GE              shift and go to state 109
    GT              shift and go to state 110
    LE              shift and go to state 111
    LT              shift and go to state 112
    NE              shift and go to state 113
    EQ              shift and go to state 114

    BINARY_OP                      shift and go to state 93
    MUL_OP                         shift and go to state 94
    ADD_OP                         shift and go to state 95
    REL_OP                         shift and go to state 96