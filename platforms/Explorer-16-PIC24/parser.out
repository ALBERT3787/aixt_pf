Grammar:

Rule 0     S' -> prog
Rule 1     prog -> topLevelDecls
Rule 2     topLevelDecls -> topLevelDecls topLevelDecl eos
Rule 3     topLevelDecls -> topLevelDecl eos
Rule 4     topLevelDecl -> declaration
Rule 5     declaration -> varDecl
Rule 6     varDecl -> identifierList DECL_ASGN expressionList
Rule 7     identifierList -> identifierList , IDENTIFIER
Rule 8     identifierList -> IDENTIFIER
Rule 9     expressionList -> expressionList , expression
Rule 10    expressionList -> expression
Rule 11    statementList -> statementList eos statement
Rule 12    statementList -> statement
Rule 13    block -> { statementList }
Rule 14    statement -> block
Rule 15    statement -> simpleStmt
Rule 16    statement -> declaration
Rule 17    simpleStmt -> assignment
Rule 18    simpleStmt -> expressionStmt
Rule 19    expressionStmt -> expression
Rule 20    assignment -> expressionList assign_op expressionList
Rule 21    assign_op -> SHR_ASGN  [precedence=right, level=8]
Rule 22    assign_op -> SHL_ASGN  [precedence=right, level=8]
Rule 23    assign_op -> MOD_ASGN  [precedence=right, level=8]
Rule 24    assign_op -> DIV_ASGN  [precedence=right, level=8]
Rule 25    assign_op -> OR_ASGN  [precedence=right, level=8]
Rule 26    assign_op -> AND_ASGN  [precedence=right, level=8]
Rule 27    assign_op -> STAR_ASGN  [precedence=right, level=8]
Rule 28    assign_op -> XOR_ASGN  [precedence=right, level=8]
Rule 29    assign_op -> MINUS_ASGN  [precedence=right, level=8]
Rule 30    assign_op -> PLUS_ASGN  [precedence=right, level=8]
Rule 31    assign_op -> ASSIGN  [precedence=right, level=8]
Rule 32    expression -> expression BINARY_OP unaryExpr
Rule 33    expression -> unaryExpr
Rule 34    unaryExpr -> UNARY_OP unaryExpr  [precedence=right, level=7]
Rule 35    unaryExpr -> primaryExpr
Rule 36    primaryExpr -> conversion
Rule 37    primaryExpr -> operand
Rule 38    operand -> ( expression )
Rule 39    operand -> operandName
Rule 40    operand -> literal
Rule 41    operandName -> qualifiedIdent
Rule 42    operandName -> IDENTIFIER
Rule 43    literal -> basicLit
Rule 44    conversion -> type_ ( expression )
Rule 45    type_ -> qualifiedIdent
Rule 46    type_ -> typeName
Rule 47    qualifiedIdent -> IDENTIFIER . IDENTIFIER
Rule 48    typeName -> numericType
Rule 49    typeName -> STRING
Rule 50    typeName -> BOOL
Rule 51    typeName -> RUNE
Rule 52    numericType -> F32
Rule 53    numericType -> F64
Rule 54    numericType -> ISIZE
Rule 55    numericType -> I64
Rule 56    numericType -> I32
Rule 57    numericType -> I16
Rule 58    numericType -> I8
Rule 59    numericType -> USIZE
Rule 60    numericType -> U64
Rule 61    numericType -> U32
Rule 62    numericType -> U16
Rule 63    numericType -> U8
Rule 64    basicLit -> INT_LIT
Rule 65    basicLit -> FLOAT_LIT
Rule 66    basicLit -> DECIMAL_LIT EXPONENT
Rule 67    basicLit -> FLOAT_LIT EXPONENT
Rule 68    basicLit -> FALSE
Rule 69    basicLit -> TRUE
Rule 70    basicLit -> RUNE_LIT
Rule 71    basicLit -> STRING_LIT
Rule 72    FLOAT_LIT -> . DECIMAL_LIT
Rule 73    FLOAT_LIT -> DECIMAL_LIT .
Rule 74    FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT
Rule 75    INT_LIT -> HEX_LIT
Rule 76    INT_LIT -> OCTAL_LIT
Rule 77    INT_LIT -> BINARY_LIT
Rule 78    INT_LIT -> DECIMAL_LIT
Rule 79    eos -> eos NEWL
Rule 80    eos -> NEWL
Rule 81    eos -> eos ;
Rule 82    eos -> ;
Rule 83    BINARY_OP -> MUL_OP
Rule 84    BINARY_OP -> ADD_OP
Rule 85    BINARY_OP -> REL_OP
Rule 86    BINARY_OP -> LOGIC_AND  [precedence=left, level=2]
Rule 87    BINARY_OP -> LOGIC_OR  [precedence=left, level=1]
Rule 88    REL_OP -> GE  [precedence=left, level=3]
Rule 89    REL_OP -> GT  [precedence=left, level=3]
Rule 90    REL_OP -> LE  [precedence=left, level=3]
Rule 91    REL_OP -> LT  [precedence=left, level=3]
Rule 92    REL_OP -> NE  [precedence=left, level=3]
Rule 93    REL_OP -> EQ  [precedence=left, level=3]
Rule 94    ADD_OP -> XOR  [precedence=left, level=4]
Rule 95    ADD_OP -> OR  [precedence=left, level=4]
Rule 96    ADD_OP -> MINUS  [precedence=left, level=4]
Rule 97    ADD_OP -> PLUS  [precedence=left, level=4]
Rule 98    MUL_OP -> SHR  [precedence=left, level=5]
Rule 99    MUL_OP -> SHL  [precedence=left, level=5]
Rule 100   MUL_OP -> AND  [precedence=left, level=5]
Rule 101   MUL_OP -> MOD  [precedence=left, level=5]
Rule 102   MUL_OP -> DIV  [precedence=left, level=5]
Rule 103   MUL_OP -> STAR  [precedence=left, level=5]
Rule 104   UNARY_OP -> AND  [precedence=left, level=5]
Rule 105   UNARY_OP -> EXCLM
Rule 106   UNARY_OP -> MINUS  [precedence=left, level=4]

Unused terminals:

    AS
    ELSE
    BREAK
    MATCH
    STATIC
    MAP
    CONST
    UMINUS
    RETURN
    MINUS_MINUS
    FN
    TYPE
    CONTINUE
    FOR
    IN
    ENUM
    STRUCT
    PLUS_PLUS
    IMPORT
    IF

Terminals, with rules where they appear:

(                    : 38 44
)                    : 38 44
,                    : 7 9
.                    : 47 72 73 74
;                    : 81 82
AND                  : 100 104
AND_ASGN             : 26
AS                   : 
ASSIGN               : 31
BINARY_LIT           : 77
BOOL                 : 50
BREAK                : 
CONST                : 
CONTINUE             : 
DECIMAL_LIT          : 66 72 73 74 74 78
DECL_ASGN            : 6
DIV                  : 102
DIV_ASGN             : 24
ELSE                 : 
ENUM                 : 
EQ                   : 93
EXCLM                : 105
EXPONENT             : 66 67
F32                  : 52
F64                  : 53
FALSE                : 68
FN                   : 
FOR                  : 
GE                   : 88
GT                   : 89
HEX_LIT              : 75
I16                  : 57
I32                  : 56
I64                  : 55
I8                   : 58
IDENTIFIER           : 7 8 42 47 47
IF                   : 
IMPORT               : 
IN                   : 
ISIZE                : 54
LE                   : 90
LOGIC_AND            : 86
LOGIC_OR             : 87
LT                   : 91
MAP                  : 
MATCH                : 
MINUS                : 96 106
MINUS_ASGN           : 29
MINUS_MINUS          : 
MOD                  : 101
MOD_ASGN             : 23
NE                   : 92
NEWL                 : 79 80
OCTAL_LIT            : 76
OR                   : 95
OR_ASGN              : 25
PLUS                 : 97
PLUS_ASGN            : 30
PLUS_PLUS            : 
RETURN               : 
RUNE                 : 51
RUNE_LIT             : 70
SHL                  : 99
SHL_ASGN             : 22
SHR                  : 98
SHR_ASGN             : 21
STAR                 : 103
STAR_ASGN            : 27
STATIC               : 
STRING               : 49
STRING_LIT           : 71
STRUCT               : 
TRUE                 : 69
TYPE                 : 
U16                  : 62
U32                  : 61
U64                  : 60
U8                   : 63
UMINUS               : 
USIZE                : 59
XOR                  : 94
XOR_ASGN             : 28
error                : 
{                    : 13
}                    : 13

Nonterminals, with rules where they appear:

ADD_OP               : 84
BINARY_OP            : 32
FLOAT_LIT            : 65 67
INT_LIT              : 64
MUL_OP               : 83
REL_OP               : 85
UNARY_OP             : 34
assign_op            : 20
assignment           : 17
basicLit             : 43
block                : 14
conversion           : 36
declaration          : 4 16
eos                  : 2 3 11 79 81
expression           : 9 10 19 32 38 44
expressionList       : 6 9 20 20
expressionStmt       : 18
identifierList       : 6 7
literal              : 40
numericType          : 48
operand              : 37
operandName          : 39
primaryExpr          : 35
prog                 : 0
qualifiedIdent       : 41 45
simpleStmt           : 15
statement            : 11 12
statementList        : 11 13
topLevelDecl         : 2 3
topLevelDecls        : 1 2
typeName             : 46
type_                : 44
unaryExpr            : 32 33 34
varDecl              : 5


state 0

    (0) S' -> . prog
    (1) prog -> . topLevelDecls
    (2) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (3) topLevelDecls -> . topLevelDecl eos
    (4) topLevelDecl -> . declaration
    (5) declaration -> . varDecl
    (6) varDecl -> . identifierList DECL_ASGN expressionList
    (7) identifierList -> . identifierList , IDENTIFIER
    (8) identifierList -> . IDENTIFIER
    IDENTIFIER      shift and go to state 7

    prog                           shift and go to state 1
    topLevelDecls                  shift and go to state 2
    topLevelDecl                   shift and go to state 3
    declaration                    shift and go to state 4
    varDecl                        shift and go to state 5
    identifierList                 shift and go to state 6

state 1

    (0) S' -> prog .


state 2

    (1) prog -> topLevelDecls .
    (2) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (4) topLevelDecl -> . declaration
    (5) declaration -> . varDecl
    (6) varDecl -> . identifierList DECL_ASGN expressionList
    (7) identifierList -> . identifierList , IDENTIFIER
    (8) identifierList -> . IDENTIFIER
    $end            reduce using rule 1 (prog -> topLevelDecls .)
    IDENTIFIER      shift and go to state 7

    topLevelDecl                   shift and go to state 8
    declaration                    shift and go to state 4
    varDecl                        shift and go to state 5
    identifierList                 shift and go to state 6

state 3

    (3) topLevelDecls -> topLevelDecl . eos
    (79) eos -> . eos NEWL
    (80) eos -> . NEWL
    (81) eos -> . eos ;
    (82) eos -> . ;
    NEWL            shift and go to state 10
    ;               shift and go to state 11

    eos                            shift and go to state 9

state 4

    (4) topLevelDecl -> declaration .
    NEWL            reduce using rule 4 (topLevelDecl -> declaration .)
    ;               reduce using rule 4 (topLevelDecl -> declaration .)


state 5

    (5) declaration -> varDecl .
    NEWL            reduce using rule 5 (declaration -> varDecl .)
    ;               reduce using rule 5 (declaration -> varDecl .)


state 6

    (6) varDecl -> identifierList . DECL_ASGN expressionList
    (7) identifierList -> identifierList . , IDENTIFIER
    DECL_ASGN       shift and go to state 12
    ,               shift and go to state 13


state 7

    (8) identifierList -> IDENTIFIER .
    DECL_ASGN       reduce using rule 8 (identifierList -> IDENTIFIER .)
    ,               reduce using rule 8 (identifierList -> IDENTIFIER .)


state 8

    (2) topLevelDecls -> topLevelDecls topLevelDecl . eos
    (79) eos -> . eos NEWL
    (80) eos -> . NEWL
    (81) eos -> . eos ;
    (82) eos -> . ;
    NEWL            shift and go to state 10
    ;               shift and go to state 11

    eos                            shift and go to state 14

state 9

    (3) topLevelDecls -> topLevelDecl eos .
    (79) eos -> eos . NEWL
    (81) eos -> eos . ;
    IDENTIFIER      reduce using rule 3 (topLevelDecls -> topLevelDecl eos .)
    $end            reduce using rule 3 (topLevelDecls -> topLevelDecl eos .)
    NEWL            shift and go to state 15
    ;               shift and go to state 16


state 10

    (80) eos -> NEWL .
    NEWL            reduce using rule 80 (eos -> NEWL .)
    ;               reduce using rule 80 (eos -> NEWL .)
    IDENTIFIER      reduce using rule 80 (eos -> NEWL .)
    $end            reduce using rule 80 (eos -> NEWL .)


state 11

    (82) eos -> ; .
    NEWL            reduce using rule 82 (eos -> ; .)
    ;               reduce using rule 82 (eos -> ; .)
    IDENTIFIER      reduce using rule 82 (eos -> ; .)
    $end            reduce using rule 82 (eos -> ; .)


state 12

    (6) varDecl -> identifierList DECL_ASGN . expressionList
    (9) expressionList -> . expressionList , expression
    (10) expressionList -> . expression
    (32) expression -> . expression BINARY_OP unaryExpr
    (33) expression -> . unaryExpr
    (34) unaryExpr -> . UNARY_OP unaryExpr
    (35) unaryExpr -> . primaryExpr
    (104) UNARY_OP -> . AND
    (105) UNARY_OP -> . EXCLM
    (106) UNARY_OP -> . MINUS
    (36) primaryExpr -> . conversion
    (37) primaryExpr -> . operand
    (44) conversion -> . type_ ( expression )
    (38) operand -> . ( expression )
    (39) operand -> . operandName
    (40) operand -> . literal
    (45) type_ -> . qualifiedIdent
    (46) type_ -> . typeName
    (41) operandName -> . qualifiedIdent
    (42) operandName -> . IDENTIFIER
    (43) literal -> . basicLit
    (47) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (48) typeName -> . numericType
    (49) typeName -> . STRING
    (50) typeName -> . BOOL
    (51) typeName -> . RUNE
    (64) basicLit -> . INT_LIT
    (65) basicLit -> . FLOAT_LIT
    (66) basicLit -> . DECIMAL_LIT EXPONENT
    (67) basicLit -> . FLOAT_LIT EXPONENT
    (68) basicLit -> . FALSE
    (69) basicLit -> . TRUE
    (70) basicLit -> . RUNE_LIT
    (71) basicLit -> . STRING_LIT
    (52) numericType -> . F32
    (53) numericType -> . F64
    (54) numericType -> . ISIZE
    (55) numericType -> . I64
    (56) numericType -> . I32
    (57) numericType -> . I16
    (58) numericType -> . I8
    (59) numericType -> . USIZE
    (60) numericType -> . U64
    (61) numericType -> . U32
    (62) numericType -> . U16
    (63) numericType -> . U8
    (75) INT_LIT -> . HEX_LIT
    (76) INT_LIT -> . OCTAL_LIT
    (77) INT_LIT -> . BINARY_LIT
    (78) INT_LIT -> . DECIMAL_LIT
    (72) FLOAT_LIT -> . . DECIMAL_LIT
    (73) FLOAT_LIT -> . DECIMAL_LIT .
    (74) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 22
    EXCLM           shift and go to state 23
    MINUS           shift and go to state 24
    (               shift and go to state 28
    IDENTIFIER      shift and go to state 33
    STRING          shift and go to state 37
    BOOL            shift and go to state 38
    RUNE            shift and go to state 39
    DECIMAL_LIT     shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    RUNE_LIT        shift and go to state 45
    STRING_LIT      shift and go to state 46
    F32             shift and go to state 47
    F64             shift and go to state 48
    ISIZE           shift and go to state 49
    I64             shift and go to state 50
    I32             shift and go to state 51
    I16             shift and go to state 52
    I8              shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 35

    expressionList                 shift and go to state 17
    expression                     shift and go to state 18
    unaryExpr                      shift and go to state 19
    UNARY_OP                       shift and go to state 20
    primaryExpr                    shift and go to state 21
    conversion                     shift and go to state 25
    operand                        shift and go to state 26
    type_                          shift and go to state 27
    operandName                    shift and go to state 29
    literal                        shift and go to state 30
    qualifiedIdent                 shift and go to state 31
    typeName                       shift and go to state 32
    basicLit                       shift and go to state 34
    numericType                    shift and go to state 36
    INT_LIT                        shift and go to state 40
    FLOAT_LIT                      shift and go to state 41

state 13

    (7) identifierList -> identifierList , . IDENTIFIER
    IDENTIFIER      shift and go to state 62


state 14

    (2) topLevelDecls -> topLevelDecls topLevelDecl eos .
    (79) eos -> eos . NEWL
    (81) eos -> eos . ;
    IDENTIFIER      reduce using rule 2 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    $end            reduce using rule 2 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    NEWL            shift and go to state 15
    ;               shift and go to state 16


state 15

    (79) eos -> eos NEWL .
    NEWL            reduce using rule 79 (eos -> eos NEWL .)
    ;               reduce using rule 79 (eos -> eos NEWL .)
    IDENTIFIER      reduce using rule 79 (eos -> eos NEWL .)
    $end            reduce using rule 79 (eos -> eos NEWL .)


state 16

    (81) eos -> eos ; .
    NEWL            reduce using rule 81 (eos -> eos ; .)
    ;               reduce using rule 81 (eos -> eos ; .)
    IDENTIFIER      reduce using rule 81 (eos -> eos ; .)
    $end            reduce using rule 81 (eos -> eos ; .)


state 17

    (6) varDecl -> identifierList DECL_ASGN expressionList .
    (9) expressionList -> expressionList . , expression
    NEWL            reduce using rule 6 (varDecl -> identifierList DECL_ASGN expressionList .)
    ;               reduce using rule 6 (varDecl -> identifierList DECL_ASGN expressionList .)
    ,               shift and go to state 63


state 18

    (10) expressionList -> expression .
    (32) expression -> expression . BINARY_OP unaryExpr
    (83) BINARY_OP -> . MUL_OP
    (84) BINARY_OP -> . ADD_OP
    (85) BINARY_OP -> . REL_OP
    (86) BINARY_OP -> . LOGIC_AND
    (87) BINARY_OP -> . LOGIC_OR
    (98) MUL_OP -> . SHR
    (99) MUL_OP -> . SHL
    (100) MUL_OP -> . AND
    (101) MUL_OP -> . MOD
    (102) MUL_OP -> . DIV
    (103) MUL_OP -> . STAR
    (94) ADD_OP -> . XOR
    (95) ADD_OP -> . OR
    (96) ADD_OP -> . MINUS
    (97) ADD_OP -> . PLUS
    (88) REL_OP -> . GE
    (89) REL_OP -> . GT
    (90) REL_OP -> . LE
    (91) REL_OP -> . LT
    (92) REL_OP -> . NE
    (93) REL_OP -> . EQ
    ,               reduce using rule 10 (expressionList -> expression .)
    NEWL            reduce using rule 10 (expressionList -> expression .)
    ;               reduce using rule 10 (expressionList -> expression .)
    LOGIC_AND       shift and go to state 68
    LOGIC_OR        shift and go to state 69
    SHR             shift and go to state 70
    SHL             shift and go to state 71
    AND             shift and go to state 72
    MOD             shift and go to state 73
    DIV             shift and go to state 74
    STAR            shift and go to state 75
    XOR             shift and go to state 76
    OR              shift and go to state 77
    MINUS           shift and go to state 78
    PLUS            shift and go to state 79
    GE              shift and go to state 80
    GT              shift and go to state 81
    LE              shift and go to state 82
    LT              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85

    BINARY_OP                      shift and go to state 64
    MUL_OP                         shift and go to state 65
    ADD_OP                         shift and go to state 66
    REL_OP                         shift and go to state 67

state 19

    (33) expression -> unaryExpr .
    LOGIC_AND       reduce using rule 33 (expression -> unaryExpr .)
    LOGIC_OR        reduce using rule 33 (expression -> unaryExpr .)
    SHR             reduce using rule 33 (expression -> unaryExpr .)
    SHL             reduce using rule 33 (expression -> unaryExpr .)
    AND             reduce using rule 33 (expression -> unaryExpr .)
    MOD             reduce using rule 33 (expression -> unaryExpr .)
    DIV             reduce using rule 33 (expression -> unaryExpr .)
    STAR            reduce using rule 33 (expression -> unaryExpr .)
    XOR             reduce using rule 33 (expression -> unaryExpr .)
    OR              reduce using rule 33 (expression -> unaryExpr .)
    MINUS           reduce using rule 33 (expression -> unaryExpr .)
    PLUS            reduce using rule 33 (expression -> unaryExpr .)
    GE              reduce using rule 33 (expression -> unaryExpr .)
    GT              reduce using rule 33 (expression -> unaryExpr .)
    LE              reduce using rule 33 (expression -> unaryExpr .)
    LT              reduce using rule 33 (expression -> unaryExpr .)
    NE              reduce using rule 33 (expression -> unaryExpr .)
    EQ              reduce using rule 33 (expression -> unaryExpr .)
    ,               reduce using rule 33 (expression -> unaryExpr .)
    NEWL            reduce using rule 33 (expression -> unaryExpr .)
    ;               reduce using rule 33 (expression -> unaryExpr .)
    )               reduce using rule 33 (expression -> unaryExpr .)


state 20

    (34) unaryExpr -> UNARY_OP . unaryExpr
    (34) unaryExpr -> . UNARY_OP unaryExpr
    (35) unaryExpr -> . primaryExpr
    (104) UNARY_OP -> . AND
    (105) UNARY_OP -> . EXCLM
    (106) UNARY_OP -> . MINUS
    (36) primaryExpr -> . conversion
    (37) primaryExpr -> . operand
    (44) conversion -> . type_ ( expression )
    (38) operand -> . ( expression )
    (39) operand -> . operandName
    (40) operand -> . literal
    (45) type_ -> . qualifiedIdent
    (46) type_ -> . typeName
    (41) operandName -> . qualifiedIdent
    (42) operandName -> . IDENTIFIER
    (43) literal -> . basicLit
    (47) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (48) typeName -> . numericType
    (49) typeName -> . STRING
    (50) typeName -> . BOOL
    (51) typeName -> . RUNE
    (64) basicLit -> . INT_LIT
    (65) basicLit -> . FLOAT_LIT
    (66) basicLit -> . DECIMAL_LIT EXPONENT
    (67) basicLit -> . FLOAT_LIT EXPONENT
    (68) basicLit -> . FALSE
    (69) basicLit -> . TRUE
    (70) basicLit -> . RUNE_LIT
    (71) basicLit -> . STRING_LIT
    (52) numericType -> . F32
    (53) numericType -> . F64
    (54) numericType -> . ISIZE
    (55) numericType -> . I64
    (56) numericType -> . I32
    (57) numericType -> . I16
    (58) numericType -> . I8
    (59) numericType -> . USIZE
    (60) numericType -> . U64
    (61) numericType -> . U32
    (62) numericType -> . U16
    (63) numericType -> . U8
    (75) INT_LIT -> . HEX_LIT
    (76) INT_LIT -> . OCTAL_LIT
    (77) INT_LIT -> . BINARY_LIT
    (78) INT_LIT -> . DECIMAL_LIT
    (72) FLOAT_LIT -> . . DECIMAL_LIT
    (73) FLOAT_LIT -> . DECIMAL_LIT .
    (74) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 22
    EXCLM           shift and go to state 23
    MINUS           shift and go to state 24
    (               shift and go to state 28
    IDENTIFIER      shift and go to state 33
    STRING          shift and go to state 37
    BOOL            shift and go to state 38
    RUNE            shift and go to state 39
    DECIMAL_LIT     shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    RUNE_LIT        shift and go to state 45
    STRING_LIT      shift and go to state 46
    F32             shift and go to state 47
    F64             shift and go to state 48
    ISIZE           shift and go to state 49
    I64             shift and go to state 50
    I32             shift and go to state 51
    I16             shift and go to state 52
    I8              shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 35

    UNARY_OP                       shift and go to state 20
    unaryExpr                      shift and go to state 86
    primaryExpr                    shift and go to state 21
    conversion                     shift and go to state 25
    operand                        shift and go to state 26
    type_                          shift and go to state 27
    operandName                    shift and go to state 29
    literal                        shift and go to state 30
    qualifiedIdent                 shift and go to state 31
    typeName                       shift and go to state 32
    basicLit                       shift and go to state 34
    numericType                    shift and go to state 36
    INT_LIT                        shift and go to state 40
    FLOAT_LIT                      shift and go to state 41

state 21

    (35) unaryExpr -> primaryExpr .
    LOGIC_AND       reduce using rule 35 (unaryExpr -> primaryExpr .)
    LOGIC_OR        reduce using rule 35 (unaryExpr -> primaryExpr .)
    SHR             reduce using rule 35 (unaryExpr -> primaryExpr .)
    SHL             reduce using rule 35 (unaryExpr -> primaryExpr .)
    AND             reduce using rule 35 (unaryExpr -> primaryExpr .)
    MOD             reduce using rule 35 (unaryExpr -> primaryExpr .)
    DIV             reduce using rule 35 (unaryExpr -> primaryExpr .)
    STAR            reduce using rule 35 (unaryExpr -> primaryExpr .)
    XOR             reduce using rule 35 (unaryExpr -> primaryExpr .)
    OR              reduce using rule 35 (unaryExpr -> primaryExpr .)
    MINUS           reduce using rule 35 (unaryExpr -> primaryExpr .)
    PLUS            reduce using rule 35 (unaryExpr -> primaryExpr .)
    GE              reduce using rule 35 (unaryExpr -> primaryExpr .)
    GT              reduce using rule 35 (unaryExpr -> primaryExpr .)
    LE              reduce using rule 35 (unaryExpr -> primaryExpr .)
    LT              reduce using rule 35 (unaryExpr -> primaryExpr .)
    NE              reduce using rule 35 (unaryExpr -> primaryExpr .)
    EQ              reduce using rule 35 (unaryExpr -> primaryExpr .)
    ,               reduce using rule 35 (unaryExpr -> primaryExpr .)
    NEWL            reduce using rule 35 (unaryExpr -> primaryExpr .)
    ;               reduce using rule 35 (unaryExpr -> primaryExpr .)
    )               reduce using rule 35 (unaryExpr -> primaryExpr .)


state 22

    (104) UNARY_OP -> AND .
    AND             reduce using rule 104 (UNARY_OP -> AND .)
    EXCLM           reduce using rule 104 (UNARY_OP -> AND .)
    MINUS           reduce using rule 104 (UNARY_OP -> AND .)
    (               reduce using rule 104 (UNARY_OP -> AND .)
    IDENTIFIER      reduce using rule 104 (UNARY_OP -> AND .)
    STRING          reduce using rule 104 (UNARY_OP -> AND .)
    BOOL            reduce using rule 104 (UNARY_OP -> AND .)
    RUNE            reduce using rule 104 (UNARY_OP -> AND .)
    DECIMAL_LIT     reduce using rule 104 (UNARY_OP -> AND .)
    FALSE           reduce using rule 104 (UNARY_OP -> AND .)
    TRUE            reduce using rule 104 (UNARY_OP -> AND .)
    RUNE_LIT        reduce using rule 104 (UNARY_OP -> AND .)
    STRING_LIT      reduce using rule 104 (UNARY_OP -> AND .)
    F32             reduce using rule 104 (UNARY_OP -> AND .)
    F64             reduce using rule 104 (UNARY_OP -> AND .)
    ISIZE           reduce using rule 104 (UNARY_OP -> AND .)
    I64             reduce using rule 104 (UNARY_OP -> AND .)
    I32             reduce using rule 104 (UNARY_OP -> AND .)
    I16             reduce using rule 104 (UNARY_OP -> AND .)
    I8              reduce using rule 104 (UNARY_OP -> AND .)
    USIZE           reduce using rule 104 (UNARY_OP -> AND .)
    U64             reduce using rule 104 (UNARY_OP -> AND .)
    U32             reduce using rule 104 (UNARY_OP -> AND .)
    U16             reduce using rule 104 (UNARY_OP -> AND .)
    U8              reduce using rule 104 (UNARY_OP -> AND .)
    HEX_LIT         reduce using rule 104 (UNARY_OP -> AND .)
    OCTAL_LIT       reduce using rule 104 (UNARY_OP -> AND .)
    BINARY_LIT      reduce using rule 104 (UNARY_OP -> AND .)
    .               reduce using rule 104 (UNARY_OP -> AND .)


state 23

    (105) UNARY_OP -> EXCLM .
    AND             reduce using rule 105 (UNARY_OP -> EXCLM .)
    EXCLM           reduce using rule 105 (UNARY_OP -> EXCLM .)
    MINUS           reduce using rule 105 (UNARY_OP -> EXCLM .)
    (               reduce using rule 105 (UNARY_OP -> EXCLM .)
    IDENTIFIER      reduce using rule 105 (UNARY_OP -> EXCLM .)
    STRING          reduce using rule 105 (UNARY_OP -> EXCLM .)
    BOOL            reduce using rule 105 (UNARY_OP -> EXCLM .)
    RUNE            reduce using rule 105 (UNARY_OP -> EXCLM .)
    DECIMAL_LIT     reduce using rule 105 (UNARY_OP -> EXCLM .)
    FALSE           reduce using rule 105 (UNARY_OP -> EXCLM .)
    TRUE            reduce using rule 105 (UNARY_OP -> EXCLM .)
    RUNE_LIT        reduce using rule 105 (UNARY_OP -> EXCLM .)
    STRING_LIT      reduce using rule 105 (UNARY_OP -> EXCLM .)
    F32             reduce using rule 105 (UNARY_OP -> EXCLM .)
    F64             reduce using rule 105 (UNARY_OP -> EXCLM .)
    ISIZE           reduce using rule 105 (UNARY_OP -> EXCLM .)
    I64             reduce using rule 105 (UNARY_OP -> EXCLM .)
    I32             reduce using rule 105 (UNARY_OP -> EXCLM .)
    I16             reduce using rule 105 (UNARY_OP -> EXCLM .)
    I8              reduce using rule 105 (UNARY_OP -> EXCLM .)
    USIZE           reduce using rule 105 (UNARY_OP -> EXCLM .)
    U64             reduce using rule 105 (UNARY_OP -> EXCLM .)
    U32             reduce using rule 105 (UNARY_OP -> EXCLM .)
    U16             reduce using rule 105 (UNARY_OP -> EXCLM .)
    U8              reduce using rule 105 (UNARY_OP -> EXCLM .)
    HEX_LIT         reduce using rule 105 (UNARY_OP -> EXCLM .)
    OCTAL_LIT       reduce using rule 105 (UNARY_OP -> EXCLM .)
    BINARY_LIT      reduce using rule 105 (UNARY_OP -> EXCLM .)
    .               reduce using rule 105 (UNARY_OP -> EXCLM .)


state 24

    (106) UNARY_OP -> MINUS .
    AND             reduce using rule 106 (UNARY_OP -> MINUS .)
    EXCLM           reduce using rule 106 (UNARY_OP -> MINUS .)
    MINUS           reduce using rule 106 (UNARY_OP -> MINUS .)
    (               reduce using rule 106 (UNARY_OP -> MINUS .)
    IDENTIFIER      reduce using rule 106 (UNARY_OP -> MINUS .)
    STRING          reduce using rule 106 (UNARY_OP -> MINUS .)
    BOOL            reduce using rule 106 (UNARY_OP -> MINUS .)
    RUNE            reduce using rule 106 (UNARY_OP -> MINUS .)
    DECIMAL_LIT     reduce using rule 106 (UNARY_OP -> MINUS .)
    FALSE           reduce using rule 106 (UNARY_OP -> MINUS .)
    TRUE            reduce using rule 106 (UNARY_OP -> MINUS .)
    RUNE_LIT        reduce using rule 106 (UNARY_OP -> MINUS .)
    STRING_LIT      reduce using rule 106 (UNARY_OP -> MINUS .)
    F32             reduce using rule 106 (UNARY_OP -> MINUS .)
    F64             reduce using rule 106 (UNARY_OP -> MINUS .)
    ISIZE           reduce using rule 106 (UNARY_OP -> MINUS .)
    I64             reduce using rule 106 (UNARY_OP -> MINUS .)
    I32             reduce using rule 106 (UNARY_OP -> MINUS .)
    I16             reduce using rule 106 (UNARY_OP -> MINUS .)
    I8              reduce using rule 106 (UNARY_OP -> MINUS .)
    USIZE           reduce using rule 106 (UNARY_OP -> MINUS .)
    U64             reduce using rule 106 (UNARY_OP -> MINUS .)
    U32             reduce using rule 106 (UNARY_OP -> MINUS .)
    U16             reduce using rule 106 (UNARY_OP -> MINUS .)
    U8              reduce using rule 106 (UNARY_OP -> MINUS .)
    HEX_LIT         reduce using rule 106 (UNARY_OP -> MINUS .)
    OCTAL_LIT       reduce using rule 106 (UNARY_OP -> MINUS .)
    BINARY_LIT      reduce using rule 106 (UNARY_OP -> MINUS .)
    .               reduce using rule 106 (UNARY_OP -> MINUS .)


state 25

    (36) primaryExpr -> conversion .
    LOGIC_AND       reduce using rule 36 (primaryExpr -> conversion .)
    LOGIC_OR        reduce using rule 36 (primaryExpr -> conversion .)
    SHR             reduce using rule 36 (primaryExpr -> conversion .)
    SHL             reduce using rule 36 (primaryExpr -> conversion .)
    AND             reduce using rule 36 (primaryExpr -> conversion .)
    MOD             reduce using rule 36 (primaryExpr -> conversion .)
    DIV             reduce using rule 36 (primaryExpr -> conversion .)
    STAR            reduce using rule 36 (primaryExpr -> conversion .)
    XOR             reduce using rule 36 (primaryExpr -> conversion .)
    OR              reduce using rule 36 (primaryExpr -> conversion .)
    MINUS           reduce using rule 36 (primaryExpr -> conversion .)
    PLUS            reduce using rule 36 (primaryExpr -> conversion .)
    GE              reduce using rule 36 (primaryExpr -> conversion .)
    GT              reduce using rule 36 (primaryExpr -> conversion .)
    LE              reduce using rule 36 (primaryExpr -> conversion .)
    LT              reduce using rule 36 (primaryExpr -> conversion .)
    NE              reduce using rule 36 (primaryExpr -> conversion .)
    EQ              reduce using rule 36 (primaryExpr -> conversion .)
    ,               reduce using rule 36 (primaryExpr -> conversion .)
    NEWL            reduce using rule 36 (primaryExpr -> conversion .)
    ;               reduce using rule 36 (primaryExpr -> conversion .)
    )               reduce using rule 36 (primaryExpr -> conversion .)


state 26

    (37) primaryExpr -> operand .
    LOGIC_AND       reduce using rule 37 (primaryExpr -> operand .)
    LOGIC_OR        reduce using rule 37 (primaryExpr -> operand .)
    SHR             reduce using rule 37 (primaryExpr -> operand .)
    SHL             reduce using rule 37 (primaryExpr -> operand .)
    AND             reduce using rule 37 (primaryExpr -> operand .)
    MOD             reduce using rule 37 (primaryExpr -> operand .)
    DIV             reduce using rule 37 (primaryExpr -> operand .)
    STAR            reduce using rule 37 (primaryExpr -> operand .)
    XOR             reduce using rule 37 (primaryExpr -> operand .)
    OR              reduce using rule 37 (primaryExpr -> operand .)
    MINUS           reduce using rule 37 (primaryExpr -> operand .)
    PLUS            reduce using rule 37 (primaryExpr -> operand .)
    GE              reduce using rule 37 (primaryExpr -> operand .)
    GT              reduce using rule 37 (primaryExpr -> operand .)
    LE              reduce using rule 37 (primaryExpr -> operand .)
    LT              reduce using rule 37 (primaryExpr -> operand .)
    NE              reduce using rule 37 (primaryExpr -> operand .)
    EQ              reduce using rule 37 (primaryExpr -> operand .)
    ,               reduce using rule 37 (primaryExpr -> operand .)
    NEWL            reduce using rule 37 (primaryExpr -> operand .)
    ;               reduce using rule 37 (primaryExpr -> operand .)
    )               reduce using rule 37 (primaryExpr -> operand .)


state 27

    (44) conversion -> type_ . ( expression )
    (               shift and go to state 87


state 28

    (38) operand -> ( . expression )
    (32) expression -> . expression BINARY_OP unaryExpr
    (33) expression -> . unaryExpr
    (34) unaryExpr -> . UNARY_OP unaryExpr
    (35) unaryExpr -> . primaryExpr
    (104) UNARY_OP -> . AND
    (105) UNARY_OP -> . EXCLM
    (106) UNARY_OP -> . MINUS
    (36) primaryExpr -> . conversion
    (37) primaryExpr -> . operand
    (44) conversion -> . type_ ( expression )
    (38) operand -> . ( expression )
    (39) operand -> . operandName
    (40) operand -> . literal
    (45) type_ -> . qualifiedIdent
    (46) type_ -> . typeName
    (41) operandName -> . qualifiedIdent
    (42) operandName -> . IDENTIFIER
    (43) literal -> . basicLit
    (47) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (48) typeName -> . numericType
    (49) typeName -> . STRING
    (50) typeName -> . BOOL
    (51) typeName -> . RUNE
    (64) basicLit -> . INT_LIT
    (65) basicLit -> . FLOAT_LIT
    (66) basicLit -> . DECIMAL_LIT EXPONENT
    (67) basicLit -> . FLOAT_LIT EXPONENT
    (68) basicLit -> . FALSE
    (69) basicLit -> . TRUE
    (70) basicLit -> . RUNE_LIT
    (71) basicLit -> . STRING_LIT
    (52) numericType -> . F32
    (53) numericType -> . F64
    (54) numericType -> . ISIZE
    (55) numericType -> . I64
    (56) numericType -> . I32
    (57) numericType -> . I16
    (58) numericType -> . I8
    (59) numericType -> . USIZE
    (60) numericType -> . U64
    (61) numericType -> . U32
    (62) numericType -> . U16
    (63) numericType -> . U8
    (75) INT_LIT -> . HEX_LIT
    (76) INT_LIT -> . OCTAL_LIT
    (77) INT_LIT -> . BINARY_LIT
    (78) INT_LIT -> . DECIMAL_LIT
    (72) FLOAT_LIT -> . . DECIMAL_LIT
    (73) FLOAT_LIT -> . DECIMAL_LIT .
    (74) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 22
    EXCLM           shift and go to state 23
    MINUS           shift and go to state 24
    (               shift and go to state 28
    IDENTIFIER      shift and go to state 33
    STRING          shift and go to state 37
    BOOL            shift and go to state 38
    RUNE            shift and go to state 39
    DECIMAL_LIT     shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    RUNE_LIT        shift and go to state 45
    STRING_LIT      shift and go to state 46
    F32             shift and go to state 47
    F64             shift and go to state 48
    ISIZE           shift and go to state 49
    I64             shift and go to state 50
    I32             shift and go to state 51
    I16             shift and go to state 52
    I8              shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 35

    expression                     shift and go to state 88
    unaryExpr                      shift and go to state 19
    UNARY_OP                       shift and go to state 20
    primaryExpr                    shift and go to state 21
    conversion                     shift and go to state 25
    operand                        shift and go to state 26
    type_                          shift and go to state 27
    operandName                    shift and go to state 29
    literal                        shift and go to state 30
    qualifiedIdent                 shift and go to state 31
    typeName                       shift and go to state 32
    basicLit                       shift and go to state 34
    numericType                    shift and go to state 36
    INT_LIT                        shift and go to state 40
    FLOAT_LIT                      shift and go to state 41

state 29

    (39) operand -> operandName .
    LOGIC_AND       reduce using rule 39 (operand -> operandName .)
    LOGIC_OR        reduce using rule 39 (operand -> operandName .)
    SHR             reduce using rule 39 (operand -> operandName .)
    SHL             reduce using rule 39 (operand -> operandName .)
    AND             reduce using rule 39 (operand -> operandName .)
    MOD             reduce using rule 39 (operand -> operandName .)
    DIV             reduce using rule 39 (operand -> operandName .)
    STAR            reduce using rule 39 (operand -> operandName .)
    XOR             reduce using rule 39 (operand -> operandName .)
    OR              reduce using rule 39 (operand -> operandName .)
    MINUS           reduce using rule 39 (operand -> operandName .)
    PLUS            reduce using rule 39 (operand -> operandName .)
    GE              reduce using rule 39 (operand -> operandName .)
    GT              reduce using rule 39 (operand -> operandName .)
    LE              reduce using rule 39 (operand -> operandName .)
    LT              reduce using rule 39 (operand -> operandName .)
    NE              reduce using rule 39 (operand -> operandName .)
    EQ              reduce using rule 39 (operand -> operandName .)
    ,               reduce using rule 39 (operand -> operandName .)
    NEWL            reduce using rule 39 (operand -> operandName .)
    ;               reduce using rule 39 (operand -> operandName .)
    )               reduce using rule 39 (operand -> operandName .)


state 30

    (40) operand -> literal .
    LOGIC_AND       reduce using rule 40 (operand -> literal .)
    LOGIC_OR        reduce using rule 40 (operand -> literal .)
    SHR             reduce using rule 40 (operand -> literal .)
    SHL             reduce using rule 40 (operand -> literal .)
    AND             reduce using rule 40 (operand -> literal .)
    MOD             reduce using rule 40 (operand -> literal .)
    DIV             reduce using rule 40 (operand -> literal .)
    STAR            reduce using rule 40 (operand -> literal .)
    XOR             reduce using rule 40 (operand -> literal .)
    OR              reduce using rule 40 (operand -> literal .)
    MINUS           reduce using rule 40 (operand -> literal .)
    PLUS            reduce using rule 40 (operand -> literal .)
    GE              reduce using rule 40 (operand -> literal .)
    GT              reduce using rule 40 (operand -> literal .)
    LE              reduce using rule 40 (operand -> literal .)
    LT              reduce using rule 40 (operand -> literal .)
    NE              reduce using rule 40 (operand -> literal .)
    EQ              reduce using rule 40 (operand -> literal .)
    ,               reduce using rule 40 (operand -> literal .)
    NEWL            reduce using rule 40 (operand -> literal .)
    ;               reduce using rule 40 (operand -> literal .)
    )               reduce using rule 40 (operand -> literal .)


state 31

    (45) type_ -> qualifiedIdent .
    (41) operandName -> qualifiedIdent .
    (               reduce using rule 45 (type_ -> qualifiedIdent .)
    LOGIC_AND       reduce using rule 41 (operandName -> qualifiedIdent .)
    LOGIC_OR        reduce using rule 41 (operandName -> qualifiedIdent .)
    SHR             reduce using rule 41 (operandName -> qualifiedIdent .)
    SHL             reduce using rule 41 (operandName -> qualifiedIdent .)
    AND             reduce using rule 41 (operandName -> qualifiedIdent .)
    MOD             reduce using rule 41 (operandName -> qualifiedIdent .)
    DIV             reduce using rule 41 (operandName -> qualifiedIdent .)
    STAR            reduce using rule 41 (operandName -> qualifiedIdent .)
    XOR             reduce using rule 41 (operandName -> qualifiedIdent .)
    OR              reduce using rule 41 (operandName -> qualifiedIdent .)
    MINUS           reduce using rule 41 (operandName -> qualifiedIdent .)
    PLUS            reduce using rule 41 (operandName -> qualifiedIdent .)
    GE              reduce using rule 41 (operandName -> qualifiedIdent .)
    GT              reduce using rule 41 (operandName -> qualifiedIdent .)
    LE              reduce using rule 41 (operandName -> qualifiedIdent .)
    LT              reduce using rule 41 (operandName -> qualifiedIdent .)
    NE              reduce using rule 41 (operandName -> qualifiedIdent .)
    EQ              reduce using rule 41 (operandName -> qualifiedIdent .)
    ,               reduce using rule 41 (operandName -> qualifiedIdent .)
    NEWL            reduce using rule 41 (operandName -> qualifiedIdent .)
    ;               reduce using rule 41 (operandName -> qualifiedIdent .)
    )               reduce using rule 41 (operandName -> qualifiedIdent .)


state 32

    (46) type_ -> typeName .
    (               reduce using rule 46 (type_ -> typeName .)


state 33

    (42) operandName -> IDENTIFIER .
    (47) qualifiedIdent -> IDENTIFIER . . IDENTIFIER
    LOGIC_AND       reduce using rule 42 (operandName -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 42 (operandName -> IDENTIFIER .)
    SHR             reduce using rule 42 (operandName -> IDENTIFIER .)
    SHL             reduce using rule 42 (operandName -> IDENTIFIER .)
    AND             reduce using rule 42 (operandName -> IDENTIFIER .)
    MOD             reduce using rule 42 (operandName -> IDENTIFIER .)
    DIV             reduce using rule 42 (operandName -> IDENTIFIER .)
    STAR            reduce using rule 42 (operandName -> IDENTIFIER .)
    XOR             reduce using rule 42 (operandName -> IDENTIFIER .)
    OR              reduce using rule 42 (operandName -> IDENTIFIER .)
    MINUS           reduce using rule 42 (operandName -> IDENTIFIER .)
    PLUS            reduce using rule 42 (operandName -> IDENTIFIER .)
    GE              reduce using rule 42 (operandName -> IDENTIFIER .)
    GT              reduce using rule 42 (operandName -> IDENTIFIER .)
    LE              reduce using rule 42 (operandName -> IDENTIFIER .)
    LT              reduce using rule 42 (operandName -> IDENTIFIER .)
    NE              reduce using rule 42 (operandName -> IDENTIFIER .)
    EQ              reduce using rule 42 (operandName -> IDENTIFIER .)
    ,               reduce using rule 42 (operandName -> IDENTIFIER .)
    NEWL            reduce using rule 42 (operandName -> IDENTIFIER .)
    ;               reduce using rule 42 (operandName -> IDENTIFIER .)
    )               reduce using rule 42 (operandName -> IDENTIFIER .)
    .               shift and go to state 89


state 34

    (43) literal -> basicLit .
    LOGIC_AND       reduce using rule 43 (literal -> basicLit .)
    LOGIC_OR        reduce using rule 43 (literal -> basicLit .)
    SHR             reduce using rule 43 (literal -> basicLit .)
    SHL             reduce using rule 43 (literal -> basicLit .)
    AND             reduce using rule 43 (literal -> basicLit .)
    MOD             reduce using rule 43 (literal -> basicLit .)
    DIV             reduce using rule 43 (literal -> basicLit .)
    STAR            reduce using rule 43 (literal -> basicLit .)
    XOR             reduce using rule 43 (literal -> basicLit .)
    OR              reduce using rule 43 (literal -> basicLit .)
    MINUS           reduce using rule 43 (literal -> basicLit .)
    PLUS            reduce using rule 43 (literal -> basicLit .)
    GE              reduce using rule 43 (literal -> basicLit .)
    GT              reduce using rule 43 (literal -> basicLit .)
    LE              reduce using rule 43 (literal -> basicLit .)
    LT              reduce using rule 43 (literal -> basicLit .)
    NE              reduce using rule 43 (literal -> basicLit .)
    EQ              reduce using rule 43 (literal -> basicLit .)
    ,               reduce using rule 43 (literal -> basicLit .)
    NEWL            reduce using rule 43 (literal -> basicLit .)
    ;               reduce using rule 43 (literal -> basicLit .)
    )               reduce using rule 43 (literal -> basicLit .)


state 35

    (72) FLOAT_LIT -> . . DECIMAL_LIT
    DECIMAL_LIT     shift and go to state 90


state 36

    (48) typeName -> numericType .
    (               reduce using rule 48 (typeName -> numericType .)


state 37

    (49) typeName -> STRING .
    (               reduce using rule 49 (typeName -> STRING .)


state 38

    (50) typeName -> BOOL .
    (               reduce using rule 50 (typeName -> BOOL .)


state 39

    (51) typeName -> RUNE .
    (               reduce using rule 51 (typeName -> RUNE .)


state 40

    (64) basicLit -> INT_LIT .
    LOGIC_AND       reduce using rule 64 (basicLit -> INT_LIT .)
    LOGIC_OR        reduce using rule 64 (basicLit -> INT_LIT .)
    SHR             reduce using rule 64 (basicLit -> INT_LIT .)
    SHL             reduce using rule 64 (basicLit -> INT_LIT .)
    AND             reduce using rule 64 (basicLit -> INT_LIT .)
    MOD             reduce using rule 64 (basicLit -> INT_LIT .)
    DIV             reduce using rule 64 (basicLit -> INT_LIT .)
    STAR            reduce using rule 64 (basicLit -> INT_LIT .)
    XOR             reduce using rule 64 (basicLit -> INT_LIT .)
    OR              reduce using rule 64 (basicLit -> INT_LIT .)
    MINUS           reduce using rule 64 (basicLit -> INT_LIT .)
    PLUS            reduce using rule 64 (basicLit -> INT_LIT .)
    GE              reduce using rule 64 (basicLit -> INT_LIT .)
    GT              reduce using rule 64 (basicLit -> INT_LIT .)
    LE              reduce using rule 64 (basicLit -> INT_LIT .)
    LT              reduce using rule 64 (basicLit -> INT_LIT .)
    NE              reduce using rule 64 (basicLit -> INT_LIT .)
    EQ              reduce using rule 64 (basicLit -> INT_LIT .)
    ,               reduce using rule 64 (basicLit -> INT_LIT .)
    NEWL            reduce using rule 64 (basicLit -> INT_LIT .)
    ;               reduce using rule 64 (basicLit -> INT_LIT .)
    )               reduce using rule 64 (basicLit -> INT_LIT .)


state 41

    (65) basicLit -> FLOAT_LIT .
    (67) basicLit -> FLOAT_LIT . EXPONENT
    LOGIC_AND       reduce using rule 65 (basicLit -> FLOAT_LIT .)
    LOGIC_OR        reduce using rule 65 (basicLit -> FLOAT_LIT .)
    SHR             reduce using rule 65 (basicLit -> FLOAT_LIT .)
    SHL             reduce using rule 65 (basicLit -> FLOAT_LIT .)
    AND             reduce using rule 65 (basicLit -> FLOAT_LIT .)
    MOD             reduce using rule 65 (basicLit -> FLOAT_LIT .)
    DIV             reduce using rule 65 (basicLit -> FLOAT_LIT .)
    STAR            reduce using rule 65 (basicLit -> FLOAT_LIT .)
    XOR             reduce using rule 65 (basicLit -> FLOAT_LIT .)
    OR              reduce using rule 65 (basicLit -> FLOAT_LIT .)
    MINUS           reduce using rule 65 (basicLit -> FLOAT_LIT .)
    PLUS            reduce using rule 65 (basicLit -> FLOAT_LIT .)
    GE              reduce using rule 65 (basicLit -> FLOAT_LIT .)
    GT              reduce using rule 65 (basicLit -> FLOAT_LIT .)
    LE              reduce using rule 65 (basicLit -> FLOAT_LIT .)
    LT              reduce using rule 65 (basicLit -> FLOAT_LIT .)
    NE              reduce using rule 65 (basicLit -> FLOAT_LIT .)
    EQ              reduce using rule 65 (basicLit -> FLOAT_LIT .)
    ,               reduce using rule 65 (basicLit -> FLOAT_LIT .)
    NEWL            reduce using rule 65 (basicLit -> FLOAT_LIT .)
    ;               reduce using rule 65 (basicLit -> FLOAT_LIT .)
    )               reduce using rule 65 (basicLit -> FLOAT_LIT .)
    EXPONENT        shift and go to state 91


state 42

    (66) basicLit -> DECIMAL_LIT . EXPONENT
    (78) INT_LIT -> DECIMAL_LIT .
    (73) FLOAT_LIT -> DECIMAL_LIT . .
    (74) FLOAT_LIT -> DECIMAL_LIT . . DECIMAL_LIT
    EXPONENT        shift and go to state 92
    LOGIC_AND       reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    SHR             reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    SHL             reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    AND             reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    MOD             reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    DIV             reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    STAR            reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    XOR             reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    OR              reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    MINUS           reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    PLUS            reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    GE              reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    GT              reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    LE              reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    LT              reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    NE              reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    EQ              reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    ,               reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    NEWL            reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    ;               reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    )               reduce using rule 78 (INT_LIT -> DECIMAL_LIT .)
    .               shift and go to state 93


state 43

    (68) basicLit -> FALSE .
    LOGIC_AND       reduce using rule 68 (basicLit -> FALSE .)
    LOGIC_OR        reduce using rule 68 (basicLit -> FALSE .)
    SHR             reduce using rule 68 (basicLit -> FALSE .)
    SHL             reduce using rule 68 (basicLit -> FALSE .)
    AND             reduce using rule 68 (basicLit -> FALSE .)
    MOD             reduce using rule 68 (basicLit -> FALSE .)
    DIV             reduce using rule 68 (basicLit -> FALSE .)
    STAR            reduce using rule 68 (basicLit -> FALSE .)
    XOR             reduce using rule 68 (basicLit -> FALSE .)
    OR              reduce using rule 68 (basicLit -> FALSE .)
    MINUS           reduce using rule 68 (basicLit -> FALSE .)
    PLUS            reduce using rule 68 (basicLit -> FALSE .)
    GE              reduce using rule 68 (basicLit -> FALSE .)
    GT              reduce using rule 68 (basicLit -> FALSE .)
    LE              reduce using rule 68 (basicLit -> FALSE .)
    LT              reduce using rule 68 (basicLit -> FALSE .)
    NE              reduce using rule 68 (basicLit -> FALSE .)
    EQ              reduce using rule 68 (basicLit -> FALSE .)
    ,               reduce using rule 68 (basicLit -> FALSE .)
    NEWL            reduce using rule 68 (basicLit -> FALSE .)
    ;               reduce using rule 68 (basicLit -> FALSE .)
    )               reduce using rule 68 (basicLit -> FALSE .)


state 44

    (69) basicLit -> TRUE .
    LOGIC_AND       reduce using rule 69 (basicLit -> TRUE .)
    LOGIC_OR        reduce using rule 69 (basicLit -> TRUE .)
    SHR             reduce using rule 69 (basicLit -> TRUE .)
    SHL             reduce using rule 69 (basicLit -> TRUE .)
    AND             reduce using rule 69 (basicLit -> TRUE .)
    MOD             reduce using rule 69 (basicLit -> TRUE .)
    DIV             reduce using rule 69 (basicLit -> TRUE .)
    STAR            reduce using rule 69 (basicLit -> TRUE .)
    XOR             reduce using rule 69 (basicLit -> TRUE .)
    OR              reduce using rule 69 (basicLit -> TRUE .)
    MINUS           reduce using rule 69 (basicLit -> TRUE .)
    PLUS            reduce using rule 69 (basicLit -> TRUE .)
    GE              reduce using rule 69 (basicLit -> TRUE .)
    GT              reduce using rule 69 (basicLit -> TRUE .)
    LE              reduce using rule 69 (basicLit -> TRUE .)
    LT              reduce using rule 69 (basicLit -> TRUE .)
    NE              reduce using rule 69 (basicLit -> TRUE .)
    EQ              reduce using rule 69 (basicLit -> TRUE .)
    ,               reduce using rule 69 (basicLit -> TRUE .)
    NEWL            reduce using rule 69 (basicLit -> TRUE .)
    ;               reduce using rule 69 (basicLit -> TRUE .)
    )               reduce using rule 69 (basicLit -> TRUE .)


state 45

    (70) basicLit -> RUNE_LIT .
    LOGIC_AND       reduce using rule 70 (basicLit -> RUNE_LIT .)
    LOGIC_OR        reduce using rule 70 (basicLit -> RUNE_LIT .)
    SHR             reduce using rule 70 (basicLit -> RUNE_LIT .)
    SHL             reduce using rule 70 (basicLit -> RUNE_LIT .)
    AND             reduce using rule 70 (basicLit -> RUNE_LIT .)
    MOD             reduce using rule 70 (basicLit -> RUNE_LIT .)
    DIV             reduce using rule 70 (basicLit -> RUNE_LIT .)
    STAR            reduce using rule 70 (basicLit -> RUNE_LIT .)
    XOR             reduce using rule 70 (basicLit -> RUNE_LIT .)
    OR              reduce using rule 70 (basicLit -> RUNE_LIT .)
    MINUS           reduce using rule 70 (basicLit -> RUNE_LIT .)
    PLUS            reduce using rule 70 (basicLit -> RUNE_LIT .)
    GE              reduce using rule 70 (basicLit -> RUNE_LIT .)
    GT              reduce using rule 70 (basicLit -> RUNE_LIT .)
    LE              reduce using rule 70 (basicLit -> RUNE_LIT .)
    LT              reduce using rule 70 (basicLit -> RUNE_LIT .)
    NE              reduce using rule 70 (basicLit -> RUNE_LIT .)
    EQ              reduce using rule 70 (basicLit -> RUNE_LIT .)
    ,               reduce using rule 70 (basicLit -> RUNE_LIT .)
    NEWL            reduce using rule 70 (basicLit -> RUNE_LIT .)
    ;               reduce using rule 70 (basicLit -> RUNE_LIT .)
    )               reduce using rule 70 (basicLit -> RUNE_LIT .)


state 46

    (71) basicLit -> STRING_LIT .
    LOGIC_AND       reduce using rule 71 (basicLit -> STRING_LIT .)
    LOGIC_OR        reduce using rule 71 (basicLit -> STRING_LIT .)
    SHR             reduce using rule 71 (basicLit -> STRING_LIT .)
    SHL             reduce using rule 71 (basicLit -> STRING_LIT .)
    AND             reduce using rule 71 (basicLit -> STRING_LIT .)
    MOD             reduce using rule 71 (basicLit -> STRING_LIT .)
    DIV             reduce using rule 71 (basicLit -> STRING_LIT .)
    STAR            reduce using rule 71 (basicLit -> STRING_LIT .)
    XOR             reduce using rule 71 (basicLit -> STRING_LIT .)
    OR              reduce using rule 71 (basicLit -> STRING_LIT .)
    MINUS           reduce using rule 71 (basicLit -> STRING_LIT .)
    PLUS            reduce using rule 71 (basicLit -> STRING_LIT .)
    GE              reduce using rule 71 (basicLit -> STRING_LIT .)
    GT              reduce using rule 71 (basicLit -> STRING_LIT .)
    LE              reduce using rule 71 (basicLit -> STRING_LIT .)
    LT              reduce using rule 71 (basicLit -> STRING_LIT .)
    NE              reduce using rule 71 (basicLit -> STRING_LIT .)
    EQ              reduce using rule 71 (basicLit -> STRING_LIT .)
    ,               reduce using rule 71 (basicLit -> STRING_LIT .)
    NEWL            reduce using rule 71 (basicLit -> STRING_LIT .)
    ;               reduce using rule 71 (basicLit -> STRING_LIT .)
    )               reduce using rule 71 (basicLit -> STRING_LIT .)


state 47

    (52) numericType -> F32 .
    (               reduce using rule 52 (numericType -> F32 .)


state 48

    (53) numericType -> F64 .
    (               reduce using rule 53 (numericType -> F64 .)


state 49

    (54) numericType -> ISIZE .
    (               reduce using rule 54 (numericType -> ISIZE .)


state 50

    (55) numericType -> I64 .
    (               reduce using rule 55 (numericType -> I64 .)


state 51

    (56) numericType -> I32 .
    (               reduce using rule 56 (numericType -> I32 .)


state 52

    (57) numericType -> I16 .
    (               reduce using rule 57 (numericType -> I16 .)


state 53

    (58) numericType -> I8 .
    (               reduce using rule 58 (numericType -> I8 .)


state 54

    (59) numericType -> USIZE .
    (               reduce using rule 59 (numericType -> USIZE .)


state 55

    (60) numericType -> U64 .
    (               reduce using rule 60 (numericType -> U64 .)


state 56

    (61) numericType -> U32 .
    (               reduce using rule 61 (numericType -> U32 .)


state 57

    (62) numericType -> U16 .
    (               reduce using rule 62 (numericType -> U16 .)


state 58

    (63) numericType -> U8 .
    (               reduce using rule 63 (numericType -> U8 .)


state 59

    (75) INT_LIT -> HEX_LIT .
    LOGIC_AND       reduce using rule 75 (INT_LIT -> HEX_LIT .)
    LOGIC_OR        reduce using rule 75 (INT_LIT -> HEX_LIT .)
    SHR             reduce using rule 75 (INT_LIT -> HEX_LIT .)
    SHL             reduce using rule 75 (INT_LIT -> HEX_LIT .)
    AND             reduce using rule 75 (INT_LIT -> HEX_LIT .)
    MOD             reduce using rule 75 (INT_LIT -> HEX_LIT .)
    DIV             reduce using rule 75 (INT_LIT -> HEX_LIT .)
    STAR            reduce using rule 75 (INT_LIT -> HEX_LIT .)
    XOR             reduce using rule 75 (INT_LIT -> HEX_LIT .)
    OR              reduce using rule 75 (INT_LIT -> HEX_LIT .)
    MINUS           reduce using rule 75 (INT_LIT -> HEX_LIT .)
    PLUS            reduce using rule 75 (INT_LIT -> HEX_LIT .)
    GE              reduce using rule 75 (INT_LIT -> HEX_LIT .)
    GT              reduce using rule 75 (INT_LIT -> HEX_LIT .)
    LE              reduce using rule 75 (INT_LIT -> HEX_LIT .)
    LT              reduce using rule 75 (INT_LIT -> HEX_LIT .)
    NE              reduce using rule 75 (INT_LIT -> HEX_LIT .)
    EQ              reduce using rule 75 (INT_LIT -> HEX_LIT .)
    ,               reduce using rule 75 (INT_LIT -> HEX_LIT .)
    NEWL            reduce using rule 75 (INT_LIT -> HEX_LIT .)
    ;               reduce using rule 75 (INT_LIT -> HEX_LIT .)
    )               reduce using rule 75 (INT_LIT -> HEX_LIT .)


state 60

    (76) INT_LIT -> OCTAL_LIT .
    LOGIC_AND       reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    LOGIC_OR        reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    SHR             reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    SHL             reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    AND             reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    MOD             reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    DIV             reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    STAR            reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    XOR             reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    OR              reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    MINUS           reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    PLUS            reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    GE              reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    GT              reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    LE              reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    LT              reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    NE              reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    EQ              reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    ,               reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    NEWL            reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    ;               reduce using rule 76 (INT_LIT -> OCTAL_LIT .)
    )               reduce using rule 76 (INT_LIT -> OCTAL_LIT .)


state 61

    (77) INT_LIT -> BINARY_LIT .
    LOGIC_AND       reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    LOGIC_OR        reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    SHR             reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    SHL             reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    AND             reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    MOD             reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    DIV             reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    STAR            reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    XOR             reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    OR              reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    MINUS           reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    PLUS            reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    GE              reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    GT              reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    LE              reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    LT              reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    NE              reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    EQ              reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    ,               reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    NEWL            reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    ;               reduce using rule 77 (INT_LIT -> BINARY_LIT .)
    )               reduce using rule 77 (INT_LIT -> BINARY_LIT .)


state 62

    (7) identifierList -> identifierList , IDENTIFIER .
    DECL_ASGN       reduce using rule 7 (identifierList -> identifierList , IDENTIFIER .)
    ,               reduce using rule 7 (identifierList -> identifierList , IDENTIFIER .)


state 63

    (9) expressionList -> expressionList , . expression
    (32) expression -> . expression BINARY_OP unaryExpr
    (33) expression -> . unaryExpr
    (34) unaryExpr -> . UNARY_OP unaryExpr
    (35) unaryExpr -> . primaryExpr
    (104) UNARY_OP -> . AND
    (105) UNARY_OP -> . EXCLM
    (106) UNARY_OP -> . MINUS
    (36) primaryExpr -> . conversion
    (37) primaryExpr -> . operand
    (44) conversion -> . type_ ( expression )
    (38) operand -> . ( expression )
    (39) operand -> . operandName
    (40) operand -> . literal
    (45) type_ -> . qualifiedIdent
    (46) type_ -> . typeName
    (41) operandName -> . qualifiedIdent
    (42) operandName -> . IDENTIFIER
    (43) literal -> . basicLit
    (47) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (48) typeName -> . numericType
    (49) typeName -> . STRING
    (50) typeName -> . BOOL
    (51) typeName -> . RUNE
    (64) basicLit -> . INT_LIT
    (65) basicLit -> . FLOAT_LIT
    (66) basicLit -> . DECIMAL_LIT EXPONENT
    (67) basicLit -> . FLOAT_LIT EXPONENT
    (68) basicLit -> . FALSE
    (69) basicLit -> . TRUE
    (70) basicLit -> . RUNE_LIT
    (71) basicLit -> . STRING_LIT
    (52) numericType -> . F32
    (53) numericType -> . F64
    (54) numericType -> . ISIZE
    (55) numericType -> . I64
    (56) numericType -> . I32
    (57) numericType -> . I16
    (58) numericType -> . I8
    (59) numericType -> . USIZE
    (60) numericType -> . U64
    (61) numericType -> . U32
    (62) numericType -> . U16
    (63) numericType -> . U8
    (75) INT_LIT -> . HEX_LIT
    (76) INT_LIT -> . OCTAL_LIT
    (77) INT_LIT -> . BINARY_LIT
    (78) INT_LIT -> . DECIMAL_LIT
    (72) FLOAT_LIT -> . . DECIMAL_LIT
    (73) FLOAT_LIT -> . DECIMAL_LIT .
    (74) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 22
    EXCLM           shift and go to state 23
    MINUS           shift and go to state 24
    (               shift and go to state 28
    IDENTIFIER      shift and go to state 33
    STRING          shift and go to state 37
    BOOL            shift and go to state 38
    RUNE            shift and go to state 39
    DECIMAL_LIT     shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    RUNE_LIT        shift and go to state 45
    STRING_LIT      shift and go to state 46
    F32             shift and go to state 47
    F64             shift and go to state 48
    ISIZE           shift and go to state 49
    I64             shift and go to state 50
    I32             shift and go to state 51
    I16             shift and go to state 52
    I8              shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 35

    expression                     shift and go to state 94
    unaryExpr                      shift and go to state 19
    UNARY_OP                       shift and go to state 20
    primaryExpr                    shift and go to state 21
    conversion                     shift and go to state 25
    operand                        shift and go to state 26
    type_                          shift and go to state 27
    operandName                    shift and go to state 29
    literal                        shift and go to state 30
    qualifiedIdent                 shift and go to state 31
    typeName                       shift and go to state 32
    basicLit                       shift and go to state 34
    numericType                    shift and go to state 36
    INT_LIT                        shift and go to state 40
    FLOAT_LIT                      shift and go to state 41

state 64

    (32) expression -> expression BINARY_OP . unaryExpr
    (34) unaryExpr -> . UNARY_OP unaryExpr
    (35) unaryExpr -> . primaryExpr
    (104) UNARY_OP -> . AND
    (105) UNARY_OP -> . EXCLM
    (106) UNARY_OP -> . MINUS
    (36) primaryExpr -> . conversion
    (37) primaryExpr -> . operand
    (44) conversion -> . type_ ( expression )
    (38) operand -> . ( expression )
    (39) operand -> . operandName
    (40) operand -> . literal
    (45) type_ -> . qualifiedIdent
    (46) type_ -> . typeName
    (41) operandName -> . qualifiedIdent
    (42) operandName -> . IDENTIFIER
    (43) literal -> . basicLit
    (47) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (48) typeName -> . numericType
    (49) typeName -> . STRING
    (50) typeName -> . BOOL
    (51) typeName -> . RUNE
    (64) basicLit -> . INT_LIT
    (65) basicLit -> . FLOAT_LIT
    (66) basicLit -> . DECIMAL_LIT EXPONENT
    (67) basicLit -> . FLOAT_LIT EXPONENT
    (68) basicLit -> . FALSE
    (69) basicLit -> . TRUE
    (70) basicLit -> . RUNE_LIT
    (71) basicLit -> . STRING_LIT
    (52) numericType -> . F32
    (53) numericType -> . F64
    (54) numericType -> . ISIZE
    (55) numericType -> . I64
    (56) numericType -> . I32
    (57) numericType -> . I16
    (58) numericType -> . I8
    (59) numericType -> . USIZE
    (60) numericType -> . U64
    (61) numericType -> . U32
    (62) numericType -> . U16
    (63) numericType -> . U8
    (75) INT_LIT -> . HEX_LIT
    (76) INT_LIT -> . OCTAL_LIT
    (77) INT_LIT -> . BINARY_LIT
    (78) INT_LIT -> . DECIMAL_LIT
    (72) FLOAT_LIT -> . . DECIMAL_LIT
    (73) FLOAT_LIT -> . DECIMAL_LIT .
    (74) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 22
    EXCLM           shift and go to state 23
    MINUS           shift and go to state 24
    (               shift and go to state 28
    IDENTIFIER      shift and go to state 33
    STRING          shift and go to state 37
    BOOL            shift and go to state 38
    RUNE            shift and go to state 39
    DECIMAL_LIT     shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    RUNE_LIT        shift and go to state 45
    STRING_LIT      shift and go to state 46
    F32             shift and go to state 47
    F64             shift and go to state 48
    ISIZE           shift and go to state 49
    I64             shift and go to state 50
    I32             shift and go to state 51
    I16             shift and go to state 52
    I8              shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 35

    unaryExpr                      shift and go to state 95
    UNARY_OP                       shift and go to state 20
    primaryExpr                    shift and go to state 21
    conversion                     shift and go to state 25
    operand                        shift and go to state 26
    type_                          shift and go to state 27
    operandName                    shift and go to state 29
    literal                        shift and go to state 30
    qualifiedIdent                 shift and go to state 31
    typeName                       shift and go to state 32
    basicLit                       shift and go to state 34
    numericType                    shift and go to state 36
    INT_LIT                        shift and go to state 40
    FLOAT_LIT                      shift and go to state 41

state 65

    (83) BINARY_OP -> MUL_OP .
    AND             reduce using rule 83 (BINARY_OP -> MUL_OP .)
    EXCLM           reduce using rule 83 (BINARY_OP -> MUL_OP .)
    MINUS           reduce using rule 83 (BINARY_OP -> MUL_OP .)
    (               reduce using rule 83 (BINARY_OP -> MUL_OP .)
    IDENTIFIER      reduce using rule 83 (BINARY_OP -> MUL_OP .)
    STRING          reduce using rule 83 (BINARY_OP -> MUL_OP .)
    BOOL            reduce using rule 83 (BINARY_OP -> MUL_OP .)
    RUNE            reduce using rule 83 (BINARY_OP -> MUL_OP .)
    DECIMAL_LIT     reduce using rule 83 (BINARY_OP -> MUL_OP .)
    FALSE           reduce using rule 83 (BINARY_OP -> MUL_OP .)
    TRUE            reduce using rule 83 (BINARY_OP -> MUL_OP .)
    RUNE_LIT        reduce using rule 83 (BINARY_OP -> MUL_OP .)
    STRING_LIT      reduce using rule 83 (BINARY_OP -> MUL_OP .)
    F32             reduce using rule 83 (BINARY_OP -> MUL_OP .)
    F64             reduce using rule 83 (BINARY_OP -> MUL_OP .)
    ISIZE           reduce using rule 83 (BINARY_OP -> MUL_OP .)
    I64             reduce using rule 83 (BINARY_OP -> MUL_OP .)
    I32             reduce using rule 83 (BINARY_OP -> MUL_OP .)
    I16             reduce using rule 83 (BINARY_OP -> MUL_OP .)
    I8              reduce using rule 83 (BINARY_OP -> MUL_OP .)
    USIZE           reduce using rule 83 (BINARY_OP -> MUL_OP .)
    U64             reduce using rule 83 (BINARY_OP -> MUL_OP .)
    U32             reduce using rule 83 (BINARY_OP -> MUL_OP .)
    U16             reduce using rule 83 (BINARY_OP -> MUL_OP .)
    U8              reduce using rule 83 (BINARY_OP -> MUL_OP .)
    HEX_LIT         reduce using rule 83 (BINARY_OP -> MUL_OP .)
    OCTAL_LIT       reduce using rule 83 (BINARY_OP -> MUL_OP .)
    BINARY_LIT      reduce using rule 83 (BINARY_OP -> MUL_OP .)
    .               reduce using rule 83 (BINARY_OP -> MUL_OP .)


state 66

    (84) BINARY_OP -> ADD_OP .
    AND             reduce using rule 84 (BINARY_OP -> ADD_OP .)
    EXCLM           reduce using rule 84 (BINARY_OP -> ADD_OP .)
    MINUS           reduce using rule 84 (BINARY_OP -> ADD_OP .)
    (               reduce using rule 84 (BINARY_OP -> ADD_OP .)
    IDENTIFIER      reduce using rule 84 (BINARY_OP -> ADD_OP .)
    STRING          reduce using rule 84 (BINARY_OP -> ADD_OP .)
    BOOL            reduce using rule 84 (BINARY_OP -> ADD_OP .)
    RUNE            reduce using rule 84 (BINARY_OP -> ADD_OP .)
    DECIMAL_LIT     reduce using rule 84 (BINARY_OP -> ADD_OP .)
    FALSE           reduce using rule 84 (BINARY_OP -> ADD_OP .)
    TRUE            reduce using rule 84 (BINARY_OP -> ADD_OP .)
    RUNE_LIT        reduce using rule 84 (BINARY_OP -> ADD_OP .)
    STRING_LIT      reduce using rule 84 (BINARY_OP -> ADD_OP .)
    F32             reduce using rule 84 (BINARY_OP -> ADD_OP .)
    F64             reduce using rule 84 (BINARY_OP -> ADD_OP .)
    ISIZE           reduce using rule 84 (BINARY_OP -> ADD_OP .)
    I64             reduce using rule 84 (BINARY_OP -> ADD_OP .)
    I32             reduce using rule 84 (BINARY_OP -> ADD_OP .)
    I16             reduce using rule 84 (BINARY_OP -> ADD_OP .)
    I8              reduce using rule 84 (BINARY_OP -> ADD_OP .)
    USIZE           reduce using rule 84 (BINARY_OP -> ADD_OP .)
    U64             reduce using rule 84 (BINARY_OP -> ADD_OP .)
    U32             reduce using rule 84 (BINARY_OP -> ADD_OP .)
    U16             reduce using rule 84 (BINARY_OP -> ADD_OP .)
    U8              reduce using rule 84 (BINARY_OP -> ADD_OP .)
    HEX_LIT         reduce using rule 84 (BINARY_OP -> ADD_OP .)
    OCTAL_LIT       reduce using rule 84 (BINARY_OP -> ADD_OP .)
    BINARY_LIT      reduce using rule 84 (BINARY_OP -> ADD_OP .)
    .               reduce using rule 84 (BINARY_OP -> ADD_OP .)


state 67

    (85) BINARY_OP -> REL_OP .
    AND             reduce using rule 85 (BINARY_OP -> REL_OP .)
    EXCLM           reduce using rule 85 (BINARY_OP -> REL_OP .)
    MINUS           reduce using rule 85 (BINARY_OP -> REL_OP .)
    (               reduce using rule 85 (BINARY_OP -> REL_OP .)
    IDENTIFIER      reduce using rule 85 (BINARY_OP -> REL_OP .)
    STRING          reduce using rule 85 (BINARY_OP -> REL_OP .)
    BOOL            reduce using rule 85 (BINARY_OP -> REL_OP .)
    RUNE            reduce using rule 85 (BINARY_OP -> REL_OP .)
    DECIMAL_LIT     reduce using rule 85 (BINARY_OP -> REL_OP .)
    FALSE           reduce using rule 85 (BINARY_OP -> REL_OP .)
    TRUE            reduce using rule 85 (BINARY_OP -> REL_OP .)
    RUNE_LIT        reduce using rule 85 (BINARY_OP -> REL_OP .)
    STRING_LIT      reduce using rule 85 (BINARY_OP -> REL_OP .)
    F32             reduce using rule 85 (BINARY_OP -> REL_OP .)
    F64             reduce using rule 85 (BINARY_OP -> REL_OP .)
    ISIZE           reduce using rule 85 (BINARY_OP -> REL_OP .)
    I64             reduce using rule 85 (BINARY_OP -> REL_OP .)
    I32             reduce using rule 85 (BINARY_OP -> REL_OP .)
    I16             reduce using rule 85 (BINARY_OP -> REL_OP .)
    I8              reduce using rule 85 (BINARY_OP -> REL_OP .)
    USIZE           reduce using rule 85 (BINARY_OP -> REL_OP .)
    U64             reduce using rule 85 (BINARY_OP -> REL_OP .)
    U32             reduce using rule 85 (BINARY_OP -> REL_OP .)
    U16             reduce using rule 85 (BINARY_OP -> REL_OP .)
    U8              reduce using rule 85 (BINARY_OP -> REL_OP .)
    HEX_LIT         reduce using rule 85 (BINARY_OP -> REL_OP .)
    OCTAL_LIT       reduce using rule 85 (BINARY_OP -> REL_OP .)
    BINARY_LIT      reduce using rule 85 (BINARY_OP -> REL_OP .)
    .               reduce using rule 85 (BINARY_OP -> REL_OP .)


state 68

    (86) BINARY_OP -> LOGIC_AND .
    AND             reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    EXCLM           reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    MINUS           reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    (               reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    IDENTIFIER      reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    STRING          reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    BOOL            reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    RUNE            reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    DECIMAL_LIT     reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    FALSE           reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    TRUE            reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    RUNE_LIT        reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    STRING_LIT      reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    F32             reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    F64             reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    ISIZE           reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    I64             reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    I32             reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    I16             reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    I8              reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    USIZE           reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    U64             reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    U32             reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    U16             reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    U8              reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    HEX_LIT         reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    OCTAL_LIT       reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    BINARY_LIT      reduce using rule 86 (BINARY_OP -> LOGIC_AND .)
    .               reduce using rule 86 (BINARY_OP -> LOGIC_AND .)


state 69

    (87) BINARY_OP -> LOGIC_OR .
    AND             reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    EXCLM           reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    MINUS           reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    (               reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    IDENTIFIER      reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    STRING          reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    BOOL            reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    RUNE            reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    DECIMAL_LIT     reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    FALSE           reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    TRUE            reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    RUNE_LIT        reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    STRING_LIT      reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    F32             reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    F64             reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    ISIZE           reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    I64             reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    I32             reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    I16             reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    I8              reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    USIZE           reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    U64             reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    U32             reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    U16             reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    U8              reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    HEX_LIT         reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    OCTAL_LIT       reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    BINARY_LIT      reduce using rule 87 (BINARY_OP -> LOGIC_OR .)
    .               reduce using rule 87 (BINARY_OP -> LOGIC_OR .)


state 70

    (98) MUL_OP -> SHR .
    AND             reduce using rule 98 (MUL_OP -> SHR .)
    EXCLM           reduce using rule 98 (MUL_OP -> SHR .)
    MINUS           reduce using rule 98 (MUL_OP -> SHR .)
    (               reduce using rule 98 (MUL_OP -> SHR .)
    IDENTIFIER      reduce using rule 98 (MUL_OP -> SHR .)
    STRING          reduce using rule 98 (MUL_OP -> SHR .)
    BOOL            reduce using rule 98 (MUL_OP -> SHR .)
    RUNE            reduce using rule 98 (MUL_OP -> SHR .)
    DECIMAL_LIT     reduce using rule 98 (MUL_OP -> SHR .)
    FALSE           reduce using rule 98 (MUL_OP -> SHR .)
    TRUE            reduce using rule 98 (MUL_OP -> SHR .)
    RUNE_LIT        reduce using rule 98 (MUL_OP -> SHR .)
    STRING_LIT      reduce using rule 98 (MUL_OP -> SHR .)
    F32             reduce using rule 98 (MUL_OP -> SHR .)
    F64             reduce using rule 98 (MUL_OP -> SHR .)
    ISIZE           reduce using rule 98 (MUL_OP -> SHR .)
    I64             reduce using rule 98 (MUL_OP -> SHR .)
    I32             reduce using rule 98 (MUL_OP -> SHR .)
    I16             reduce using rule 98 (MUL_OP -> SHR .)
    I8              reduce using rule 98 (MUL_OP -> SHR .)
    USIZE           reduce using rule 98 (MUL_OP -> SHR .)
    U64             reduce using rule 98 (MUL_OP -> SHR .)
    U32             reduce using rule 98 (MUL_OP -> SHR .)
    U16             reduce using rule 98 (MUL_OP -> SHR .)
    U8              reduce using rule 98 (MUL_OP -> SHR .)
    HEX_LIT         reduce using rule 98 (MUL_OP -> SHR .)
    OCTAL_LIT       reduce using rule 98 (MUL_OP -> SHR .)
    BINARY_LIT      reduce using rule 98 (MUL_OP -> SHR .)
    .               reduce using rule 98 (MUL_OP -> SHR .)


state 71

    (99) MUL_OP -> SHL .
    AND             reduce using rule 99 (MUL_OP -> SHL .)
    EXCLM           reduce using rule 99 (MUL_OP -> SHL .)
    MINUS           reduce using rule 99 (MUL_OP -> SHL .)
    (               reduce using rule 99 (MUL_OP -> SHL .)
    IDENTIFIER      reduce using rule 99 (MUL_OP -> SHL .)
    STRING          reduce using rule 99 (MUL_OP -> SHL .)
    BOOL            reduce using rule 99 (MUL_OP -> SHL .)
    RUNE            reduce using rule 99 (MUL_OP -> SHL .)
    DECIMAL_LIT     reduce using rule 99 (MUL_OP -> SHL .)
    FALSE           reduce using rule 99 (MUL_OP -> SHL .)
    TRUE            reduce using rule 99 (MUL_OP -> SHL .)
    RUNE_LIT        reduce using rule 99 (MUL_OP -> SHL .)
    STRING_LIT      reduce using rule 99 (MUL_OP -> SHL .)
    F32             reduce using rule 99 (MUL_OP -> SHL .)
    F64             reduce using rule 99 (MUL_OP -> SHL .)
    ISIZE           reduce using rule 99 (MUL_OP -> SHL .)
    I64             reduce using rule 99 (MUL_OP -> SHL .)
    I32             reduce using rule 99 (MUL_OP -> SHL .)
    I16             reduce using rule 99 (MUL_OP -> SHL .)
    I8              reduce using rule 99 (MUL_OP -> SHL .)
    USIZE           reduce using rule 99 (MUL_OP -> SHL .)
    U64             reduce using rule 99 (MUL_OP -> SHL .)
    U32             reduce using rule 99 (MUL_OP -> SHL .)
    U16             reduce using rule 99 (MUL_OP -> SHL .)
    U8              reduce using rule 99 (MUL_OP -> SHL .)
    HEX_LIT         reduce using rule 99 (MUL_OP -> SHL .)
    OCTAL_LIT       reduce using rule 99 (MUL_OP -> SHL .)
    BINARY_LIT      reduce using rule 99 (MUL_OP -> SHL .)
    .               reduce using rule 99 (MUL_OP -> SHL .)


state 72

    (100) MUL_OP -> AND .
    AND             reduce using rule 100 (MUL_OP -> AND .)
    EXCLM           reduce using rule 100 (MUL_OP -> AND .)
    MINUS           reduce using rule 100 (MUL_OP -> AND .)
    (               reduce using rule 100 (MUL_OP -> AND .)
    IDENTIFIER      reduce using rule 100 (MUL_OP -> AND .)
    STRING          reduce using rule 100 (MUL_OP -> AND .)
    BOOL            reduce using rule 100 (MUL_OP -> AND .)
    RUNE            reduce using rule 100 (MUL_OP -> AND .)
    DECIMAL_LIT     reduce using rule 100 (MUL_OP -> AND .)
    FALSE           reduce using rule 100 (MUL_OP -> AND .)
    TRUE            reduce using rule 100 (MUL_OP -> AND .)
    RUNE_LIT        reduce using rule 100 (MUL_OP -> AND .)
    STRING_LIT      reduce using rule 100 (MUL_OP -> AND .)
    F32             reduce using rule 100 (MUL_OP -> AND .)
    F64             reduce using rule 100 (MUL_OP -> AND .)
    ISIZE           reduce using rule 100 (MUL_OP -> AND .)
    I64             reduce using rule 100 (MUL_OP -> AND .)
    I32             reduce using rule 100 (MUL_OP -> AND .)
    I16             reduce using rule 100 (MUL_OP -> AND .)
    I8              reduce using rule 100 (MUL_OP -> AND .)
    USIZE           reduce using rule 100 (MUL_OP -> AND .)
    U64             reduce using rule 100 (MUL_OP -> AND .)
    U32             reduce using rule 100 (MUL_OP -> AND .)
    U16             reduce using rule 100 (MUL_OP -> AND .)
    U8              reduce using rule 100 (MUL_OP -> AND .)
    HEX_LIT         reduce using rule 100 (MUL_OP -> AND .)
    OCTAL_LIT       reduce using rule 100 (MUL_OP -> AND .)
    BINARY_LIT      reduce using rule 100 (MUL_OP -> AND .)
    .               reduce using rule 100 (MUL_OP -> AND .)


state 73

    (101) MUL_OP -> MOD .
    AND             reduce using rule 101 (MUL_OP -> MOD .)
    EXCLM           reduce using rule 101 (MUL_OP -> MOD .)
    MINUS           reduce using rule 101 (MUL_OP -> MOD .)
    (               reduce using rule 101 (MUL_OP -> MOD .)
    IDENTIFIER      reduce using rule 101 (MUL_OP -> MOD .)
    STRING          reduce using rule 101 (MUL_OP -> MOD .)
    BOOL            reduce using rule 101 (MUL_OP -> MOD .)
    RUNE            reduce using rule 101 (MUL_OP -> MOD .)
    DECIMAL_LIT     reduce using rule 101 (MUL_OP -> MOD .)
    FALSE           reduce using rule 101 (MUL_OP -> MOD .)
    TRUE            reduce using rule 101 (MUL_OP -> MOD .)
    RUNE_LIT        reduce using rule 101 (MUL_OP -> MOD .)
    STRING_LIT      reduce using rule 101 (MUL_OP -> MOD .)
    F32             reduce using rule 101 (MUL_OP -> MOD .)
    F64             reduce using rule 101 (MUL_OP -> MOD .)
    ISIZE           reduce using rule 101 (MUL_OP -> MOD .)
    I64             reduce using rule 101 (MUL_OP -> MOD .)
    I32             reduce using rule 101 (MUL_OP -> MOD .)
    I16             reduce using rule 101 (MUL_OP -> MOD .)
    I8              reduce using rule 101 (MUL_OP -> MOD .)
    USIZE           reduce using rule 101 (MUL_OP -> MOD .)
    U64             reduce using rule 101 (MUL_OP -> MOD .)
    U32             reduce using rule 101 (MUL_OP -> MOD .)
    U16             reduce using rule 101 (MUL_OP -> MOD .)
    U8              reduce using rule 101 (MUL_OP -> MOD .)
    HEX_LIT         reduce using rule 101 (MUL_OP -> MOD .)
    OCTAL_LIT       reduce using rule 101 (MUL_OP -> MOD .)
    BINARY_LIT      reduce using rule 101 (MUL_OP -> MOD .)
    .               reduce using rule 101 (MUL_OP -> MOD .)


state 74

    (102) MUL_OP -> DIV .
    AND             reduce using rule 102 (MUL_OP -> DIV .)
    EXCLM           reduce using rule 102 (MUL_OP -> DIV .)
    MINUS           reduce using rule 102 (MUL_OP -> DIV .)
    (               reduce using rule 102 (MUL_OP -> DIV .)
    IDENTIFIER      reduce using rule 102 (MUL_OP -> DIV .)
    STRING          reduce using rule 102 (MUL_OP -> DIV .)
    BOOL            reduce using rule 102 (MUL_OP -> DIV .)
    RUNE            reduce using rule 102 (MUL_OP -> DIV .)
    DECIMAL_LIT     reduce using rule 102 (MUL_OP -> DIV .)
    FALSE           reduce using rule 102 (MUL_OP -> DIV .)
    TRUE            reduce using rule 102 (MUL_OP -> DIV .)
    RUNE_LIT        reduce using rule 102 (MUL_OP -> DIV .)
    STRING_LIT      reduce using rule 102 (MUL_OP -> DIV .)
    F32             reduce using rule 102 (MUL_OP -> DIV .)
    F64             reduce using rule 102 (MUL_OP -> DIV .)
    ISIZE           reduce using rule 102 (MUL_OP -> DIV .)
    I64             reduce using rule 102 (MUL_OP -> DIV .)
    I32             reduce using rule 102 (MUL_OP -> DIV .)
    I16             reduce using rule 102 (MUL_OP -> DIV .)
    I8              reduce using rule 102 (MUL_OP -> DIV .)
    USIZE           reduce using rule 102 (MUL_OP -> DIV .)
    U64             reduce using rule 102 (MUL_OP -> DIV .)
    U32             reduce using rule 102 (MUL_OP -> DIV .)
    U16             reduce using rule 102 (MUL_OP -> DIV .)
    U8              reduce using rule 102 (MUL_OP -> DIV .)
    HEX_LIT         reduce using rule 102 (MUL_OP -> DIV .)
    OCTAL_LIT       reduce using rule 102 (MUL_OP -> DIV .)
    BINARY_LIT      reduce using rule 102 (MUL_OP -> DIV .)
    .               reduce using rule 102 (MUL_OP -> DIV .)


state 75

    (103) MUL_OP -> STAR .
    AND             reduce using rule 103 (MUL_OP -> STAR .)
    EXCLM           reduce using rule 103 (MUL_OP -> STAR .)
    MINUS           reduce using rule 103 (MUL_OP -> STAR .)
    (               reduce using rule 103 (MUL_OP -> STAR .)
    IDENTIFIER      reduce using rule 103 (MUL_OP -> STAR .)
    STRING          reduce using rule 103 (MUL_OP -> STAR .)
    BOOL            reduce using rule 103 (MUL_OP -> STAR .)
    RUNE            reduce using rule 103 (MUL_OP -> STAR .)
    DECIMAL_LIT     reduce using rule 103 (MUL_OP -> STAR .)
    FALSE           reduce using rule 103 (MUL_OP -> STAR .)
    TRUE            reduce using rule 103 (MUL_OP -> STAR .)
    RUNE_LIT        reduce using rule 103 (MUL_OP -> STAR .)
    STRING_LIT      reduce using rule 103 (MUL_OP -> STAR .)
    F32             reduce using rule 103 (MUL_OP -> STAR .)
    F64             reduce using rule 103 (MUL_OP -> STAR .)
    ISIZE           reduce using rule 103 (MUL_OP -> STAR .)
    I64             reduce using rule 103 (MUL_OP -> STAR .)
    I32             reduce using rule 103 (MUL_OP -> STAR .)
    I16             reduce using rule 103 (MUL_OP -> STAR .)
    I8              reduce using rule 103 (MUL_OP -> STAR .)
    USIZE           reduce using rule 103 (MUL_OP -> STAR .)
    U64             reduce using rule 103 (MUL_OP -> STAR .)
    U32             reduce using rule 103 (MUL_OP -> STAR .)
    U16             reduce using rule 103 (MUL_OP -> STAR .)
    U8              reduce using rule 103 (MUL_OP -> STAR .)
    HEX_LIT         reduce using rule 103 (MUL_OP -> STAR .)
    OCTAL_LIT       reduce using rule 103 (MUL_OP -> STAR .)
    BINARY_LIT      reduce using rule 103 (MUL_OP -> STAR .)
    .               reduce using rule 103 (MUL_OP -> STAR .)


state 76

    (94) ADD_OP -> XOR .
    AND             reduce using rule 94 (ADD_OP -> XOR .)
    EXCLM           reduce using rule 94 (ADD_OP -> XOR .)
    MINUS           reduce using rule 94 (ADD_OP -> XOR .)
    (               reduce using rule 94 (ADD_OP -> XOR .)
    IDENTIFIER      reduce using rule 94 (ADD_OP -> XOR .)
    STRING          reduce using rule 94 (ADD_OP -> XOR .)
    BOOL            reduce using rule 94 (ADD_OP -> XOR .)
    RUNE            reduce using rule 94 (ADD_OP -> XOR .)
    DECIMAL_LIT     reduce using rule 94 (ADD_OP -> XOR .)
    FALSE           reduce using rule 94 (ADD_OP -> XOR .)
    TRUE            reduce using rule 94 (ADD_OP -> XOR .)
    RUNE_LIT        reduce using rule 94 (ADD_OP -> XOR .)
    STRING_LIT      reduce using rule 94 (ADD_OP -> XOR .)
    F32             reduce using rule 94 (ADD_OP -> XOR .)
    F64             reduce using rule 94 (ADD_OP -> XOR .)
    ISIZE           reduce using rule 94 (ADD_OP -> XOR .)
    I64             reduce using rule 94 (ADD_OP -> XOR .)
    I32             reduce using rule 94 (ADD_OP -> XOR .)
    I16             reduce using rule 94 (ADD_OP -> XOR .)
    I8              reduce using rule 94 (ADD_OP -> XOR .)
    USIZE           reduce using rule 94 (ADD_OP -> XOR .)
    U64             reduce using rule 94 (ADD_OP -> XOR .)
    U32             reduce using rule 94 (ADD_OP -> XOR .)
    U16             reduce using rule 94 (ADD_OP -> XOR .)
    U8              reduce using rule 94 (ADD_OP -> XOR .)
    HEX_LIT         reduce using rule 94 (ADD_OP -> XOR .)
    OCTAL_LIT       reduce using rule 94 (ADD_OP -> XOR .)
    BINARY_LIT      reduce using rule 94 (ADD_OP -> XOR .)
    .               reduce using rule 94 (ADD_OP -> XOR .)


state 77

    (95) ADD_OP -> OR .
    AND             reduce using rule 95 (ADD_OP -> OR .)
    EXCLM           reduce using rule 95 (ADD_OP -> OR .)
    MINUS           reduce using rule 95 (ADD_OP -> OR .)
    (               reduce using rule 95 (ADD_OP -> OR .)
    IDENTIFIER      reduce using rule 95 (ADD_OP -> OR .)
    STRING          reduce using rule 95 (ADD_OP -> OR .)
    BOOL            reduce using rule 95 (ADD_OP -> OR .)
    RUNE            reduce using rule 95 (ADD_OP -> OR .)
    DECIMAL_LIT     reduce using rule 95 (ADD_OP -> OR .)
    FALSE           reduce using rule 95 (ADD_OP -> OR .)
    TRUE            reduce using rule 95 (ADD_OP -> OR .)
    RUNE_LIT        reduce using rule 95 (ADD_OP -> OR .)
    STRING_LIT      reduce using rule 95 (ADD_OP -> OR .)
    F32             reduce using rule 95 (ADD_OP -> OR .)
    F64             reduce using rule 95 (ADD_OP -> OR .)
    ISIZE           reduce using rule 95 (ADD_OP -> OR .)
    I64             reduce using rule 95 (ADD_OP -> OR .)
    I32             reduce using rule 95 (ADD_OP -> OR .)
    I16             reduce using rule 95 (ADD_OP -> OR .)
    I8              reduce using rule 95 (ADD_OP -> OR .)
    USIZE           reduce using rule 95 (ADD_OP -> OR .)
    U64             reduce using rule 95 (ADD_OP -> OR .)
    U32             reduce using rule 95 (ADD_OP -> OR .)
    U16             reduce using rule 95 (ADD_OP -> OR .)
    U8              reduce using rule 95 (ADD_OP -> OR .)
    HEX_LIT         reduce using rule 95 (ADD_OP -> OR .)
    OCTAL_LIT       reduce using rule 95 (ADD_OP -> OR .)
    BINARY_LIT      reduce using rule 95 (ADD_OP -> OR .)
    .               reduce using rule 95 (ADD_OP -> OR .)


state 78

    (96) ADD_OP -> MINUS .
    AND             reduce using rule 96 (ADD_OP -> MINUS .)
    EXCLM           reduce using rule 96 (ADD_OP -> MINUS .)
    MINUS           reduce using rule 96 (ADD_OP -> MINUS .)
    (               reduce using rule 96 (ADD_OP -> MINUS .)
    IDENTIFIER      reduce using rule 96 (ADD_OP -> MINUS .)
    STRING          reduce using rule 96 (ADD_OP -> MINUS .)
    BOOL            reduce using rule 96 (ADD_OP -> MINUS .)
    RUNE            reduce using rule 96 (ADD_OP -> MINUS .)
    DECIMAL_LIT     reduce using rule 96 (ADD_OP -> MINUS .)
    FALSE           reduce using rule 96 (ADD_OP -> MINUS .)
    TRUE            reduce using rule 96 (ADD_OP -> MINUS .)
    RUNE_LIT        reduce using rule 96 (ADD_OP -> MINUS .)
    STRING_LIT      reduce using rule 96 (ADD_OP -> MINUS .)
    F32             reduce using rule 96 (ADD_OP -> MINUS .)
    F64             reduce using rule 96 (ADD_OP -> MINUS .)
    ISIZE           reduce using rule 96 (ADD_OP -> MINUS .)
    I64             reduce using rule 96 (ADD_OP -> MINUS .)
    I32             reduce using rule 96 (ADD_OP -> MINUS .)
    I16             reduce using rule 96 (ADD_OP -> MINUS .)
    I8              reduce using rule 96 (ADD_OP -> MINUS .)
    USIZE           reduce using rule 96 (ADD_OP -> MINUS .)
    U64             reduce using rule 96 (ADD_OP -> MINUS .)
    U32             reduce using rule 96 (ADD_OP -> MINUS .)
    U16             reduce using rule 96 (ADD_OP -> MINUS .)
    U8              reduce using rule 96 (ADD_OP -> MINUS .)
    HEX_LIT         reduce using rule 96 (ADD_OP -> MINUS .)
    OCTAL_LIT       reduce using rule 96 (ADD_OP -> MINUS .)
    BINARY_LIT      reduce using rule 96 (ADD_OP -> MINUS .)
    .               reduce using rule 96 (ADD_OP -> MINUS .)


state 79

    (97) ADD_OP -> PLUS .
    AND             reduce using rule 97 (ADD_OP -> PLUS .)
    EXCLM           reduce using rule 97 (ADD_OP -> PLUS .)
    MINUS           reduce using rule 97 (ADD_OP -> PLUS .)
    (               reduce using rule 97 (ADD_OP -> PLUS .)
    IDENTIFIER      reduce using rule 97 (ADD_OP -> PLUS .)
    STRING          reduce using rule 97 (ADD_OP -> PLUS .)
    BOOL            reduce using rule 97 (ADD_OP -> PLUS .)
    RUNE            reduce using rule 97 (ADD_OP -> PLUS .)
    DECIMAL_LIT     reduce using rule 97 (ADD_OP -> PLUS .)
    FALSE           reduce using rule 97 (ADD_OP -> PLUS .)
    TRUE            reduce using rule 97 (ADD_OP -> PLUS .)
    RUNE_LIT        reduce using rule 97 (ADD_OP -> PLUS .)
    STRING_LIT      reduce using rule 97 (ADD_OP -> PLUS .)
    F32             reduce using rule 97 (ADD_OP -> PLUS .)
    F64             reduce using rule 97 (ADD_OP -> PLUS .)
    ISIZE           reduce using rule 97 (ADD_OP -> PLUS .)
    I64             reduce using rule 97 (ADD_OP -> PLUS .)
    I32             reduce using rule 97 (ADD_OP -> PLUS .)
    I16             reduce using rule 97 (ADD_OP -> PLUS .)
    I8              reduce using rule 97 (ADD_OP -> PLUS .)
    USIZE           reduce using rule 97 (ADD_OP -> PLUS .)
    U64             reduce using rule 97 (ADD_OP -> PLUS .)
    U32             reduce using rule 97 (ADD_OP -> PLUS .)
    U16             reduce using rule 97 (ADD_OP -> PLUS .)
    U8              reduce using rule 97 (ADD_OP -> PLUS .)
    HEX_LIT         reduce using rule 97 (ADD_OP -> PLUS .)
    OCTAL_LIT       reduce using rule 97 (ADD_OP -> PLUS .)
    BINARY_LIT      reduce using rule 97 (ADD_OP -> PLUS .)
    .               reduce using rule 97 (ADD_OP -> PLUS .)


state 80

    (88) REL_OP -> GE .
    AND             reduce using rule 88 (REL_OP -> GE .)
    EXCLM           reduce using rule 88 (REL_OP -> GE .)
    MINUS           reduce using rule 88 (REL_OP -> GE .)
    (               reduce using rule 88 (REL_OP -> GE .)
    IDENTIFIER      reduce using rule 88 (REL_OP -> GE .)
    STRING          reduce using rule 88 (REL_OP -> GE .)
    BOOL            reduce using rule 88 (REL_OP -> GE .)
    RUNE            reduce using rule 88 (REL_OP -> GE .)
    DECIMAL_LIT     reduce using rule 88 (REL_OP -> GE .)
    FALSE           reduce using rule 88 (REL_OP -> GE .)
    TRUE            reduce using rule 88 (REL_OP -> GE .)
    RUNE_LIT        reduce using rule 88 (REL_OP -> GE .)
    STRING_LIT      reduce using rule 88 (REL_OP -> GE .)
    F32             reduce using rule 88 (REL_OP -> GE .)
    F64             reduce using rule 88 (REL_OP -> GE .)
    ISIZE           reduce using rule 88 (REL_OP -> GE .)
    I64             reduce using rule 88 (REL_OP -> GE .)
    I32             reduce using rule 88 (REL_OP -> GE .)
    I16             reduce using rule 88 (REL_OP -> GE .)
    I8              reduce using rule 88 (REL_OP -> GE .)
    USIZE           reduce using rule 88 (REL_OP -> GE .)
    U64             reduce using rule 88 (REL_OP -> GE .)
    U32             reduce using rule 88 (REL_OP -> GE .)
    U16             reduce using rule 88 (REL_OP -> GE .)
    U8              reduce using rule 88 (REL_OP -> GE .)
    HEX_LIT         reduce using rule 88 (REL_OP -> GE .)
    OCTAL_LIT       reduce using rule 88 (REL_OP -> GE .)
    BINARY_LIT      reduce using rule 88 (REL_OP -> GE .)
    .               reduce using rule 88 (REL_OP -> GE .)


state 81

    (89) REL_OP -> GT .
    AND             reduce using rule 89 (REL_OP -> GT .)
    EXCLM           reduce using rule 89 (REL_OP -> GT .)
    MINUS           reduce using rule 89 (REL_OP -> GT .)
    (               reduce using rule 89 (REL_OP -> GT .)
    IDENTIFIER      reduce using rule 89 (REL_OP -> GT .)
    STRING          reduce using rule 89 (REL_OP -> GT .)
    BOOL            reduce using rule 89 (REL_OP -> GT .)
    RUNE            reduce using rule 89 (REL_OP -> GT .)
    DECIMAL_LIT     reduce using rule 89 (REL_OP -> GT .)
    FALSE           reduce using rule 89 (REL_OP -> GT .)
    TRUE            reduce using rule 89 (REL_OP -> GT .)
    RUNE_LIT        reduce using rule 89 (REL_OP -> GT .)
    STRING_LIT      reduce using rule 89 (REL_OP -> GT .)
    F32             reduce using rule 89 (REL_OP -> GT .)
    F64             reduce using rule 89 (REL_OP -> GT .)
    ISIZE           reduce using rule 89 (REL_OP -> GT .)
    I64             reduce using rule 89 (REL_OP -> GT .)
    I32             reduce using rule 89 (REL_OP -> GT .)
    I16             reduce using rule 89 (REL_OP -> GT .)
    I8              reduce using rule 89 (REL_OP -> GT .)
    USIZE           reduce using rule 89 (REL_OP -> GT .)
    U64             reduce using rule 89 (REL_OP -> GT .)
    U32             reduce using rule 89 (REL_OP -> GT .)
    U16             reduce using rule 89 (REL_OP -> GT .)
    U8              reduce using rule 89 (REL_OP -> GT .)
    HEX_LIT         reduce using rule 89 (REL_OP -> GT .)
    OCTAL_LIT       reduce using rule 89 (REL_OP -> GT .)
    BINARY_LIT      reduce using rule 89 (REL_OP -> GT .)
    .               reduce using rule 89 (REL_OP -> GT .)


state 82

    (90) REL_OP -> LE .
    AND             reduce using rule 90 (REL_OP -> LE .)
    EXCLM           reduce using rule 90 (REL_OP -> LE .)
    MINUS           reduce using rule 90 (REL_OP -> LE .)
    (               reduce using rule 90 (REL_OP -> LE .)
    IDENTIFIER      reduce using rule 90 (REL_OP -> LE .)
    STRING          reduce using rule 90 (REL_OP -> LE .)
    BOOL            reduce using rule 90 (REL_OP -> LE .)
    RUNE            reduce using rule 90 (REL_OP -> LE .)
    DECIMAL_LIT     reduce using rule 90 (REL_OP -> LE .)
    FALSE           reduce using rule 90 (REL_OP -> LE .)
    TRUE            reduce using rule 90 (REL_OP -> LE .)
    RUNE_LIT        reduce using rule 90 (REL_OP -> LE .)
    STRING_LIT      reduce using rule 90 (REL_OP -> LE .)
    F32             reduce using rule 90 (REL_OP -> LE .)
    F64             reduce using rule 90 (REL_OP -> LE .)
    ISIZE           reduce using rule 90 (REL_OP -> LE .)
    I64             reduce using rule 90 (REL_OP -> LE .)
    I32             reduce using rule 90 (REL_OP -> LE .)
    I16             reduce using rule 90 (REL_OP -> LE .)
    I8              reduce using rule 90 (REL_OP -> LE .)
    USIZE           reduce using rule 90 (REL_OP -> LE .)
    U64             reduce using rule 90 (REL_OP -> LE .)
    U32             reduce using rule 90 (REL_OP -> LE .)
    U16             reduce using rule 90 (REL_OP -> LE .)
    U8              reduce using rule 90 (REL_OP -> LE .)
    HEX_LIT         reduce using rule 90 (REL_OP -> LE .)
    OCTAL_LIT       reduce using rule 90 (REL_OP -> LE .)
    BINARY_LIT      reduce using rule 90 (REL_OP -> LE .)
    .               reduce using rule 90 (REL_OP -> LE .)


state 83

    (91) REL_OP -> LT .
    AND             reduce using rule 91 (REL_OP -> LT .)
    EXCLM           reduce using rule 91 (REL_OP -> LT .)
    MINUS           reduce using rule 91 (REL_OP -> LT .)
    (               reduce using rule 91 (REL_OP -> LT .)
    IDENTIFIER      reduce using rule 91 (REL_OP -> LT .)
    STRING          reduce using rule 91 (REL_OP -> LT .)
    BOOL            reduce using rule 91 (REL_OP -> LT .)
    RUNE            reduce using rule 91 (REL_OP -> LT .)
    DECIMAL_LIT     reduce using rule 91 (REL_OP -> LT .)
    FALSE           reduce using rule 91 (REL_OP -> LT .)
    TRUE            reduce using rule 91 (REL_OP -> LT .)
    RUNE_LIT        reduce using rule 91 (REL_OP -> LT .)
    STRING_LIT      reduce using rule 91 (REL_OP -> LT .)
    F32             reduce using rule 91 (REL_OP -> LT .)
    F64             reduce using rule 91 (REL_OP -> LT .)
    ISIZE           reduce using rule 91 (REL_OP -> LT .)
    I64             reduce using rule 91 (REL_OP -> LT .)
    I32             reduce using rule 91 (REL_OP -> LT .)
    I16             reduce using rule 91 (REL_OP -> LT .)
    I8              reduce using rule 91 (REL_OP -> LT .)
    USIZE           reduce using rule 91 (REL_OP -> LT .)
    U64             reduce using rule 91 (REL_OP -> LT .)
    U32             reduce using rule 91 (REL_OP -> LT .)
    U16             reduce using rule 91 (REL_OP -> LT .)
    U8              reduce using rule 91 (REL_OP -> LT .)
    HEX_LIT         reduce using rule 91 (REL_OP -> LT .)
    OCTAL_LIT       reduce using rule 91 (REL_OP -> LT .)
    BINARY_LIT      reduce using rule 91 (REL_OP -> LT .)
    .               reduce using rule 91 (REL_OP -> LT .)


state 84

    (92) REL_OP -> NE .
    AND             reduce using rule 92 (REL_OP -> NE .)
    EXCLM           reduce using rule 92 (REL_OP -> NE .)
    MINUS           reduce using rule 92 (REL_OP -> NE .)
    (               reduce using rule 92 (REL_OP -> NE .)
    IDENTIFIER      reduce using rule 92 (REL_OP -> NE .)
    STRING          reduce using rule 92 (REL_OP -> NE .)
    BOOL            reduce using rule 92 (REL_OP -> NE .)
    RUNE            reduce using rule 92 (REL_OP -> NE .)
    DECIMAL_LIT     reduce using rule 92 (REL_OP -> NE .)
    FALSE           reduce using rule 92 (REL_OP -> NE .)
    TRUE            reduce using rule 92 (REL_OP -> NE .)
    RUNE_LIT        reduce using rule 92 (REL_OP -> NE .)
    STRING_LIT      reduce using rule 92 (REL_OP -> NE .)
    F32             reduce using rule 92 (REL_OP -> NE .)
    F64             reduce using rule 92 (REL_OP -> NE .)
    ISIZE           reduce using rule 92 (REL_OP -> NE .)
    I64             reduce using rule 92 (REL_OP -> NE .)
    I32             reduce using rule 92 (REL_OP -> NE .)
    I16             reduce using rule 92 (REL_OP -> NE .)
    I8              reduce using rule 92 (REL_OP -> NE .)
    USIZE           reduce using rule 92 (REL_OP -> NE .)
    U64             reduce using rule 92 (REL_OP -> NE .)
    U32             reduce using rule 92 (REL_OP -> NE .)
    U16             reduce using rule 92 (REL_OP -> NE .)
    U8              reduce using rule 92 (REL_OP -> NE .)
    HEX_LIT         reduce using rule 92 (REL_OP -> NE .)
    OCTAL_LIT       reduce using rule 92 (REL_OP -> NE .)
    BINARY_LIT      reduce using rule 92 (REL_OP -> NE .)
    .               reduce using rule 92 (REL_OP -> NE .)


state 85

    (93) REL_OP -> EQ .
    AND             reduce using rule 93 (REL_OP -> EQ .)
    EXCLM           reduce using rule 93 (REL_OP -> EQ .)
    MINUS           reduce using rule 93 (REL_OP -> EQ .)
    (               reduce using rule 93 (REL_OP -> EQ .)
    IDENTIFIER      reduce using rule 93 (REL_OP -> EQ .)
    STRING          reduce using rule 93 (REL_OP -> EQ .)
    BOOL            reduce using rule 93 (REL_OP -> EQ .)
    RUNE            reduce using rule 93 (REL_OP -> EQ .)
    DECIMAL_LIT     reduce using rule 93 (REL_OP -> EQ .)
    FALSE           reduce using rule 93 (REL_OP -> EQ .)
    TRUE            reduce using rule 93 (REL_OP -> EQ .)
    RUNE_LIT        reduce using rule 93 (REL_OP -> EQ .)
    STRING_LIT      reduce using rule 93 (REL_OP -> EQ .)
    F32             reduce using rule 93 (REL_OP -> EQ .)
    F64             reduce using rule 93 (REL_OP -> EQ .)
    ISIZE           reduce using rule 93 (REL_OP -> EQ .)
    I64             reduce using rule 93 (REL_OP -> EQ .)
    I32             reduce using rule 93 (REL_OP -> EQ .)
    I16             reduce using rule 93 (REL_OP -> EQ .)
    I8              reduce using rule 93 (REL_OP -> EQ .)
    USIZE           reduce using rule 93 (REL_OP -> EQ .)
    U64             reduce using rule 93 (REL_OP -> EQ .)
    U32             reduce using rule 93 (REL_OP -> EQ .)
    U16             reduce using rule 93 (REL_OP -> EQ .)
    U8              reduce using rule 93 (REL_OP -> EQ .)
    HEX_LIT         reduce using rule 93 (REL_OP -> EQ .)
    OCTAL_LIT       reduce using rule 93 (REL_OP -> EQ .)
    BINARY_LIT      reduce using rule 93 (REL_OP -> EQ .)
    .               reduce using rule 93 (REL_OP -> EQ .)


state 86

    (34) unaryExpr -> UNARY_OP unaryExpr .
    LOGIC_AND       reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    LOGIC_OR        reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    SHR             reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    SHL             reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    AND             reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    MOD             reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    DIV             reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    STAR            reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    XOR             reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    OR              reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    MINUS           reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    PLUS            reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    GE              reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    GT              reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    LE              reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    LT              reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    NE              reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    EQ              reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    ,               reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    NEWL            reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    ;               reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)
    )               reduce using rule 34 (unaryExpr -> UNARY_OP unaryExpr .)


state 87

    (44) conversion -> type_ ( . expression )
    (32) expression -> . expression BINARY_OP unaryExpr
    (33) expression -> . unaryExpr
    (34) unaryExpr -> . UNARY_OP unaryExpr
    (35) unaryExpr -> . primaryExpr
    (104) UNARY_OP -> . AND
    (105) UNARY_OP -> . EXCLM
    (106) UNARY_OP -> . MINUS
    (36) primaryExpr -> . conversion
    (37) primaryExpr -> . operand
    (44) conversion -> . type_ ( expression )
    (38) operand -> . ( expression )
    (39) operand -> . operandName
    (40) operand -> . literal
    (45) type_ -> . qualifiedIdent
    (46) type_ -> . typeName
    (41) operandName -> . qualifiedIdent
    (42) operandName -> . IDENTIFIER
    (43) literal -> . basicLit
    (47) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (48) typeName -> . numericType
    (49) typeName -> . STRING
    (50) typeName -> . BOOL
    (51) typeName -> . RUNE
    (64) basicLit -> . INT_LIT
    (65) basicLit -> . FLOAT_LIT
    (66) basicLit -> . DECIMAL_LIT EXPONENT
    (67) basicLit -> . FLOAT_LIT EXPONENT
    (68) basicLit -> . FALSE
    (69) basicLit -> . TRUE
    (70) basicLit -> . RUNE_LIT
    (71) basicLit -> . STRING_LIT
    (52) numericType -> . F32
    (53) numericType -> . F64
    (54) numericType -> . ISIZE
    (55) numericType -> . I64
    (56) numericType -> . I32
    (57) numericType -> . I16
    (58) numericType -> . I8
    (59) numericType -> . USIZE
    (60) numericType -> . U64
    (61) numericType -> . U32
    (62) numericType -> . U16
    (63) numericType -> . U8
    (75) INT_LIT -> . HEX_LIT
    (76) INT_LIT -> . OCTAL_LIT
    (77) INT_LIT -> . BINARY_LIT
    (78) INT_LIT -> . DECIMAL_LIT
    (72) FLOAT_LIT -> . . DECIMAL_LIT
    (73) FLOAT_LIT -> . DECIMAL_LIT .
    (74) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 22
    EXCLM           shift and go to state 23
    MINUS           shift and go to state 24
    (               shift and go to state 28
    IDENTIFIER      shift and go to state 33
    STRING          shift and go to state 37
    BOOL            shift and go to state 38
    RUNE            shift and go to state 39
    DECIMAL_LIT     shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44
    RUNE_LIT        shift and go to state 45
    STRING_LIT      shift and go to state 46
    F32             shift and go to state 47
    F64             shift and go to state 48
    ISIZE           shift and go to state 49
    I64             shift and go to state 50
    I32             shift and go to state 51
    I16             shift and go to state 52
    I8              shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 35

    type_                          shift and go to state 27
    expression                     shift and go to state 96
    unaryExpr                      shift and go to state 19
    UNARY_OP                       shift and go to state 20
    primaryExpr                    shift and go to state 21
    conversion                     shift and go to state 25
    operand                        shift and go to state 26
    operandName                    shift and go to state 29
    literal                        shift and go to state 30
    qualifiedIdent                 shift and go to state 31
    typeName                       shift and go to state 32
    basicLit                       shift and go to state 34
    numericType                    shift and go to state 36
    INT_LIT                        shift and go to state 40
    FLOAT_LIT                      shift and go to state 41

state 88

    (38) operand -> ( expression . )
    (32) expression -> expression . BINARY_OP unaryExpr
    (83) BINARY_OP -> . MUL_OP
    (84) BINARY_OP -> . ADD_OP
    (85) BINARY_OP -> . REL_OP
    (86) BINARY_OP -> . LOGIC_AND
    (87) BINARY_OP -> . LOGIC_OR
    (98) MUL_OP -> . SHR
    (99) MUL_OP -> . SHL
    (100) MUL_OP -> . AND
    (101) MUL_OP -> . MOD
    (102) MUL_OP -> . DIV
    (103) MUL_OP -> . STAR
    (94) ADD_OP -> . XOR
    (95) ADD_OP -> . OR
    (96) ADD_OP -> . MINUS
    (97) ADD_OP -> . PLUS
    (88) REL_OP -> . GE
    (89) REL_OP -> . GT
    (90) REL_OP -> . LE
    (91) REL_OP -> . LT
    (92) REL_OP -> . NE
    (93) REL_OP -> . EQ
    )               shift and go to state 97
    LOGIC_AND       shift and go to state 68
    LOGIC_OR        shift and go to state 69
    SHR             shift and go to state 70
    SHL             shift and go to state 71
    AND             shift and go to state 72
    MOD             shift and go to state 73
    DIV             shift and go to state 74
    STAR            shift and go to state 75
    XOR             shift and go to state 76
    OR              shift and go to state 77
    MINUS           shift and go to state 78
    PLUS            shift and go to state 79
    GE              shift and go to state 80
    GT              shift and go to state 81
    LE              shift and go to state 82
    LT              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85

    BINARY_OP                      shift and go to state 64
    MUL_OP                         shift and go to state 65
    ADD_OP                         shift and go to state 66
    REL_OP                         shift and go to state 67

state 89

    (47) qualifiedIdent -> IDENTIFIER . . IDENTIFIER
    IDENTIFIER      shift and go to state 98


state 90

    (72) FLOAT_LIT -> . DECIMAL_LIT .
    EXPONENT        reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    SHR             reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    SHL             reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    AND             reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    MOD             reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    DIV             reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    STAR            reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    XOR             reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    OR              reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    MINUS           reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    PLUS            reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    GE              reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    GT              reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    LE              reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    LT              reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    NE              reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    EQ              reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    ,               reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    NEWL            reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    ;               reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)
    )               reduce using rule 72 (FLOAT_LIT -> . DECIMAL_LIT .)


state 91

    (67) basicLit -> FLOAT_LIT EXPONENT .
    LOGIC_AND       reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    LOGIC_OR        reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    SHR             reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    SHL             reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    AND             reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    MOD             reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    DIV             reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    STAR            reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    XOR             reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    OR              reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    MINUS           reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    PLUS            reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    GE              reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    GT              reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    LE              reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    LT              reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    NE              reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    EQ              reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    ,               reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    NEWL            reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    ;               reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)
    )               reduce using rule 67 (basicLit -> FLOAT_LIT EXPONENT .)


state 92

    (66) basicLit -> DECIMAL_LIT EXPONENT .
    LOGIC_AND       reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    LOGIC_OR        reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    SHR             reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    SHL             reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    AND             reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    MOD             reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    DIV             reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    STAR            reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    XOR             reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    OR              reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    MINUS           reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    PLUS            reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    GE              reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    GT              reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    LE              reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    LT              reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    NE              reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    EQ              reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    ,               reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    NEWL            reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    ;               reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)
    )               reduce using rule 66 (basicLit -> DECIMAL_LIT EXPONENT .)


state 93

    (73) FLOAT_LIT -> DECIMAL_LIT . .
    (74) FLOAT_LIT -> DECIMAL_LIT . . DECIMAL_LIT
    EXPONENT        reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    LOGIC_AND       reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    LOGIC_OR        reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    SHR             reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    SHL             reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    AND             reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    MOD             reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    DIV             reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    STAR            reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    XOR             reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    OR              reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    MINUS           reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    PLUS            reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    GE              reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    GT              reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    LE              reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    LT              reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    NE              reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    EQ              reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    ,               reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    NEWL            reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    ;               reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    )               reduce using rule 73 (FLOAT_LIT -> DECIMAL_LIT . .)
    DECIMAL_LIT     shift and go to state 99


state 94

    (9) expressionList -> expressionList , expression .
    (32) expression -> expression . BINARY_OP unaryExpr
    (83) BINARY_OP -> . MUL_OP
    (84) BINARY_OP -> . ADD_OP
    (85) BINARY_OP -> . REL_OP
    (86) BINARY_OP -> . LOGIC_AND
    (87) BINARY_OP -> . LOGIC_OR
    (98) MUL_OP -> . SHR
    (99) MUL_OP -> . SHL
    (100) MUL_OP -> . AND
    (101) MUL_OP -> . MOD
    (102) MUL_OP -> . DIV
    (103) MUL_OP -> . STAR
    (94) ADD_OP -> . XOR
    (95) ADD_OP -> . OR
    (96) ADD_OP -> . MINUS
    (97) ADD_OP -> . PLUS
    (88) REL_OP -> . GE
    (89) REL_OP -> . GT
    (90) REL_OP -> . LE
    (91) REL_OP -> . LT
    (92) REL_OP -> . NE
    (93) REL_OP -> . EQ
    ,               reduce using rule 9 (expressionList -> expressionList , expression .)
    NEWL            reduce using rule 9 (expressionList -> expressionList , expression .)
    ;               reduce using rule 9 (expressionList -> expressionList , expression .)
    LOGIC_AND       shift and go to state 68
    LOGIC_OR        shift and go to state 69
    SHR             shift and go to state 70
    SHL             shift and go to state 71
    AND             shift and go to state 72
    MOD             shift and go to state 73
    DIV             shift and go to state 74
    STAR            shift and go to state 75
    XOR             shift and go to state 76
    OR              shift and go to state 77
    MINUS           shift and go to state 78
    PLUS            shift and go to state 79
    GE              shift and go to state 80
    GT              shift and go to state 81
    LE              shift and go to state 82
    LT              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85

    BINARY_OP                      shift and go to state 64
    MUL_OP                         shift and go to state 65
    ADD_OP                         shift and go to state 66
    REL_OP                         shift and go to state 67

state 95

    (32) expression -> expression BINARY_OP unaryExpr .
    LOGIC_AND       reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    LOGIC_OR        reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    SHR             reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    SHL             reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    AND             reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    MOD             reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    DIV             reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    STAR            reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    XOR             reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    OR              reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    MINUS           reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    PLUS            reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    GE              reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    GT              reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    LE              reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    LT              reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    NE              reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    EQ              reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    ,               reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    NEWL            reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    ;               reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)
    )               reduce using rule 32 (expression -> expression BINARY_OP unaryExpr .)


state 96

    (44) conversion -> type_ ( expression . )
    (32) expression -> expression . BINARY_OP unaryExpr
    (83) BINARY_OP -> . MUL_OP
    (84) BINARY_OP -> . ADD_OP
    (85) BINARY_OP -> . REL_OP
    (86) BINARY_OP -> . LOGIC_AND
    (87) BINARY_OP -> . LOGIC_OR
    (98) MUL_OP -> . SHR
    (99) MUL_OP -> . SHL
    (100) MUL_OP -> . AND
    (101) MUL_OP -> . MOD
    (102) MUL_OP -> . DIV
    (103) MUL_OP -> . STAR
    (94) ADD_OP -> . XOR
    (95) ADD_OP -> . OR
    (96) ADD_OP -> . MINUS
    (97) ADD_OP -> . PLUS
    (88) REL_OP -> . GE
    (89) REL_OP -> . GT
    (90) REL_OP -> . LE
    (91) REL_OP -> . LT
    (92) REL_OP -> . NE
    (93) REL_OP -> . EQ
    )               shift and go to state 100
    LOGIC_AND       shift and go to state 68
    LOGIC_OR        shift and go to state 69
    SHR             shift and go to state 70
    SHL             shift and go to state 71
    AND             shift and go to state 72
    MOD             shift and go to state 73
    DIV             shift and go to state 74
    STAR            shift and go to state 75
    XOR             shift and go to state 76
    OR              shift and go to state 77
    MINUS           shift and go to state 78
    PLUS            shift and go to state 79
    GE              shift and go to state 80
    GT              shift and go to state 81
    LE              shift and go to state 82
    LT              shift and go to state 83
    NE              shift and go to state 84
    EQ              shift and go to state 85

    BINARY_OP                      shift and go to state 64
    MUL_OP                         shift and go to state 65
    ADD_OP                         shift and go to state 66
    REL_OP                         shift and go to state 67

state 97

    (38) operand -> ( expression ) .
    LOGIC_AND       reduce using rule 38 (operand -> ( expression ) .)
    LOGIC_OR        reduce using rule 38 (operand -> ( expression ) .)
    SHR             reduce using rule 38 (operand -> ( expression ) .)
    SHL             reduce using rule 38 (operand -> ( expression ) .)
    AND             reduce using rule 38 (operand -> ( expression ) .)
    MOD             reduce using rule 38 (operand -> ( expression ) .)
    DIV             reduce using rule 38 (operand -> ( expression ) .)
    STAR            reduce using rule 38 (operand -> ( expression ) .)
    XOR             reduce using rule 38 (operand -> ( expression ) .)
    OR              reduce using rule 38 (operand -> ( expression ) .)
    MINUS           reduce using rule 38 (operand -> ( expression ) .)
    PLUS            reduce using rule 38 (operand -> ( expression ) .)
    GE              reduce using rule 38 (operand -> ( expression ) .)
    GT              reduce using rule 38 (operand -> ( expression ) .)
    LE              reduce using rule 38 (operand -> ( expression ) .)
    LT              reduce using rule 38 (operand -> ( expression ) .)
    NE              reduce using rule 38 (operand -> ( expression ) .)
    EQ              reduce using rule 38 (operand -> ( expression ) .)
    ,               reduce using rule 38 (operand -> ( expression ) .)
    NEWL            reduce using rule 38 (operand -> ( expression ) .)
    ;               reduce using rule 38 (operand -> ( expression ) .)
    )               reduce using rule 38 (operand -> ( expression ) .)


state 98

    (47) qualifiedIdent -> IDENTIFIER . IDENTIFIER .
    (               reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    LOGIC_AND       reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    LOGIC_OR        reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    SHR             reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    SHL             reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    AND             reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    MOD             reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    DIV             reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    STAR            reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    XOR             reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    OR              reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    MINUS           reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    PLUS            reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    GE              reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    GT              reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    LE              reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    LT              reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    NE              reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    EQ              reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    ,               reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    NEWL            reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    ;               reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    )               reduce using rule 47 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)


state 99

    (74) FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .
    EXPONENT        reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    SHR             reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    SHL             reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    AND             reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    MOD             reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    DIV             reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    STAR            reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    XOR             reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    OR              reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    MINUS           reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    PLUS            reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    GE              reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    GT              reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LE              reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LT              reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    NE              reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    EQ              reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    ,               reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    NEWL            reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    ;               reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    )               reduce using rule 74 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)


state 100

    (44) conversion -> type_ ( expression ) .
    LOGIC_AND       reduce using rule 44 (conversion -> type_ ( expression ) .)
    LOGIC_OR        reduce using rule 44 (conversion -> type_ ( expression ) .)
    SHR             reduce using rule 44 (conversion -> type_ ( expression ) .)
    SHL             reduce using rule 44 (conversion -> type_ ( expression ) .)
    AND             reduce using rule 44 (conversion -> type_ ( expression ) .)
    MOD             reduce using rule 44 (conversion -> type_ ( expression ) .)
    DIV             reduce using rule 44 (conversion -> type_ ( expression ) .)
    STAR            reduce using rule 44 (conversion -> type_ ( expression ) .)
    XOR             reduce using rule 44 (conversion -> type_ ( expression ) .)
    OR              reduce using rule 44 (conversion -> type_ ( expression ) .)
    MINUS           reduce using rule 44 (conversion -> type_ ( expression ) .)
    PLUS            reduce using rule 44 (conversion -> type_ ( expression ) .)
    GE              reduce using rule 44 (conversion -> type_ ( expression ) .)
    GT              reduce using rule 44 (conversion -> type_ ( expression ) .)
    LE              reduce using rule 44 (conversion -> type_ ( expression ) .)
    LT              reduce using rule 44 (conversion -> type_ ( expression ) .)
    NE              reduce using rule 44 (conversion -> type_ ( expression ) .)
    EQ              reduce using rule 44 (conversion -> type_ ( expression ) .)
    ,               reduce using rule 44 (conversion -> type_ ( expression ) .)
    NEWL            reduce using rule 44 (conversion -> type_ ( expression ) .)
    ;               reduce using rule 44 (conversion -> type_ ( expression ) .)
    )               reduce using rule 44 (conversion -> type_ ( expression ) .)
