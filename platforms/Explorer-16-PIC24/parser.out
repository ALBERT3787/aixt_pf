Grammar:

Rule 0     S' -> sourceFile
Rule 1     sourceFile -> topLevelDecls orphanStmtList
Rule 2     sourceFile -> topLevelDecls
Rule 3     topLevelDecls -> topLevelDecls topLevelDecl eos
Rule 4     topLevelDecls -> topLevelDecl eos
Rule 5     orphanStmtList -> statementList eos
Rule 6     topLevelDecl -> declaration
Rule 7     declaration -> varDecl
Rule 8     varDecl -> identifierList DECL_ASGN expressionList
Rule 9     identifierList -> identifierList , IDENTIFIER
Rule 10    identifierList -> IDENTIFIER
Rule 11    expressionList -> expressionList , expression
Rule 12    expressionList -> expression
Rule 13    statementList -> statementList eos statement
Rule 14    statementList -> statement
Rule 15    statement -> simpleStmt
Rule 16    simpleStmt -> assignment
Rule 17    simpleStmt -> expressionStmt
Rule 18    expressionStmt -> expression
Rule 19    assignment -> identifierList assign_op expressionList
Rule 20    expression -> expression BINARY_OP unaryExpr
Rule 21    expression -> unaryExpr
Rule 22    unaryExpr -> UNARY_OP unaryExpr  [precedence=right, level=7]
Rule 23    unaryExpr -> primaryExpr
Rule 24    primaryExpr -> conversion
Rule 25    primaryExpr -> operand
Rule 26    operand -> ( expression )
Rule 27    operand -> operandName
Rule 28    operand -> literal
Rule 29    operandName -> qualifiedIdent
Rule 30    operandName -> IDENTIFIER
Rule 31    literal -> basicLit
Rule 32    conversion -> type_ ( expression )
Rule 33    type_ -> qualifiedIdent
Rule 34    type_ -> typeName
Rule 35    qualifiedIdent -> IDENTIFIER . IDENTIFIER
Rule 36    typeName -> numericType
Rule 37    typeName -> STRING
Rule 38    typeName -> BOOL
Rule 39    typeName -> RUNE
Rule 40    numericType -> F32
Rule 41    numericType -> F64
Rule 42    numericType -> INT
Rule 43    numericType -> ISIZE
Rule 44    numericType -> I64
Rule 45    numericType -> I32
Rule 46    numericType -> I16
Rule 47    numericType -> I8
Rule 48    numericType -> UINT
Rule 49    numericType -> USIZE
Rule 50    numericType -> U64
Rule 51    numericType -> U32
Rule 52    numericType -> U16
Rule 53    numericType -> U8
Rule 54    basicLit -> INT_LIT
Rule 55    basicLit -> FLOAT_LIT
Rule 56    basicLit -> DECIMAL_LIT EXPONENT
Rule 57    basicLit -> FLOAT_LIT EXPONENT
Rule 58    basicLit -> FALSE
Rule 59    basicLit -> TRUE
Rule 60    basicLit -> RUNE_LIT
Rule 61    basicLit -> STRING_LIT
Rule 62    FLOAT_LIT -> . DECIMAL_LIT
Rule 63    FLOAT_LIT -> DECIMAL_LIT .
Rule 64    FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT
Rule 65    INT_LIT -> HEX_LIT
Rule 66    INT_LIT -> OCTAL_LIT
Rule 67    INT_LIT -> BINARY_LIT
Rule 68    INT_LIT -> DECIMAL_LIT
Rule 69    eos -> eos NEWL
Rule 70    eos -> NEWL
Rule 71    eos -> eos ;
Rule 72    eos -> ;
Rule 73    assign_op -> SHR_ASGN  [precedence=right, level=8]
Rule 74    assign_op -> SHL_ASGN  [precedence=right, level=8]
Rule 75    assign_op -> MOD_ASGN  [precedence=right, level=8]
Rule 76    assign_op -> DIV_ASGN  [precedence=right, level=8]
Rule 77    assign_op -> OR_ASGN  [precedence=right, level=8]
Rule 78    assign_op -> AND_ASGN  [precedence=right, level=8]
Rule 79    assign_op -> STAR_ASGN  [precedence=right, level=8]
Rule 80    assign_op -> XOR_ASGN  [precedence=right, level=8]
Rule 81    assign_op -> MINUS_ASGN  [precedence=right, level=8]
Rule 82    assign_op -> PLUS_ASGN  [precedence=right, level=8]
Rule 83    assign_op -> ASSIGN  [precedence=right, level=8]
Rule 84    BINARY_OP -> MUL_OP
Rule 85    BINARY_OP -> ADD_OP
Rule 86    BINARY_OP -> REL_OP
Rule 87    BINARY_OP -> LOGIC_AND  [precedence=left, level=2]
Rule 88    BINARY_OP -> LOGIC_OR  [precedence=left, level=1]
Rule 89    REL_OP -> GE  [precedence=left, level=3]
Rule 90    REL_OP -> GT  [precedence=left, level=3]
Rule 91    REL_OP -> LE  [precedence=left, level=3]
Rule 92    REL_OP -> LT  [precedence=left, level=3]
Rule 93    REL_OP -> NE  [precedence=left, level=3]
Rule 94    REL_OP -> EQ  [precedence=left, level=3]
Rule 95    ADD_OP -> XOR  [precedence=left, level=4]
Rule 96    ADD_OP -> OR  [precedence=left, level=4]
Rule 97    ADD_OP -> MINUS  [precedence=left, level=4]
Rule 98    ADD_OP -> PLUS  [precedence=left, level=4]
Rule 99    MUL_OP -> SHR  [precedence=left, level=5]
Rule 100   MUL_OP -> SHL  [precedence=left, level=5]
Rule 101   MUL_OP -> AND  [precedence=left, level=5]
Rule 102   MUL_OP -> MOD  [precedence=left, level=5]
Rule 103   MUL_OP -> DIV  [precedence=left, level=5]
Rule 104   MUL_OP -> STAR  [precedence=left, level=5]
Rule 105   UNARY_OP -> AND  [precedence=left, level=5]
Rule 106   UNARY_OP -> EXCLM
Rule 107   UNARY_OP -> MINUS  [precedence=left, level=4]

Unused terminals:

    CONTINUE
    BREAK
    TYPE
    FN
    MINUS_MINUS
    RETURN
    ELSE
    MATCH
    STATIC
    MAP
    CONST
    ENUM
    FOR
    IF
    PLUS_PLUS
    IMPORT
    IN
    STRUCT
    AS

Terminals, with rules where they appear:

(                    : 26 32
)                    : 26 32
,                    : 9 11
.                    : 35 62 63 64
;                    : 71 72
AND                  : 101 105
AND_ASGN             : 78
AS                   : 
ASSIGN               : 83
BINARY_LIT           : 67
BOOL                 : 38
BREAK                : 
CONST                : 
CONTINUE             : 
DECIMAL_LIT          : 56 62 63 64 64 68
DECL_ASGN            : 8
DIV                  : 103
DIV_ASGN             : 76
ELSE                 : 
ENUM                 : 
EQ                   : 94
EXCLM                : 106
EXPONENT             : 56 57
F32                  : 40
F64                  : 41
FALSE                : 58
FN                   : 
FOR                  : 
GE                   : 89
GT                   : 90
HEX_LIT              : 65
I16                  : 46
I32                  : 45
I64                  : 44
I8                   : 47
IDENTIFIER           : 9 10 30 35 35
IF                   : 
IMPORT               : 
IN                   : 
INT                  : 42
ISIZE                : 43
LE                   : 91
LOGIC_AND            : 87
LOGIC_OR             : 88
LT                   : 92
MAP                  : 
MATCH                : 
MINUS                : 97 107
MINUS_ASGN           : 81
MINUS_MINUS          : 
MOD                  : 102
MOD_ASGN             : 75
NE                   : 93
NEWL                 : 69 70
OCTAL_LIT            : 66
OR                   : 96
OR_ASGN              : 77
PLUS                 : 98
PLUS_ASGN            : 82
PLUS_PLUS            : 
RETURN               : 
RUNE                 : 39
RUNE_LIT             : 60
SHL                  : 100
SHL_ASGN             : 74
SHR                  : 99
SHR_ASGN             : 73
STAR                 : 104
STAR_ASGN            : 79
STATIC               : 
STRING               : 37
STRING_LIT           : 61
STRUCT               : 
TRUE                 : 59
TYPE                 : 
U16                  : 52
U32                  : 51
U64                  : 50
U8                   : 53
UINT                 : 48
USIZE                : 49
XOR                  : 95
XOR_ASGN             : 80
error                : 

Nonterminals, with rules where they appear:

ADD_OP               : 85
BINARY_OP            : 20
FLOAT_LIT            : 55 57
INT_LIT              : 54
MUL_OP               : 84
REL_OP               : 86
UNARY_OP             : 22
assign_op            : 19
assignment           : 16
basicLit             : 31
conversion           : 24
declaration          : 6
eos                  : 3 4 5 13 69 71
expression           : 11 12 18 20 26 32
expressionList       : 8 11 19
expressionStmt       : 17
identifierList       : 8 9 19
literal              : 28
numericType          : 36
operand              : 25
operandName          : 27
orphanStmtList       : 1
primaryExpr          : 23
qualifiedIdent       : 29 33
simpleStmt           : 15
sourceFile           : 0
statement            : 13 14
statementList        : 5 13
topLevelDecl         : 3 4
topLevelDecls        : 1 2 3
typeName             : 34
type_                : 32
unaryExpr            : 20 21 22
varDecl              : 7


state 0

    (0) S' -> . sourceFile
    (1) sourceFile -> . topLevelDecls orphanStmtList
    (2) sourceFile -> . topLevelDecls
    (3) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (4) topLevelDecls -> . topLevelDecl eos
    (6) topLevelDecl -> . declaration
    (7) declaration -> . varDecl
    (8) varDecl -> . identifierList DECL_ASGN expressionList
    (9) identifierList -> . identifierList , IDENTIFIER
    (10) identifierList -> . IDENTIFIER
    IDENTIFIER      shift and go to state 7

    sourceFile                     shift and go to state 1
    topLevelDecls                  shift and go to state 2
    topLevelDecl                   shift and go to state 3
    declaration                    shift and go to state 4
    varDecl                        shift and go to state 5
    identifierList                 shift and go to state 6

state 1

    (0) S' -> sourceFile .


state 2

    (1) sourceFile -> topLevelDecls . orphanStmtList
    (2) sourceFile -> topLevelDecls .
    (3) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (5) orphanStmtList -> . statementList eos
    (6) topLevelDecl -> . declaration
    (13) statementList -> . statementList eos statement
    (14) statementList -> . statement
    (7) declaration -> . varDecl
    (15) statement -> . simpleStmt
    (8) varDecl -> . identifierList DECL_ASGN expressionList
    (16) simpleStmt -> . assignment
    (17) simpleStmt -> . expressionStmt
    (9) identifierList -> . identifierList , IDENTIFIER
    (10) identifierList -> . IDENTIFIER
    (19) assignment -> . identifierList assign_op expressionList
    (18) expressionStmt -> . expression
    (20) expression -> . expression BINARY_OP unaryExpr
    (21) expression -> . unaryExpr
    (22) unaryExpr -> . UNARY_OP unaryExpr
    (23) unaryExpr -> . primaryExpr
    (105) UNARY_OP -> . AND
    (106) UNARY_OP -> . EXCLM
    (107) UNARY_OP -> . MINUS
    (24) primaryExpr -> . conversion
    (25) primaryExpr -> . operand
    (32) conversion -> . type_ ( expression )
    (26) operand -> . ( expression )
    (27) operand -> . operandName
    (28) operand -> . literal
    (33) type_ -> . qualifiedIdent
    (34) type_ -> . typeName
    (29) operandName -> . qualifiedIdent
    (30) operandName -> . IDENTIFIER
    (31) literal -> . basicLit
    (35) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (36) typeName -> . numericType
    (37) typeName -> . STRING
    (38) typeName -> . BOOL
    (39) typeName -> . RUNE
    (54) basicLit -> . INT_LIT
    (55) basicLit -> . FLOAT_LIT
    (56) basicLit -> . DECIMAL_LIT EXPONENT
    (57) basicLit -> . FLOAT_LIT EXPONENT
    (58) basicLit -> . FALSE
    (59) basicLit -> . TRUE
    (60) basicLit -> . RUNE_LIT
    (61) basicLit -> . STRING_LIT
    (40) numericType -> . F32
    (41) numericType -> . F64
    (42) numericType -> . INT
    (43) numericType -> . ISIZE
    (44) numericType -> . I64
    (45) numericType -> . I32
    (46) numericType -> . I16
    (47) numericType -> . I8
    (48) numericType -> . UINT
    (49) numericType -> . USIZE
    (50) numericType -> . U64
    (51) numericType -> . U32
    (52) numericType -> . U16
    (53) numericType -> . U8
    (65) INT_LIT -> . HEX_LIT
    (66) INT_LIT -> . OCTAL_LIT
    (67) INT_LIT -> . BINARY_LIT
    (68) INT_LIT -> . DECIMAL_LIT
    (62) FLOAT_LIT -> . . DECIMAL_LIT
    (63) FLOAT_LIT -> . DECIMAL_LIT .
    (64) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 2 (sourceFile -> topLevelDecls .)
    IDENTIFIER      shift and go to state 16
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    orphanStmtList                 shift and go to state 8
    topLevelDecl                   shift and go to state 9
    statementList                  shift and go to state 10
    declaration                    shift and go to state 4
    statement                      shift and go to state 11
    varDecl                        shift and go to state 5
    simpleStmt                     shift and go to state 12
    identifierList                 shift and go to state 13
    assignment                     shift and go to state 14
    expressionStmt                 shift and go to state 15
    expression                     shift and go to state 17
    unaryExpr                      shift and go to state 18
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 3

    (4) topLevelDecls -> topLevelDecl . eos
    (69) eos -> . eos NEWL
    (70) eos -> . NEWL
    (71) eos -> . eos ;
    (72) eos -> . ;
    NEWL            shift and go to state 63
    ;               shift and go to state 64

    eos                            shift and go to state 62

state 4

    (6) topLevelDecl -> declaration .
    NEWL            reduce using rule 6 (topLevelDecl -> declaration .)
    ;               reduce using rule 6 (topLevelDecl -> declaration .)


state 5

    (7) declaration -> varDecl .
    NEWL            reduce using rule 7 (declaration -> varDecl .)
    ;               reduce using rule 7 (declaration -> varDecl .)


state 6

    (8) varDecl -> identifierList . DECL_ASGN expressionList
    (9) identifierList -> identifierList . , IDENTIFIER
    DECL_ASGN       shift and go to state 65
    ,               shift and go to state 66


state 7

    (10) identifierList -> IDENTIFIER .
    DECL_ASGN       reduce using rule 10 (identifierList -> IDENTIFIER .)
    ,               reduce using rule 10 (identifierList -> IDENTIFIER .)


state 8

    (1) sourceFile -> topLevelDecls orphanStmtList .
    $end            reduce using rule 1 (sourceFile -> topLevelDecls orphanStmtList .)


state 9

    (3) topLevelDecls -> topLevelDecls topLevelDecl . eos
    (69) eos -> . eos NEWL
    (70) eos -> . NEWL
    (71) eos -> . eos ;
    (72) eos -> . ;
    NEWL            shift and go to state 63
    ;               shift and go to state 64

    eos                            shift and go to state 67

state 10

    (5) orphanStmtList -> statementList . eos
    (13) statementList -> statementList . eos statement
    (69) eos -> . eos NEWL
    (70) eos -> . NEWL
    (71) eos -> . eos ;
    (72) eos -> . ;
    NEWL            shift and go to state 63
    ;               shift and go to state 64

    eos                            shift and go to state 68

state 11

    (14) statementList -> statement .
    NEWL            reduce using rule 14 (statementList -> statement .)
    ;               reduce using rule 14 (statementList -> statement .)


state 12

    (15) statement -> simpleStmt .
    NEWL            reduce using rule 15 (statement -> simpleStmt .)
    ;               reduce using rule 15 (statement -> simpleStmt .)


state 13

    (8) varDecl -> identifierList . DECL_ASGN expressionList
    (9) identifierList -> identifierList . , IDENTIFIER
    (19) assignment -> identifierList . assign_op expressionList
    (73) assign_op -> . SHR_ASGN
    (74) assign_op -> . SHL_ASGN
    (75) assign_op -> . MOD_ASGN
    (76) assign_op -> . DIV_ASGN
    (77) assign_op -> . OR_ASGN
    (78) assign_op -> . AND_ASGN
    (79) assign_op -> . STAR_ASGN
    (80) assign_op -> . XOR_ASGN
    (81) assign_op -> . MINUS_ASGN
    (82) assign_op -> . PLUS_ASGN
    (83) assign_op -> . ASSIGN
    DECL_ASGN       shift and go to state 65
    ,               shift and go to state 66
    SHR_ASGN        shift and go to state 70
    SHL_ASGN        shift and go to state 71
    MOD_ASGN        shift and go to state 72
    DIV_ASGN        shift and go to state 73
    OR_ASGN         shift and go to state 74
    AND_ASGN        shift and go to state 75
    STAR_ASGN       shift and go to state 76
    XOR_ASGN        shift and go to state 77
    MINUS_ASGN      shift and go to state 78
    PLUS_ASGN       shift and go to state 79
    ASSIGN          shift and go to state 80

    assign_op                      shift and go to state 69

state 14

    (16) simpleStmt -> assignment .
    NEWL            reduce using rule 16 (simpleStmt -> assignment .)
    ;               reduce using rule 16 (simpleStmt -> assignment .)


state 15

    (17) simpleStmt -> expressionStmt .
    NEWL            reduce using rule 17 (simpleStmt -> expressionStmt .)
    ;               reduce using rule 17 (simpleStmt -> expressionStmt .)


state 16

    (10) identifierList -> IDENTIFIER .
    (30) operandName -> IDENTIFIER .
    (35) qualifiedIdent -> IDENTIFIER . . IDENTIFIER
    DECL_ASGN       reduce using rule 10 (identifierList -> IDENTIFIER .)
    ,               reduce using rule 10 (identifierList -> IDENTIFIER .)
    SHR_ASGN        reduce using rule 10 (identifierList -> IDENTIFIER .)
    SHL_ASGN        reduce using rule 10 (identifierList -> IDENTIFIER .)
    MOD_ASGN        reduce using rule 10 (identifierList -> IDENTIFIER .)
    DIV_ASGN        reduce using rule 10 (identifierList -> IDENTIFIER .)
    OR_ASGN         reduce using rule 10 (identifierList -> IDENTIFIER .)
    AND_ASGN        reduce using rule 10 (identifierList -> IDENTIFIER .)
    STAR_ASGN       reduce using rule 10 (identifierList -> IDENTIFIER .)
    XOR_ASGN        reduce using rule 10 (identifierList -> IDENTIFIER .)
    MINUS_ASGN      reduce using rule 10 (identifierList -> IDENTIFIER .)
    PLUS_ASGN       reduce using rule 10 (identifierList -> IDENTIFIER .)
    ASSIGN          reduce using rule 10 (identifierList -> IDENTIFIER .)
    LOGIC_AND       reduce using rule 30 (operandName -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 30 (operandName -> IDENTIFIER .)
    SHR             reduce using rule 30 (operandName -> IDENTIFIER .)
    SHL             reduce using rule 30 (operandName -> IDENTIFIER .)
    AND             reduce using rule 30 (operandName -> IDENTIFIER .)
    MOD             reduce using rule 30 (operandName -> IDENTIFIER .)
    DIV             reduce using rule 30 (operandName -> IDENTIFIER .)
    STAR            reduce using rule 30 (operandName -> IDENTIFIER .)
    XOR             reduce using rule 30 (operandName -> IDENTIFIER .)
    OR              reduce using rule 30 (operandName -> IDENTIFIER .)
    MINUS           reduce using rule 30 (operandName -> IDENTIFIER .)
    PLUS            reduce using rule 30 (operandName -> IDENTIFIER .)
    GE              reduce using rule 30 (operandName -> IDENTIFIER .)
    GT              reduce using rule 30 (operandName -> IDENTIFIER .)
    LE              reduce using rule 30 (operandName -> IDENTIFIER .)
    LT              reduce using rule 30 (operandName -> IDENTIFIER .)
    NE              reduce using rule 30 (operandName -> IDENTIFIER .)
    EQ              reduce using rule 30 (operandName -> IDENTIFIER .)
    NEWL            reduce using rule 30 (operandName -> IDENTIFIER .)
    ;               reduce using rule 30 (operandName -> IDENTIFIER .)
    .               shift and go to state 81


state 17

    (18) expressionStmt -> expression .
    (20) expression -> expression . BINARY_OP unaryExpr
    (84) BINARY_OP -> . MUL_OP
    (85) BINARY_OP -> . ADD_OP
    (86) BINARY_OP -> . REL_OP
    (87) BINARY_OP -> . LOGIC_AND
    (88) BINARY_OP -> . LOGIC_OR
    (99) MUL_OP -> . SHR
    (100) MUL_OP -> . SHL
    (101) MUL_OP -> . AND
    (102) MUL_OP -> . MOD
    (103) MUL_OP -> . DIV
    (104) MUL_OP -> . STAR
    (95) ADD_OP -> . XOR
    (96) ADD_OP -> . OR
    (97) ADD_OP -> . MINUS
    (98) ADD_OP -> . PLUS
    (89) REL_OP -> . GE
    (90) REL_OP -> . GT
    (91) REL_OP -> . LE
    (92) REL_OP -> . LT
    (93) REL_OP -> . NE
    (94) REL_OP -> . EQ
    NEWL            reduce using rule 18 (expressionStmt -> expression .)
    ;               reduce using rule 18 (expressionStmt -> expression .)
    LOGIC_AND       shift and go to state 86
    LOGIC_OR        shift and go to state 87
    SHR             shift and go to state 88
    SHL             shift and go to state 89
    AND             shift and go to state 90
    MOD             shift and go to state 91
    DIV             shift and go to state 92
    STAR            shift and go to state 93
    XOR             shift and go to state 94
    OR              shift and go to state 95
    MINUS           shift and go to state 96
    PLUS            shift and go to state 97
    GE              shift and go to state 98
    GT              shift and go to state 99
    LE              shift and go to state 100
    LT              shift and go to state 101
    NE              shift and go to state 102
    EQ              shift and go to state 103

    BINARY_OP                      shift and go to state 82
    MUL_OP                         shift and go to state 83
    ADD_OP                         shift and go to state 84
    REL_OP                         shift and go to state 85

state 18

    (21) expression -> unaryExpr .
    LOGIC_AND       reduce using rule 21 (expression -> unaryExpr .)
    LOGIC_OR        reduce using rule 21 (expression -> unaryExpr .)
    SHR             reduce using rule 21 (expression -> unaryExpr .)
    SHL             reduce using rule 21 (expression -> unaryExpr .)
    AND             reduce using rule 21 (expression -> unaryExpr .)
    MOD             reduce using rule 21 (expression -> unaryExpr .)
    DIV             reduce using rule 21 (expression -> unaryExpr .)
    STAR            reduce using rule 21 (expression -> unaryExpr .)
    XOR             reduce using rule 21 (expression -> unaryExpr .)
    OR              reduce using rule 21 (expression -> unaryExpr .)
    MINUS           reduce using rule 21 (expression -> unaryExpr .)
    PLUS            reduce using rule 21 (expression -> unaryExpr .)
    GE              reduce using rule 21 (expression -> unaryExpr .)
    GT              reduce using rule 21 (expression -> unaryExpr .)
    LE              reduce using rule 21 (expression -> unaryExpr .)
    LT              reduce using rule 21 (expression -> unaryExpr .)
    NE              reduce using rule 21 (expression -> unaryExpr .)
    EQ              reduce using rule 21 (expression -> unaryExpr .)
    NEWL            reduce using rule 21 (expression -> unaryExpr .)
    ;               reduce using rule 21 (expression -> unaryExpr .)
    )               reduce using rule 21 (expression -> unaryExpr .)
    ,               reduce using rule 21 (expression -> unaryExpr .)


state 19

    (22) unaryExpr -> UNARY_OP . unaryExpr
    (22) unaryExpr -> . UNARY_OP unaryExpr
    (23) unaryExpr -> . primaryExpr
    (105) UNARY_OP -> . AND
    (106) UNARY_OP -> . EXCLM
    (107) UNARY_OP -> . MINUS
    (24) primaryExpr -> . conversion
    (25) primaryExpr -> . operand
    (32) conversion -> . type_ ( expression )
    (26) operand -> . ( expression )
    (27) operand -> . operandName
    (28) operand -> . literal
    (33) type_ -> . qualifiedIdent
    (34) type_ -> . typeName
    (29) operandName -> . qualifiedIdent
    (30) operandName -> . IDENTIFIER
    (31) literal -> . basicLit
    (35) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (36) typeName -> . numericType
    (37) typeName -> . STRING
    (38) typeName -> . BOOL
    (39) typeName -> . RUNE
    (54) basicLit -> . INT_LIT
    (55) basicLit -> . FLOAT_LIT
    (56) basicLit -> . DECIMAL_LIT EXPONENT
    (57) basicLit -> . FLOAT_LIT EXPONENT
    (58) basicLit -> . FALSE
    (59) basicLit -> . TRUE
    (60) basicLit -> . RUNE_LIT
    (61) basicLit -> . STRING_LIT
    (40) numericType -> . F32
    (41) numericType -> . F64
    (42) numericType -> . INT
    (43) numericType -> . ISIZE
    (44) numericType -> . I64
    (45) numericType -> . I32
    (46) numericType -> . I16
    (47) numericType -> . I8
    (48) numericType -> . UINT
    (49) numericType -> . USIZE
    (50) numericType -> . U64
    (51) numericType -> . U32
    (52) numericType -> . U16
    (53) numericType -> . U8
    (65) INT_LIT -> . HEX_LIT
    (66) INT_LIT -> . OCTAL_LIT
    (67) INT_LIT -> . BINARY_LIT
    (68) INT_LIT -> . DECIMAL_LIT
    (62) FLOAT_LIT -> . . DECIMAL_LIT
    (63) FLOAT_LIT -> . DECIMAL_LIT .
    (64) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    IDENTIFIER      shift and go to state 105
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    UNARY_OP                       shift and go to state 19
    unaryExpr                      shift and go to state 104
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 20

    (23) unaryExpr -> primaryExpr .
    LOGIC_AND       reduce using rule 23 (unaryExpr -> primaryExpr .)
    LOGIC_OR        reduce using rule 23 (unaryExpr -> primaryExpr .)
    SHR             reduce using rule 23 (unaryExpr -> primaryExpr .)
    SHL             reduce using rule 23 (unaryExpr -> primaryExpr .)
    AND             reduce using rule 23 (unaryExpr -> primaryExpr .)
    MOD             reduce using rule 23 (unaryExpr -> primaryExpr .)
    DIV             reduce using rule 23 (unaryExpr -> primaryExpr .)
    STAR            reduce using rule 23 (unaryExpr -> primaryExpr .)
    XOR             reduce using rule 23 (unaryExpr -> primaryExpr .)
    OR              reduce using rule 23 (unaryExpr -> primaryExpr .)
    MINUS           reduce using rule 23 (unaryExpr -> primaryExpr .)
    PLUS            reduce using rule 23 (unaryExpr -> primaryExpr .)
    GE              reduce using rule 23 (unaryExpr -> primaryExpr .)
    GT              reduce using rule 23 (unaryExpr -> primaryExpr .)
    LE              reduce using rule 23 (unaryExpr -> primaryExpr .)
    LT              reduce using rule 23 (unaryExpr -> primaryExpr .)
    NE              reduce using rule 23 (unaryExpr -> primaryExpr .)
    EQ              reduce using rule 23 (unaryExpr -> primaryExpr .)
    NEWL            reduce using rule 23 (unaryExpr -> primaryExpr .)
    ;               reduce using rule 23 (unaryExpr -> primaryExpr .)
    )               reduce using rule 23 (unaryExpr -> primaryExpr .)
    ,               reduce using rule 23 (unaryExpr -> primaryExpr .)


state 21

    (105) UNARY_OP -> AND .
    AND             reduce using rule 105 (UNARY_OP -> AND .)
    EXCLM           reduce using rule 105 (UNARY_OP -> AND .)
    MINUS           reduce using rule 105 (UNARY_OP -> AND .)
    (               reduce using rule 105 (UNARY_OP -> AND .)
    IDENTIFIER      reduce using rule 105 (UNARY_OP -> AND .)
    STRING          reduce using rule 105 (UNARY_OP -> AND .)
    BOOL            reduce using rule 105 (UNARY_OP -> AND .)
    RUNE            reduce using rule 105 (UNARY_OP -> AND .)
    DECIMAL_LIT     reduce using rule 105 (UNARY_OP -> AND .)
    FALSE           reduce using rule 105 (UNARY_OP -> AND .)
    TRUE            reduce using rule 105 (UNARY_OP -> AND .)
    RUNE_LIT        reduce using rule 105 (UNARY_OP -> AND .)
    STRING_LIT      reduce using rule 105 (UNARY_OP -> AND .)
    F32             reduce using rule 105 (UNARY_OP -> AND .)
    F64             reduce using rule 105 (UNARY_OP -> AND .)
    INT             reduce using rule 105 (UNARY_OP -> AND .)
    ISIZE           reduce using rule 105 (UNARY_OP -> AND .)
    I64             reduce using rule 105 (UNARY_OP -> AND .)
    I32             reduce using rule 105 (UNARY_OP -> AND .)
    I16             reduce using rule 105 (UNARY_OP -> AND .)
    I8              reduce using rule 105 (UNARY_OP -> AND .)
    UINT            reduce using rule 105 (UNARY_OP -> AND .)
    USIZE           reduce using rule 105 (UNARY_OP -> AND .)
    U64             reduce using rule 105 (UNARY_OP -> AND .)
    U32             reduce using rule 105 (UNARY_OP -> AND .)
    U16             reduce using rule 105 (UNARY_OP -> AND .)
    U8              reduce using rule 105 (UNARY_OP -> AND .)
    HEX_LIT         reduce using rule 105 (UNARY_OP -> AND .)
    OCTAL_LIT       reduce using rule 105 (UNARY_OP -> AND .)
    BINARY_LIT      reduce using rule 105 (UNARY_OP -> AND .)
    .               reduce using rule 105 (UNARY_OP -> AND .)


state 22

    (106) UNARY_OP -> EXCLM .
    AND             reduce using rule 106 (UNARY_OP -> EXCLM .)
    EXCLM           reduce using rule 106 (UNARY_OP -> EXCLM .)
    MINUS           reduce using rule 106 (UNARY_OP -> EXCLM .)
    (               reduce using rule 106 (UNARY_OP -> EXCLM .)
    IDENTIFIER      reduce using rule 106 (UNARY_OP -> EXCLM .)
    STRING          reduce using rule 106 (UNARY_OP -> EXCLM .)
    BOOL            reduce using rule 106 (UNARY_OP -> EXCLM .)
    RUNE            reduce using rule 106 (UNARY_OP -> EXCLM .)
    DECIMAL_LIT     reduce using rule 106 (UNARY_OP -> EXCLM .)
    FALSE           reduce using rule 106 (UNARY_OP -> EXCLM .)
    TRUE            reduce using rule 106 (UNARY_OP -> EXCLM .)
    RUNE_LIT        reduce using rule 106 (UNARY_OP -> EXCLM .)
    STRING_LIT      reduce using rule 106 (UNARY_OP -> EXCLM .)
    F32             reduce using rule 106 (UNARY_OP -> EXCLM .)
    F64             reduce using rule 106 (UNARY_OP -> EXCLM .)
    INT             reduce using rule 106 (UNARY_OP -> EXCLM .)
    ISIZE           reduce using rule 106 (UNARY_OP -> EXCLM .)
    I64             reduce using rule 106 (UNARY_OP -> EXCLM .)
    I32             reduce using rule 106 (UNARY_OP -> EXCLM .)
    I16             reduce using rule 106 (UNARY_OP -> EXCLM .)
    I8              reduce using rule 106 (UNARY_OP -> EXCLM .)
    UINT            reduce using rule 106 (UNARY_OP -> EXCLM .)
    USIZE           reduce using rule 106 (UNARY_OP -> EXCLM .)
    U64             reduce using rule 106 (UNARY_OP -> EXCLM .)
    U32             reduce using rule 106 (UNARY_OP -> EXCLM .)
    U16             reduce using rule 106 (UNARY_OP -> EXCLM .)
    U8              reduce using rule 106 (UNARY_OP -> EXCLM .)
    HEX_LIT         reduce using rule 106 (UNARY_OP -> EXCLM .)
    OCTAL_LIT       reduce using rule 106 (UNARY_OP -> EXCLM .)
    BINARY_LIT      reduce using rule 106 (UNARY_OP -> EXCLM .)
    .               reduce using rule 106 (UNARY_OP -> EXCLM .)


state 23

    (107) UNARY_OP -> MINUS .
    AND             reduce using rule 107 (UNARY_OP -> MINUS .)
    EXCLM           reduce using rule 107 (UNARY_OP -> MINUS .)
    MINUS           reduce using rule 107 (UNARY_OP -> MINUS .)
    (               reduce using rule 107 (UNARY_OP -> MINUS .)
    IDENTIFIER      reduce using rule 107 (UNARY_OP -> MINUS .)
    STRING          reduce using rule 107 (UNARY_OP -> MINUS .)
    BOOL            reduce using rule 107 (UNARY_OP -> MINUS .)
    RUNE            reduce using rule 107 (UNARY_OP -> MINUS .)
    DECIMAL_LIT     reduce using rule 107 (UNARY_OP -> MINUS .)
    FALSE           reduce using rule 107 (UNARY_OP -> MINUS .)
    TRUE            reduce using rule 107 (UNARY_OP -> MINUS .)
    RUNE_LIT        reduce using rule 107 (UNARY_OP -> MINUS .)
    STRING_LIT      reduce using rule 107 (UNARY_OP -> MINUS .)
    F32             reduce using rule 107 (UNARY_OP -> MINUS .)
    F64             reduce using rule 107 (UNARY_OP -> MINUS .)
    INT             reduce using rule 107 (UNARY_OP -> MINUS .)
    ISIZE           reduce using rule 107 (UNARY_OP -> MINUS .)
    I64             reduce using rule 107 (UNARY_OP -> MINUS .)
    I32             reduce using rule 107 (UNARY_OP -> MINUS .)
    I16             reduce using rule 107 (UNARY_OP -> MINUS .)
    I8              reduce using rule 107 (UNARY_OP -> MINUS .)
    UINT            reduce using rule 107 (UNARY_OP -> MINUS .)
    USIZE           reduce using rule 107 (UNARY_OP -> MINUS .)
    U64             reduce using rule 107 (UNARY_OP -> MINUS .)
    U32             reduce using rule 107 (UNARY_OP -> MINUS .)
    U16             reduce using rule 107 (UNARY_OP -> MINUS .)
    U8              reduce using rule 107 (UNARY_OP -> MINUS .)
    HEX_LIT         reduce using rule 107 (UNARY_OP -> MINUS .)
    OCTAL_LIT       reduce using rule 107 (UNARY_OP -> MINUS .)
    BINARY_LIT      reduce using rule 107 (UNARY_OP -> MINUS .)
    .               reduce using rule 107 (UNARY_OP -> MINUS .)


state 24

    (24) primaryExpr -> conversion .
    LOGIC_AND       reduce using rule 24 (primaryExpr -> conversion .)
    LOGIC_OR        reduce using rule 24 (primaryExpr -> conversion .)
    SHR             reduce using rule 24 (primaryExpr -> conversion .)
    SHL             reduce using rule 24 (primaryExpr -> conversion .)
    AND             reduce using rule 24 (primaryExpr -> conversion .)
    MOD             reduce using rule 24 (primaryExpr -> conversion .)
    DIV             reduce using rule 24 (primaryExpr -> conversion .)
    STAR            reduce using rule 24 (primaryExpr -> conversion .)
    XOR             reduce using rule 24 (primaryExpr -> conversion .)
    OR              reduce using rule 24 (primaryExpr -> conversion .)
    MINUS           reduce using rule 24 (primaryExpr -> conversion .)
    PLUS            reduce using rule 24 (primaryExpr -> conversion .)
    GE              reduce using rule 24 (primaryExpr -> conversion .)
    GT              reduce using rule 24 (primaryExpr -> conversion .)
    LE              reduce using rule 24 (primaryExpr -> conversion .)
    LT              reduce using rule 24 (primaryExpr -> conversion .)
    NE              reduce using rule 24 (primaryExpr -> conversion .)
    EQ              reduce using rule 24 (primaryExpr -> conversion .)
    NEWL            reduce using rule 24 (primaryExpr -> conversion .)
    ;               reduce using rule 24 (primaryExpr -> conversion .)
    )               reduce using rule 24 (primaryExpr -> conversion .)
    ,               reduce using rule 24 (primaryExpr -> conversion .)


state 25

    (25) primaryExpr -> operand .
    LOGIC_AND       reduce using rule 25 (primaryExpr -> operand .)
    LOGIC_OR        reduce using rule 25 (primaryExpr -> operand .)
    SHR             reduce using rule 25 (primaryExpr -> operand .)
    SHL             reduce using rule 25 (primaryExpr -> operand .)
    AND             reduce using rule 25 (primaryExpr -> operand .)
    MOD             reduce using rule 25 (primaryExpr -> operand .)
    DIV             reduce using rule 25 (primaryExpr -> operand .)
    STAR            reduce using rule 25 (primaryExpr -> operand .)
    XOR             reduce using rule 25 (primaryExpr -> operand .)
    OR              reduce using rule 25 (primaryExpr -> operand .)
    MINUS           reduce using rule 25 (primaryExpr -> operand .)
    PLUS            reduce using rule 25 (primaryExpr -> operand .)
    GE              reduce using rule 25 (primaryExpr -> operand .)
    GT              reduce using rule 25 (primaryExpr -> operand .)
    LE              reduce using rule 25 (primaryExpr -> operand .)
    LT              reduce using rule 25 (primaryExpr -> operand .)
    NE              reduce using rule 25 (primaryExpr -> operand .)
    EQ              reduce using rule 25 (primaryExpr -> operand .)
    NEWL            reduce using rule 25 (primaryExpr -> operand .)
    ;               reduce using rule 25 (primaryExpr -> operand .)
    )               reduce using rule 25 (primaryExpr -> operand .)
    ,               reduce using rule 25 (primaryExpr -> operand .)


state 26

    (32) conversion -> type_ . ( expression )
    (               shift and go to state 106


state 27

    (26) operand -> ( . expression )
    (20) expression -> . expression BINARY_OP unaryExpr
    (21) expression -> . unaryExpr
    (22) unaryExpr -> . UNARY_OP unaryExpr
    (23) unaryExpr -> . primaryExpr
    (105) UNARY_OP -> . AND
    (106) UNARY_OP -> . EXCLM
    (107) UNARY_OP -> . MINUS
    (24) primaryExpr -> . conversion
    (25) primaryExpr -> . operand
    (32) conversion -> . type_ ( expression )
    (26) operand -> . ( expression )
    (27) operand -> . operandName
    (28) operand -> . literal
    (33) type_ -> . qualifiedIdent
    (34) type_ -> . typeName
    (29) operandName -> . qualifiedIdent
    (30) operandName -> . IDENTIFIER
    (31) literal -> . basicLit
    (35) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (36) typeName -> . numericType
    (37) typeName -> . STRING
    (38) typeName -> . BOOL
    (39) typeName -> . RUNE
    (54) basicLit -> . INT_LIT
    (55) basicLit -> . FLOAT_LIT
    (56) basicLit -> . DECIMAL_LIT EXPONENT
    (57) basicLit -> . FLOAT_LIT EXPONENT
    (58) basicLit -> . FALSE
    (59) basicLit -> . TRUE
    (60) basicLit -> . RUNE_LIT
    (61) basicLit -> . STRING_LIT
    (40) numericType -> . F32
    (41) numericType -> . F64
    (42) numericType -> . INT
    (43) numericType -> . ISIZE
    (44) numericType -> . I64
    (45) numericType -> . I32
    (46) numericType -> . I16
    (47) numericType -> . I8
    (48) numericType -> . UINT
    (49) numericType -> . USIZE
    (50) numericType -> . U64
    (51) numericType -> . U32
    (52) numericType -> . U16
    (53) numericType -> . U8
    (65) INT_LIT -> . HEX_LIT
    (66) INT_LIT -> . OCTAL_LIT
    (67) INT_LIT -> . BINARY_LIT
    (68) INT_LIT -> . DECIMAL_LIT
    (62) FLOAT_LIT -> . . DECIMAL_LIT
    (63) FLOAT_LIT -> . DECIMAL_LIT .
    (64) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    IDENTIFIER      shift and go to state 105
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    expression                     shift and go to state 107
    unaryExpr                      shift and go to state 18
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 28

    (27) operand -> operandName .
    LOGIC_AND       reduce using rule 27 (operand -> operandName .)
    LOGIC_OR        reduce using rule 27 (operand -> operandName .)
    SHR             reduce using rule 27 (operand -> operandName .)
    SHL             reduce using rule 27 (operand -> operandName .)
    AND             reduce using rule 27 (operand -> operandName .)
    MOD             reduce using rule 27 (operand -> operandName .)
    DIV             reduce using rule 27 (operand -> operandName .)
    STAR            reduce using rule 27 (operand -> operandName .)
    XOR             reduce using rule 27 (operand -> operandName .)
    OR              reduce using rule 27 (operand -> operandName .)
    MINUS           reduce using rule 27 (operand -> operandName .)
    PLUS            reduce using rule 27 (operand -> operandName .)
    GE              reduce using rule 27 (operand -> operandName .)
    GT              reduce using rule 27 (operand -> operandName .)
    LE              reduce using rule 27 (operand -> operandName .)
    LT              reduce using rule 27 (operand -> operandName .)
    NE              reduce using rule 27 (operand -> operandName .)
    EQ              reduce using rule 27 (operand -> operandName .)
    NEWL            reduce using rule 27 (operand -> operandName .)
    ;               reduce using rule 27 (operand -> operandName .)
    )               reduce using rule 27 (operand -> operandName .)
    ,               reduce using rule 27 (operand -> operandName .)


state 29

    (28) operand -> literal .
    LOGIC_AND       reduce using rule 28 (operand -> literal .)
    LOGIC_OR        reduce using rule 28 (operand -> literal .)
    SHR             reduce using rule 28 (operand -> literal .)
    SHL             reduce using rule 28 (operand -> literal .)
    AND             reduce using rule 28 (operand -> literal .)
    MOD             reduce using rule 28 (operand -> literal .)
    DIV             reduce using rule 28 (operand -> literal .)
    STAR            reduce using rule 28 (operand -> literal .)
    XOR             reduce using rule 28 (operand -> literal .)
    OR              reduce using rule 28 (operand -> literal .)
    MINUS           reduce using rule 28 (operand -> literal .)
    PLUS            reduce using rule 28 (operand -> literal .)
    GE              reduce using rule 28 (operand -> literal .)
    GT              reduce using rule 28 (operand -> literal .)
    LE              reduce using rule 28 (operand -> literal .)
    LT              reduce using rule 28 (operand -> literal .)
    NE              reduce using rule 28 (operand -> literal .)
    EQ              reduce using rule 28 (operand -> literal .)
    NEWL            reduce using rule 28 (operand -> literal .)
    ;               reduce using rule 28 (operand -> literal .)
    )               reduce using rule 28 (operand -> literal .)
    ,               reduce using rule 28 (operand -> literal .)


state 30

    (33) type_ -> qualifiedIdent .
    (29) operandName -> qualifiedIdent .
    (               reduce using rule 33 (type_ -> qualifiedIdent .)
    LOGIC_AND       reduce using rule 29 (operandName -> qualifiedIdent .)
    LOGIC_OR        reduce using rule 29 (operandName -> qualifiedIdent .)
    SHR             reduce using rule 29 (operandName -> qualifiedIdent .)
    SHL             reduce using rule 29 (operandName -> qualifiedIdent .)
    AND             reduce using rule 29 (operandName -> qualifiedIdent .)
    MOD             reduce using rule 29 (operandName -> qualifiedIdent .)
    DIV             reduce using rule 29 (operandName -> qualifiedIdent .)
    STAR            reduce using rule 29 (operandName -> qualifiedIdent .)
    XOR             reduce using rule 29 (operandName -> qualifiedIdent .)
    OR              reduce using rule 29 (operandName -> qualifiedIdent .)
    MINUS           reduce using rule 29 (operandName -> qualifiedIdent .)
    PLUS            reduce using rule 29 (operandName -> qualifiedIdent .)
    GE              reduce using rule 29 (operandName -> qualifiedIdent .)
    GT              reduce using rule 29 (operandName -> qualifiedIdent .)
    LE              reduce using rule 29 (operandName -> qualifiedIdent .)
    LT              reduce using rule 29 (operandName -> qualifiedIdent .)
    NE              reduce using rule 29 (operandName -> qualifiedIdent .)
    EQ              reduce using rule 29 (operandName -> qualifiedIdent .)
    NEWL            reduce using rule 29 (operandName -> qualifiedIdent .)
    ;               reduce using rule 29 (operandName -> qualifiedIdent .)
    )               reduce using rule 29 (operandName -> qualifiedIdent .)
    ,               reduce using rule 29 (operandName -> qualifiedIdent .)


state 31

    (34) type_ -> typeName .
    (               reduce using rule 34 (type_ -> typeName .)


state 32

    (31) literal -> basicLit .
    LOGIC_AND       reduce using rule 31 (literal -> basicLit .)
    LOGIC_OR        reduce using rule 31 (literal -> basicLit .)
    SHR             reduce using rule 31 (literal -> basicLit .)
    SHL             reduce using rule 31 (literal -> basicLit .)
    AND             reduce using rule 31 (literal -> basicLit .)
    MOD             reduce using rule 31 (literal -> basicLit .)
    DIV             reduce using rule 31 (literal -> basicLit .)
    STAR            reduce using rule 31 (literal -> basicLit .)
    XOR             reduce using rule 31 (literal -> basicLit .)
    OR              reduce using rule 31 (literal -> basicLit .)
    MINUS           reduce using rule 31 (literal -> basicLit .)
    PLUS            reduce using rule 31 (literal -> basicLit .)
    GE              reduce using rule 31 (literal -> basicLit .)
    GT              reduce using rule 31 (literal -> basicLit .)
    LE              reduce using rule 31 (literal -> basicLit .)
    LT              reduce using rule 31 (literal -> basicLit .)
    NE              reduce using rule 31 (literal -> basicLit .)
    EQ              reduce using rule 31 (literal -> basicLit .)
    NEWL            reduce using rule 31 (literal -> basicLit .)
    ;               reduce using rule 31 (literal -> basicLit .)
    )               reduce using rule 31 (literal -> basicLit .)
    ,               reduce using rule 31 (literal -> basicLit .)


state 33

    (62) FLOAT_LIT -> . . DECIMAL_LIT
    DECIMAL_LIT     shift and go to state 108


state 34

    (36) typeName -> numericType .
    (               reduce using rule 36 (typeName -> numericType .)


state 35

    (37) typeName -> STRING .
    (               reduce using rule 37 (typeName -> STRING .)


state 36

    (38) typeName -> BOOL .
    (               reduce using rule 38 (typeName -> BOOL .)


state 37

    (39) typeName -> RUNE .
    (               reduce using rule 39 (typeName -> RUNE .)


state 38

    (54) basicLit -> INT_LIT .
    LOGIC_AND       reduce using rule 54 (basicLit -> INT_LIT .)
    LOGIC_OR        reduce using rule 54 (basicLit -> INT_LIT .)
    SHR             reduce using rule 54 (basicLit -> INT_LIT .)
    SHL             reduce using rule 54 (basicLit -> INT_LIT .)
    AND             reduce using rule 54 (basicLit -> INT_LIT .)
    MOD             reduce using rule 54 (basicLit -> INT_LIT .)
    DIV             reduce using rule 54 (basicLit -> INT_LIT .)
    STAR            reduce using rule 54 (basicLit -> INT_LIT .)
    XOR             reduce using rule 54 (basicLit -> INT_LIT .)
    OR              reduce using rule 54 (basicLit -> INT_LIT .)
    MINUS           reduce using rule 54 (basicLit -> INT_LIT .)
    PLUS            reduce using rule 54 (basicLit -> INT_LIT .)
    GE              reduce using rule 54 (basicLit -> INT_LIT .)
    GT              reduce using rule 54 (basicLit -> INT_LIT .)
    LE              reduce using rule 54 (basicLit -> INT_LIT .)
    LT              reduce using rule 54 (basicLit -> INT_LIT .)
    NE              reduce using rule 54 (basicLit -> INT_LIT .)
    EQ              reduce using rule 54 (basicLit -> INT_LIT .)
    NEWL            reduce using rule 54 (basicLit -> INT_LIT .)
    ;               reduce using rule 54 (basicLit -> INT_LIT .)
    )               reduce using rule 54 (basicLit -> INT_LIT .)
    ,               reduce using rule 54 (basicLit -> INT_LIT .)


state 39

    (55) basicLit -> FLOAT_LIT .
    (57) basicLit -> FLOAT_LIT . EXPONENT
    LOGIC_AND       reduce using rule 55 (basicLit -> FLOAT_LIT .)
    LOGIC_OR        reduce using rule 55 (basicLit -> FLOAT_LIT .)
    SHR             reduce using rule 55 (basicLit -> FLOAT_LIT .)
    SHL             reduce using rule 55 (basicLit -> FLOAT_LIT .)
    AND             reduce using rule 55 (basicLit -> FLOAT_LIT .)
    MOD             reduce using rule 55 (basicLit -> FLOAT_LIT .)
    DIV             reduce using rule 55 (basicLit -> FLOAT_LIT .)
    STAR            reduce using rule 55 (basicLit -> FLOAT_LIT .)
    XOR             reduce using rule 55 (basicLit -> FLOAT_LIT .)
    OR              reduce using rule 55 (basicLit -> FLOAT_LIT .)
    MINUS           reduce using rule 55 (basicLit -> FLOAT_LIT .)
    PLUS            reduce using rule 55 (basicLit -> FLOAT_LIT .)
    GE              reduce using rule 55 (basicLit -> FLOAT_LIT .)
    GT              reduce using rule 55 (basicLit -> FLOAT_LIT .)
    LE              reduce using rule 55 (basicLit -> FLOAT_LIT .)
    LT              reduce using rule 55 (basicLit -> FLOAT_LIT .)
    NE              reduce using rule 55 (basicLit -> FLOAT_LIT .)
    EQ              reduce using rule 55 (basicLit -> FLOAT_LIT .)
    NEWL            reduce using rule 55 (basicLit -> FLOAT_LIT .)
    ;               reduce using rule 55 (basicLit -> FLOAT_LIT .)
    )               reduce using rule 55 (basicLit -> FLOAT_LIT .)
    ,               reduce using rule 55 (basicLit -> FLOAT_LIT .)
    EXPONENT        shift and go to state 109


state 40

    (56) basicLit -> DECIMAL_LIT . EXPONENT
    (68) INT_LIT -> DECIMAL_LIT .
    (63) FLOAT_LIT -> DECIMAL_LIT . .
    (64) FLOAT_LIT -> DECIMAL_LIT . . DECIMAL_LIT
    EXPONENT        shift and go to state 110
    LOGIC_AND       reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    SHR             reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    SHL             reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    AND             reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    MOD             reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    DIV             reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    STAR            reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    XOR             reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    OR              reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    MINUS           reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    PLUS            reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    GE              reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    GT              reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    LE              reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    LT              reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    NE              reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    EQ              reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    NEWL            reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    ;               reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    )               reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    ,               reduce using rule 68 (INT_LIT -> DECIMAL_LIT .)
    .               shift and go to state 111


state 41

    (58) basicLit -> FALSE .
    LOGIC_AND       reduce using rule 58 (basicLit -> FALSE .)
    LOGIC_OR        reduce using rule 58 (basicLit -> FALSE .)
    SHR             reduce using rule 58 (basicLit -> FALSE .)
    SHL             reduce using rule 58 (basicLit -> FALSE .)
    AND             reduce using rule 58 (basicLit -> FALSE .)
    MOD             reduce using rule 58 (basicLit -> FALSE .)
    DIV             reduce using rule 58 (basicLit -> FALSE .)
    STAR            reduce using rule 58 (basicLit -> FALSE .)
    XOR             reduce using rule 58 (basicLit -> FALSE .)
    OR              reduce using rule 58 (basicLit -> FALSE .)
    MINUS           reduce using rule 58 (basicLit -> FALSE .)
    PLUS            reduce using rule 58 (basicLit -> FALSE .)
    GE              reduce using rule 58 (basicLit -> FALSE .)
    GT              reduce using rule 58 (basicLit -> FALSE .)
    LE              reduce using rule 58 (basicLit -> FALSE .)
    LT              reduce using rule 58 (basicLit -> FALSE .)
    NE              reduce using rule 58 (basicLit -> FALSE .)
    EQ              reduce using rule 58 (basicLit -> FALSE .)
    NEWL            reduce using rule 58 (basicLit -> FALSE .)
    ;               reduce using rule 58 (basicLit -> FALSE .)
    )               reduce using rule 58 (basicLit -> FALSE .)
    ,               reduce using rule 58 (basicLit -> FALSE .)


state 42

    (59) basicLit -> TRUE .
    LOGIC_AND       reduce using rule 59 (basicLit -> TRUE .)
    LOGIC_OR        reduce using rule 59 (basicLit -> TRUE .)
    SHR             reduce using rule 59 (basicLit -> TRUE .)
    SHL             reduce using rule 59 (basicLit -> TRUE .)
    AND             reduce using rule 59 (basicLit -> TRUE .)
    MOD             reduce using rule 59 (basicLit -> TRUE .)
    DIV             reduce using rule 59 (basicLit -> TRUE .)
    STAR            reduce using rule 59 (basicLit -> TRUE .)
    XOR             reduce using rule 59 (basicLit -> TRUE .)
    OR              reduce using rule 59 (basicLit -> TRUE .)
    MINUS           reduce using rule 59 (basicLit -> TRUE .)
    PLUS            reduce using rule 59 (basicLit -> TRUE .)
    GE              reduce using rule 59 (basicLit -> TRUE .)
    GT              reduce using rule 59 (basicLit -> TRUE .)
    LE              reduce using rule 59 (basicLit -> TRUE .)
    LT              reduce using rule 59 (basicLit -> TRUE .)
    NE              reduce using rule 59 (basicLit -> TRUE .)
    EQ              reduce using rule 59 (basicLit -> TRUE .)
    NEWL            reduce using rule 59 (basicLit -> TRUE .)
    ;               reduce using rule 59 (basicLit -> TRUE .)
    )               reduce using rule 59 (basicLit -> TRUE .)
    ,               reduce using rule 59 (basicLit -> TRUE .)


state 43

    (60) basicLit -> RUNE_LIT .
    LOGIC_AND       reduce using rule 60 (basicLit -> RUNE_LIT .)
    LOGIC_OR        reduce using rule 60 (basicLit -> RUNE_LIT .)
    SHR             reduce using rule 60 (basicLit -> RUNE_LIT .)
    SHL             reduce using rule 60 (basicLit -> RUNE_LIT .)
    AND             reduce using rule 60 (basicLit -> RUNE_LIT .)
    MOD             reduce using rule 60 (basicLit -> RUNE_LIT .)
    DIV             reduce using rule 60 (basicLit -> RUNE_LIT .)
    STAR            reduce using rule 60 (basicLit -> RUNE_LIT .)
    XOR             reduce using rule 60 (basicLit -> RUNE_LIT .)
    OR              reduce using rule 60 (basicLit -> RUNE_LIT .)
    MINUS           reduce using rule 60 (basicLit -> RUNE_LIT .)
    PLUS            reduce using rule 60 (basicLit -> RUNE_LIT .)
    GE              reduce using rule 60 (basicLit -> RUNE_LIT .)
    GT              reduce using rule 60 (basicLit -> RUNE_LIT .)
    LE              reduce using rule 60 (basicLit -> RUNE_LIT .)
    LT              reduce using rule 60 (basicLit -> RUNE_LIT .)
    NE              reduce using rule 60 (basicLit -> RUNE_LIT .)
    EQ              reduce using rule 60 (basicLit -> RUNE_LIT .)
    NEWL            reduce using rule 60 (basicLit -> RUNE_LIT .)
    ;               reduce using rule 60 (basicLit -> RUNE_LIT .)
    )               reduce using rule 60 (basicLit -> RUNE_LIT .)
    ,               reduce using rule 60 (basicLit -> RUNE_LIT .)


state 44

    (61) basicLit -> STRING_LIT .
    LOGIC_AND       reduce using rule 61 (basicLit -> STRING_LIT .)
    LOGIC_OR        reduce using rule 61 (basicLit -> STRING_LIT .)
    SHR             reduce using rule 61 (basicLit -> STRING_LIT .)
    SHL             reduce using rule 61 (basicLit -> STRING_LIT .)
    AND             reduce using rule 61 (basicLit -> STRING_LIT .)
    MOD             reduce using rule 61 (basicLit -> STRING_LIT .)
    DIV             reduce using rule 61 (basicLit -> STRING_LIT .)
    STAR            reduce using rule 61 (basicLit -> STRING_LIT .)
    XOR             reduce using rule 61 (basicLit -> STRING_LIT .)
    OR              reduce using rule 61 (basicLit -> STRING_LIT .)
    MINUS           reduce using rule 61 (basicLit -> STRING_LIT .)
    PLUS            reduce using rule 61 (basicLit -> STRING_LIT .)
    GE              reduce using rule 61 (basicLit -> STRING_LIT .)
    GT              reduce using rule 61 (basicLit -> STRING_LIT .)
    LE              reduce using rule 61 (basicLit -> STRING_LIT .)
    LT              reduce using rule 61 (basicLit -> STRING_LIT .)
    NE              reduce using rule 61 (basicLit -> STRING_LIT .)
    EQ              reduce using rule 61 (basicLit -> STRING_LIT .)
    NEWL            reduce using rule 61 (basicLit -> STRING_LIT .)
    ;               reduce using rule 61 (basicLit -> STRING_LIT .)
    )               reduce using rule 61 (basicLit -> STRING_LIT .)
    ,               reduce using rule 61 (basicLit -> STRING_LIT .)


state 45

    (40) numericType -> F32 .
    (               reduce using rule 40 (numericType -> F32 .)


state 46

    (41) numericType -> F64 .
    (               reduce using rule 41 (numericType -> F64 .)


state 47

    (42) numericType -> INT .
    (               reduce using rule 42 (numericType -> INT .)


state 48

    (43) numericType -> ISIZE .
    (               reduce using rule 43 (numericType -> ISIZE .)


state 49

    (44) numericType -> I64 .
    (               reduce using rule 44 (numericType -> I64 .)


state 50

    (45) numericType -> I32 .
    (               reduce using rule 45 (numericType -> I32 .)


state 51

    (46) numericType -> I16 .
    (               reduce using rule 46 (numericType -> I16 .)


state 52

    (47) numericType -> I8 .
    (               reduce using rule 47 (numericType -> I8 .)


state 53

    (48) numericType -> UINT .
    (               reduce using rule 48 (numericType -> UINT .)


state 54

    (49) numericType -> USIZE .
    (               reduce using rule 49 (numericType -> USIZE .)


state 55

    (50) numericType -> U64 .
    (               reduce using rule 50 (numericType -> U64 .)


state 56

    (51) numericType -> U32 .
    (               reduce using rule 51 (numericType -> U32 .)


state 57

    (52) numericType -> U16 .
    (               reduce using rule 52 (numericType -> U16 .)


state 58

    (53) numericType -> U8 .
    (               reduce using rule 53 (numericType -> U8 .)


state 59

    (65) INT_LIT -> HEX_LIT .
    LOGIC_AND       reduce using rule 65 (INT_LIT -> HEX_LIT .)
    LOGIC_OR        reduce using rule 65 (INT_LIT -> HEX_LIT .)
    SHR             reduce using rule 65 (INT_LIT -> HEX_LIT .)
    SHL             reduce using rule 65 (INT_LIT -> HEX_LIT .)
    AND             reduce using rule 65 (INT_LIT -> HEX_LIT .)
    MOD             reduce using rule 65 (INT_LIT -> HEX_LIT .)
    DIV             reduce using rule 65 (INT_LIT -> HEX_LIT .)
    STAR            reduce using rule 65 (INT_LIT -> HEX_LIT .)
    XOR             reduce using rule 65 (INT_LIT -> HEX_LIT .)
    OR              reduce using rule 65 (INT_LIT -> HEX_LIT .)
    MINUS           reduce using rule 65 (INT_LIT -> HEX_LIT .)
    PLUS            reduce using rule 65 (INT_LIT -> HEX_LIT .)
    GE              reduce using rule 65 (INT_LIT -> HEX_LIT .)
    GT              reduce using rule 65 (INT_LIT -> HEX_LIT .)
    LE              reduce using rule 65 (INT_LIT -> HEX_LIT .)
    LT              reduce using rule 65 (INT_LIT -> HEX_LIT .)
    NE              reduce using rule 65 (INT_LIT -> HEX_LIT .)
    EQ              reduce using rule 65 (INT_LIT -> HEX_LIT .)
    NEWL            reduce using rule 65 (INT_LIT -> HEX_LIT .)
    ;               reduce using rule 65 (INT_LIT -> HEX_LIT .)
    )               reduce using rule 65 (INT_LIT -> HEX_LIT .)
    ,               reduce using rule 65 (INT_LIT -> HEX_LIT .)


state 60

    (66) INT_LIT -> OCTAL_LIT .
    LOGIC_AND       reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    LOGIC_OR        reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    SHR             reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    SHL             reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    AND             reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    MOD             reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    DIV             reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    STAR            reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    XOR             reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    OR              reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    MINUS           reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    PLUS            reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    GE              reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    GT              reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    LE              reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    LT              reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    NE              reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    EQ              reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    NEWL            reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    ;               reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    )               reduce using rule 66 (INT_LIT -> OCTAL_LIT .)
    ,               reduce using rule 66 (INT_LIT -> OCTAL_LIT .)


state 61

    (67) INT_LIT -> BINARY_LIT .
    LOGIC_AND       reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    LOGIC_OR        reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    SHR             reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    SHL             reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    AND             reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    MOD             reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    DIV             reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    STAR            reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    XOR             reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    OR              reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    MINUS           reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    PLUS            reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    GE              reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    GT              reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    LE              reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    LT              reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    NE              reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    EQ              reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    NEWL            reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    ;               reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    )               reduce using rule 67 (INT_LIT -> BINARY_LIT .)
    ,               reduce using rule 67 (INT_LIT -> BINARY_LIT .)


state 62

    (4) topLevelDecls -> topLevelDecl eos .
    (69) eos -> eos . NEWL
    (71) eos -> eos . ;
    IDENTIFIER      reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    AND             reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    EXCLM           reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    MINUS           reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    (               reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    STRING          reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    BOOL            reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    RUNE            reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    DECIMAL_LIT     reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    FALSE           reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    TRUE            reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    RUNE_LIT        reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    STRING_LIT      reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    F32             reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    F64             reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    INT             reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    ISIZE           reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    I64             reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    I32             reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    I16             reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    I8              reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    UINT            reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    USIZE           reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    U64             reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    U32             reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    U16             reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    U8              reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    HEX_LIT         reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    OCTAL_LIT       reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    BINARY_LIT      reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    .               reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    $end            reduce using rule 4 (topLevelDecls -> topLevelDecl eos .)
    NEWL            shift and go to state 112
    ;               shift and go to state 113


state 63

    (70) eos -> NEWL .
    NEWL            reduce using rule 70 (eos -> NEWL .)
    ;               reduce using rule 70 (eos -> NEWL .)
    IDENTIFIER      reduce using rule 70 (eos -> NEWL .)
    AND             reduce using rule 70 (eos -> NEWL .)
    EXCLM           reduce using rule 70 (eos -> NEWL .)
    MINUS           reduce using rule 70 (eos -> NEWL .)
    (               reduce using rule 70 (eos -> NEWL .)
    STRING          reduce using rule 70 (eos -> NEWL .)
    BOOL            reduce using rule 70 (eos -> NEWL .)
    RUNE            reduce using rule 70 (eos -> NEWL .)
    DECIMAL_LIT     reduce using rule 70 (eos -> NEWL .)
    FALSE           reduce using rule 70 (eos -> NEWL .)
    TRUE            reduce using rule 70 (eos -> NEWL .)
    RUNE_LIT        reduce using rule 70 (eos -> NEWL .)
    STRING_LIT      reduce using rule 70 (eos -> NEWL .)
    F32             reduce using rule 70 (eos -> NEWL .)
    F64             reduce using rule 70 (eos -> NEWL .)
    INT             reduce using rule 70 (eos -> NEWL .)
    ISIZE           reduce using rule 70 (eos -> NEWL .)
    I64             reduce using rule 70 (eos -> NEWL .)
    I32             reduce using rule 70 (eos -> NEWL .)
    I16             reduce using rule 70 (eos -> NEWL .)
    I8              reduce using rule 70 (eos -> NEWL .)
    UINT            reduce using rule 70 (eos -> NEWL .)
    USIZE           reduce using rule 70 (eos -> NEWL .)
    U64             reduce using rule 70 (eos -> NEWL .)
    U32             reduce using rule 70 (eos -> NEWL .)
    U16             reduce using rule 70 (eos -> NEWL .)
    U8              reduce using rule 70 (eos -> NEWL .)
    HEX_LIT         reduce using rule 70 (eos -> NEWL .)
    OCTAL_LIT       reduce using rule 70 (eos -> NEWL .)
    BINARY_LIT      reduce using rule 70 (eos -> NEWL .)
    .               reduce using rule 70 (eos -> NEWL .)
    $end            reduce using rule 70 (eos -> NEWL .)


state 64

    (72) eos -> ; .
    NEWL            reduce using rule 72 (eos -> ; .)
    ;               reduce using rule 72 (eos -> ; .)
    IDENTIFIER      reduce using rule 72 (eos -> ; .)
    AND             reduce using rule 72 (eos -> ; .)
    EXCLM           reduce using rule 72 (eos -> ; .)
    MINUS           reduce using rule 72 (eos -> ; .)
    (               reduce using rule 72 (eos -> ; .)
    STRING          reduce using rule 72 (eos -> ; .)
    BOOL            reduce using rule 72 (eos -> ; .)
    RUNE            reduce using rule 72 (eos -> ; .)
    DECIMAL_LIT     reduce using rule 72 (eos -> ; .)
    FALSE           reduce using rule 72 (eos -> ; .)
    TRUE            reduce using rule 72 (eos -> ; .)
    RUNE_LIT        reduce using rule 72 (eos -> ; .)
    STRING_LIT      reduce using rule 72 (eos -> ; .)
    F32             reduce using rule 72 (eos -> ; .)
    F64             reduce using rule 72 (eos -> ; .)
    INT             reduce using rule 72 (eos -> ; .)
    ISIZE           reduce using rule 72 (eos -> ; .)
    I64             reduce using rule 72 (eos -> ; .)
    I32             reduce using rule 72 (eos -> ; .)
    I16             reduce using rule 72 (eos -> ; .)
    I8              reduce using rule 72 (eos -> ; .)
    UINT            reduce using rule 72 (eos -> ; .)
    USIZE           reduce using rule 72 (eos -> ; .)
    U64             reduce using rule 72 (eos -> ; .)
    U32             reduce using rule 72 (eos -> ; .)
    U16             reduce using rule 72 (eos -> ; .)
    U8              reduce using rule 72 (eos -> ; .)
    HEX_LIT         reduce using rule 72 (eos -> ; .)
    OCTAL_LIT       reduce using rule 72 (eos -> ; .)
    BINARY_LIT      reduce using rule 72 (eos -> ; .)
    .               reduce using rule 72 (eos -> ; .)
    $end            reduce using rule 72 (eos -> ; .)


state 65

    (8) varDecl -> identifierList DECL_ASGN . expressionList
    (11) expressionList -> . expressionList , expression
    (12) expressionList -> . expression
    (20) expression -> . expression BINARY_OP unaryExpr
    (21) expression -> . unaryExpr
    (22) unaryExpr -> . UNARY_OP unaryExpr
    (23) unaryExpr -> . primaryExpr
    (105) UNARY_OP -> . AND
    (106) UNARY_OP -> . EXCLM
    (107) UNARY_OP -> . MINUS
    (24) primaryExpr -> . conversion
    (25) primaryExpr -> . operand
    (32) conversion -> . type_ ( expression )
    (26) operand -> . ( expression )
    (27) operand -> . operandName
    (28) operand -> . literal
    (33) type_ -> . qualifiedIdent
    (34) type_ -> . typeName
    (29) operandName -> . qualifiedIdent
    (30) operandName -> . IDENTIFIER
    (31) literal -> . basicLit
    (35) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (36) typeName -> . numericType
    (37) typeName -> . STRING
    (38) typeName -> . BOOL
    (39) typeName -> . RUNE
    (54) basicLit -> . INT_LIT
    (55) basicLit -> . FLOAT_LIT
    (56) basicLit -> . DECIMAL_LIT EXPONENT
    (57) basicLit -> . FLOAT_LIT EXPONENT
    (58) basicLit -> . FALSE
    (59) basicLit -> . TRUE
    (60) basicLit -> . RUNE_LIT
    (61) basicLit -> . STRING_LIT
    (40) numericType -> . F32
    (41) numericType -> . F64
    (42) numericType -> . INT
    (43) numericType -> . ISIZE
    (44) numericType -> . I64
    (45) numericType -> . I32
    (46) numericType -> . I16
    (47) numericType -> . I8
    (48) numericType -> . UINT
    (49) numericType -> . USIZE
    (50) numericType -> . U64
    (51) numericType -> . U32
    (52) numericType -> . U16
    (53) numericType -> . U8
    (65) INT_LIT -> . HEX_LIT
    (66) INT_LIT -> . OCTAL_LIT
    (67) INT_LIT -> . BINARY_LIT
    (68) INT_LIT -> . DECIMAL_LIT
    (62) FLOAT_LIT -> . . DECIMAL_LIT
    (63) FLOAT_LIT -> . DECIMAL_LIT .
    (64) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    IDENTIFIER      shift and go to state 105
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    expressionList                 shift and go to state 114
    expression                     shift and go to state 115
    unaryExpr                      shift and go to state 18
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 66

    (9) identifierList -> identifierList , . IDENTIFIER
    IDENTIFIER      shift and go to state 116


state 67

    (3) topLevelDecls -> topLevelDecls topLevelDecl eos .
    (69) eos -> eos . NEWL
    (71) eos -> eos . ;
    IDENTIFIER      reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    AND             reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    EXCLM           reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    MINUS           reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    (               reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    STRING          reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    BOOL            reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    RUNE            reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    DECIMAL_LIT     reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    FALSE           reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    TRUE            reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    RUNE_LIT        reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    STRING_LIT      reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    F32             reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    F64             reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    INT             reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    ISIZE           reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I64             reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I32             reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I16             reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I8              reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    UINT            reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    USIZE           reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U64             reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U32             reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U16             reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U8              reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    HEX_LIT         reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    OCTAL_LIT       reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    BINARY_LIT      reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    .               reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    $end            reduce using rule 3 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    NEWL            shift and go to state 112
    ;               shift and go to state 113


state 68

    (5) orphanStmtList -> statementList eos .
    (13) statementList -> statementList eos . statement
    (69) eos -> eos . NEWL
    (71) eos -> eos . ;
    (15) statement -> . simpleStmt
    (16) simpleStmt -> . assignment
    (17) simpleStmt -> . expressionStmt
    (19) assignment -> . identifierList assign_op expressionList
    (18) expressionStmt -> . expression
    (9) identifierList -> . identifierList , IDENTIFIER
    (10) identifierList -> . IDENTIFIER
    (20) expression -> . expression BINARY_OP unaryExpr
    (21) expression -> . unaryExpr
    (22) unaryExpr -> . UNARY_OP unaryExpr
    (23) unaryExpr -> . primaryExpr
    (105) UNARY_OP -> . AND
    (106) UNARY_OP -> . EXCLM
    (107) UNARY_OP -> . MINUS
    (24) primaryExpr -> . conversion
    (25) primaryExpr -> . operand
    (32) conversion -> . type_ ( expression )
    (26) operand -> . ( expression )
    (27) operand -> . operandName
    (28) operand -> . literal
    (33) type_ -> . qualifiedIdent
    (34) type_ -> . typeName
    (29) operandName -> . qualifiedIdent
    (30) operandName -> . IDENTIFIER
    (31) literal -> . basicLit
    (35) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (36) typeName -> . numericType
    (37) typeName -> . STRING
    (38) typeName -> . BOOL
    (39) typeName -> . RUNE
    (54) basicLit -> . INT_LIT
    (55) basicLit -> . FLOAT_LIT
    (56) basicLit -> . DECIMAL_LIT EXPONENT
    (57) basicLit -> . FLOAT_LIT EXPONENT
    (58) basicLit -> . FALSE
    (59) basicLit -> . TRUE
    (60) basicLit -> . RUNE_LIT
    (61) basicLit -> . STRING_LIT
    (40) numericType -> . F32
    (41) numericType -> . F64
    (42) numericType -> . INT
    (43) numericType -> . ISIZE
    (44) numericType -> . I64
    (45) numericType -> . I32
    (46) numericType -> . I16
    (47) numericType -> . I8
    (48) numericType -> . UINT
    (49) numericType -> . USIZE
    (50) numericType -> . U64
    (51) numericType -> . U32
    (52) numericType -> . U16
    (53) numericType -> . U8
    (65) INT_LIT -> . HEX_LIT
    (66) INT_LIT -> . OCTAL_LIT
    (67) INT_LIT -> . BINARY_LIT
    (68) INT_LIT -> . DECIMAL_LIT
    (62) FLOAT_LIT -> . . DECIMAL_LIT
    (63) FLOAT_LIT -> . DECIMAL_LIT .
    (64) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 5 (orphanStmtList -> statementList eos .)
    NEWL            shift and go to state 112
    ;               shift and go to state 113
    IDENTIFIER      shift and go to state 16
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    statement                      shift and go to state 117
    simpleStmt                     shift and go to state 12
    assignment                     shift and go to state 14
    expressionStmt                 shift and go to state 15
    identifierList                 shift and go to state 118
    expression                     shift and go to state 17
    unaryExpr                      shift and go to state 18
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 69

    (19) assignment -> identifierList assign_op . expressionList
    (11) expressionList -> . expressionList , expression
    (12) expressionList -> . expression
    (20) expression -> . expression BINARY_OP unaryExpr
    (21) expression -> . unaryExpr
    (22) unaryExpr -> . UNARY_OP unaryExpr
    (23) unaryExpr -> . primaryExpr
    (105) UNARY_OP -> . AND
    (106) UNARY_OP -> . EXCLM
    (107) UNARY_OP -> . MINUS
    (24) primaryExpr -> . conversion
    (25) primaryExpr -> . operand
    (32) conversion -> . type_ ( expression )
    (26) operand -> . ( expression )
    (27) operand -> . operandName
    (28) operand -> . literal
    (33) type_ -> . qualifiedIdent
    (34) type_ -> . typeName
    (29) operandName -> . qualifiedIdent
    (30) operandName -> . IDENTIFIER
    (31) literal -> . basicLit
    (35) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (36) typeName -> . numericType
    (37) typeName -> . STRING
    (38) typeName -> . BOOL
    (39) typeName -> . RUNE
    (54) basicLit -> . INT_LIT
    (55) basicLit -> . FLOAT_LIT
    (56) basicLit -> . DECIMAL_LIT EXPONENT
    (57) basicLit -> . FLOAT_LIT EXPONENT
    (58) basicLit -> . FALSE
    (59) basicLit -> . TRUE
    (60) basicLit -> . RUNE_LIT
    (61) basicLit -> . STRING_LIT
    (40) numericType -> . F32
    (41) numericType -> . F64
    (42) numericType -> . INT
    (43) numericType -> . ISIZE
    (44) numericType -> . I64
    (45) numericType -> . I32
    (46) numericType -> . I16
    (47) numericType -> . I8
    (48) numericType -> . UINT
    (49) numericType -> . USIZE
    (50) numericType -> . U64
    (51) numericType -> . U32
    (52) numericType -> . U16
    (53) numericType -> . U8
    (65) INT_LIT -> . HEX_LIT
    (66) INT_LIT -> . OCTAL_LIT
    (67) INT_LIT -> . BINARY_LIT
    (68) INT_LIT -> . DECIMAL_LIT
    (62) FLOAT_LIT -> . . DECIMAL_LIT
    (63) FLOAT_LIT -> . DECIMAL_LIT .
    (64) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    IDENTIFIER      shift and go to state 105
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    expressionList                 shift and go to state 119
    expression                     shift and go to state 115
    unaryExpr                      shift and go to state 18
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 70

    (73) assign_op -> SHR_ASGN .
    AND             reduce using rule 73 (assign_op -> SHR_ASGN .)
    EXCLM           reduce using rule 73 (assign_op -> SHR_ASGN .)
    MINUS           reduce using rule 73 (assign_op -> SHR_ASGN .)
    (               reduce using rule 73 (assign_op -> SHR_ASGN .)
    IDENTIFIER      reduce using rule 73 (assign_op -> SHR_ASGN .)
    STRING          reduce using rule 73 (assign_op -> SHR_ASGN .)
    BOOL            reduce using rule 73 (assign_op -> SHR_ASGN .)
    RUNE            reduce using rule 73 (assign_op -> SHR_ASGN .)
    DECIMAL_LIT     reduce using rule 73 (assign_op -> SHR_ASGN .)
    FALSE           reduce using rule 73 (assign_op -> SHR_ASGN .)
    TRUE            reduce using rule 73 (assign_op -> SHR_ASGN .)
    RUNE_LIT        reduce using rule 73 (assign_op -> SHR_ASGN .)
    STRING_LIT      reduce using rule 73 (assign_op -> SHR_ASGN .)
    F32             reduce using rule 73 (assign_op -> SHR_ASGN .)
    F64             reduce using rule 73 (assign_op -> SHR_ASGN .)
    INT             reduce using rule 73 (assign_op -> SHR_ASGN .)
    ISIZE           reduce using rule 73 (assign_op -> SHR_ASGN .)
    I64             reduce using rule 73 (assign_op -> SHR_ASGN .)
    I32             reduce using rule 73 (assign_op -> SHR_ASGN .)
    I16             reduce using rule 73 (assign_op -> SHR_ASGN .)
    I8              reduce using rule 73 (assign_op -> SHR_ASGN .)
    UINT            reduce using rule 73 (assign_op -> SHR_ASGN .)
    USIZE           reduce using rule 73 (assign_op -> SHR_ASGN .)
    U64             reduce using rule 73 (assign_op -> SHR_ASGN .)
    U32             reduce using rule 73 (assign_op -> SHR_ASGN .)
    U16             reduce using rule 73 (assign_op -> SHR_ASGN .)
    U8              reduce using rule 73 (assign_op -> SHR_ASGN .)
    HEX_LIT         reduce using rule 73 (assign_op -> SHR_ASGN .)
    OCTAL_LIT       reduce using rule 73 (assign_op -> SHR_ASGN .)
    BINARY_LIT      reduce using rule 73 (assign_op -> SHR_ASGN .)
    .               reduce using rule 73 (assign_op -> SHR_ASGN .)


state 71

    (74) assign_op -> SHL_ASGN .
    AND             reduce using rule 74 (assign_op -> SHL_ASGN .)
    EXCLM           reduce using rule 74 (assign_op -> SHL_ASGN .)
    MINUS           reduce using rule 74 (assign_op -> SHL_ASGN .)
    (               reduce using rule 74 (assign_op -> SHL_ASGN .)
    IDENTIFIER      reduce using rule 74 (assign_op -> SHL_ASGN .)
    STRING          reduce using rule 74 (assign_op -> SHL_ASGN .)
    BOOL            reduce using rule 74 (assign_op -> SHL_ASGN .)
    RUNE            reduce using rule 74 (assign_op -> SHL_ASGN .)
    DECIMAL_LIT     reduce using rule 74 (assign_op -> SHL_ASGN .)
    FALSE           reduce using rule 74 (assign_op -> SHL_ASGN .)
    TRUE            reduce using rule 74 (assign_op -> SHL_ASGN .)
    RUNE_LIT        reduce using rule 74 (assign_op -> SHL_ASGN .)
    STRING_LIT      reduce using rule 74 (assign_op -> SHL_ASGN .)
    F32             reduce using rule 74 (assign_op -> SHL_ASGN .)
    F64             reduce using rule 74 (assign_op -> SHL_ASGN .)
    INT             reduce using rule 74 (assign_op -> SHL_ASGN .)
    ISIZE           reduce using rule 74 (assign_op -> SHL_ASGN .)
    I64             reduce using rule 74 (assign_op -> SHL_ASGN .)
    I32             reduce using rule 74 (assign_op -> SHL_ASGN .)
    I16             reduce using rule 74 (assign_op -> SHL_ASGN .)
    I8              reduce using rule 74 (assign_op -> SHL_ASGN .)
    UINT            reduce using rule 74 (assign_op -> SHL_ASGN .)
    USIZE           reduce using rule 74 (assign_op -> SHL_ASGN .)
    U64             reduce using rule 74 (assign_op -> SHL_ASGN .)
    U32             reduce using rule 74 (assign_op -> SHL_ASGN .)
    U16             reduce using rule 74 (assign_op -> SHL_ASGN .)
    U8              reduce using rule 74 (assign_op -> SHL_ASGN .)
    HEX_LIT         reduce using rule 74 (assign_op -> SHL_ASGN .)
    OCTAL_LIT       reduce using rule 74 (assign_op -> SHL_ASGN .)
    BINARY_LIT      reduce using rule 74 (assign_op -> SHL_ASGN .)
    .               reduce using rule 74 (assign_op -> SHL_ASGN .)


state 72

    (75) assign_op -> MOD_ASGN .
    AND             reduce using rule 75 (assign_op -> MOD_ASGN .)
    EXCLM           reduce using rule 75 (assign_op -> MOD_ASGN .)
    MINUS           reduce using rule 75 (assign_op -> MOD_ASGN .)
    (               reduce using rule 75 (assign_op -> MOD_ASGN .)
    IDENTIFIER      reduce using rule 75 (assign_op -> MOD_ASGN .)
    STRING          reduce using rule 75 (assign_op -> MOD_ASGN .)
    BOOL            reduce using rule 75 (assign_op -> MOD_ASGN .)
    RUNE            reduce using rule 75 (assign_op -> MOD_ASGN .)
    DECIMAL_LIT     reduce using rule 75 (assign_op -> MOD_ASGN .)
    FALSE           reduce using rule 75 (assign_op -> MOD_ASGN .)
    TRUE            reduce using rule 75 (assign_op -> MOD_ASGN .)
    RUNE_LIT        reduce using rule 75 (assign_op -> MOD_ASGN .)
    STRING_LIT      reduce using rule 75 (assign_op -> MOD_ASGN .)
    F32             reduce using rule 75 (assign_op -> MOD_ASGN .)
    F64             reduce using rule 75 (assign_op -> MOD_ASGN .)
    INT             reduce using rule 75 (assign_op -> MOD_ASGN .)
    ISIZE           reduce using rule 75 (assign_op -> MOD_ASGN .)
    I64             reduce using rule 75 (assign_op -> MOD_ASGN .)
    I32             reduce using rule 75 (assign_op -> MOD_ASGN .)
    I16             reduce using rule 75 (assign_op -> MOD_ASGN .)
    I8              reduce using rule 75 (assign_op -> MOD_ASGN .)
    UINT            reduce using rule 75 (assign_op -> MOD_ASGN .)
    USIZE           reduce using rule 75 (assign_op -> MOD_ASGN .)
    U64             reduce using rule 75 (assign_op -> MOD_ASGN .)
    U32             reduce using rule 75 (assign_op -> MOD_ASGN .)
    U16             reduce using rule 75 (assign_op -> MOD_ASGN .)
    U8              reduce using rule 75 (assign_op -> MOD_ASGN .)
    HEX_LIT         reduce using rule 75 (assign_op -> MOD_ASGN .)
    OCTAL_LIT       reduce using rule 75 (assign_op -> MOD_ASGN .)
    BINARY_LIT      reduce using rule 75 (assign_op -> MOD_ASGN .)
    .               reduce using rule 75 (assign_op -> MOD_ASGN .)


state 73

    (76) assign_op -> DIV_ASGN .
    AND             reduce using rule 76 (assign_op -> DIV_ASGN .)
    EXCLM           reduce using rule 76 (assign_op -> DIV_ASGN .)
    MINUS           reduce using rule 76 (assign_op -> DIV_ASGN .)
    (               reduce using rule 76 (assign_op -> DIV_ASGN .)
    IDENTIFIER      reduce using rule 76 (assign_op -> DIV_ASGN .)
    STRING          reduce using rule 76 (assign_op -> DIV_ASGN .)
    BOOL            reduce using rule 76 (assign_op -> DIV_ASGN .)
    RUNE            reduce using rule 76 (assign_op -> DIV_ASGN .)
    DECIMAL_LIT     reduce using rule 76 (assign_op -> DIV_ASGN .)
    FALSE           reduce using rule 76 (assign_op -> DIV_ASGN .)
    TRUE            reduce using rule 76 (assign_op -> DIV_ASGN .)
    RUNE_LIT        reduce using rule 76 (assign_op -> DIV_ASGN .)
    STRING_LIT      reduce using rule 76 (assign_op -> DIV_ASGN .)
    F32             reduce using rule 76 (assign_op -> DIV_ASGN .)
    F64             reduce using rule 76 (assign_op -> DIV_ASGN .)
    INT             reduce using rule 76 (assign_op -> DIV_ASGN .)
    ISIZE           reduce using rule 76 (assign_op -> DIV_ASGN .)
    I64             reduce using rule 76 (assign_op -> DIV_ASGN .)
    I32             reduce using rule 76 (assign_op -> DIV_ASGN .)
    I16             reduce using rule 76 (assign_op -> DIV_ASGN .)
    I8              reduce using rule 76 (assign_op -> DIV_ASGN .)
    UINT            reduce using rule 76 (assign_op -> DIV_ASGN .)
    USIZE           reduce using rule 76 (assign_op -> DIV_ASGN .)
    U64             reduce using rule 76 (assign_op -> DIV_ASGN .)
    U32             reduce using rule 76 (assign_op -> DIV_ASGN .)
    U16             reduce using rule 76 (assign_op -> DIV_ASGN .)
    U8              reduce using rule 76 (assign_op -> DIV_ASGN .)
    HEX_LIT         reduce using rule 76 (assign_op -> DIV_ASGN .)
    OCTAL_LIT       reduce using rule 76 (assign_op -> DIV_ASGN .)
    BINARY_LIT      reduce using rule 76 (assign_op -> DIV_ASGN .)
    .               reduce using rule 76 (assign_op -> DIV_ASGN .)


state 74

    (77) assign_op -> OR_ASGN .
    AND             reduce using rule 77 (assign_op -> OR_ASGN .)
    EXCLM           reduce using rule 77 (assign_op -> OR_ASGN .)
    MINUS           reduce using rule 77 (assign_op -> OR_ASGN .)
    (               reduce using rule 77 (assign_op -> OR_ASGN .)
    IDENTIFIER      reduce using rule 77 (assign_op -> OR_ASGN .)
    STRING          reduce using rule 77 (assign_op -> OR_ASGN .)
    BOOL            reduce using rule 77 (assign_op -> OR_ASGN .)
    RUNE            reduce using rule 77 (assign_op -> OR_ASGN .)
    DECIMAL_LIT     reduce using rule 77 (assign_op -> OR_ASGN .)
    FALSE           reduce using rule 77 (assign_op -> OR_ASGN .)
    TRUE            reduce using rule 77 (assign_op -> OR_ASGN .)
    RUNE_LIT        reduce using rule 77 (assign_op -> OR_ASGN .)
    STRING_LIT      reduce using rule 77 (assign_op -> OR_ASGN .)
    F32             reduce using rule 77 (assign_op -> OR_ASGN .)
    F64             reduce using rule 77 (assign_op -> OR_ASGN .)
    INT             reduce using rule 77 (assign_op -> OR_ASGN .)
    ISIZE           reduce using rule 77 (assign_op -> OR_ASGN .)
    I64             reduce using rule 77 (assign_op -> OR_ASGN .)
    I32             reduce using rule 77 (assign_op -> OR_ASGN .)
    I16             reduce using rule 77 (assign_op -> OR_ASGN .)
    I8              reduce using rule 77 (assign_op -> OR_ASGN .)
    UINT            reduce using rule 77 (assign_op -> OR_ASGN .)
    USIZE           reduce using rule 77 (assign_op -> OR_ASGN .)
    U64             reduce using rule 77 (assign_op -> OR_ASGN .)
    U32             reduce using rule 77 (assign_op -> OR_ASGN .)
    U16             reduce using rule 77 (assign_op -> OR_ASGN .)
    U8              reduce using rule 77 (assign_op -> OR_ASGN .)
    HEX_LIT         reduce using rule 77 (assign_op -> OR_ASGN .)
    OCTAL_LIT       reduce using rule 77 (assign_op -> OR_ASGN .)
    BINARY_LIT      reduce using rule 77 (assign_op -> OR_ASGN .)
    .               reduce using rule 77 (assign_op -> OR_ASGN .)


state 75

    (78) assign_op -> AND_ASGN .
    AND             reduce using rule 78 (assign_op -> AND_ASGN .)
    EXCLM           reduce using rule 78 (assign_op -> AND_ASGN .)
    MINUS           reduce using rule 78 (assign_op -> AND_ASGN .)
    (               reduce using rule 78 (assign_op -> AND_ASGN .)
    IDENTIFIER      reduce using rule 78 (assign_op -> AND_ASGN .)
    STRING          reduce using rule 78 (assign_op -> AND_ASGN .)
    BOOL            reduce using rule 78 (assign_op -> AND_ASGN .)
    RUNE            reduce using rule 78 (assign_op -> AND_ASGN .)
    DECIMAL_LIT     reduce using rule 78 (assign_op -> AND_ASGN .)
    FALSE           reduce using rule 78 (assign_op -> AND_ASGN .)
    TRUE            reduce using rule 78 (assign_op -> AND_ASGN .)
    RUNE_LIT        reduce using rule 78 (assign_op -> AND_ASGN .)
    STRING_LIT      reduce using rule 78 (assign_op -> AND_ASGN .)
    F32             reduce using rule 78 (assign_op -> AND_ASGN .)
    F64             reduce using rule 78 (assign_op -> AND_ASGN .)
    INT             reduce using rule 78 (assign_op -> AND_ASGN .)
    ISIZE           reduce using rule 78 (assign_op -> AND_ASGN .)
    I64             reduce using rule 78 (assign_op -> AND_ASGN .)
    I32             reduce using rule 78 (assign_op -> AND_ASGN .)
    I16             reduce using rule 78 (assign_op -> AND_ASGN .)
    I8              reduce using rule 78 (assign_op -> AND_ASGN .)
    UINT            reduce using rule 78 (assign_op -> AND_ASGN .)
    USIZE           reduce using rule 78 (assign_op -> AND_ASGN .)
    U64             reduce using rule 78 (assign_op -> AND_ASGN .)
    U32             reduce using rule 78 (assign_op -> AND_ASGN .)
    U16             reduce using rule 78 (assign_op -> AND_ASGN .)
    U8              reduce using rule 78 (assign_op -> AND_ASGN .)
    HEX_LIT         reduce using rule 78 (assign_op -> AND_ASGN .)
    OCTAL_LIT       reduce using rule 78 (assign_op -> AND_ASGN .)
    BINARY_LIT      reduce using rule 78 (assign_op -> AND_ASGN .)
    .               reduce using rule 78 (assign_op -> AND_ASGN .)


state 76

    (79) assign_op -> STAR_ASGN .
    AND             reduce using rule 79 (assign_op -> STAR_ASGN .)
    EXCLM           reduce using rule 79 (assign_op -> STAR_ASGN .)
    MINUS           reduce using rule 79 (assign_op -> STAR_ASGN .)
    (               reduce using rule 79 (assign_op -> STAR_ASGN .)
    IDENTIFIER      reduce using rule 79 (assign_op -> STAR_ASGN .)
    STRING          reduce using rule 79 (assign_op -> STAR_ASGN .)
    BOOL            reduce using rule 79 (assign_op -> STAR_ASGN .)
    RUNE            reduce using rule 79 (assign_op -> STAR_ASGN .)
    DECIMAL_LIT     reduce using rule 79 (assign_op -> STAR_ASGN .)
    FALSE           reduce using rule 79 (assign_op -> STAR_ASGN .)
    TRUE            reduce using rule 79 (assign_op -> STAR_ASGN .)
    RUNE_LIT        reduce using rule 79 (assign_op -> STAR_ASGN .)
    STRING_LIT      reduce using rule 79 (assign_op -> STAR_ASGN .)
    F32             reduce using rule 79 (assign_op -> STAR_ASGN .)
    F64             reduce using rule 79 (assign_op -> STAR_ASGN .)
    INT             reduce using rule 79 (assign_op -> STAR_ASGN .)
    ISIZE           reduce using rule 79 (assign_op -> STAR_ASGN .)
    I64             reduce using rule 79 (assign_op -> STAR_ASGN .)
    I32             reduce using rule 79 (assign_op -> STAR_ASGN .)
    I16             reduce using rule 79 (assign_op -> STAR_ASGN .)
    I8              reduce using rule 79 (assign_op -> STAR_ASGN .)
    UINT            reduce using rule 79 (assign_op -> STAR_ASGN .)
    USIZE           reduce using rule 79 (assign_op -> STAR_ASGN .)
    U64             reduce using rule 79 (assign_op -> STAR_ASGN .)
    U32             reduce using rule 79 (assign_op -> STAR_ASGN .)
    U16             reduce using rule 79 (assign_op -> STAR_ASGN .)
    U8              reduce using rule 79 (assign_op -> STAR_ASGN .)
    HEX_LIT         reduce using rule 79 (assign_op -> STAR_ASGN .)
    OCTAL_LIT       reduce using rule 79 (assign_op -> STAR_ASGN .)
    BINARY_LIT      reduce using rule 79 (assign_op -> STAR_ASGN .)
    .               reduce using rule 79 (assign_op -> STAR_ASGN .)


state 77

    (80) assign_op -> XOR_ASGN .
    AND             reduce using rule 80 (assign_op -> XOR_ASGN .)
    EXCLM           reduce using rule 80 (assign_op -> XOR_ASGN .)
    MINUS           reduce using rule 80 (assign_op -> XOR_ASGN .)
    (               reduce using rule 80 (assign_op -> XOR_ASGN .)
    IDENTIFIER      reduce using rule 80 (assign_op -> XOR_ASGN .)
    STRING          reduce using rule 80 (assign_op -> XOR_ASGN .)
    BOOL            reduce using rule 80 (assign_op -> XOR_ASGN .)
    RUNE            reduce using rule 80 (assign_op -> XOR_ASGN .)
    DECIMAL_LIT     reduce using rule 80 (assign_op -> XOR_ASGN .)
    FALSE           reduce using rule 80 (assign_op -> XOR_ASGN .)
    TRUE            reduce using rule 80 (assign_op -> XOR_ASGN .)
    RUNE_LIT        reduce using rule 80 (assign_op -> XOR_ASGN .)
    STRING_LIT      reduce using rule 80 (assign_op -> XOR_ASGN .)
    F32             reduce using rule 80 (assign_op -> XOR_ASGN .)
    F64             reduce using rule 80 (assign_op -> XOR_ASGN .)
    INT             reduce using rule 80 (assign_op -> XOR_ASGN .)
    ISIZE           reduce using rule 80 (assign_op -> XOR_ASGN .)
    I64             reduce using rule 80 (assign_op -> XOR_ASGN .)
    I32             reduce using rule 80 (assign_op -> XOR_ASGN .)
    I16             reduce using rule 80 (assign_op -> XOR_ASGN .)
    I8              reduce using rule 80 (assign_op -> XOR_ASGN .)
    UINT            reduce using rule 80 (assign_op -> XOR_ASGN .)
    USIZE           reduce using rule 80 (assign_op -> XOR_ASGN .)
    U64             reduce using rule 80 (assign_op -> XOR_ASGN .)
    U32             reduce using rule 80 (assign_op -> XOR_ASGN .)
    U16             reduce using rule 80 (assign_op -> XOR_ASGN .)
    U8              reduce using rule 80 (assign_op -> XOR_ASGN .)
    HEX_LIT         reduce using rule 80 (assign_op -> XOR_ASGN .)
    OCTAL_LIT       reduce using rule 80 (assign_op -> XOR_ASGN .)
    BINARY_LIT      reduce using rule 80 (assign_op -> XOR_ASGN .)
    .               reduce using rule 80 (assign_op -> XOR_ASGN .)


state 78

    (81) assign_op -> MINUS_ASGN .
    AND             reduce using rule 81 (assign_op -> MINUS_ASGN .)
    EXCLM           reduce using rule 81 (assign_op -> MINUS_ASGN .)
    MINUS           reduce using rule 81 (assign_op -> MINUS_ASGN .)
    (               reduce using rule 81 (assign_op -> MINUS_ASGN .)
    IDENTIFIER      reduce using rule 81 (assign_op -> MINUS_ASGN .)
    STRING          reduce using rule 81 (assign_op -> MINUS_ASGN .)
    BOOL            reduce using rule 81 (assign_op -> MINUS_ASGN .)
    RUNE            reduce using rule 81 (assign_op -> MINUS_ASGN .)
    DECIMAL_LIT     reduce using rule 81 (assign_op -> MINUS_ASGN .)
    FALSE           reduce using rule 81 (assign_op -> MINUS_ASGN .)
    TRUE            reduce using rule 81 (assign_op -> MINUS_ASGN .)
    RUNE_LIT        reduce using rule 81 (assign_op -> MINUS_ASGN .)
    STRING_LIT      reduce using rule 81 (assign_op -> MINUS_ASGN .)
    F32             reduce using rule 81 (assign_op -> MINUS_ASGN .)
    F64             reduce using rule 81 (assign_op -> MINUS_ASGN .)
    INT             reduce using rule 81 (assign_op -> MINUS_ASGN .)
    ISIZE           reduce using rule 81 (assign_op -> MINUS_ASGN .)
    I64             reduce using rule 81 (assign_op -> MINUS_ASGN .)
    I32             reduce using rule 81 (assign_op -> MINUS_ASGN .)
    I16             reduce using rule 81 (assign_op -> MINUS_ASGN .)
    I8              reduce using rule 81 (assign_op -> MINUS_ASGN .)
    UINT            reduce using rule 81 (assign_op -> MINUS_ASGN .)
    USIZE           reduce using rule 81 (assign_op -> MINUS_ASGN .)
    U64             reduce using rule 81 (assign_op -> MINUS_ASGN .)
    U32             reduce using rule 81 (assign_op -> MINUS_ASGN .)
    U16             reduce using rule 81 (assign_op -> MINUS_ASGN .)
    U8              reduce using rule 81 (assign_op -> MINUS_ASGN .)
    HEX_LIT         reduce using rule 81 (assign_op -> MINUS_ASGN .)
    OCTAL_LIT       reduce using rule 81 (assign_op -> MINUS_ASGN .)
    BINARY_LIT      reduce using rule 81 (assign_op -> MINUS_ASGN .)
    .               reduce using rule 81 (assign_op -> MINUS_ASGN .)


state 79

    (82) assign_op -> PLUS_ASGN .
    AND             reduce using rule 82 (assign_op -> PLUS_ASGN .)
    EXCLM           reduce using rule 82 (assign_op -> PLUS_ASGN .)
    MINUS           reduce using rule 82 (assign_op -> PLUS_ASGN .)
    (               reduce using rule 82 (assign_op -> PLUS_ASGN .)
    IDENTIFIER      reduce using rule 82 (assign_op -> PLUS_ASGN .)
    STRING          reduce using rule 82 (assign_op -> PLUS_ASGN .)
    BOOL            reduce using rule 82 (assign_op -> PLUS_ASGN .)
    RUNE            reduce using rule 82 (assign_op -> PLUS_ASGN .)
    DECIMAL_LIT     reduce using rule 82 (assign_op -> PLUS_ASGN .)
    FALSE           reduce using rule 82 (assign_op -> PLUS_ASGN .)
    TRUE            reduce using rule 82 (assign_op -> PLUS_ASGN .)
    RUNE_LIT        reduce using rule 82 (assign_op -> PLUS_ASGN .)
    STRING_LIT      reduce using rule 82 (assign_op -> PLUS_ASGN .)
    F32             reduce using rule 82 (assign_op -> PLUS_ASGN .)
    F64             reduce using rule 82 (assign_op -> PLUS_ASGN .)
    INT             reduce using rule 82 (assign_op -> PLUS_ASGN .)
    ISIZE           reduce using rule 82 (assign_op -> PLUS_ASGN .)
    I64             reduce using rule 82 (assign_op -> PLUS_ASGN .)
    I32             reduce using rule 82 (assign_op -> PLUS_ASGN .)
    I16             reduce using rule 82 (assign_op -> PLUS_ASGN .)
    I8              reduce using rule 82 (assign_op -> PLUS_ASGN .)
    UINT            reduce using rule 82 (assign_op -> PLUS_ASGN .)
    USIZE           reduce using rule 82 (assign_op -> PLUS_ASGN .)
    U64             reduce using rule 82 (assign_op -> PLUS_ASGN .)
    U32             reduce using rule 82 (assign_op -> PLUS_ASGN .)
    U16             reduce using rule 82 (assign_op -> PLUS_ASGN .)
    U8              reduce using rule 82 (assign_op -> PLUS_ASGN .)
    HEX_LIT         reduce using rule 82 (assign_op -> PLUS_ASGN .)
    OCTAL_LIT       reduce using rule 82 (assign_op -> PLUS_ASGN .)
    BINARY_LIT      reduce using rule 82 (assign_op -> PLUS_ASGN .)
    .               reduce using rule 82 (assign_op -> PLUS_ASGN .)


state 80

    (83) assign_op -> ASSIGN .
    AND             reduce using rule 83 (assign_op -> ASSIGN .)
    EXCLM           reduce using rule 83 (assign_op -> ASSIGN .)
    MINUS           reduce using rule 83 (assign_op -> ASSIGN .)
    (               reduce using rule 83 (assign_op -> ASSIGN .)
    IDENTIFIER      reduce using rule 83 (assign_op -> ASSIGN .)
    STRING          reduce using rule 83 (assign_op -> ASSIGN .)
    BOOL            reduce using rule 83 (assign_op -> ASSIGN .)
    RUNE            reduce using rule 83 (assign_op -> ASSIGN .)
    DECIMAL_LIT     reduce using rule 83 (assign_op -> ASSIGN .)
    FALSE           reduce using rule 83 (assign_op -> ASSIGN .)
    TRUE            reduce using rule 83 (assign_op -> ASSIGN .)
    RUNE_LIT        reduce using rule 83 (assign_op -> ASSIGN .)
    STRING_LIT      reduce using rule 83 (assign_op -> ASSIGN .)
    F32             reduce using rule 83 (assign_op -> ASSIGN .)
    F64             reduce using rule 83 (assign_op -> ASSIGN .)
    INT             reduce using rule 83 (assign_op -> ASSIGN .)
    ISIZE           reduce using rule 83 (assign_op -> ASSIGN .)
    I64             reduce using rule 83 (assign_op -> ASSIGN .)
    I32             reduce using rule 83 (assign_op -> ASSIGN .)
    I16             reduce using rule 83 (assign_op -> ASSIGN .)
    I8              reduce using rule 83 (assign_op -> ASSIGN .)
    UINT            reduce using rule 83 (assign_op -> ASSIGN .)
    USIZE           reduce using rule 83 (assign_op -> ASSIGN .)
    U64             reduce using rule 83 (assign_op -> ASSIGN .)
    U32             reduce using rule 83 (assign_op -> ASSIGN .)
    U16             reduce using rule 83 (assign_op -> ASSIGN .)
    U8              reduce using rule 83 (assign_op -> ASSIGN .)
    HEX_LIT         reduce using rule 83 (assign_op -> ASSIGN .)
    OCTAL_LIT       reduce using rule 83 (assign_op -> ASSIGN .)
    BINARY_LIT      reduce using rule 83 (assign_op -> ASSIGN .)
    .               reduce using rule 83 (assign_op -> ASSIGN .)


state 81

    (35) qualifiedIdent -> IDENTIFIER . . IDENTIFIER
    IDENTIFIER      shift and go to state 120


state 82

    (20) expression -> expression BINARY_OP . unaryExpr
    (22) unaryExpr -> . UNARY_OP unaryExpr
    (23) unaryExpr -> . primaryExpr
    (105) UNARY_OP -> . AND
    (106) UNARY_OP -> . EXCLM
    (107) UNARY_OP -> . MINUS
    (24) primaryExpr -> . conversion
    (25) primaryExpr -> . operand
    (32) conversion -> . type_ ( expression )
    (26) operand -> . ( expression )
    (27) operand -> . operandName
    (28) operand -> . literal
    (33) type_ -> . qualifiedIdent
    (34) type_ -> . typeName
    (29) operandName -> . qualifiedIdent
    (30) operandName -> . IDENTIFIER
    (31) literal -> . basicLit
    (35) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (36) typeName -> . numericType
    (37) typeName -> . STRING
    (38) typeName -> . BOOL
    (39) typeName -> . RUNE
    (54) basicLit -> . INT_LIT
    (55) basicLit -> . FLOAT_LIT
    (56) basicLit -> . DECIMAL_LIT EXPONENT
    (57) basicLit -> . FLOAT_LIT EXPONENT
    (58) basicLit -> . FALSE
    (59) basicLit -> . TRUE
    (60) basicLit -> . RUNE_LIT
    (61) basicLit -> . STRING_LIT
    (40) numericType -> . F32
    (41) numericType -> . F64
    (42) numericType -> . INT
    (43) numericType -> . ISIZE
    (44) numericType -> . I64
    (45) numericType -> . I32
    (46) numericType -> . I16
    (47) numericType -> . I8
    (48) numericType -> . UINT
    (49) numericType -> . USIZE
    (50) numericType -> . U64
    (51) numericType -> . U32
    (52) numericType -> . U16
    (53) numericType -> . U8
    (65) INT_LIT -> . HEX_LIT
    (66) INT_LIT -> . OCTAL_LIT
    (67) INT_LIT -> . BINARY_LIT
    (68) INT_LIT -> . DECIMAL_LIT
    (62) FLOAT_LIT -> . . DECIMAL_LIT
    (63) FLOAT_LIT -> . DECIMAL_LIT .
    (64) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    IDENTIFIER      shift and go to state 105
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    unaryExpr                      shift and go to state 121
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 83

    (84) BINARY_OP -> MUL_OP .
    AND             reduce using rule 84 (BINARY_OP -> MUL_OP .)
    EXCLM           reduce using rule 84 (BINARY_OP -> MUL_OP .)
    MINUS           reduce using rule 84 (BINARY_OP -> MUL_OP .)
    (               reduce using rule 84 (BINARY_OP -> MUL_OP .)
    IDENTIFIER      reduce using rule 84 (BINARY_OP -> MUL_OP .)
    STRING          reduce using rule 84 (BINARY_OP -> MUL_OP .)
    BOOL            reduce using rule 84 (BINARY_OP -> MUL_OP .)
    RUNE            reduce using rule 84 (BINARY_OP -> MUL_OP .)
    DECIMAL_LIT     reduce using rule 84 (BINARY_OP -> MUL_OP .)
    FALSE           reduce using rule 84 (BINARY_OP -> MUL_OP .)
    TRUE            reduce using rule 84 (BINARY_OP -> MUL_OP .)
    RUNE_LIT        reduce using rule 84 (BINARY_OP -> MUL_OP .)
    STRING_LIT      reduce using rule 84 (BINARY_OP -> MUL_OP .)
    F32             reduce using rule 84 (BINARY_OP -> MUL_OP .)
    F64             reduce using rule 84 (BINARY_OP -> MUL_OP .)
    INT             reduce using rule 84 (BINARY_OP -> MUL_OP .)
    ISIZE           reduce using rule 84 (BINARY_OP -> MUL_OP .)
    I64             reduce using rule 84 (BINARY_OP -> MUL_OP .)
    I32             reduce using rule 84 (BINARY_OP -> MUL_OP .)
    I16             reduce using rule 84 (BINARY_OP -> MUL_OP .)
    I8              reduce using rule 84 (BINARY_OP -> MUL_OP .)
    UINT            reduce using rule 84 (BINARY_OP -> MUL_OP .)
    USIZE           reduce using rule 84 (BINARY_OP -> MUL_OP .)
    U64             reduce using rule 84 (BINARY_OP -> MUL_OP .)
    U32             reduce using rule 84 (BINARY_OP -> MUL_OP .)
    U16             reduce using rule 84 (BINARY_OP -> MUL_OP .)
    U8              reduce using rule 84 (BINARY_OP -> MUL_OP .)
    HEX_LIT         reduce using rule 84 (BINARY_OP -> MUL_OP .)
    OCTAL_LIT       reduce using rule 84 (BINARY_OP -> MUL_OP .)
    BINARY_LIT      reduce using rule 84 (BINARY_OP -> MUL_OP .)
    .               reduce using rule 84 (BINARY_OP -> MUL_OP .)


state 84

    (85) BINARY_OP -> ADD_OP .
    AND             reduce using rule 85 (BINARY_OP -> ADD_OP .)
    EXCLM           reduce using rule 85 (BINARY_OP -> ADD_OP .)
    MINUS           reduce using rule 85 (BINARY_OP -> ADD_OP .)
    (               reduce using rule 85 (BINARY_OP -> ADD_OP .)
    IDENTIFIER      reduce using rule 85 (BINARY_OP -> ADD_OP .)
    STRING          reduce using rule 85 (BINARY_OP -> ADD_OP .)
    BOOL            reduce using rule 85 (BINARY_OP -> ADD_OP .)
    RUNE            reduce using rule 85 (BINARY_OP -> ADD_OP .)
    DECIMAL_LIT     reduce using rule 85 (BINARY_OP -> ADD_OP .)
    FALSE           reduce using rule 85 (BINARY_OP -> ADD_OP .)
    TRUE            reduce using rule 85 (BINARY_OP -> ADD_OP .)
    RUNE_LIT        reduce using rule 85 (BINARY_OP -> ADD_OP .)
    STRING_LIT      reduce using rule 85 (BINARY_OP -> ADD_OP .)
    F32             reduce using rule 85 (BINARY_OP -> ADD_OP .)
    F64             reduce using rule 85 (BINARY_OP -> ADD_OP .)
    INT             reduce using rule 85 (BINARY_OP -> ADD_OP .)
    ISIZE           reduce using rule 85 (BINARY_OP -> ADD_OP .)
    I64             reduce using rule 85 (BINARY_OP -> ADD_OP .)
    I32             reduce using rule 85 (BINARY_OP -> ADD_OP .)
    I16             reduce using rule 85 (BINARY_OP -> ADD_OP .)
    I8              reduce using rule 85 (BINARY_OP -> ADD_OP .)
    UINT            reduce using rule 85 (BINARY_OP -> ADD_OP .)
    USIZE           reduce using rule 85 (BINARY_OP -> ADD_OP .)
    U64             reduce using rule 85 (BINARY_OP -> ADD_OP .)
    U32             reduce using rule 85 (BINARY_OP -> ADD_OP .)
    U16             reduce using rule 85 (BINARY_OP -> ADD_OP .)
    U8              reduce using rule 85 (BINARY_OP -> ADD_OP .)
    HEX_LIT         reduce using rule 85 (BINARY_OP -> ADD_OP .)
    OCTAL_LIT       reduce using rule 85 (BINARY_OP -> ADD_OP .)
    BINARY_LIT      reduce using rule 85 (BINARY_OP -> ADD_OP .)
    .               reduce using rule 85 (BINARY_OP -> ADD_OP .)


state 85

    (86) BINARY_OP -> REL_OP .
    AND             reduce using rule 86 (BINARY_OP -> REL_OP .)
    EXCLM           reduce using rule 86 (BINARY_OP -> REL_OP .)
    MINUS           reduce using rule 86 (BINARY_OP -> REL_OP .)
    (               reduce using rule 86 (BINARY_OP -> REL_OP .)
    IDENTIFIER      reduce using rule 86 (BINARY_OP -> REL_OP .)
    STRING          reduce using rule 86 (BINARY_OP -> REL_OP .)
    BOOL            reduce using rule 86 (BINARY_OP -> REL_OP .)
    RUNE            reduce using rule 86 (BINARY_OP -> REL_OP .)
    DECIMAL_LIT     reduce using rule 86 (BINARY_OP -> REL_OP .)
    FALSE           reduce using rule 86 (BINARY_OP -> REL_OP .)
    TRUE            reduce using rule 86 (BINARY_OP -> REL_OP .)
    RUNE_LIT        reduce using rule 86 (BINARY_OP -> REL_OP .)
    STRING_LIT      reduce using rule 86 (BINARY_OP -> REL_OP .)
    F32             reduce using rule 86 (BINARY_OP -> REL_OP .)
    F64             reduce using rule 86 (BINARY_OP -> REL_OP .)
    INT             reduce using rule 86 (BINARY_OP -> REL_OP .)
    ISIZE           reduce using rule 86 (BINARY_OP -> REL_OP .)
    I64             reduce using rule 86 (BINARY_OP -> REL_OP .)
    I32             reduce using rule 86 (BINARY_OP -> REL_OP .)
    I16             reduce using rule 86 (BINARY_OP -> REL_OP .)
    I8              reduce using rule 86 (BINARY_OP -> REL_OP .)
    UINT            reduce using rule 86 (BINARY_OP -> REL_OP .)
    USIZE           reduce using rule 86 (BINARY_OP -> REL_OP .)
    U64             reduce using rule 86 (BINARY_OP -> REL_OP .)
    U32             reduce using rule 86 (BINARY_OP -> REL_OP .)
    U16             reduce using rule 86 (BINARY_OP -> REL_OP .)
    U8              reduce using rule 86 (BINARY_OP -> REL_OP .)
    HEX_LIT         reduce using rule 86 (BINARY_OP -> REL_OP .)
    OCTAL_LIT       reduce using rule 86 (BINARY_OP -> REL_OP .)
    BINARY_LIT      reduce using rule 86 (BINARY_OP -> REL_OP .)
    .               reduce using rule 86 (BINARY_OP -> REL_OP .)


state 86

    (87) BINARY_OP -> LOGIC_AND .
    AND             reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    EXCLM           reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    MINUS           reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    (               reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    IDENTIFIER      reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    STRING          reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    BOOL            reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    RUNE            reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    DECIMAL_LIT     reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    FALSE           reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    TRUE            reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    RUNE_LIT        reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    STRING_LIT      reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    F32             reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    F64             reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    INT             reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    ISIZE           reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    I64             reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    I32             reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    I16             reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    I8              reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    UINT            reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    USIZE           reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    U64             reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    U32             reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    U16             reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    U8              reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    HEX_LIT         reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    OCTAL_LIT       reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    BINARY_LIT      reduce using rule 87 (BINARY_OP -> LOGIC_AND .)
    .               reduce using rule 87 (BINARY_OP -> LOGIC_AND .)


state 87

    (88) BINARY_OP -> LOGIC_OR .
    AND             reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    EXCLM           reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    MINUS           reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    (               reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    IDENTIFIER      reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    STRING          reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    BOOL            reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    RUNE            reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    DECIMAL_LIT     reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    FALSE           reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    TRUE            reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    RUNE_LIT        reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    STRING_LIT      reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    F32             reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    F64             reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    INT             reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    ISIZE           reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    I64             reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    I32             reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    I16             reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    I8              reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    UINT            reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    USIZE           reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    U64             reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    U32             reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    U16             reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    U8              reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    HEX_LIT         reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    OCTAL_LIT       reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    BINARY_LIT      reduce using rule 88 (BINARY_OP -> LOGIC_OR .)
    .               reduce using rule 88 (BINARY_OP -> LOGIC_OR .)


state 88

    (99) MUL_OP -> SHR .
    AND             reduce using rule 99 (MUL_OP -> SHR .)
    EXCLM           reduce using rule 99 (MUL_OP -> SHR .)
    MINUS           reduce using rule 99 (MUL_OP -> SHR .)
    (               reduce using rule 99 (MUL_OP -> SHR .)
    IDENTIFIER      reduce using rule 99 (MUL_OP -> SHR .)
    STRING          reduce using rule 99 (MUL_OP -> SHR .)
    BOOL            reduce using rule 99 (MUL_OP -> SHR .)
    RUNE            reduce using rule 99 (MUL_OP -> SHR .)
    DECIMAL_LIT     reduce using rule 99 (MUL_OP -> SHR .)
    FALSE           reduce using rule 99 (MUL_OP -> SHR .)
    TRUE            reduce using rule 99 (MUL_OP -> SHR .)
    RUNE_LIT        reduce using rule 99 (MUL_OP -> SHR .)
    STRING_LIT      reduce using rule 99 (MUL_OP -> SHR .)
    F32             reduce using rule 99 (MUL_OP -> SHR .)
    F64             reduce using rule 99 (MUL_OP -> SHR .)
    INT             reduce using rule 99 (MUL_OP -> SHR .)
    ISIZE           reduce using rule 99 (MUL_OP -> SHR .)
    I64             reduce using rule 99 (MUL_OP -> SHR .)
    I32             reduce using rule 99 (MUL_OP -> SHR .)
    I16             reduce using rule 99 (MUL_OP -> SHR .)
    I8              reduce using rule 99 (MUL_OP -> SHR .)
    UINT            reduce using rule 99 (MUL_OP -> SHR .)
    USIZE           reduce using rule 99 (MUL_OP -> SHR .)
    U64             reduce using rule 99 (MUL_OP -> SHR .)
    U32             reduce using rule 99 (MUL_OP -> SHR .)
    U16             reduce using rule 99 (MUL_OP -> SHR .)
    U8              reduce using rule 99 (MUL_OP -> SHR .)
    HEX_LIT         reduce using rule 99 (MUL_OP -> SHR .)
    OCTAL_LIT       reduce using rule 99 (MUL_OP -> SHR .)
    BINARY_LIT      reduce using rule 99 (MUL_OP -> SHR .)
    .               reduce using rule 99 (MUL_OP -> SHR .)


state 89

    (100) MUL_OP -> SHL .
    AND             reduce using rule 100 (MUL_OP -> SHL .)
    EXCLM           reduce using rule 100 (MUL_OP -> SHL .)
    MINUS           reduce using rule 100 (MUL_OP -> SHL .)
    (               reduce using rule 100 (MUL_OP -> SHL .)
    IDENTIFIER      reduce using rule 100 (MUL_OP -> SHL .)
    STRING          reduce using rule 100 (MUL_OP -> SHL .)
    BOOL            reduce using rule 100 (MUL_OP -> SHL .)
    RUNE            reduce using rule 100 (MUL_OP -> SHL .)
    DECIMAL_LIT     reduce using rule 100 (MUL_OP -> SHL .)
    FALSE           reduce using rule 100 (MUL_OP -> SHL .)
    TRUE            reduce using rule 100 (MUL_OP -> SHL .)
    RUNE_LIT        reduce using rule 100 (MUL_OP -> SHL .)
    STRING_LIT      reduce using rule 100 (MUL_OP -> SHL .)
    F32             reduce using rule 100 (MUL_OP -> SHL .)
    F64             reduce using rule 100 (MUL_OP -> SHL .)
    INT             reduce using rule 100 (MUL_OP -> SHL .)
    ISIZE           reduce using rule 100 (MUL_OP -> SHL .)
    I64             reduce using rule 100 (MUL_OP -> SHL .)
    I32             reduce using rule 100 (MUL_OP -> SHL .)
    I16             reduce using rule 100 (MUL_OP -> SHL .)
    I8              reduce using rule 100 (MUL_OP -> SHL .)
    UINT            reduce using rule 100 (MUL_OP -> SHL .)
    USIZE           reduce using rule 100 (MUL_OP -> SHL .)
    U64             reduce using rule 100 (MUL_OP -> SHL .)
    U32             reduce using rule 100 (MUL_OP -> SHL .)
    U16             reduce using rule 100 (MUL_OP -> SHL .)
    U8              reduce using rule 100 (MUL_OP -> SHL .)
    HEX_LIT         reduce using rule 100 (MUL_OP -> SHL .)
    OCTAL_LIT       reduce using rule 100 (MUL_OP -> SHL .)
    BINARY_LIT      reduce using rule 100 (MUL_OP -> SHL .)
    .               reduce using rule 100 (MUL_OP -> SHL .)


state 90

    (101) MUL_OP -> AND .
    AND             reduce using rule 101 (MUL_OP -> AND .)
    EXCLM           reduce using rule 101 (MUL_OP -> AND .)
    MINUS           reduce using rule 101 (MUL_OP -> AND .)
    (               reduce using rule 101 (MUL_OP -> AND .)
    IDENTIFIER      reduce using rule 101 (MUL_OP -> AND .)
    STRING          reduce using rule 101 (MUL_OP -> AND .)
    BOOL            reduce using rule 101 (MUL_OP -> AND .)
    RUNE            reduce using rule 101 (MUL_OP -> AND .)
    DECIMAL_LIT     reduce using rule 101 (MUL_OP -> AND .)
    FALSE           reduce using rule 101 (MUL_OP -> AND .)
    TRUE            reduce using rule 101 (MUL_OP -> AND .)
    RUNE_LIT        reduce using rule 101 (MUL_OP -> AND .)
    STRING_LIT      reduce using rule 101 (MUL_OP -> AND .)
    F32             reduce using rule 101 (MUL_OP -> AND .)
    F64             reduce using rule 101 (MUL_OP -> AND .)
    INT             reduce using rule 101 (MUL_OP -> AND .)
    ISIZE           reduce using rule 101 (MUL_OP -> AND .)
    I64             reduce using rule 101 (MUL_OP -> AND .)
    I32             reduce using rule 101 (MUL_OP -> AND .)
    I16             reduce using rule 101 (MUL_OP -> AND .)
    I8              reduce using rule 101 (MUL_OP -> AND .)
    UINT            reduce using rule 101 (MUL_OP -> AND .)
    USIZE           reduce using rule 101 (MUL_OP -> AND .)
    U64             reduce using rule 101 (MUL_OP -> AND .)
    U32             reduce using rule 101 (MUL_OP -> AND .)
    U16             reduce using rule 101 (MUL_OP -> AND .)
    U8              reduce using rule 101 (MUL_OP -> AND .)
    HEX_LIT         reduce using rule 101 (MUL_OP -> AND .)
    OCTAL_LIT       reduce using rule 101 (MUL_OP -> AND .)
    BINARY_LIT      reduce using rule 101 (MUL_OP -> AND .)
    .               reduce using rule 101 (MUL_OP -> AND .)


state 91

    (102) MUL_OP -> MOD .
    AND             reduce using rule 102 (MUL_OP -> MOD .)
    EXCLM           reduce using rule 102 (MUL_OP -> MOD .)
    MINUS           reduce using rule 102 (MUL_OP -> MOD .)
    (               reduce using rule 102 (MUL_OP -> MOD .)
    IDENTIFIER      reduce using rule 102 (MUL_OP -> MOD .)
    STRING          reduce using rule 102 (MUL_OP -> MOD .)
    BOOL            reduce using rule 102 (MUL_OP -> MOD .)
    RUNE            reduce using rule 102 (MUL_OP -> MOD .)
    DECIMAL_LIT     reduce using rule 102 (MUL_OP -> MOD .)
    FALSE           reduce using rule 102 (MUL_OP -> MOD .)
    TRUE            reduce using rule 102 (MUL_OP -> MOD .)
    RUNE_LIT        reduce using rule 102 (MUL_OP -> MOD .)
    STRING_LIT      reduce using rule 102 (MUL_OP -> MOD .)
    F32             reduce using rule 102 (MUL_OP -> MOD .)
    F64             reduce using rule 102 (MUL_OP -> MOD .)
    INT             reduce using rule 102 (MUL_OP -> MOD .)
    ISIZE           reduce using rule 102 (MUL_OP -> MOD .)
    I64             reduce using rule 102 (MUL_OP -> MOD .)
    I32             reduce using rule 102 (MUL_OP -> MOD .)
    I16             reduce using rule 102 (MUL_OP -> MOD .)
    I8              reduce using rule 102 (MUL_OP -> MOD .)
    UINT            reduce using rule 102 (MUL_OP -> MOD .)
    USIZE           reduce using rule 102 (MUL_OP -> MOD .)
    U64             reduce using rule 102 (MUL_OP -> MOD .)
    U32             reduce using rule 102 (MUL_OP -> MOD .)
    U16             reduce using rule 102 (MUL_OP -> MOD .)
    U8              reduce using rule 102 (MUL_OP -> MOD .)
    HEX_LIT         reduce using rule 102 (MUL_OP -> MOD .)
    OCTAL_LIT       reduce using rule 102 (MUL_OP -> MOD .)
    BINARY_LIT      reduce using rule 102 (MUL_OP -> MOD .)
    .               reduce using rule 102 (MUL_OP -> MOD .)


state 92

    (103) MUL_OP -> DIV .
    AND             reduce using rule 103 (MUL_OP -> DIV .)
    EXCLM           reduce using rule 103 (MUL_OP -> DIV .)
    MINUS           reduce using rule 103 (MUL_OP -> DIV .)
    (               reduce using rule 103 (MUL_OP -> DIV .)
    IDENTIFIER      reduce using rule 103 (MUL_OP -> DIV .)
    STRING          reduce using rule 103 (MUL_OP -> DIV .)
    BOOL            reduce using rule 103 (MUL_OP -> DIV .)
    RUNE            reduce using rule 103 (MUL_OP -> DIV .)
    DECIMAL_LIT     reduce using rule 103 (MUL_OP -> DIV .)
    FALSE           reduce using rule 103 (MUL_OP -> DIV .)
    TRUE            reduce using rule 103 (MUL_OP -> DIV .)
    RUNE_LIT        reduce using rule 103 (MUL_OP -> DIV .)
    STRING_LIT      reduce using rule 103 (MUL_OP -> DIV .)
    F32             reduce using rule 103 (MUL_OP -> DIV .)
    F64             reduce using rule 103 (MUL_OP -> DIV .)
    INT             reduce using rule 103 (MUL_OP -> DIV .)
    ISIZE           reduce using rule 103 (MUL_OP -> DIV .)
    I64             reduce using rule 103 (MUL_OP -> DIV .)
    I32             reduce using rule 103 (MUL_OP -> DIV .)
    I16             reduce using rule 103 (MUL_OP -> DIV .)
    I8              reduce using rule 103 (MUL_OP -> DIV .)
    UINT            reduce using rule 103 (MUL_OP -> DIV .)
    USIZE           reduce using rule 103 (MUL_OP -> DIV .)
    U64             reduce using rule 103 (MUL_OP -> DIV .)
    U32             reduce using rule 103 (MUL_OP -> DIV .)
    U16             reduce using rule 103 (MUL_OP -> DIV .)
    U8              reduce using rule 103 (MUL_OP -> DIV .)
    HEX_LIT         reduce using rule 103 (MUL_OP -> DIV .)
    OCTAL_LIT       reduce using rule 103 (MUL_OP -> DIV .)
    BINARY_LIT      reduce using rule 103 (MUL_OP -> DIV .)
    .               reduce using rule 103 (MUL_OP -> DIV .)


state 93

    (104) MUL_OP -> STAR .
    AND             reduce using rule 104 (MUL_OP -> STAR .)
    EXCLM           reduce using rule 104 (MUL_OP -> STAR .)
    MINUS           reduce using rule 104 (MUL_OP -> STAR .)
    (               reduce using rule 104 (MUL_OP -> STAR .)
    IDENTIFIER      reduce using rule 104 (MUL_OP -> STAR .)
    STRING          reduce using rule 104 (MUL_OP -> STAR .)
    BOOL            reduce using rule 104 (MUL_OP -> STAR .)
    RUNE            reduce using rule 104 (MUL_OP -> STAR .)
    DECIMAL_LIT     reduce using rule 104 (MUL_OP -> STAR .)
    FALSE           reduce using rule 104 (MUL_OP -> STAR .)
    TRUE            reduce using rule 104 (MUL_OP -> STAR .)
    RUNE_LIT        reduce using rule 104 (MUL_OP -> STAR .)
    STRING_LIT      reduce using rule 104 (MUL_OP -> STAR .)
    F32             reduce using rule 104 (MUL_OP -> STAR .)
    F64             reduce using rule 104 (MUL_OP -> STAR .)
    INT             reduce using rule 104 (MUL_OP -> STAR .)
    ISIZE           reduce using rule 104 (MUL_OP -> STAR .)
    I64             reduce using rule 104 (MUL_OP -> STAR .)
    I32             reduce using rule 104 (MUL_OP -> STAR .)
    I16             reduce using rule 104 (MUL_OP -> STAR .)
    I8              reduce using rule 104 (MUL_OP -> STAR .)
    UINT            reduce using rule 104 (MUL_OP -> STAR .)
    USIZE           reduce using rule 104 (MUL_OP -> STAR .)
    U64             reduce using rule 104 (MUL_OP -> STAR .)
    U32             reduce using rule 104 (MUL_OP -> STAR .)
    U16             reduce using rule 104 (MUL_OP -> STAR .)
    U8              reduce using rule 104 (MUL_OP -> STAR .)
    HEX_LIT         reduce using rule 104 (MUL_OP -> STAR .)
    OCTAL_LIT       reduce using rule 104 (MUL_OP -> STAR .)
    BINARY_LIT      reduce using rule 104 (MUL_OP -> STAR .)
    .               reduce using rule 104 (MUL_OP -> STAR .)


state 94

    (95) ADD_OP -> XOR .
    AND             reduce using rule 95 (ADD_OP -> XOR .)
    EXCLM           reduce using rule 95 (ADD_OP -> XOR .)
    MINUS           reduce using rule 95 (ADD_OP -> XOR .)
    (               reduce using rule 95 (ADD_OP -> XOR .)
    IDENTIFIER      reduce using rule 95 (ADD_OP -> XOR .)
    STRING          reduce using rule 95 (ADD_OP -> XOR .)
    BOOL            reduce using rule 95 (ADD_OP -> XOR .)
    RUNE            reduce using rule 95 (ADD_OP -> XOR .)
    DECIMAL_LIT     reduce using rule 95 (ADD_OP -> XOR .)
    FALSE           reduce using rule 95 (ADD_OP -> XOR .)
    TRUE            reduce using rule 95 (ADD_OP -> XOR .)
    RUNE_LIT        reduce using rule 95 (ADD_OP -> XOR .)
    STRING_LIT      reduce using rule 95 (ADD_OP -> XOR .)
    F32             reduce using rule 95 (ADD_OP -> XOR .)
    F64             reduce using rule 95 (ADD_OP -> XOR .)
    INT             reduce using rule 95 (ADD_OP -> XOR .)
    ISIZE           reduce using rule 95 (ADD_OP -> XOR .)
    I64             reduce using rule 95 (ADD_OP -> XOR .)
    I32             reduce using rule 95 (ADD_OP -> XOR .)
    I16             reduce using rule 95 (ADD_OP -> XOR .)
    I8              reduce using rule 95 (ADD_OP -> XOR .)
    UINT            reduce using rule 95 (ADD_OP -> XOR .)
    USIZE           reduce using rule 95 (ADD_OP -> XOR .)
    U64             reduce using rule 95 (ADD_OP -> XOR .)
    U32             reduce using rule 95 (ADD_OP -> XOR .)
    U16             reduce using rule 95 (ADD_OP -> XOR .)
    U8              reduce using rule 95 (ADD_OP -> XOR .)
    HEX_LIT         reduce using rule 95 (ADD_OP -> XOR .)
    OCTAL_LIT       reduce using rule 95 (ADD_OP -> XOR .)
    BINARY_LIT      reduce using rule 95 (ADD_OP -> XOR .)
    .               reduce using rule 95 (ADD_OP -> XOR .)


state 95

    (96) ADD_OP -> OR .
    AND             reduce using rule 96 (ADD_OP -> OR .)
    EXCLM           reduce using rule 96 (ADD_OP -> OR .)
    MINUS           reduce using rule 96 (ADD_OP -> OR .)
    (               reduce using rule 96 (ADD_OP -> OR .)
    IDENTIFIER      reduce using rule 96 (ADD_OP -> OR .)
    STRING          reduce using rule 96 (ADD_OP -> OR .)
    BOOL            reduce using rule 96 (ADD_OP -> OR .)
    RUNE            reduce using rule 96 (ADD_OP -> OR .)
    DECIMAL_LIT     reduce using rule 96 (ADD_OP -> OR .)
    FALSE           reduce using rule 96 (ADD_OP -> OR .)
    TRUE            reduce using rule 96 (ADD_OP -> OR .)
    RUNE_LIT        reduce using rule 96 (ADD_OP -> OR .)
    STRING_LIT      reduce using rule 96 (ADD_OP -> OR .)
    F32             reduce using rule 96 (ADD_OP -> OR .)
    F64             reduce using rule 96 (ADD_OP -> OR .)
    INT             reduce using rule 96 (ADD_OP -> OR .)
    ISIZE           reduce using rule 96 (ADD_OP -> OR .)
    I64             reduce using rule 96 (ADD_OP -> OR .)
    I32             reduce using rule 96 (ADD_OP -> OR .)
    I16             reduce using rule 96 (ADD_OP -> OR .)
    I8              reduce using rule 96 (ADD_OP -> OR .)
    UINT            reduce using rule 96 (ADD_OP -> OR .)
    USIZE           reduce using rule 96 (ADD_OP -> OR .)
    U64             reduce using rule 96 (ADD_OP -> OR .)
    U32             reduce using rule 96 (ADD_OP -> OR .)
    U16             reduce using rule 96 (ADD_OP -> OR .)
    U8              reduce using rule 96 (ADD_OP -> OR .)
    HEX_LIT         reduce using rule 96 (ADD_OP -> OR .)
    OCTAL_LIT       reduce using rule 96 (ADD_OP -> OR .)
    BINARY_LIT      reduce using rule 96 (ADD_OP -> OR .)
    .               reduce using rule 96 (ADD_OP -> OR .)


state 96

    (97) ADD_OP -> MINUS .
    AND             reduce using rule 97 (ADD_OP -> MINUS .)
    EXCLM           reduce using rule 97 (ADD_OP -> MINUS .)
    MINUS           reduce using rule 97 (ADD_OP -> MINUS .)
    (               reduce using rule 97 (ADD_OP -> MINUS .)
    IDENTIFIER      reduce using rule 97 (ADD_OP -> MINUS .)
    STRING          reduce using rule 97 (ADD_OP -> MINUS .)
    BOOL            reduce using rule 97 (ADD_OP -> MINUS .)
    RUNE            reduce using rule 97 (ADD_OP -> MINUS .)
    DECIMAL_LIT     reduce using rule 97 (ADD_OP -> MINUS .)
    FALSE           reduce using rule 97 (ADD_OP -> MINUS .)
    TRUE            reduce using rule 97 (ADD_OP -> MINUS .)
    RUNE_LIT        reduce using rule 97 (ADD_OP -> MINUS .)
    STRING_LIT      reduce using rule 97 (ADD_OP -> MINUS .)
    F32             reduce using rule 97 (ADD_OP -> MINUS .)
    F64             reduce using rule 97 (ADD_OP -> MINUS .)
    INT             reduce using rule 97 (ADD_OP -> MINUS .)
    ISIZE           reduce using rule 97 (ADD_OP -> MINUS .)
    I64             reduce using rule 97 (ADD_OP -> MINUS .)
    I32             reduce using rule 97 (ADD_OP -> MINUS .)
    I16             reduce using rule 97 (ADD_OP -> MINUS .)
    I8              reduce using rule 97 (ADD_OP -> MINUS .)
    UINT            reduce using rule 97 (ADD_OP -> MINUS .)
    USIZE           reduce using rule 97 (ADD_OP -> MINUS .)
    U64             reduce using rule 97 (ADD_OP -> MINUS .)
    U32             reduce using rule 97 (ADD_OP -> MINUS .)
    U16             reduce using rule 97 (ADD_OP -> MINUS .)
    U8              reduce using rule 97 (ADD_OP -> MINUS .)
    HEX_LIT         reduce using rule 97 (ADD_OP -> MINUS .)
    OCTAL_LIT       reduce using rule 97 (ADD_OP -> MINUS .)
    BINARY_LIT      reduce using rule 97 (ADD_OP -> MINUS .)
    .               reduce using rule 97 (ADD_OP -> MINUS .)


state 97

    (98) ADD_OP -> PLUS .
    AND             reduce using rule 98 (ADD_OP -> PLUS .)
    EXCLM           reduce using rule 98 (ADD_OP -> PLUS .)
    MINUS           reduce using rule 98 (ADD_OP -> PLUS .)
    (               reduce using rule 98 (ADD_OP -> PLUS .)
    IDENTIFIER      reduce using rule 98 (ADD_OP -> PLUS .)
    STRING          reduce using rule 98 (ADD_OP -> PLUS .)
    BOOL            reduce using rule 98 (ADD_OP -> PLUS .)
    RUNE            reduce using rule 98 (ADD_OP -> PLUS .)
    DECIMAL_LIT     reduce using rule 98 (ADD_OP -> PLUS .)
    FALSE           reduce using rule 98 (ADD_OP -> PLUS .)
    TRUE            reduce using rule 98 (ADD_OP -> PLUS .)
    RUNE_LIT        reduce using rule 98 (ADD_OP -> PLUS .)
    STRING_LIT      reduce using rule 98 (ADD_OP -> PLUS .)
    F32             reduce using rule 98 (ADD_OP -> PLUS .)
    F64             reduce using rule 98 (ADD_OP -> PLUS .)
    INT             reduce using rule 98 (ADD_OP -> PLUS .)
    ISIZE           reduce using rule 98 (ADD_OP -> PLUS .)
    I64             reduce using rule 98 (ADD_OP -> PLUS .)
    I32             reduce using rule 98 (ADD_OP -> PLUS .)
    I16             reduce using rule 98 (ADD_OP -> PLUS .)
    I8              reduce using rule 98 (ADD_OP -> PLUS .)
    UINT            reduce using rule 98 (ADD_OP -> PLUS .)
    USIZE           reduce using rule 98 (ADD_OP -> PLUS .)
    U64             reduce using rule 98 (ADD_OP -> PLUS .)
    U32             reduce using rule 98 (ADD_OP -> PLUS .)
    U16             reduce using rule 98 (ADD_OP -> PLUS .)
    U8              reduce using rule 98 (ADD_OP -> PLUS .)
    HEX_LIT         reduce using rule 98 (ADD_OP -> PLUS .)
    OCTAL_LIT       reduce using rule 98 (ADD_OP -> PLUS .)
    BINARY_LIT      reduce using rule 98 (ADD_OP -> PLUS .)
    .               reduce using rule 98 (ADD_OP -> PLUS .)


state 98

    (89) REL_OP -> GE .
    AND             reduce using rule 89 (REL_OP -> GE .)
    EXCLM           reduce using rule 89 (REL_OP -> GE .)
    MINUS           reduce using rule 89 (REL_OP -> GE .)
    (               reduce using rule 89 (REL_OP -> GE .)
    IDENTIFIER      reduce using rule 89 (REL_OP -> GE .)
    STRING          reduce using rule 89 (REL_OP -> GE .)
    BOOL            reduce using rule 89 (REL_OP -> GE .)
    RUNE            reduce using rule 89 (REL_OP -> GE .)
    DECIMAL_LIT     reduce using rule 89 (REL_OP -> GE .)
    FALSE           reduce using rule 89 (REL_OP -> GE .)
    TRUE            reduce using rule 89 (REL_OP -> GE .)
    RUNE_LIT        reduce using rule 89 (REL_OP -> GE .)
    STRING_LIT      reduce using rule 89 (REL_OP -> GE .)
    F32             reduce using rule 89 (REL_OP -> GE .)
    F64             reduce using rule 89 (REL_OP -> GE .)
    INT             reduce using rule 89 (REL_OP -> GE .)
    ISIZE           reduce using rule 89 (REL_OP -> GE .)
    I64             reduce using rule 89 (REL_OP -> GE .)
    I32             reduce using rule 89 (REL_OP -> GE .)
    I16             reduce using rule 89 (REL_OP -> GE .)
    I8              reduce using rule 89 (REL_OP -> GE .)
    UINT            reduce using rule 89 (REL_OP -> GE .)
    USIZE           reduce using rule 89 (REL_OP -> GE .)
    U64             reduce using rule 89 (REL_OP -> GE .)
    U32             reduce using rule 89 (REL_OP -> GE .)
    U16             reduce using rule 89 (REL_OP -> GE .)
    U8              reduce using rule 89 (REL_OP -> GE .)
    HEX_LIT         reduce using rule 89 (REL_OP -> GE .)
    OCTAL_LIT       reduce using rule 89 (REL_OP -> GE .)
    BINARY_LIT      reduce using rule 89 (REL_OP -> GE .)
    .               reduce using rule 89 (REL_OP -> GE .)


state 99

    (90) REL_OP -> GT .
    AND             reduce using rule 90 (REL_OP -> GT .)
    EXCLM           reduce using rule 90 (REL_OP -> GT .)
    MINUS           reduce using rule 90 (REL_OP -> GT .)
    (               reduce using rule 90 (REL_OP -> GT .)
    IDENTIFIER      reduce using rule 90 (REL_OP -> GT .)
    STRING          reduce using rule 90 (REL_OP -> GT .)
    BOOL            reduce using rule 90 (REL_OP -> GT .)
    RUNE            reduce using rule 90 (REL_OP -> GT .)
    DECIMAL_LIT     reduce using rule 90 (REL_OP -> GT .)
    FALSE           reduce using rule 90 (REL_OP -> GT .)
    TRUE            reduce using rule 90 (REL_OP -> GT .)
    RUNE_LIT        reduce using rule 90 (REL_OP -> GT .)
    STRING_LIT      reduce using rule 90 (REL_OP -> GT .)
    F32             reduce using rule 90 (REL_OP -> GT .)
    F64             reduce using rule 90 (REL_OP -> GT .)
    INT             reduce using rule 90 (REL_OP -> GT .)
    ISIZE           reduce using rule 90 (REL_OP -> GT .)
    I64             reduce using rule 90 (REL_OP -> GT .)
    I32             reduce using rule 90 (REL_OP -> GT .)
    I16             reduce using rule 90 (REL_OP -> GT .)
    I8              reduce using rule 90 (REL_OP -> GT .)
    UINT            reduce using rule 90 (REL_OP -> GT .)
    USIZE           reduce using rule 90 (REL_OP -> GT .)
    U64             reduce using rule 90 (REL_OP -> GT .)
    U32             reduce using rule 90 (REL_OP -> GT .)
    U16             reduce using rule 90 (REL_OP -> GT .)
    U8              reduce using rule 90 (REL_OP -> GT .)
    HEX_LIT         reduce using rule 90 (REL_OP -> GT .)
    OCTAL_LIT       reduce using rule 90 (REL_OP -> GT .)
    BINARY_LIT      reduce using rule 90 (REL_OP -> GT .)
    .               reduce using rule 90 (REL_OP -> GT .)


state 100

    (91) REL_OP -> LE .
    AND             reduce using rule 91 (REL_OP -> LE .)
    EXCLM           reduce using rule 91 (REL_OP -> LE .)
    MINUS           reduce using rule 91 (REL_OP -> LE .)
    (               reduce using rule 91 (REL_OP -> LE .)
    IDENTIFIER      reduce using rule 91 (REL_OP -> LE .)
    STRING          reduce using rule 91 (REL_OP -> LE .)
    BOOL            reduce using rule 91 (REL_OP -> LE .)
    RUNE            reduce using rule 91 (REL_OP -> LE .)
    DECIMAL_LIT     reduce using rule 91 (REL_OP -> LE .)
    FALSE           reduce using rule 91 (REL_OP -> LE .)
    TRUE            reduce using rule 91 (REL_OP -> LE .)
    RUNE_LIT        reduce using rule 91 (REL_OP -> LE .)
    STRING_LIT      reduce using rule 91 (REL_OP -> LE .)
    F32             reduce using rule 91 (REL_OP -> LE .)
    F64             reduce using rule 91 (REL_OP -> LE .)
    INT             reduce using rule 91 (REL_OP -> LE .)
    ISIZE           reduce using rule 91 (REL_OP -> LE .)
    I64             reduce using rule 91 (REL_OP -> LE .)
    I32             reduce using rule 91 (REL_OP -> LE .)
    I16             reduce using rule 91 (REL_OP -> LE .)
    I8              reduce using rule 91 (REL_OP -> LE .)
    UINT            reduce using rule 91 (REL_OP -> LE .)
    USIZE           reduce using rule 91 (REL_OP -> LE .)
    U64             reduce using rule 91 (REL_OP -> LE .)
    U32             reduce using rule 91 (REL_OP -> LE .)
    U16             reduce using rule 91 (REL_OP -> LE .)
    U8              reduce using rule 91 (REL_OP -> LE .)
    HEX_LIT         reduce using rule 91 (REL_OP -> LE .)
    OCTAL_LIT       reduce using rule 91 (REL_OP -> LE .)
    BINARY_LIT      reduce using rule 91 (REL_OP -> LE .)
    .               reduce using rule 91 (REL_OP -> LE .)


state 101

    (92) REL_OP -> LT .
    AND             reduce using rule 92 (REL_OP -> LT .)
    EXCLM           reduce using rule 92 (REL_OP -> LT .)
    MINUS           reduce using rule 92 (REL_OP -> LT .)
    (               reduce using rule 92 (REL_OP -> LT .)
    IDENTIFIER      reduce using rule 92 (REL_OP -> LT .)
    STRING          reduce using rule 92 (REL_OP -> LT .)
    BOOL            reduce using rule 92 (REL_OP -> LT .)
    RUNE            reduce using rule 92 (REL_OP -> LT .)
    DECIMAL_LIT     reduce using rule 92 (REL_OP -> LT .)
    FALSE           reduce using rule 92 (REL_OP -> LT .)
    TRUE            reduce using rule 92 (REL_OP -> LT .)
    RUNE_LIT        reduce using rule 92 (REL_OP -> LT .)
    STRING_LIT      reduce using rule 92 (REL_OP -> LT .)
    F32             reduce using rule 92 (REL_OP -> LT .)
    F64             reduce using rule 92 (REL_OP -> LT .)
    INT             reduce using rule 92 (REL_OP -> LT .)
    ISIZE           reduce using rule 92 (REL_OP -> LT .)
    I64             reduce using rule 92 (REL_OP -> LT .)
    I32             reduce using rule 92 (REL_OP -> LT .)
    I16             reduce using rule 92 (REL_OP -> LT .)
    I8              reduce using rule 92 (REL_OP -> LT .)
    UINT            reduce using rule 92 (REL_OP -> LT .)
    USIZE           reduce using rule 92 (REL_OP -> LT .)
    U64             reduce using rule 92 (REL_OP -> LT .)
    U32             reduce using rule 92 (REL_OP -> LT .)
    U16             reduce using rule 92 (REL_OP -> LT .)
    U8              reduce using rule 92 (REL_OP -> LT .)
    HEX_LIT         reduce using rule 92 (REL_OP -> LT .)
    OCTAL_LIT       reduce using rule 92 (REL_OP -> LT .)
    BINARY_LIT      reduce using rule 92 (REL_OP -> LT .)
    .               reduce using rule 92 (REL_OP -> LT .)


state 102

    (93) REL_OP -> NE .
    AND             reduce using rule 93 (REL_OP -> NE .)
    EXCLM           reduce using rule 93 (REL_OP -> NE .)
    MINUS           reduce using rule 93 (REL_OP -> NE .)
    (               reduce using rule 93 (REL_OP -> NE .)
    IDENTIFIER      reduce using rule 93 (REL_OP -> NE .)
    STRING          reduce using rule 93 (REL_OP -> NE .)
    BOOL            reduce using rule 93 (REL_OP -> NE .)
    RUNE            reduce using rule 93 (REL_OP -> NE .)
    DECIMAL_LIT     reduce using rule 93 (REL_OP -> NE .)
    FALSE           reduce using rule 93 (REL_OP -> NE .)
    TRUE            reduce using rule 93 (REL_OP -> NE .)
    RUNE_LIT        reduce using rule 93 (REL_OP -> NE .)
    STRING_LIT      reduce using rule 93 (REL_OP -> NE .)
    F32             reduce using rule 93 (REL_OP -> NE .)
    F64             reduce using rule 93 (REL_OP -> NE .)
    INT             reduce using rule 93 (REL_OP -> NE .)
    ISIZE           reduce using rule 93 (REL_OP -> NE .)
    I64             reduce using rule 93 (REL_OP -> NE .)
    I32             reduce using rule 93 (REL_OP -> NE .)
    I16             reduce using rule 93 (REL_OP -> NE .)
    I8              reduce using rule 93 (REL_OP -> NE .)
    UINT            reduce using rule 93 (REL_OP -> NE .)
    USIZE           reduce using rule 93 (REL_OP -> NE .)
    U64             reduce using rule 93 (REL_OP -> NE .)
    U32             reduce using rule 93 (REL_OP -> NE .)
    U16             reduce using rule 93 (REL_OP -> NE .)
    U8              reduce using rule 93 (REL_OP -> NE .)
    HEX_LIT         reduce using rule 93 (REL_OP -> NE .)
    OCTAL_LIT       reduce using rule 93 (REL_OP -> NE .)
    BINARY_LIT      reduce using rule 93 (REL_OP -> NE .)
    .               reduce using rule 93 (REL_OP -> NE .)


state 103

    (94) REL_OP -> EQ .
    AND             reduce using rule 94 (REL_OP -> EQ .)
    EXCLM           reduce using rule 94 (REL_OP -> EQ .)
    MINUS           reduce using rule 94 (REL_OP -> EQ .)
    (               reduce using rule 94 (REL_OP -> EQ .)
    IDENTIFIER      reduce using rule 94 (REL_OP -> EQ .)
    STRING          reduce using rule 94 (REL_OP -> EQ .)
    BOOL            reduce using rule 94 (REL_OP -> EQ .)
    RUNE            reduce using rule 94 (REL_OP -> EQ .)
    DECIMAL_LIT     reduce using rule 94 (REL_OP -> EQ .)
    FALSE           reduce using rule 94 (REL_OP -> EQ .)
    TRUE            reduce using rule 94 (REL_OP -> EQ .)
    RUNE_LIT        reduce using rule 94 (REL_OP -> EQ .)
    STRING_LIT      reduce using rule 94 (REL_OP -> EQ .)
    F32             reduce using rule 94 (REL_OP -> EQ .)
    F64             reduce using rule 94 (REL_OP -> EQ .)
    INT             reduce using rule 94 (REL_OP -> EQ .)
    ISIZE           reduce using rule 94 (REL_OP -> EQ .)
    I64             reduce using rule 94 (REL_OP -> EQ .)
    I32             reduce using rule 94 (REL_OP -> EQ .)
    I16             reduce using rule 94 (REL_OP -> EQ .)
    I8              reduce using rule 94 (REL_OP -> EQ .)
    UINT            reduce using rule 94 (REL_OP -> EQ .)
    USIZE           reduce using rule 94 (REL_OP -> EQ .)
    U64             reduce using rule 94 (REL_OP -> EQ .)
    U32             reduce using rule 94 (REL_OP -> EQ .)
    U16             reduce using rule 94 (REL_OP -> EQ .)
    U8              reduce using rule 94 (REL_OP -> EQ .)
    HEX_LIT         reduce using rule 94 (REL_OP -> EQ .)
    OCTAL_LIT       reduce using rule 94 (REL_OP -> EQ .)
    BINARY_LIT      reduce using rule 94 (REL_OP -> EQ .)
    .               reduce using rule 94 (REL_OP -> EQ .)


state 104

    (22) unaryExpr -> UNARY_OP unaryExpr .
    LOGIC_AND       reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    LOGIC_OR        reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    SHR             reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    SHL             reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    AND             reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    MOD             reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    DIV             reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    STAR            reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    XOR             reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    OR              reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    MINUS           reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    PLUS            reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    GE              reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    GT              reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    LE              reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    LT              reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    NE              reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    EQ              reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    NEWL            reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    ;               reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    )               reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)
    ,               reduce using rule 22 (unaryExpr -> UNARY_OP unaryExpr .)


state 105

    (30) operandName -> IDENTIFIER .
    (35) qualifiedIdent -> IDENTIFIER . . IDENTIFIER
    LOGIC_AND       reduce using rule 30 (operandName -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 30 (operandName -> IDENTIFIER .)
    SHR             reduce using rule 30 (operandName -> IDENTIFIER .)
    SHL             reduce using rule 30 (operandName -> IDENTIFIER .)
    AND             reduce using rule 30 (operandName -> IDENTIFIER .)
    MOD             reduce using rule 30 (operandName -> IDENTIFIER .)
    DIV             reduce using rule 30 (operandName -> IDENTIFIER .)
    STAR            reduce using rule 30 (operandName -> IDENTIFIER .)
    XOR             reduce using rule 30 (operandName -> IDENTIFIER .)
    OR              reduce using rule 30 (operandName -> IDENTIFIER .)
    MINUS           reduce using rule 30 (operandName -> IDENTIFIER .)
    PLUS            reduce using rule 30 (operandName -> IDENTIFIER .)
    GE              reduce using rule 30 (operandName -> IDENTIFIER .)
    GT              reduce using rule 30 (operandName -> IDENTIFIER .)
    LE              reduce using rule 30 (operandName -> IDENTIFIER .)
    LT              reduce using rule 30 (operandName -> IDENTIFIER .)
    NE              reduce using rule 30 (operandName -> IDENTIFIER .)
    EQ              reduce using rule 30 (operandName -> IDENTIFIER .)
    NEWL            reduce using rule 30 (operandName -> IDENTIFIER .)
    ;               reduce using rule 30 (operandName -> IDENTIFIER .)
    )               reduce using rule 30 (operandName -> IDENTIFIER .)
    ,               reduce using rule 30 (operandName -> IDENTIFIER .)
    .               shift and go to state 81


state 106

    (32) conversion -> type_ ( . expression )
    (20) expression -> . expression BINARY_OP unaryExpr
    (21) expression -> . unaryExpr
    (22) unaryExpr -> . UNARY_OP unaryExpr
    (23) unaryExpr -> . primaryExpr
    (105) UNARY_OP -> . AND
    (106) UNARY_OP -> . EXCLM
    (107) UNARY_OP -> . MINUS
    (24) primaryExpr -> . conversion
    (25) primaryExpr -> . operand
    (32) conversion -> . type_ ( expression )
    (26) operand -> . ( expression )
    (27) operand -> . operandName
    (28) operand -> . literal
    (33) type_ -> . qualifiedIdent
    (34) type_ -> . typeName
    (29) operandName -> . qualifiedIdent
    (30) operandName -> . IDENTIFIER
    (31) literal -> . basicLit
    (35) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (36) typeName -> . numericType
    (37) typeName -> . STRING
    (38) typeName -> . BOOL
    (39) typeName -> . RUNE
    (54) basicLit -> . INT_LIT
    (55) basicLit -> . FLOAT_LIT
    (56) basicLit -> . DECIMAL_LIT EXPONENT
    (57) basicLit -> . FLOAT_LIT EXPONENT
    (58) basicLit -> . FALSE
    (59) basicLit -> . TRUE
    (60) basicLit -> . RUNE_LIT
    (61) basicLit -> . STRING_LIT
    (40) numericType -> . F32
    (41) numericType -> . F64
    (42) numericType -> . INT
    (43) numericType -> . ISIZE
    (44) numericType -> . I64
    (45) numericType -> . I32
    (46) numericType -> . I16
    (47) numericType -> . I8
    (48) numericType -> . UINT
    (49) numericType -> . USIZE
    (50) numericType -> . U64
    (51) numericType -> . U32
    (52) numericType -> . U16
    (53) numericType -> . U8
    (65) INT_LIT -> . HEX_LIT
    (66) INT_LIT -> . OCTAL_LIT
    (67) INT_LIT -> . BINARY_LIT
    (68) INT_LIT -> . DECIMAL_LIT
    (62) FLOAT_LIT -> . . DECIMAL_LIT
    (63) FLOAT_LIT -> . DECIMAL_LIT .
    (64) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    IDENTIFIER      shift and go to state 105
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    type_                          shift and go to state 26
    expression                     shift and go to state 122
    unaryExpr                      shift and go to state 18
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 107

    (26) operand -> ( expression . )
    (20) expression -> expression . BINARY_OP unaryExpr
    (84) BINARY_OP -> . MUL_OP
    (85) BINARY_OP -> . ADD_OP
    (86) BINARY_OP -> . REL_OP
    (87) BINARY_OP -> . LOGIC_AND
    (88) BINARY_OP -> . LOGIC_OR
    (99) MUL_OP -> . SHR
    (100) MUL_OP -> . SHL
    (101) MUL_OP -> . AND
    (102) MUL_OP -> . MOD
    (103) MUL_OP -> . DIV
    (104) MUL_OP -> . STAR
    (95) ADD_OP -> . XOR
    (96) ADD_OP -> . OR
    (97) ADD_OP -> . MINUS
    (98) ADD_OP -> . PLUS
    (89) REL_OP -> . GE
    (90) REL_OP -> . GT
    (91) REL_OP -> . LE
    (92) REL_OP -> . LT
    (93) REL_OP -> . NE
    (94) REL_OP -> . EQ
    )               shift and go to state 123
    LOGIC_AND       shift and go to state 86
    LOGIC_OR        shift and go to state 87
    SHR             shift and go to state 88
    SHL             shift and go to state 89
    AND             shift and go to state 90
    MOD             shift and go to state 91
    DIV             shift and go to state 92
    STAR            shift and go to state 93
    XOR             shift and go to state 94
    OR              shift and go to state 95
    MINUS           shift and go to state 96
    PLUS            shift and go to state 97
    GE              shift and go to state 98
    GT              shift and go to state 99
    LE              shift and go to state 100
    LT              shift and go to state 101
    NE              shift and go to state 102
    EQ              shift and go to state 103

    BINARY_OP                      shift and go to state 82
    MUL_OP                         shift and go to state 83
    ADD_OP                         shift and go to state 84
    REL_OP                         shift and go to state 85

state 108

    (62) FLOAT_LIT -> . DECIMAL_LIT .
    EXPONENT        reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    SHR             reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    SHL             reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    AND             reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    MOD             reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    DIV             reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    STAR            reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    XOR             reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    OR              reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    MINUS           reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    PLUS            reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    GE              reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    GT              reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    LE              reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    LT              reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    NE              reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    EQ              reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    NEWL            reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    ;               reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    )               reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)
    ,               reduce using rule 62 (FLOAT_LIT -> . DECIMAL_LIT .)


state 109

    (57) basicLit -> FLOAT_LIT EXPONENT .
    LOGIC_AND       reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    LOGIC_OR        reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    SHR             reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    SHL             reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    AND             reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    MOD             reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    DIV             reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    STAR            reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    XOR             reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    OR              reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    MINUS           reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    PLUS            reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    GE              reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    GT              reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    LE              reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    LT              reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    NE              reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    EQ              reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    NEWL            reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    ;               reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    )               reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)
    ,               reduce using rule 57 (basicLit -> FLOAT_LIT EXPONENT .)


state 110

    (56) basicLit -> DECIMAL_LIT EXPONENT .
    LOGIC_AND       reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    LOGIC_OR        reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    SHR             reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    SHL             reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    AND             reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    MOD             reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    DIV             reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    STAR            reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    XOR             reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    OR              reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    MINUS           reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    PLUS            reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    GE              reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    GT              reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    LE              reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    LT              reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    NE              reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    EQ              reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    NEWL            reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    ;               reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    )               reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)
    ,               reduce using rule 56 (basicLit -> DECIMAL_LIT EXPONENT .)


state 111

    (63) FLOAT_LIT -> DECIMAL_LIT . .
    (64) FLOAT_LIT -> DECIMAL_LIT . . DECIMAL_LIT
    EXPONENT        reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    LOGIC_AND       reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    LOGIC_OR        reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    SHR             reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    SHL             reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    AND             reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    MOD             reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    DIV             reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    STAR            reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    XOR             reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    OR              reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    MINUS           reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    PLUS            reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    GE              reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    GT              reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    LE              reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    LT              reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    NE              reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    EQ              reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    NEWL            reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    ;               reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    )               reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    ,               reduce using rule 63 (FLOAT_LIT -> DECIMAL_LIT . .)
    DECIMAL_LIT     shift and go to state 124


state 112

    (69) eos -> eos NEWL .
    NEWL            reduce using rule 69 (eos -> eos NEWL .)
    ;               reduce using rule 69 (eos -> eos NEWL .)
    IDENTIFIER      reduce using rule 69 (eos -> eos NEWL .)
    AND             reduce using rule 69 (eos -> eos NEWL .)
    EXCLM           reduce using rule 69 (eos -> eos NEWL .)
    MINUS           reduce using rule 69 (eos -> eos NEWL .)
    (               reduce using rule 69 (eos -> eos NEWL .)
    STRING          reduce using rule 69 (eos -> eos NEWL .)
    BOOL            reduce using rule 69 (eos -> eos NEWL .)
    RUNE            reduce using rule 69 (eos -> eos NEWL .)
    DECIMAL_LIT     reduce using rule 69 (eos -> eos NEWL .)
    FALSE           reduce using rule 69 (eos -> eos NEWL .)
    TRUE            reduce using rule 69 (eos -> eos NEWL .)
    RUNE_LIT        reduce using rule 69 (eos -> eos NEWL .)
    STRING_LIT      reduce using rule 69 (eos -> eos NEWL .)
    F32             reduce using rule 69 (eos -> eos NEWL .)
    F64             reduce using rule 69 (eos -> eos NEWL .)
    INT             reduce using rule 69 (eos -> eos NEWL .)
    ISIZE           reduce using rule 69 (eos -> eos NEWL .)
    I64             reduce using rule 69 (eos -> eos NEWL .)
    I32             reduce using rule 69 (eos -> eos NEWL .)
    I16             reduce using rule 69 (eos -> eos NEWL .)
    I8              reduce using rule 69 (eos -> eos NEWL .)
    UINT            reduce using rule 69 (eos -> eos NEWL .)
    USIZE           reduce using rule 69 (eos -> eos NEWL .)
    U64             reduce using rule 69 (eos -> eos NEWL .)
    U32             reduce using rule 69 (eos -> eos NEWL .)
    U16             reduce using rule 69 (eos -> eos NEWL .)
    U8              reduce using rule 69 (eos -> eos NEWL .)
    HEX_LIT         reduce using rule 69 (eos -> eos NEWL .)
    OCTAL_LIT       reduce using rule 69 (eos -> eos NEWL .)
    BINARY_LIT      reduce using rule 69 (eos -> eos NEWL .)
    .               reduce using rule 69 (eos -> eos NEWL .)
    $end            reduce using rule 69 (eos -> eos NEWL .)


state 113

    (71) eos -> eos ; .
    NEWL            reduce using rule 71 (eos -> eos ; .)
    ;               reduce using rule 71 (eos -> eos ; .)
    IDENTIFIER      reduce using rule 71 (eos -> eos ; .)
    AND             reduce using rule 71 (eos -> eos ; .)
    EXCLM           reduce using rule 71 (eos -> eos ; .)
    MINUS           reduce using rule 71 (eos -> eos ; .)
    (               reduce using rule 71 (eos -> eos ; .)
    STRING          reduce using rule 71 (eos -> eos ; .)
    BOOL            reduce using rule 71 (eos -> eos ; .)
    RUNE            reduce using rule 71 (eos -> eos ; .)
    DECIMAL_LIT     reduce using rule 71 (eos -> eos ; .)
    FALSE           reduce using rule 71 (eos -> eos ; .)
    TRUE            reduce using rule 71 (eos -> eos ; .)
    RUNE_LIT        reduce using rule 71 (eos -> eos ; .)
    STRING_LIT      reduce using rule 71 (eos -> eos ; .)
    F32             reduce using rule 71 (eos -> eos ; .)
    F64             reduce using rule 71 (eos -> eos ; .)
    INT             reduce using rule 71 (eos -> eos ; .)
    ISIZE           reduce using rule 71 (eos -> eos ; .)
    I64             reduce using rule 71 (eos -> eos ; .)
    I32             reduce using rule 71 (eos -> eos ; .)
    I16             reduce using rule 71 (eos -> eos ; .)
    I8              reduce using rule 71 (eos -> eos ; .)
    UINT            reduce using rule 71 (eos -> eos ; .)
    USIZE           reduce using rule 71 (eos -> eos ; .)
    U64             reduce using rule 71 (eos -> eos ; .)
    U32             reduce using rule 71 (eos -> eos ; .)
    U16             reduce using rule 71 (eos -> eos ; .)
    U8              reduce using rule 71 (eos -> eos ; .)
    HEX_LIT         reduce using rule 71 (eos -> eos ; .)
    OCTAL_LIT       reduce using rule 71 (eos -> eos ; .)
    BINARY_LIT      reduce using rule 71 (eos -> eos ; .)
    .               reduce using rule 71 (eos -> eos ; .)
    $end            reduce using rule 71 (eos -> eos ; .)


state 114

    (8) varDecl -> identifierList DECL_ASGN expressionList .
    (11) expressionList -> expressionList . , expression
    NEWL            reduce using rule 8 (varDecl -> identifierList DECL_ASGN expressionList .)
    ;               reduce using rule 8 (varDecl -> identifierList DECL_ASGN expressionList .)
    ,               shift and go to state 125


state 115

    (12) expressionList -> expression .
    (20) expression -> expression . BINARY_OP unaryExpr
    (84) BINARY_OP -> . MUL_OP
    (85) BINARY_OP -> . ADD_OP
    (86) BINARY_OP -> . REL_OP
    (87) BINARY_OP -> . LOGIC_AND
    (88) BINARY_OP -> . LOGIC_OR
    (99) MUL_OP -> . SHR
    (100) MUL_OP -> . SHL
    (101) MUL_OP -> . AND
    (102) MUL_OP -> . MOD
    (103) MUL_OP -> . DIV
    (104) MUL_OP -> . STAR
    (95) ADD_OP -> . XOR
    (96) ADD_OP -> . OR
    (97) ADD_OP -> . MINUS
    (98) ADD_OP -> . PLUS
    (89) REL_OP -> . GE
    (90) REL_OP -> . GT
    (91) REL_OP -> . LE
    (92) REL_OP -> . LT
    (93) REL_OP -> . NE
    (94) REL_OP -> . EQ
    ,               reduce using rule 12 (expressionList -> expression .)
    NEWL            reduce using rule 12 (expressionList -> expression .)
    ;               reduce using rule 12 (expressionList -> expression .)
    LOGIC_AND       shift and go to state 86
    LOGIC_OR        shift and go to state 87
    SHR             shift and go to state 88
    SHL             shift and go to state 89
    AND             shift and go to state 90
    MOD             shift and go to state 91
    DIV             shift and go to state 92
    STAR            shift and go to state 93
    XOR             shift and go to state 94
    OR              shift and go to state 95
    MINUS           shift and go to state 96
    PLUS            shift and go to state 97
    GE              shift and go to state 98
    GT              shift and go to state 99
    LE              shift and go to state 100
    LT              shift and go to state 101
    NE              shift and go to state 102
    EQ              shift and go to state 103

    BINARY_OP                      shift and go to state 82
    MUL_OP                         shift and go to state 83
    ADD_OP                         shift and go to state 84
    REL_OP                         shift and go to state 85

state 116

    (9) identifierList -> identifierList , IDENTIFIER .
    DECL_ASGN       reduce using rule 9 (identifierList -> identifierList , IDENTIFIER .)
    ,               reduce using rule 9 (identifierList -> identifierList , IDENTIFIER .)
    SHR_ASGN        reduce using rule 9 (identifierList -> identifierList , IDENTIFIER .)
    SHL_ASGN        reduce using rule 9 (identifierList -> identifierList , IDENTIFIER .)
    MOD_ASGN        reduce using rule 9 (identifierList -> identifierList , IDENTIFIER .)
    DIV_ASGN        reduce using rule 9 (identifierList -> identifierList , IDENTIFIER .)
    OR_ASGN         reduce using rule 9 (identifierList -> identifierList , IDENTIFIER .)
    AND_ASGN        reduce using rule 9 (identifierList -> identifierList , IDENTIFIER .)
    STAR_ASGN       reduce using rule 9 (identifierList -> identifierList , IDENTIFIER .)
    XOR_ASGN        reduce using rule 9 (identifierList -> identifierList , IDENTIFIER .)
    MINUS_ASGN      reduce using rule 9 (identifierList -> identifierList , IDENTIFIER .)
    PLUS_ASGN       reduce using rule 9 (identifierList -> identifierList , IDENTIFIER .)
    ASSIGN          reduce using rule 9 (identifierList -> identifierList , IDENTIFIER .)


state 117

    (13) statementList -> statementList eos statement .
    NEWL            reduce using rule 13 (statementList -> statementList eos statement .)
    ;               reduce using rule 13 (statementList -> statementList eos statement .)


state 118

    (19) assignment -> identifierList . assign_op expressionList
    (9) identifierList -> identifierList . , IDENTIFIER
    (73) assign_op -> . SHR_ASGN
    (74) assign_op -> . SHL_ASGN
    (75) assign_op -> . MOD_ASGN
    (76) assign_op -> . DIV_ASGN
    (77) assign_op -> . OR_ASGN
    (78) assign_op -> . AND_ASGN
    (79) assign_op -> . STAR_ASGN
    (80) assign_op -> . XOR_ASGN
    (81) assign_op -> . MINUS_ASGN
    (82) assign_op -> . PLUS_ASGN
    (83) assign_op -> . ASSIGN
    ,               shift and go to state 66
    SHR_ASGN        shift and go to state 70
    SHL_ASGN        shift and go to state 71
    MOD_ASGN        shift and go to state 72
    DIV_ASGN        shift and go to state 73
    OR_ASGN         shift and go to state 74
    AND_ASGN        shift and go to state 75
    STAR_ASGN       shift and go to state 76
    XOR_ASGN        shift and go to state 77
    MINUS_ASGN      shift and go to state 78
    PLUS_ASGN       shift and go to state 79
    ASSIGN          shift and go to state 80

    assign_op                      shift and go to state 69

state 119

    (19) assignment -> identifierList assign_op expressionList .
    (11) expressionList -> expressionList . , expression
    NEWL            reduce using rule 19 (assignment -> identifierList assign_op expressionList .)
    ;               reduce using rule 19 (assignment -> identifierList assign_op expressionList .)
    ,               shift and go to state 125


state 120

    (35) qualifiedIdent -> IDENTIFIER . IDENTIFIER .
    (               reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    LOGIC_AND       reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    LOGIC_OR        reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    SHR             reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    SHL             reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    AND             reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    MOD             reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    DIV             reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    STAR            reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    XOR             reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    OR              reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    MINUS           reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    PLUS            reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    GE              reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    GT              reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    LE              reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    LT              reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    NE              reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    EQ              reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    NEWL            reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    ;               reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    )               reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)
    ,               reduce using rule 35 (qualifiedIdent -> IDENTIFIER . IDENTIFIER .)


state 121

    (20) expression -> expression BINARY_OP unaryExpr .
    LOGIC_AND       reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    LOGIC_OR        reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    SHR             reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    SHL             reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    AND             reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    MOD             reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    DIV             reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    STAR            reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    XOR             reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    OR              reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    MINUS           reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    PLUS            reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    GE              reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    GT              reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    LE              reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    LT              reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    NE              reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    EQ              reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    NEWL            reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    ;               reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    )               reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)
    ,               reduce using rule 20 (expression -> expression BINARY_OP unaryExpr .)


state 122

    (32) conversion -> type_ ( expression . )
    (20) expression -> expression . BINARY_OP unaryExpr
    (84) BINARY_OP -> . MUL_OP
    (85) BINARY_OP -> . ADD_OP
    (86) BINARY_OP -> . REL_OP
    (87) BINARY_OP -> . LOGIC_AND
    (88) BINARY_OP -> . LOGIC_OR
    (99) MUL_OP -> . SHR
    (100) MUL_OP -> . SHL
    (101) MUL_OP -> . AND
    (102) MUL_OP -> . MOD
    (103) MUL_OP -> . DIV
    (104) MUL_OP -> . STAR
    (95) ADD_OP -> . XOR
    (96) ADD_OP -> . OR
    (97) ADD_OP -> . MINUS
    (98) ADD_OP -> . PLUS
    (89) REL_OP -> . GE
    (90) REL_OP -> . GT
    (91) REL_OP -> . LE
    (92) REL_OP -> . LT
    (93) REL_OP -> . NE
    (94) REL_OP -> . EQ
    )               shift and go to state 126
    LOGIC_AND       shift and go to state 86
    LOGIC_OR        shift and go to state 87
    SHR             shift and go to state 88
    SHL             shift and go to state 89
    AND             shift and go to state 90
    MOD             shift and go to state 91
    DIV             shift and go to state 92
    STAR            shift and go to state 93
    XOR             shift and go to state 94
    OR              shift and go to state 95
    MINUS           shift and go to state 96
    PLUS            shift and go to state 97
    GE              shift and go to state 98
    GT              shift and go to state 99
    LE              shift and go to state 100
    LT              shift and go to state 101
    NE              shift and go to state 102
    EQ              shift and go to state 103

    BINARY_OP                      shift and go to state 82
    MUL_OP                         shift and go to state 83
    ADD_OP                         shift and go to state 84
    REL_OP                         shift and go to state 85

state 123

    (26) operand -> ( expression ) .
    LOGIC_AND       reduce using rule 26 (operand -> ( expression ) .)
    LOGIC_OR        reduce using rule 26 (operand -> ( expression ) .)
    SHR             reduce using rule 26 (operand -> ( expression ) .)
    SHL             reduce using rule 26 (operand -> ( expression ) .)
    AND             reduce using rule 26 (operand -> ( expression ) .)
    MOD             reduce using rule 26 (operand -> ( expression ) .)
    DIV             reduce using rule 26 (operand -> ( expression ) .)
    STAR            reduce using rule 26 (operand -> ( expression ) .)
    XOR             reduce using rule 26 (operand -> ( expression ) .)
    OR              reduce using rule 26 (operand -> ( expression ) .)
    MINUS           reduce using rule 26 (operand -> ( expression ) .)
    PLUS            reduce using rule 26 (operand -> ( expression ) .)
    GE              reduce using rule 26 (operand -> ( expression ) .)
    GT              reduce using rule 26 (operand -> ( expression ) .)
    LE              reduce using rule 26 (operand -> ( expression ) .)
    LT              reduce using rule 26 (operand -> ( expression ) .)
    NE              reduce using rule 26 (operand -> ( expression ) .)
    EQ              reduce using rule 26 (operand -> ( expression ) .)
    NEWL            reduce using rule 26 (operand -> ( expression ) .)
    ;               reduce using rule 26 (operand -> ( expression ) .)
    )               reduce using rule 26 (operand -> ( expression ) .)
    ,               reduce using rule 26 (operand -> ( expression ) .)


state 124

    (64) FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .
    EXPONENT        reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    SHR             reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    SHL             reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    AND             reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    MOD             reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    DIV             reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    STAR            reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    XOR             reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    OR              reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    MINUS           reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    PLUS            reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    GE              reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    GT              reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LE              reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LT              reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    NE              reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    EQ              reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    NEWL            reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    ;               reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    )               reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    ,               reduce using rule 64 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)


state 125

    (11) expressionList -> expressionList , . expression
    (20) expression -> . expression BINARY_OP unaryExpr
    (21) expression -> . unaryExpr
    (22) unaryExpr -> . UNARY_OP unaryExpr
    (23) unaryExpr -> . primaryExpr
    (105) UNARY_OP -> . AND
    (106) UNARY_OP -> . EXCLM
    (107) UNARY_OP -> . MINUS
    (24) primaryExpr -> . conversion
    (25) primaryExpr -> . operand
    (32) conversion -> . type_ ( expression )
    (26) operand -> . ( expression )
    (27) operand -> . operandName
    (28) operand -> . literal
    (33) type_ -> . qualifiedIdent
    (34) type_ -> . typeName
    (29) operandName -> . qualifiedIdent
    (30) operandName -> . IDENTIFIER
    (31) literal -> . basicLit
    (35) qualifiedIdent -> . IDENTIFIER . IDENTIFIER
    (36) typeName -> . numericType
    (37) typeName -> . STRING
    (38) typeName -> . BOOL
    (39) typeName -> . RUNE
    (54) basicLit -> . INT_LIT
    (55) basicLit -> . FLOAT_LIT
    (56) basicLit -> . DECIMAL_LIT EXPONENT
    (57) basicLit -> . FLOAT_LIT EXPONENT
    (58) basicLit -> . FALSE
    (59) basicLit -> . TRUE
    (60) basicLit -> . RUNE_LIT
    (61) basicLit -> . STRING_LIT
    (40) numericType -> . F32
    (41) numericType -> . F64
    (42) numericType -> . INT
    (43) numericType -> . ISIZE
    (44) numericType -> . I64
    (45) numericType -> . I32
    (46) numericType -> . I16
    (47) numericType -> . I8
    (48) numericType -> . UINT
    (49) numericType -> . USIZE
    (50) numericType -> . U64
    (51) numericType -> . U32
    (52) numericType -> . U16
    (53) numericType -> . U8
    (65) INT_LIT -> . HEX_LIT
    (66) INT_LIT -> . OCTAL_LIT
    (67) INT_LIT -> . BINARY_LIT
    (68) INT_LIT -> . DECIMAL_LIT
    (62) FLOAT_LIT -> . . DECIMAL_LIT
    (63) FLOAT_LIT -> . DECIMAL_LIT .
    (64) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 21
    EXCLM           shift and go to state 22
    MINUS           shift and go to state 23
    (               shift and go to state 27
    IDENTIFIER      shift and go to state 105
    STRING          shift and go to state 35
    BOOL            shift and go to state 36
    RUNE            shift and go to state 37
    DECIMAL_LIT     shift and go to state 40
    FALSE           shift and go to state 41
    TRUE            shift and go to state 42
    RUNE_LIT        shift and go to state 43
    STRING_LIT      shift and go to state 44
    F32             shift and go to state 45
    F64             shift and go to state 46
    INT             shift and go to state 47
    ISIZE           shift and go to state 48
    I64             shift and go to state 49
    I32             shift and go to state 50
    I16             shift and go to state 51
    I8              shift and go to state 52
    UINT            shift and go to state 53
    USIZE           shift and go to state 54
    U64             shift and go to state 55
    U32             shift and go to state 56
    U16             shift and go to state 57
    U8              shift and go to state 58
    HEX_LIT         shift and go to state 59
    OCTAL_LIT       shift and go to state 60
    BINARY_LIT      shift and go to state 61
    .               shift and go to state 33

    expression                     shift and go to state 127
    unaryExpr                      shift and go to state 18
    UNARY_OP                       shift and go to state 19
    primaryExpr                    shift and go to state 20
    conversion                     shift and go to state 24
    operand                        shift and go to state 25
    type_                          shift and go to state 26
    operandName                    shift and go to state 28
    literal                        shift and go to state 29
    qualifiedIdent                 shift and go to state 30
    typeName                       shift and go to state 31
    basicLit                       shift and go to state 32
    numericType                    shift and go to state 34
    INT_LIT                        shift and go to state 38
    FLOAT_LIT                      shift and go to state 39

state 126

    (32) conversion -> type_ ( expression ) .
    LOGIC_AND       reduce using rule 32 (conversion -> type_ ( expression ) .)
    LOGIC_OR        reduce using rule 32 (conversion -> type_ ( expression ) .)
    SHR             reduce using rule 32 (conversion -> type_ ( expression ) .)
    SHL             reduce using rule 32 (conversion -> type_ ( expression ) .)
    AND             reduce using rule 32 (conversion -> type_ ( expression ) .)
    MOD             reduce using rule 32 (conversion -> type_ ( expression ) .)
    DIV             reduce using rule 32 (conversion -> type_ ( expression ) .)
    STAR            reduce using rule 32 (conversion -> type_ ( expression ) .)
    XOR             reduce using rule 32 (conversion -> type_ ( expression ) .)
    OR              reduce using rule 32 (conversion -> type_ ( expression ) .)
    MINUS           reduce using rule 32 (conversion -> type_ ( expression ) .)
    PLUS            reduce using rule 32 (conversion -> type_ ( expression ) .)
    GE              reduce using rule 32 (conversion -> type_ ( expression ) .)
    GT              reduce using rule 32 (conversion -> type_ ( expression ) .)
    LE              reduce using rule 32 (conversion -> type_ ( expression ) .)
    LT              reduce using rule 32 (conversion -> type_ ( expression ) .)
    NE              reduce using rule 32 (conversion -> type_ ( expression ) .)
    EQ              reduce using rule 32 (conversion -> type_ ( expression ) .)
    NEWL            reduce using rule 32 (conversion -> type_ ( expression ) .)
    ;               reduce using rule 32 (conversion -> type_ ( expression ) .)
    )               reduce using rule 32 (conversion -> type_ ( expression ) .)
    ,               reduce using rule 32 (conversion -> type_ ( expression ) .)


state 127

    (11) expressionList -> expressionList , expression .
    (20) expression -> expression . BINARY_OP unaryExpr
    (84) BINARY_OP -> . MUL_OP
    (85) BINARY_OP -> . ADD_OP
    (86) BINARY_OP -> . REL_OP
    (87) BINARY_OP -> . LOGIC_AND
    (88) BINARY_OP -> . LOGIC_OR
    (99) MUL_OP -> . SHR
    (100) MUL_OP -> . SHL
    (101) MUL_OP -> . AND
    (102) MUL_OP -> . MOD
    (103) MUL_OP -> . DIV
    (104) MUL_OP -> . STAR
    (95) ADD_OP -> . XOR
    (96) ADD_OP -> . OR
    (97) ADD_OP -> . MINUS
    (98) ADD_OP -> . PLUS
    (89) REL_OP -> . GE
    (90) REL_OP -> . GT
    (91) REL_OP -> . LE
    (92) REL_OP -> . LT
    (93) REL_OP -> . NE
    (94) REL_OP -> . EQ
    ,               reduce using rule 11 (expressionList -> expressionList , expression .)
    NEWL            reduce using rule 11 (expressionList -> expressionList , expression .)
    ;               reduce using rule 11 (expressionList -> expressionList , expression .)
    LOGIC_AND       shift and go to state 86
    LOGIC_OR        shift and go to state 87
    SHR             shift and go to state 88
    SHL             shift and go to state 89
    AND             shift and go to state 90
    MOD             shift and go to state 91
    DIV             shift and go to state 92
    STAR            shift and go to state 93
    XOR             shift and go to state 94
    OR              shift and go to state 95
    MINUS           shift and go to state 96
    PLUS            shift and go to state 97
    GE              shift and go to state 98
    GT              shift and go to state 99
    LE              shift and go to state 100
    LT              shift and go to state 101
    NE              shift and go to state 102
    EQ              shift and go to state 103

    BINARY_OP                      shift and go to state 82
    MUL_OP                         shift and go to state 83
    ADD_OP                         shift and go to state 84
    REL_OP                         shift and go to state 85