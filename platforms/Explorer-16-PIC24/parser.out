Grammar:

Rule 0     S' -> sourceFile
Rule 1     sourceFile -> orphanStmtList
Rule 2     sourceFile -> moduleClause orphanStmtList
Rule 3     sourceFile -> cPreprocessors orphanStmtList
Rule 4     sourceFile -> importDecls orphanStmtList
Rule 5     sourceFile -> cPreprocessors moduleClause orphanStmtList
Rule 6     sourceFile -> cPreprocessors importDecls orphanStmtList
Rule 7     sourceFile -> moduleClause importDecls orphanStmtList
Rule 8     sourceFile -> cPreprocessors moduleClause importDecls orphanStmtList
Rule 9     sourceFile -> topLevelDecls
Rule 10    sourceFile -> moduleClause topLevelDecls
Rule 11    sourceFile -> cPreprocessors topLevelDecls
Rule 12    sourceFile -> importDecls topLevelDecls
Rule 13    sourceFile -> cPreprocessors moduleClause topLevelDecls
Rule 14    sourceFile -> cPreprocessors importDecls topLevelDecls
Rule 15    sourceFile -> moduleClause importDecls topLevelDecls
Rule 16    sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls
Rule 17    sourceFile -> topLevelDecls orphanStmtList
Rule 18    sourceFile -> moduleClause topLevelDecls orphanStmtList
Rule 19    sourceFile -> cPreprocessors topLevelDecls orphanStmtList
Rule 20    sourceFile -> importDecls topLevelDecls orphanStmtList
Rule 21    sourceFile -> cPreprocessors moduleClause topLevelDecls orphanStmtList
Rule 22    sourceFile -> cPreprocessors importDecls topLevelDecls orphanStmtList
Rule 23    sourceFile -> moduleClause importDecls topLevelDecls orphanStmtList
Rule 24    sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls orphanStmtList
Rule 25    moduleClause -> MODULE IDENTIFIER eos
Rule 26    cPreprocessors -> cPreprocessors cPreprocessor eos
Rule 27    cPreprocessors -> cPreprocessor eos
Rule 28    cPreprocessor -> C_PREPR C_STRING_LIT
Rule 29    cPreprocessor -> C_PREPR C_PATH_LIT
Rule 30    cPreprocessor -> C_PREPR IDENTIFIER expressionList
Rule 31    importDecls -> importDecls importDecl eos
Rule 32    importDecls -> importDecl eos
Rule 33    importDecl -> IMPORT importSpec
Rule 34    importSpec -> importPath
Rule 35    importSpec -> IDENTIFIER importPath
Rule 36    importSpec -> . importPath
Rule 37    importPath -> STRING_LIT
Rule 38    importPath -> IDENTIFIER
Rule 39    topLevelDecls -> topLevelDecls topLevelDecl eos
Rule 40    topLevelDecls -> topLevelDecl eos
Rule 41    orphanStmtList -> statementList eos
Rule 42    topLevelDecl -> functionDecl
Rule 43    declaration -> varDecl
Rule 44    varDecl -> identifierList DECL_ASGN expressionList
Rule 45    identifierList -> identifierList , IDENTIFIER
Rule 46    identifierList -> IDENTIFIER
Rule 47    functionDecl -> FN IDENTIFIER signature
Rule 48    functionDecl -> FN IDENTIFIER function_
Rule 49    function_ -> signature block
Rule 50    signature -> parameters
Rule 51    signature -> parameters result
Rule 52    result -> type_
Rule 53    result -> parameters
Rule 54    parameters -> ( parameterList , )
Rule 55    parameters -> ( parameterList )
Rule 56    parameters -> ( )
Rule 57    parameterList -> parameterList , parameterDecl
Rule 58    parameterList -> parameterDecl
Rule 59    parameterDecl -> type_
Rule 60    parameterDecl -> identifierList type_
Rule 61    functionLit -> FN function_
Rule 62    expressionList -> expressionList , expression
Rule 63    expressionList -> expression
Rule 64    statementList -> statementList eos statement
Rule 65    statementList -> statement
Rule 66    block -> { statementList }
Rule 67    statement -> simpleStmt
Rule 68    statement -> declaration
Rule 69    simpleStmt -> assignment
Rule 70    simpleStmt -> expressionStmt
Rule 71    expressionStmt -> expression
Rule 72    assignment -> identifierList assign_op expressionList
Rule 73    arguments -> ( type_ , expressionList , )
Rule 74    arguments -> ( type_ , expressionList )
Rule 75    arguments -> ( type_ , )
Rule 76    arguments -> ( type_ )
Rule 77    arguments -> ( expressionList , )
Rule 78    arguments -> ( expressionList )
Rule 79    arguments -> ( )
Rule 80    expression -> expression BINARY_OP unaryExpr
Rule 81    expression -> unaryExpr
Rule 82    unaryExpr -> UNARY_OP unaryExpr  [precedence=right, level=7]
Rule 83    unaryExpr -> primaryExpr
Rule 84    primaryExpr -> primaryExpr arguments
Rule 85    primaryExpr -> conversion
Rule 86    primaryExpr -> operand
Rule 87    operand -> ( expression )
Rule 88    operand -> operandName
Rule 89    operand -> literal
Rule 90    operandName -> IDENTIFIER
Rule 91    literal -> functionLit
Rule 92    literal -> basicLit
Rule 93    conversion -> type_ ( expression )
Rule 94    type_ -> typeName
Rule 95    typeName -> numericType
Rule 96    typeName -> STRING
Rule 97    typeName -> BOOL
Rule 98    typeName -> RUNE
Rule 99    numericType -> F32
Rule 100   numericType -> F64
Rule 101   numericType -> INT
Rule 102   numericType -> ISIZE
Rule 103   numericType -> I64
Rule 104   numericType -> I32
Rule 105   numericType -> I16
Rule 106   numericType -> I8
Rule 107   numericType -> UINT
Rule 108   numericType -> USIZE
Rule 109   numericType -> U64
Rule 110   numericType -> U32
Rule 111   numericType -> U16
Rule 112   numericType -> U8
Rule 113   basicLit -> INT_LIT
Rule 114   basicLit -> FLOAT_LIT
Rule 115   basicLit -> DECIMAL_LIT EXPONENT
Rule 116   basicLit -> FLOAT_LIT EXPONENT
Rule 117   basicLit -> FALSE
Rule 118   basicLit -> TRUE
Rule 119   basicLit -> RUNE_LIT
Rule 120   basicLit -> STRING_LIT
Rule 121   FLOAT_LIT -> . DECIMAL_LIT
Rule 122   FLOAT_LIT -> DECIMAL_LIT .
Rule 123   FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT
Rule 124   INT_LIT -> HEX_LIT
Rule 125   INT_LIT -> OCTAL_LIT
Rule 126   INT_LIT -> BINARY_LIT
Rule 127   INT_LIT -> DECIMAL_LIT
Rule 128   eos -> eos NEWL
Rule 129   eos -> NEWL
Rule 130   eos -> eos ;
Rule 131   eos -> ;
Rule 132   assign_op -> SHR_ASGN  [precedence=right, level=8]
Rule 133   assign_op -> SHL_ASGN  [precedence=right, level=8]
Rule 134   assign_op -> MOD_ASGN  [precedence=right, level=8]
Rule 135   assign_op -> DIV_ASGN  [precedence=right, level=8]
Rule 136   assign_op -> OR_ASGN  [precedence=right, level=8]
Rule 137   assign_op -> AND_ASGN  [precedence=right, level=8]
Rule 138   assign_op -> STAR_ASGN  [precedence=right, level=8]
Rule 139   assign_op -> XOR_ASGN  [precedence=right, level=8]
Rule 140   assign_op -> MINUS_ASGN  [precedence=right, level=8]
Rule 141   assign_op -> PLUS_ASGN  [precedence=right, level=8]
Rule 142   assign_op -> ASSIGN  [precedence=right, level=8]
Rule 143   BINARY_OP -> MUL_OP
Rule 144   BINARY_OP -> ADD_OP
Rule 145   BINARY_OP -> REL_OP
Rule 146   BINARY_OP -> LOGIC_AND  [precedence=left, level=2]
Rule 147   BINARY_OP -> LOGIC_OR  [precedence=left, level=1]
Rule 148   REL_OP -> GE  [precedence=left, level=3]
Rule 149   REL_OP -> GT  [precedence=left, level=3]
Rule 150   REL_OP -> LE  [precedence=left, level=3]
Rule 151   REL_OP -> LT  [precedence=left, level=3]
Rule 152   REL_OP -> NE  [precedence=left, level=3]
Rule 153   REL_OP -> EQ  [precedence=left, level=3]
Rule 154   ADD_OP -> XOR  [precedence=left, level=4]
Rule 155   ADD_OP -> OR  [precedence=left, level=4]
Rule 156   ADD_OP -> MINUS  [precedence=left, level=4]
Rule 157   ADD_OP -> PLUS  [precedence=left, level=4]
Rule 158   MUL_OP -> SHR  [precedence=left, level=5]
Rule 159   MUL_OP -> SHL  [precedence=left, level=5]
Rule 160   MUL_OP -> AND  [precedence=left, level=5]
Rule 161   MUL_OP -> MOD  [precedence=left, level=5]
Rule 162   MUL_OP -> DIV  [precedence=left, level=5]
Rule 163   MUL_OP -> STAR  [precedence=left, level=5]
Rule 164   UNARY_OP -> AND  [precedence=left, level=5]
Rule 165   UNARY_OP -> EXCLM
Rule 166   UNARY_OP -> MINUS  [precedence=left, level=4]

Unused terminals:

    FOR
    PLUS_PLUS
    IF
    STATIC
    AS
    IN
    CONTINUE
    MAP
    BREAK
    MINUS_MINUS
    ENUM
    MATCH
    STRUCT
    ELSE
    RETURN
    CONST
    TYPE

Terminals, with rules where they appear:

(                    : 54 55 56 73 74 75 76 77 78 79 87 93
)                    : 54 55 56 73 74 75 76 77 78 79 87 93
,                    : 45 54 57 62 73 73 74 75 77
.                    : 36 121 122 123
;                    : 130 131
AND                  : 160 164
AND_ASGN             : 137
AS                   : 
ASSIGN               : 142
BINARY_LIT           : 126
BOOL                 : 97
BREAK                : 
CONST                : 
CONTINUE             : 
C_PATH_LIT           : 29
C_PREPR              : 28 29 30
C_STRING_LIT         : 28
DECIMAL_LIT          : 115 121 122 123 123 127
DECL_ASGN            : 44
DIV                  : 162
DIV_ASGN             : 135
ELSE                 : 
ENUM                 : 
EQ                   : 153
EXCLM                : 165
EXPONENT             : 115 116
F32                  : 99
F64                  : 100
FALSE                : 117
FN                   : 47 48 61
FOR                  : 
GE                   : 148
GT                   : 149
HEX_LIT              : 124
I16                  : 105
I32                  : 104
I64                  : 103
I8                   : 106
IDENTIFIER           : 25 30 35 38 45 46 47 48 90
IF                   : 
IMPORT               : 33
IN                   : 
INT                  : 101
ISIZE                : 102
LE                   : 150
LOGIC_AND            : 146
LOGIC_OR             : 147
LT                   : 151
MAP                  : 
MATCH                : 
MINUS                : 156 166
MINUS_ASGN           : 140
MINUS_MINUS          : 
MOD                  : 161
MODULE               : 25
MOD_ASGN             : 134
NE                   : 152
NEWL                 : 128 129
OCTAL_LIT            : 125
OR                   : 155
OR_ASGN              : 136
PLUS                 : 157
PLUS_ASGN            : 141
PLUS_PLUS            : 
RETURN               : 
RUNE                 : 98
RUNE_LIT             : 119
SHL                  : 159
SHL_ASGN             : 133
SHR                  : 158
SHR_ASGN             : 132
STAR                 : 163
STAR_ASGN            : 138
STATIC               : 
STRING               : 96
STRING_LIT           : 37 120
STRUCT               : 
TRUE                 : 118
TYPE                 : 
U16                  : 111
U32                  : 110
U64                  : 109
U8                   : 112
UINT                 : 107
USIZE                : 108
XOR                  : 154
XOR_ASGN             : 139
error                : 
{                    : 66
}                    : 66

Nonterminals, with rules where they appear:

ADD_OP               : 144
BINARY_OP            : 80
FLOAT_LIT            : 114 116
INT_LIT              : 113
MUL_OP               : 143
REL_OP               : 145
UNARY_OP             : 82
arguments            : 84
assign_op            : 72
assignment           : 69
basicLit             : 92
block                : 49
cPreprocessor        : 26 27
cPreprocessors       : 3 5 6 8 11 13 14 16 19 21 22 24 26
conversion           : 85
declaration          : 68
eos                  : 25 26 27 31 32 39 40 41 64 128 130
expression           : 62 63 71 80 87 93
expressionList       : 30 44 62 72 73 74 77 78
expressionStmt       : 70
functionDecl         : 42
functionLit          : 91
function_            : 48 61
identifierList       : 44 45 60 72
importDecl           : 31 32
importDecls          : 4 6 7 8 12 14 15 16 20 22 23 24 31
importPath           : 34 35 36
importSpec           : 33
literal              : 89
moduleClause         : 2 5 7 8 10 13 15 16 18 21 23 24
numericType          : 95
operand              : 86
operandName          : 88
orphanStmtList       : 1 2 3 4 5 6 7 8 17 18 19 20 21 22 23 24
parameterDecl        : 57 58
parameterList        : 54 55 57
parameters           : 50 51 53
primaryExpr          : 83 84
result               : 51
signature            : 47 49
simpleStmt           : 67
sourceFile           : 0
statement            : 64 65
statementList        : 41 64 66
topLevelDecl         : 39 40
topLevelDecls        : 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 39
typeName             : 94
type_                : 52 59 60 73 74 75 76 93
unaryExpr            : 80 81 82
varDecl              : 43


state 0

    (0) S' -> . sourceFile
    (1) sourceFile -> . orphanStmtList
    (2) sourceFile -> . moduleClause orphanStmtList
    (3) sourceFile -> . cPreprocessors orphanStmtList
    (4) sourceFile -> . importDecls orphanStmtList
    (5) sourceFile -> . cPreprocessors moduleClause orphanStmtList
    (6) sourceFile -> . cPreprocessors importDecls orphanStmtList
    (7) sourceFile -> . moduleClause importDecls orphanStmtList
    (8) sourceFile -> . cPreprocessors moduleClause importDecls orphanStmtList
    (9) sourceFile -> . topLevelDecls
    (10) sourceFile -> . moduleClause topLevelDecls
    (11) sourceFile -> . cPreprocessors topLevelDecls
    (12) sourceFile -> . importDecls topLevelDecls
    (13) sourceFile -> . cPreprocessors moduleClause topLevelDecls
    (14) sourceFile -> . cPreprocessors importDecls topLevelDecls
    (15) sourceFile -> . moduleClause importDecls topLevelDecls
    (16) sourceFile -> . cPreprocessors moduleClause importDecls topLevelDecls
    (17) sourceFile -> . topLevelDecls orphanStmtList
    (18) sourceFile -> . moduleClause topLevelDecls orphanStmtList
    (19) sourceFile -> . cPreprocessors topLevelDecls orphanStmtList
    (20) sourceFile -> . importDecls topLevelDecls orphanStmtList
    (21) sourceFile -> . cPreprocessors moduleClause topLevelDecls orphanStmtList
    (22) sourceFile -> . cPreprocessors importDecls topLevelDecls orphanStmtList
    (23) sourceFile -> . moduleClause importDecls topLevelDecls orphanStmtList
    (24) sourceFile -> . cPreprocessors moduleClause importDecls topLevelDecls orphanStmtList
    (41) orphanStmtList -> . statementList eos
    (25) moduleClause -> . MODULE IDENTIFIER eos
    (26) cPreprocessors -> . cPreprocessors cPreprocessor eos
    (27) cPreprocessors -> . cPreprocessor eos
    (31) importDecls -> . importDecls importDecl eos
    (32) importDecls -> . importDecl eos
    (39) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (40) topLevelDecls -> . topLevelDecl eos
    (64) statementList -> . statementList eos statement
    (65) statementList -> . statement
    (28) cPreprocessor -> . C_PREPR C_STRING_LIT
    (29) cPreprocessor -> . C_PREPR C_PATH_LIT
    (30) cPreprocessor -> . C_PREPR IDENTIFIER expressionList
    (33) importDecl -> . IMPORT importSpec
    (42) topLevelDecl -> . functionDecl
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (47) functionDecl -> . FN IDENTIFIER signature
    (48) functionDecl -> . FN IDENTIFIER function_
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    MODULE          shift and go to state 8
    C_PREPR         shift and go to state 14
    IMPORT          shift and go to state 15
    FN              shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    sourceFile                     shift and go to state 1
    orphanStmtList                 shift and go to state 2
    moduleClause                   shift and go to state 3
    cPreprocessors                 shift and go to state 4
    importDecls                    shift and go to state 5
    topLevelDecls                  shift and go to state 6
    statementList                  shift and go to state 7
    cPreprocessor                  shift and go to state 10
    importDecl                     shift and go to state 11
    topLevelDecl                   shift and go to state 12
    statement                      shift and go to state 13
    functionDecl                   shift and go to state 16
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 1

    (0) S' -> sourceFile .


state 2

    (1) sourceFile -> orphanStmtList .
    $end            reduce using rule 1 (sourceFile -> orphanStmtList .)


state 3

    (2) sourceFile -> moduleClause . orphanStmtList
    (7) sourceFile -> moduleClause . importDecls orphanStmtList
    (10) sourceFile -> moduleClause . topLevelDecls
    (15) sourceFile -> moduleClause . importDecls topLevelDecls
    (18) sourceFile -> moduleClause . topLevelDecls orphanStmtList
    (23) sourceFile -> moduleClause . importDecls topLevelDecls orphanStmtList
    (41) orphanStmtList -> . statementList eos
    (31) importDecls -> . importDecls importDecl eos
    (32) importDecls -> . importDecl eos
    (39) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (40) topLevelDecls -> . topLevelDecl eos
    (64) statementList -> . statementList eos statement
    (65) statementList -> . statement
    (33) importDecl -> . IMPORT importSpec
    (42) topLevelDecl -> . functionDecl
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (47) functionDecl -> . FN IDENTIFIER signature
    (48) functionDecl -> . FN IDENTIFIER function_
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IMPORT          shift and go to state 15
    FN              shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    orphanStmtList                 shift and go to state 69
    importDecls                    shift and go to state 70
    topLevelDecls                  shift and go to state 71
    statementList                  shift and go to state 7
    importDecl                     shift and go to state 11
    topLevelDecl                   shift and go to state 12
    statement                      shift and go to state 13
    functionDecl                   shift and go to state 16
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 4

    (3) sourceFile -> cPreprocessors . orphanStmtList
    (5) sourceFile -> cPreprocessors . moduleClause orphanStmtList
    (6) sourceFile -> cPreprocessors . importDecls orphanStmtList
    (8) sourceFile -> cPreprocessors . moduleClause importDecls orphanStmtList
    (11) sourceFile -> cPreprocessors . topLevelDecls
    (13) sourceFile -> cPreprocessors . moduleClause topLevelDecls
    (14) sourceFile -> cPreprocessors . importDecls topLevelDecls
    (16) sourceFile -> cPreprocessors . moduleClause importDecls topLevelDecls
    (19) sourceFile -> cPreprocessors . topLevelDecls orphanStmtList
    (21) sourceFile -> cPreprocessors . moduleClause topLevelDecls orphanStmtList
    (22) sourceFile -> cPreprocessors . importDecls topLevelDecls orphanStmtList
    (24) sourceFile -> cPreprocessors . moduleClause importDecls topLevelDecls orphanStmtList
    (26) cPreprocessors -> cPreprocessors . cPreprocessor eos
    (41) orphanStmtList -> . statementList eos
    (25) moduleClause -> . MODULE IDENTIFIER eos
    (31) importDecls -> . importDecls importDecl eos
    (32) importDecls -> . importDecl eos
    (39) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (40) topLevelDecls -> . topLevelDecl eos
    (28) cPreprocessor -> . C_PREPR C_STRING_LIT
    (29) cPreprocessor -> . C_PREPR C_PATH_LIT
    (30) cPreprocessor -> . C_PREPR IDENTIFIER expressionList
    (64) statementList -> . statementList eos statement
    (65) statementList -> . statement
    (33) importDecl -> . IMPORT importSpec
    (42) topLevelDecl -> . functionDecl
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (47) functionDecl -> . FN IDENTIFIER signature
    (48) functionDecl -> . FN IDENTIFIER function_
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    MODULE          shift and go to state 8
    C_PREPR         shift and go to state 14
    IMPORT          shift and go to state 15
    FN              shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    orphanStmtList                 shift and go to state 72
    moduleClause                   shift and go to state 73
    importDecls                    shift and go to state 74
    topLevelDecls                  shift and go to state 75
    cPreprocessor                  shift and go to state 76
    statementList                  shift and go to state 7
    importDecl                     shift and go to state 11
    topLevelDecl                   shift and go to state 12
    statement                      shift and go to state 13
    functionDecl                   shift and go to state 16
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 5

    (4) sourceFile -> importDecls . orphanStmtList
    (12) sourceFile -> importDecls . topLevelDecls
    (20) sourceFile -> importDecls . topLevelDecls orphanStmtList
    (31) importDecls -> importDecls . importDecl eos
    (41) orphanStmtList -> . statementList eos
    (39) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (40) topLevelDecls -> . topLevelDecl eos
    (33) importDecl -> . IMPORT importSpec
    (64) statementList -> . statementList eos statement
    (65) statementList -> . statement
    (42) topLevelDecl -> . functionDecl
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (47) functionDecl -> . FN IDENTIFIER signature
    (48) functionDecl -> . FN IDENTIFIER function_
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IMPORT          shift and go to state 15
    FN              shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    orphanStmtList                 shift and go to state 77
    topLevelDecls                  shift and go to state 78
    importDecl                     shift and go to state 79
    statementList                  shift and go to state 7
    topLevelDecl                   shift and go to state 12
    statement                      shift and go to state 13
    functionDecl                   shift and go to state 16
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 6

    (9) sourceFile -> topLevelDecls .
    (17) sourceFile -> topLevelDecls . orphanStmtList
    (39) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (64) statementList -> . statementList eos statement
    (65) statementList -> . statement
    (47) functionDecl -> . FN IDENTIFIER signature
    (48) functionDecl -> . FN IDENTIFIER function_
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 9 (sourceFile -> topLevelDecls .)
    FN              shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    orphanStmtList                 shift and go to state 80
    topLevelDecl                   shift and go to state 81
    statementList                  shift and go to state 7
    functionDecl                   shift and go to state 16
    statement                      shift and go to state 13
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 7

    (41) orphanStmtList -> statementList . eos
    (64) statementList -> statementList . eos statement
    (128) eos -> . eos NEWL
    (129) eos -> . NEWL
    (130) eos -> . eos ;
    (131) eos -> . ;
    NEWL            shift and go to state 83
    ;               shift and go to state 84

    eos                            shift and go to state 82

state 8

    (25) moduleClause -> MODULE . IDENTIFIER eos
    IDENTIFIER      shift and go to state 85


state 9

    (46) identifierList -> IDENTIFIER .
    (90) operandName -> IDENTIFIER .
    DECL_ASGN       reduce using rule 46 (identifierList -> IDENTIFIER .)
    ,               reduce using rule 46 (identifierList -> IDENTIFIER .)
    SHR_ASGN        reduce using rule 46 (identifierList -> IDENTIFIER .)
    SHL_ASGN        reduce using rule 46 (identifierList -> IDENTIFIER .)
    MOD_ASGN        reduce using rule 46 (identifierList -> IDENTIFIER .)
    DIV_ASGN        reduce using rule 46 (identifierList -> IDENTIFIER .)
    OR_ASGN         reduce using rule 46 (identifierList -> IDENTIFIER .)
    AND_ASGN        reduce using rule 46 (identifierList -> IDENTIFIER .)
    STAR_ASGN       reduce using rule 46 (identifierList -> IDENTIFIER .)
    XOR_ASGN        reduce using rule 46 (identifierList -> IDENTIFIER .)
    MINUS_ASGN      reduce using rule 46 (identifierList -> IDENTIFIER .)
    PLUS_ASGN       reduce using rule 46 (identifierList -> IDENTIFIER .)
    ASSIGN          reduce using rule 46 (identifierList -> IDENTIFIER .)
    (               reduce using rule 90 (operandName -> IDENTIFIER .)
    LOGIC_AND       reduce using rule 90 (operandName -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 90 (operandName -> IDENTIFIER .)
    SHR             reduce using rule 90 (operandName -> IDENTIFIER .)
    SHL             reduce using rule 90 (operandName -> IDENTIFIER .)
    AND             reduce using rule 90 (operandName -> IDENTIFIER .)
    MOD             reduce using rule 90 (operandName -> IDENTIFIER .)
    DIV             reduce using rule 90 (operandName -> IDENTIFIER .)
    STAR            reduce using rule 90 (operandName -> IDENTIFIER .)
    XOR             reduce using rule 90 (operandName -> IDENTIFIER .)
    OR              reduce using rule 90 (operandName -> IDENTIFIER .)
    MINUS           reduce using rule 90 (operandName -> IDENTIFIER .)
    PLUS            reduce using rule 90 (operandName -> IDENTIFIER .)
    GE              reduce using rule 90 (operandName -> IDENTIFIER .)
    GT              reduce using rule 90 (operandName -> IDENTIFIER .)
    LE              reduce using rule 90 (operandName -> IDENTIFIER .)
    LT              reduce using rule 90 (operandName -> IDENTIFIER .)
    NE              reduce using rule 90 (operandName -> IDENTIFIER .)
    EQ              reduce using rule 90 (operandName -> IDENTIFIER .)
    NEWL            reduce using rule 90 (operandName -> IDENTIFIER .)
    ;               reduce using rule 90 (operandName -> IDENTIFIER .)
    }               reduce using rule 90 (operandName -> IDENTIFIER .)


state 10

    (27) cPreprocessors -> cPreprocessor . eos
    (128) eos -> . eos NEWL
    (129) eos -> . NEWL
    (130) eos -> . eos ;
    (131) eos -> . ;
    NEWL            shift and go to state 83
    ;               shift and go to state 84

    eos                            shift and go to state 86

state 11

    (32) importDecls -> importDecl . eos
    (128) eos -> . eos NEWL
    (129) eos -> . NEWL
    (130) eos -> . eos ;
    (131) eos -> . ;
    NEWL            shift and go to state 83
    ;               shift and go to state 84

    eos                            shift and go to state 87

state 12

    (40) topLevelDecls -> topLevelDecl . eos
    (128) eos -> . eos NEWL
    (129) eos -> . NEWL
    (130) eos -> . eos ;
    (131) eos -> . ;
    NEWL            shift and go to state 83
    ;               shift and go to state 84

    eos                            shift and go to state 88

state 13

    (65) statementList -> statement .
    NEWL            reduce using rule 65 (statementList -> statement .)
    ;               reduce using rule 65 (statementList -> statement .)
    }               reduce using rule 65 (statementList -> statement .)


state 14

    (28) cPreprocessor -> C_PREPR . C_STRING_LIT
    (29) cPreprocessor -> C_PREPR . C_PATH_LIT
    (30) cPreprocessor -> C_PREPR . IDENTIFIER expressionList
    C_STRING_LIT    shift and go to state 89
    C_PATH_LIT      shift and go to state 90
    IDENTIFIER      shift and go to state 91


state 15

    (33) importDecl -> IMPORT . importSpec
    (34) importSpec -> . importPath
    (35) importSpec -> . IDENTIFIER importPath
    (36) importSpec -> . . importPath
    (37) importPath -> . STRING_LIT
    (38) importPath -> . IDENTIFIER
    IDENTIFIER      shift and go to state 94
    .               shift and go to state 95
    STRING_LIT      shift and go to state 96

    importSpec                     shift and go to state 92
    importPath                     shift and go to state 93

state 16

    (42) topLevelDecl -> functionDecl .
    NEWL            reduce using rule 42 (topLevelDecl -> functionDecl .)
    ;               reduce using rule 42 (topLevelDecl -> functionDecl .)


state 17

    (67) statement -> simpleStmt .
    NEWL            reduce using rule 67 (statement -> simpleStmt .)
    ;               reduce using rule 67 (statement -> simpleStmt .)
    }               reduce using rule 67 (statement -> simpleStmt .)


state 18

    (68) statement -> declaration .
    NEWL            reduce using rule 68 (statement -> declaration .)
    ;               reduce using rule 68 (statement -> declaration .)
    }               reduce using rule 68 (statement -> declaration .)


state 19

    (47) functionDecl -> FN . IDENTIFIER signature
    (48) functionDecl -> FN . IDENTIFIER function_
    (61) functionLit -> FN . function_
    (49) function_ -> . signature block
    (50) signature -> . parameters
    (51) signature -> . parameters result
    (54) parameters -> . ( parameterList , )
    (55) parameters -> . ( parameterList )
    (56) parameters -> . ( )
    IDENTIFIER      shift and go to state 97
    (               shift and go to state 101

    signature                      shift and go to state 98
    function_                      shift and go to state 99
    parameters                     shift and go to state 100

state 20

    (69) simpleStmt -> assignment .
    NEWL            reduce using rule 69 (simpleStmt -> assignment .)
    ;               reduce using rule 69 (simpleStmt -> assignment .)
    }               reduce using rule 69 (simpleStmt -> assignment .)


state 21

    (70) simpleStmt -> expressionStmt .
    NEWL            reduce using rule 70 (simpleStmt -> expressionStmt .)
    ;               reduce using rule 70 (simpleStmt -> expressionStmt .)
    }               reduce using rule 70 (simpleStmt -> expressionStmt .)


state 22

    (43) declaration -> varDecl .
    NEWL            reduce using rule 43 (declaration -> varDecl .)
    ;               reduce using rule 43 (declaration -> varDecl .)
    }               reduce using rule 43 (declaration -> varDecl .)


state 23

    (72) assignment -> identifierList . assign_op expressionList
    (44) varDecl -> identifierList . DECL_ASGN expressionList
    (45) identifierList -> identifierList . , IDENTIFIER
    (132) assign_op -> . SHR_ASGN
    (133) assign_op -> . SHL_ASGN
    (134) assign_op -> . MOD_ASGN
    (135) assign_op -> . DIV_ASGN
    (136) assign_op -> . OR_ASGN
    (137) assign_op -> . AND_ASGN
    (138) assign_op -> . STAR_ASGN
    (139) assign_op -> . XOR_ASGN
    (140) assign_op -> . MINUS_ASGN
    (141) assign_op -> . PLUS_ASGN
    (142) assign_op -> . ASSIGN
    DECL_ASGN       shift and go to state 103
    ,               shift and go to state 104
    SHR_ASGN        shift and go to state 105
    SHL_ASGN        shift and go to state 106
    MOD_ASGN        shift and go to state 107
    DIV_ASGN        shift and go to state 108
    OR_ASGN         shift and go to state 109
    AND_ASGN        shift and go to state 110
    STAR_ASGN       shift and go to state 111
    XOR_ASGN        shift and go to state 112
    MINUS_ASGN      shift and go to state 113
    PLUS_ASGN       shift and go to state 114
    ASSIGN          shift and go to state 115

    assign_op                      shift and go to state 102

state 24

    (71) expressionStmt -> expression .
    (80) expression -> expression . BINARY_OP unaryExpr
    (143) BINARY_OP -> . MUL_OP
    (144) BINARY_OP -> . ADD_OP
    (145) BINARY_OP -> . REL_OP
    (146) BINARY_OP -> . LOGIC_AND
    (147) BINARY_OP -> . LOGIC_OR
    (158) MUL_OP -> . SHR
    (159) MUL_OP -> . SHL
    (160) MUL_OP -> . AND
    (161) MUL_OP -> . MOD
    (162) MUL_OP -> . DIV
    (163) MUL_OP -> . STAR
    (154) ADD_OP -> . XOR
    (155) ADD_OP -> . OR
    (156) ADD_OP -> . MINUS
    (157) ADD_OP -> . PLUS
    (148) REL_OP -> . GE
    (149) REL_OP -> . GT
    (150) REL_OP -> . LE
    (151) REL_OP -> . LT
    (152) REL_OP -> . NE
    (153) REL_OP -> . EQ
    NEWL            reduce using rule 71 (expressionStmt -> expression .)
    ;               reduce using rule 71 (expressionStmt -> expression .)
    }               reduce using rule 71 (expressionStmt -> expression .)
    LOGIC_AND       shift and go to state 120
    LOGIC_OR        shift and go to state 121
    SHR             shift and go to state 122
    SHL             shift and go to state 123
    AND             shift and go to state 124
    MOD             shift and go to state 125
    DIV             shift and go to state 126
    STAR            shift and go to state 127
    XOR             shift and go to state 128
    OR              shift and go to state 129
    MINUS           shift and go to state 130
    PLUS            shift and go to state 131
    GE              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    LT              shift and go to state 135
    NE              shift and go to state 136
    EQ              shift and go to state 137

    BINARY_OP                      shift and go to state 116
    MUL_OP                         shift and go to state 117
    ADD_OP                         shift and go to state 118
    REL_OP                         shift and go to state 119

state 25

    (81) expression -> unaryExpr .
    LOGIC_AND       reduce using rule 81 (expression -> unaryExpr .)
    LOGIC_OR        reduce using rule 81 (expression -> unaryExpr .)
    SHR             reduce using rule 81 (expression -> unaryExpr .)
    SHL             reduce using rule 81 (expression -> unaryExpr .)
    AND             reduce using rule 81 (expression -> unaryExpr .)
    MOD             reduce using rule 81 (expression -> unaryExpr .)
    DIV             reduce using rule 81 (expression -> unaryExpr .)
    STAR            reduce using rule 81 (expression -> unaryExpr .)
    XOR             reduce using rule 81 (expression -> unaryExpr .)
    OR              reduce using rule 81 (expression -> unaryExpr .)
    MINUS           reduce using rule 81 (expression -> unaryExpr .)
    PLUS            reduce using rule 81 (expression -> unaryExpr .)
    GE              reduce using rule 81 (expression -> unaryExpr .)
    GT              reduce using rule 81 (expression -> unaryExpr .)
    LE              reduce using rule 81 (expression -> unaryExpr .)
    LT              reduce using rule 81 (expression -> unaryExpr .)
    NE              reduce using rule 81 (expression -> unaryExpr .)
    EQ              reduce using rule 81 (expression -> unaryExpr .)
    NEWL            reduce using rule 81 (expression -> unaryExpr .)
    ;               reduce using rule 81 (expression -> unaryExpr .)
    )               reduce using rule 81 (expression -> unaryExpr .)
    ,               reduce using rule 81 (expression -> unaryExpr .)
    }               reduce using rule 81 (expression -> unaryExpr .)


state 26

    (82) unaryExpr -> UNARY_OP . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    IDENTIFIER      shift and go to state 139
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    FN              shift and go to state 140
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    UNARY_OP                       shift and go to state 26
    unaryExpr                      shift and go to state 138
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 27

    (83) unaryExpr -> primaryExpr .
    (84) primaryExpr -> primaryExpr . arguments
    (73) arguments -> . ( type_ , expressionList , )
    (74) arguments -> . ( type_ , expressionList )
    (75) arguments -> . ( type_ , )
    (76) arguments -> . ( type_ )
    (77) arguments -> . ( expressionList , )
    (78) arguments -> . ( expressionList )
    (79) arguments -> . ( )
    LOGIC_AND       reduce using rule 83 (unaryExpr -> primaryExpr .)
    LOGIC_OR        reduce using rule 83 (unaryExpr -> primaryExpr .)
    SHR             reduce using rule 83 (unaryExpr -> primaryExpr .)
    SHL             reduce using rule 83 (unaryExpr -> primaryExpr .)
    AND             reduce using rule 83 (unaryExpr -> primaryExpr .)
    MOD             reduce using rule 83 (unaryExpr -> primaryExpr .)
    DIV             reduce using rule 83 (unaryExpr -> primaryExpr .)
    STAR            reduce using rule 83 (unaryExpr -> primaryExpr .)
    XOR             reduce using rule 83 (unaryExpr -> primaryExpr .)
    OR              reduce using rule 83 (unaryExpr -> primaryExpr .)
    MINUS           reduce using rule 83 (unaryExpr -> primaryExpr .)
    PLUS            reduce using rule 83 (unaryExpr -> primaryExpr .)
    GE              reduce using rule 83 (unaryExpr -> primaryExpr .)
    GT              reduce using rule 83 (unaryExpr -> primaryExpr .)
    LE              reduce using rule 83 (unaryExpr -> primaryExpr .)
    LT              reduce using rule 83 (unaryExpr -> primaryExpr .)
    NE              reduce using rule 83 (unaryExpr -> primaryExpr .)
    EQ              reduce using rule 83 (unaryExpr -> primaryExpr .)
    NEWL            reduce using rule 83 (unaryExpr -> primaryExpr .)
    ;               reduce using rule 83 (unaryExpr -> primaryExpr .)
    )               reduce using rule 83 (unaryExpr -> primaryExpr .)
    ,               reduce using rule 83 (unaryExpr -> primaryExpr .)
    }               reduce using rule 83 (unaryExpr -> primaryExpr .)
    (               shift and go to state 142

    arguments                      shift and go to state 141

state 28

    (164) UNARY_OP -> AND .
    AND             reduce using rule 164 (UNARY_OP -> AND .)
    EXCLM           reduce using rule 164 (UNARY_OP -> AND .)
    MINUS           reduce using rule 164 (UNARY_OP -> AND .)
    (               reduce using rule 164 (UNARY_OP -> AND .)
    IDENTIFIER      reduce using rule 164 (UNARY_OP -> AND .)
    STRING          reduce using rule 164 (UNARY_OP -> AND .)
    BOOL            reduce using rule 164 (UNARY_OP -> AND .)
    RUNE            reduce using rule 164 (UNARY_OP -> AND .)
    FN              reduce using rule 164 (UNARY_OP -> AND .)
    DECIMAL_LIT     reduce using rule 164 (UNARY_OP -> AND .)
    FALSE           reduce using rule 164 (UNARY_OP -> AND .)
    TRUE            reduce using rule 164 (UNARY_OP -> AND .)
    RUNE_LIT        reduce using rule 164 (UNARY_OP -> AND .)
    STRING_LIT      reduce using rule 164 (UNARY_OP -> AND .)
    F32             reduce using rule 164 (UNARY_OP -> AND .)
    F64             reduce using rule 164 (UNARY_OP -> AND .)
    INT             reduce using rule 164 (UNARY_OP -> AND .)
    ISIZE           reduce using rule 164 (UNARY_OP -> AND .)
    I64             reduce using rule 164 (UNARY_OP -> AND .)
    I32             reduce using rule 164 (UNARY_OP -> AND .)
    I16             reduce using rule 164 (UNARY_OP -> AND .)
    I8              reduce using rule 164 (UNARY_OP -> AND .)
    UINT            reduce using rule 164 (UNARY_OP -> AND .)
    USIZE           reduce using rule 164 (UNARY_OP -> AND .)
    U64             reduce using rule 164 (UNARY_OP -> AND .)
    U32             reduce using rule 164 (UNARY_OP -> AND .)
    U16             reduce using rule 164 (UNARY_OP -> AND .)
    U8              reduce using rule 164 (UNARY_OP -> AND .)
    HEX_LIT         reduce using rule 164 (UNARY_OP -> AND .)
    OCTAL_LIT       reduce using rule 164 (UNARY_OP -> AND .)
    BINARY_LIT      reduce using rule 164 (UNARY_OP -> AND .)
    .               reduce using rule 164 (UNARY_OP -> AND .)


state 29

    (165) UNARY_OP -> EXCLM .
    AND             reduce using rule 165 (UNARY_OP -> EXCLM .)
    EXCLM           reduce using rule 165 (UNARY_OP -> EXCLM .)
    MINUS           reduce using rule 165 (UNARY_OP -> EXCLM .)
    (               reduce using rule 165 (UNARY_OP -> EXCLM .)
    IDENTIFIER      reduce using rule 165 (UNARY_OP -> EXCLM .)
    STRING          reduce using rule 165 (UNARY_OP -> EXCLM .)
    BOOL            reduce using rule 165 (UNARY_OP -> EXCLM .)
    RUNE            reduce using rule 165 (UNARY_OP -> EXCLM .)
    FN              reduce using rule 165 (UNARY_OP -> EXCLM .)
    DECIMAL_LIT     reduce using rule 165 (UNARY_OP -> EXCLM .)
    FALSE           reduce using rule 165 (UNARY_OP -> EXCLM .)
    TRUE            reduce using rule 165 (UNARY_OP -> EXCLM .)
    RUNE_LIT        reduce using rule 165 (UNARY_OP -> EXCLM .)
    STRING_LIT      reduce using rule 165 (UNARY_OP -> EXCLM .)
    F32             reduce using rule 165 (UNARY_OP -> EXCLM .)
    F64             reduce using rule 165 (UNARY_OP -> EXCLM .)
    INT             reduce using rule 165 (UNARY_OP -> EXCLM .)
    ISIZE           reduce using rule 165 (UNARY_OP -> EXCLM .)
    I64             reduce using rule 165 (UNARY_OP -> EXCLM .)
    I32             reduce using rule 165 (UNARY_OP -> EXCLM .)
    I16             reduce using rule 165 (UNARY_OP -> EXCLM .)
    I8              reduce using rule 165 (UNARY_OP -> EXCLM .)
    UINT            reduce using rule 165 (UNARY_OP -> EXCLM .)
    USIZE           reduce using rule 165 (UNARY_OP -> EXCLM .)
    U64             reduce using rule 165 (UNARY_OP -> EXCLM .)
    U32             reduce using rule 165 (UNARY_OP -> EXCLM .)
    U16             reduce using rule 165 (UNARY_OP -> EXCLM .)
    U8              reduce using rule 165 (UNARY_OP -> EXCLM .)
    HEX_LIT         reduce using rule 165 (UNARY_OP -> EXCLM .)
    OCTAL_LIT       reduce using rule 165 (UNARY_OP -> EXCLM .)
    BINARY_LIT      reduce using rule 165 (UNARY_OP -> EXCLM .)
    .               reduce using rule 165 (UNARY_OP -> EXCLM .)


state 30

    (166) UNARY_OP -> MINUS .
    AND             reduce using rule 166 (UNARY_OP -> MINUS .)
    EXCLM           reduce using rule 166 (UNARY_OP -> MINUS .)
    MINUS           reduce using rule 166 (UNARY_OP -> MINUS .)
    (               reduce using rule 166 (UNARY_OP -> MINUS .)
    IDENTIFIER      reduce using rule 166 (UNARY_OP -> MINUS .)
    STRING          reduce using rule 166 (UNARY_OP -> MINUS .)
    BOOL            reduce using rule 166 (UNARY_OP -> MINUS .)
    RUNE            reduce using rule 166 (UNARY_OP -> MINUS .)
    FN              reduce using rule 166 (UNARY_OP -> MINUS .)
    DECIMAL_LIT     reduce using rule 166 (UNARY_OP -> MINUS .)
    FALSE           reduce using rule 166 (UNARY_OP -> MINUS .)
    TRUE            reduce using rule 166 (UNARY_OP -> MINUS .)
    RUNE_LIT        reduce using rule 166 (UNARY_OP -> MINUS .)
    STRING_LIT      reduce using rule 166 (UNARY_OP -> MINUS .)
    F32             reduce using rule 166 (UNARY_OP -> MINUS .)
    F64             reduce using rule 166 (UNARY_OP -> MINUS .)
    INT             reduce using rule 166 (UNARY_OP -> MINUS .)
    ISIZE           reduce using rule 166 (UNARY_OP -> MINUS .)
    I64             reduce using rule 166 (UNARY_OP -> MINUS .)
    I32             reduce using rule 166 (UNARY_OP -> MINUS .)
    I16             reduce using rule 166 (UNARY_OP -> MINUS .)
    I8              reduce using rule 166 (UNARY_OP -> MINUS .)
    UINT            reduce using rule 166 (UNARY_OP -> MINUS .)
    USIZE           reduce using rule 166 (UNARY_OP -> MINUS .)
    U64             reduce using rule 166 (UNARY_OP -> MINUS .)
    U32             reduce using rule 166 (UNARY_OP -> MINUS .)
    U16             reduce using rule 166 (UNARY_OP -> MINUS .)
    U8              reduce using rule 166 (UNARY_OP -> MINUS .)
    HEX_LIT         reduce using rule 166 (UNARY_OP -> MINUS .)
    OCTAL_LIT       reduce using rule 166 (UNARY_OP -> MINUS .)
    BINARY_LIT      reduce using rule 166 (UNARY_OP -> MINUS .)
    .               reduce using rule 166 (UNARY_OP -> MINUS .)


state 31

    (85) primaryExpr -> conversion .
    (               reduce using rule 85 (primaryExpr -> conversion .)
    LOGIC_AND       reduce using rule 85 (primaryExpr -> conversion .)
    LOGIC_OR        reduce using rule 85 (primaryExpr -> conversion .)
    SHR             reduce using rule 85 (primaryExpr -> conversion .)
    SHL             reduce using rule 85 (primaryExpr -> conversion .)
    AND             reduce using rule 85 (primaryExpr -> conversion .)
    MOD             reduce using rule 85 (primaryExpr -> conversion .)
    DIV             reduce using rule 85 (primaryExpr -> conversion .)
    STAR            reduce using rule 85 (primaryExpr -> conversion .)
    XOR             reduce using rule 85 (primaryExpr -> conversion .)
    OR              reduce using rule 85 (primaryExpr -> conversion .)
    MINUS           reduce using rule 85 (primaryExpr -> conversion .)
    PLUS            reduce using rule 85 (primaryExpr -> conversion .)
    GE              reduce using rule 85 (primaryExpr -> conversion .)
    GT              reduce using rule 85 (primaryExpr -> conversion .)
    LE              reduce using rule 85 (primaryExpr -> conversion .)
    LT              reduce using rule 85 (primaryExpr -> conversion .)
    NE              reduce using rule 85 (primaryExpr -> conversion .)
    EQ              reduce using rule 85 (primaryExpr -> conversion .)
    NEWL            reduce using rule 85 (primaryExpr -> conversion .)
    ;               reduce using rule 85 (primaryExpr -> conversion .)
    )               reduce using rule 85 (primaryExpr -> conversion .)
    ,               reduce using rule 85 (primaryExpr -> conversion .)
    }               reduce using rule 85 (primaryExpr -> conversion .)


state 32

    (86) primaryExpr -> operand .
    (               reduce using rule 86 (primaryExpr -> operand .)
    LOGIC_AND       reduce using rule 86 (primaryExpr -> operand .)
    LOGIC_OR        reduce using rule 86 (primaryExpr -> operand .)
    SHR             reduce using rule 86 (primaryExpr -> operand .)
    SHL             reduce using rule 86 (primaryExpr -> operand .)
    AND             reduce using rule 86 (primaryExpr -> operand .)
    MOD             reduce using rule 86 (primaryExpr -> operand .)
    DIV             reduce using rule 86 (primaryExpr -> operand .)
    STAR            reduce using rule 86 (primaryExpr -> operand .)
    XOR             reduce using rule 86 (primaryExpr -> operand .)
    OR              reduce using rule 86 (primaryExpr -> operand .)
    MINUS           reduce using rule 86 (primaryExpr -> operand .)
    PLUS            reduce using rule 86 (primaryExpr -> operand .)
    GE              reduce using rule 86 (primaryExpr -> operand .)
    GT              reduce using rule 86 (primaryExpr -> operand .)
    LE              reduce using rule 86 (primaryExpr -> operand .)
    LT              reduce using rule 86 (primaryExpr -> operand .)
    NE              reduce using rule 86 (primaryExpr -> operand .)
    EQ              reduce using rule 86 (primaryExpr -> operand .)
    NEWL            reduce using rule 86 (primaryExpr -> operand .)
    ;               reduce using rule 86 (primaryExpr -> operand .)
    )               reduce using rule 86 (primaryExpr -> operand .)
    ,               reduce using rule 86 (primaryExpr -> operand .)
    }               reduce using rule 86 (primaryExpr -> operand .)


state 33

    (93) conversion -> type_ . ( expression )
    (               shift and go to state 143


state 34

    (87) operand -> ( . expression )
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    IDENTIFIER      shift and go to state 139
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    FN              shift and go to state 140
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    expression                     shift and go to state 144
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 35

    (88) operand -> operandName .
    (               reduce using rule 88 (operand -> operandName .)
    LOGIC_AND       reduce using rule 88 (operand -> operandName .)
    LOGIC_OR        reduce using rule 88 (operand -> operandName .)
    SHR             reduce using rule 88 (operand -> operandName .)
    SHL             reduce using rule 88 (operand -> operandName .)
    AND             reduce using rule 88 (operand -> operandName .)
    MOD             reduce using rule 88 (operand -> operandName .)
    DIV             reduce using rule 88 (operand -> operandName .)
    STAR            reduce using rule 88 (operand -> operandName .)
    XOR             reduce using rule 88 (operand -> operandName .)
    OR              reduce using rule 88 (operand -> operandName .)
    MINUS           reduce using rule 88 (operand -> operandName .)
    PLUS            reduce using rule 88 (operand -> operandName .)
    GE              reduce using rule 88 (operand -> operandName .)
    GT              reduce using rule 88 (operand -> operandName .)
    LE              reduce using rule 88 (operand -> operandName .)
    LT              reduce using rule 88 (operand -> operandName .)
    NE              reduce using rule 88 (operand -> operandName .)
    EQ              reduce using rule 88 (operand -> operandName .)
    NEWL            reduce using rule 88 (operand -> operandName .)
    ;               reduce using rule 88 (operand -> operandName .)
    )               reduce using rule 88 (operand -> operandName .)
    ,               reduce using rule 88 (operand -> operandName .)
    }               reduce using rule 88 (operand -> operandName .)


state 36

    (89) operand -> literal .
    (               reduce using rule 89 (operand -> literal .)
    LOGIC_AND       reduce using rule 89 (operand -> literal .)
    LOGIC_OR        reduce using rule 89 (operand -> literal .)
    SHR             reduce using rule 89 (operand -> literal .)
    SHL             reduce using rule 89 (operand -> literal .)
    AND             reduce using rule 89 (operand -> literal .)
    MOD             reduce using rule 89 (operand -> literal .)
    DIV             reduce using rule 89 (operand -> literal .)
    STAR            reduce using rule 89 (operand -> literal .)
    XOR             reduce using rule 89 (operand -> literal .)
    OR              reduce using rule 89 (operand -> literal .)
    MINUS           reduce using rule 89 (operand -> literal .)
    PLUS            reduce using rule 89 (operand -> literal .)
    GE              reduce using rule 89 (operand -> literal .)
    GT              reduce using rule 89 (operand -> literal .)
    LE              reduce using rule 89 (operand -> literal .)
    LT              reduce using rule 89 (operand -> literal .)
    NE              reduce using rule 89 (operand -> literal .)
    EQ              reduce using rule 89 (operand -> literal .)
    NEWL            reduce using rule 89 (operand -> literal .)
    ;               reduce using rule 89 (operand -> literal .)
    )               reduce using rule 89 (operand -> literal .)
    ,               reduce using rule 89 (operand -> literal .)
    }               reduce using rule 89 (operand -> literal .)


state 37

    (94) type_ -> typeName .
    (               reduce using rule 94 (type_ -> typeName .)
    {               reduce using rule 94 (type_ -> typeName .)
    NEWL            reduce using rule 94 (type_ -> typeName .)
    ;               reduce using rule 94 (type_ -> typeName .)
    ,               reduce using rule 94 (type_ -> typeName .)
    )               reduce using rule 94 (type_ -> typeName .)


state 38

    (91) literal -> functionLit .
    (               reduce using rule 91 (literal -> functionLit .)
    LOGIC_AND       reduce using rule 91 (literal -> functionLit .)
    LOGIC_OR        reduce using rule 91 (literal -> functionLit .)
    SHR             reduce using rule 91 (literal -> functionLit .)
    SHL             reduce using rule 91 (literal -> functionLit .)
    AND             reduce using rule 91 (literal -> functionLit .)
    MOD             reduce using rule 91 (literal -> functionLit .)
    DIV             reduce using rule 91 (literal -> functionLit .)
    STAR            reduce using rule 91 (literal -> functionLit .)
    XOR             reduce using rule 91 (literal -> functionLit .)
    OR              reduce using rule 91 (literal -> functionLit .)
    MINUS           reduce using rule 91 (literal -> functionLit .)
    PLUS            reduce using rule 91 (literal -> functionLit .)
    GE              reduce using rule 91 (literal -> functionLit .)
    GT              reduce using rule 91 (literal -> functionLit .)
    LE              reduce using rule 91 (literal -> functionLit .)
    LT              reduce using rule 91 (literal -> functionLit .)
    NE              reduce using rule 91 (literal -> functionLit .)
    EQ              reduce using rule 91 (literal -> functionLit .)
    NEWL            reduce using rule 91 (literal -> functionLit .)
    ;               reduce using rule 91 (literal -> functionLit .)
    )               reduce using rule 91 (literal -> functionLit .)
    ,               reduce using rule 91 (literal -> functionLit .)
    }               reduce using rule 91 (literal -> functionLit .)


state 39

    (92) literal -> basicLit .
    (               reduce using rule 92 (literal -> basicLit .)
    LOGIC_AND       reduce using rule 92 (literal -> basicLit .)
    LOGIC_OR        reduce using rule 92 (literal -> basicLit .)
    SHR             reduce using rule 92 (literal -> basicLit .)
    SHL             reduce using rule 92 (literal -> basicLit .)
    AND             reduce using rule 92 (literal -> basicLit .)
    MOD             reduce using rule 92 (literal -> basicLit .)
    DIV             reduce using rule 92 (literal -> basicLit .)
    STAR            reduce using rule 92 (literal -> basicLit .)
    XOR             reduce using rule 92 (literal -> basicLit .)
    OR              reduce using rule 92 (literal -> basicLit .)
    MINUS           reduce using rule 92 (literal -> basicLit .)
    PLUS            reduce using rule 92 (literal -> basicLit .)
    GE              reduce using rule 92 (literal -> basicLit .)
    GT              reduce using rule 92 (literal -> basicLit .)
    LE              reduce using rule 92 (literal -> basicLit .)
    LT              reduce using rule 92 (literal -> basicLit .)
    NE              reduce using rule 92 (literal -> basicLit .)
    EQ              reduce using rule 92 (literal -> basicLit .)
    NEWL            reduce using rule 92 (literal -> basicLit .)
    ;               reduce using rule 92 (literal -> basicLit .)
    )               reduce using rule 92 (literal -> basicLit .)
    ,               reduce using rule 92 (literal -> basicLit .)
    }               reduce using rule 92 (literal -> basicLit .)


state 40

    (95) typeName -> numericType .
    (               reduce using rule 95 (typeName -> numericType .)
    {               reduce using rule 95 (typeName -> numericType .)
    NEWL            reduce using rule 95 (typeName -> numericType .)
    ;               reduce using rule 95 (typeName -> numericType .)
    ,               reduce using rule 95 (typeName -> numericType .)
    )               reduce using rule 95 (typeName -> numericType .)


state 41

    (96) typeName -> STRING .
    (               reduce using rule 96 (typeName -> STRING .)
    {               reduce using rule 96 (typeName -> STRING .)
    NEWL            reduce using rule 96 (typeName -> STRING .)
    ;               reduce using rule 96 (typeName -> STRING .)
    ,               reduce using rule 96 (typeName -> STRING .)
    )               reduce using rule 96 (typeName -> STRING .)


state 42

    (97) typeName -> BOOL .
    (               reduce using rule 97 (typeName -> BOOL .)
    {               reduce using rule 97 (typeName -> BOOL .)
    NEWL            reduce using rule 97 (typeName -> BOOL .)
    ;               reduce using rule 97 (typeName -> BOOL .)
    ,               reduce using rule 97 (typeName -> BOOL .)
    )               reduce using rule 97 (typeName -> BOOL .)


state 43

    (98) typeName -> RUNE .
    (               reduce using rule 98 (typeName -> RUNE .)
    {               reduce using rule 98 (typeName -> RUNE .)
    NEWL            reduce using rule 98 (typeName -> RUNE .)
    ;               reduce using rule 98 (typeName -> RUNE .)
    ,               reduce using rule 98 (typeName -> RUNE .)
    )               reduce using rule 98 (typeName -> RUNE .)


state 44

    (113) basicLit -> INT_LIT .
    (               reduce using rule 113 (basicLit -> INT_LIT .)
    LOGIC_AND       reduce using rule 113 (basicLit -> INT_LIT .)
    LOGIC_OR        reduce using rule 113 (basicLit -> INT_LIT .)
    SHR             reduce using rule 113 (basicLit -> INT_LIT .)
    SHL             reduce using rule 113 (basicLit -> INT_LIT .)
    AND             reduce using rule 113 (basicLit -> INT_LIT .)
    MOD             reduce using rule 113 (basicLit -> INT_LIT .)
    DIV             reduce using rule 113 (basicLit -> INT_LIT .)
    STAR            reduce using rule 113 (basicLit -> INT_LIT .)
    XOR             reduce using rule 113 (basicLit -> INT_LIT .)
    OR              reduce using rule 113 (basicLit -> INT_LIT .)
    MINUS           reduce using rule 113 (basicLit -> INT_LIT .)
    PLUS            reduce using rule 113 (basicLit -> INT_LIT .)
    GE              reduce using rule 113 (basicLit -> INT_LIT .)
    GT              reduce using rule 113 (basicLit -> INT_LIT .)
    LE              reduce using rule 113 (basicLit -> INT_LIT .)
    LT              reduce using rule 113 (basicLit -> INT_LIT .)
    NE              reduce using rule 113 (basicLit -> INT_LIT .)
    EQ              reduce using rule 113 (basicLit -> INT_LIT .)
    NEWL            reduce using rule 113 (basicLit -> INT_LIT .)
    ;               reduce using rule 113 (basicLit -> INT_LIT .)
    )               reduce using rule 113 (basicLit -> INT_LIT .)
    ,               reduce using rule 113 (basicLit -> INT_LIT .)
    }               reduce using rule 113 (basicLit -> INT_LIT .)


state 45

    (114) basicLit -> FLOAT_LIT .
    (116) basicLit -> FLOAT_LIT . EXPONENT
    (               reduce using rule 114 (basicLit -> FLOAT_LIT .)
    LOGIC_AND       reduce using rule 114 (basicLit -> FLOAT_LIT .)
    LOGIC_OR        reduce using rule 114 (basicLit -> FLOAT_LIT .)
    SHR             reduce using rule 114 (basicLit -> FLOAT_LIT .)
    SHL             reduce using rule 114 (basicLit -> FLOAT_LIT .)
    AND             reduce using rule 114 (basicLit -> FLOAT_LIT .)
    MOD             reduce using rule 114 (basicLit -> FLOAT_LIT .)
    DIV             reduce using rule 114 (basicLit -> FLOAT_LIT .)
    STAR            reduce using rule 114 (basicLit -> FLOAT_LIT .)
    XOR             reduce using rule 114 (basicLit -> FLOAT_LIT .)
    OR              reduce using rule 114 (basicLit -> FLOAT_LIT .)
    MINUS           reduce using rule 114 (basicLit -> FLOAT_LIT .)
    PLUS            reduce using rule 114 (basicLit -> FLOAT_LIT .)
    GE              reduce using rule 114 (basicLit -> FLOAT_LIT .)
    GT              reduce using rule 114 (basicLit -> FLOAT_LIT .)
    LE              reduce using rule 114 (basicLit -> FLOAT_LIT .)
    LT              reduce using rule 114 (basicLit -> FLOAT_LIT .)
    NE              reduce using rule 114 (basicLit -> FLOAT_LIT .)
    EQ              reduce using rule 114 (basicLit -> FLOAT_LIT .)
    NEWL            reduce using rule 114 (basicLit -> FLOAT_LIT .)
    ;               reduce using rule 114 (basicLit -> FLOAT_LIT .)
    )               reduce using rule 114 (basicLit -> FLOAT_LIT .)
    ,               reduce using rule 114 (basicLit -> FLOAT_LIT .)
    }               reduce using rule 114 (basicLit -> FLOAT_LIT .)
    EXPONENT        shift and go to state 145


state 46

    (115) basicLit -> DECIMAL_LIT . EXPONENT
    (127) INT_LIT -> DECIMAL_LIT .
    (122) FLOAT_LIT -> DECIMAL_LIT . .
    (123) FLOAT_LIT -> DECIMAL_LIT . . DECIMAL_LIT
    EXPONENT        shift and go to state 146
    (               reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    SHR             reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    SHL             reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    AND             reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    MOD             reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    DIV             reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    STAR            reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    XOR             reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    OR              reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    MINUS           reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    PLUS            reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    GE              reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    GT              reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    LE              reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    LT              reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    NE              reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    EQ              reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    NEWL            reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    ;               reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    )               reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    ,               reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    }               reduce using rule 127 (INT_LIT -> DECIMAL_LIT .)
    .               shift and go to state 147


state 47

    (117) basicLit -> FALSE .
    (               reduce using rule 117 (basicLit -> FALSE .)
    LOGIC_AND       reduce using rule 117 (basicLit -> FALSE .)
    LOGIC_OR        reduce using rule 117 (basicLit -> FALSE .)
    SHR             reduce using rule 117 (basicLit -> FALSE .)
    SHL             reduce using rule 117 (basicLit -> FALSE .)
    AND             reduce using rule 117 (basicLit -> FALSE .)
    MOD             reduce using rule 117 (basicLit -> FALSE .)
    DIV             reduce using rule 117 (basicLit -> FALSE .)
    STAR            reduce using rule 117 (basicLit -> FALSE .)
    XOR             reduce using rule 117 (basicLit -> FALSE .)
    OR              reduce using rule 117 (basicLit -> FALSE .)
    MINUS           reduce using rule 117 (basicLit -> FALSE .)
    PLUS            reduce using rule 117 (basicLit -> FALSE .)
    GE              reduce using rule 117 (basicLit -> FALSE .)
    GT              reduce using rule 117 (basicLit -> FALSE .)
    LE              reduce using rule 117 (basicLit -> FALSE .)
    LT              reduce using rule 117 (basicLit -> FALSE .)
    NE              reduce using rule 117 (basicLit -> FALSE .)
    EQ              reduce using rule 117 (basicLit -> FALSE .)
    NEWL            reduce using rule 117 (basicLit -> FALSE .)
    ;               reduce using rule 117 (basicLit -> FALSE .)
    )               reduce using rule 117 (basicLit -> FALSE .)
    ,               reduce using rule 117 (basicLit -> FALSE .)
    }               reduce using rule 117 (basicLit -> FALSE .)


state 48

    (118) basicLit -> TRUE .
    (               reduce using rule 118 (basicLit -> TRUE .)
    LOGIC_AND       reduce using rule 118 (basicLit -> TRUE .)
    LOGIC_OR        reduce using rule 118 (basicLit -> TRUE .)
    SHR             reduce using rule 118 (basicLit -> TRUE .)
    SHL             reduce using rule 118 (basicLit -> TRUE .)
    AND             reduce using rule 118 (basicLit -> TRUE .)
    MOD             reduce using rule 118 (basicLit -> TRUE .)
    DIV             reduce using rule 118 (basicLit -> TRUE .)
    STAR            reduce using rule 118 (basicLit -> TRUE .)
    XOR             reduce using rule 118 (basicLit -> TRUE .)
    OR              reduce using rule 118 (basicLit -> TRUE .)
    MINUS           reduce using rule 118 (basicLit -> TRUE .)
    PLUS            reduce using rule 118 (basicLit -> TRUE .)
    GE              reduce using rule 118 (basicLit -> TRUE .)
    GT              reduce using rule 118 (basicLit -> TRUE .)
    LE              reduce using rule 118 (basicLit -> TRUE .)
    LT              reduce using rule 118 (basicLit -> TRUE .)
    NE              reduce using rule 118 (basicLit -> TRUE .)
    EQ              reduce using rule 118 (basicLit -> TRUE .)
    NEWL            reduce using rule 118 (basicLit -> TRUE .)
    ;               reduce using rule 118 (basicLit -> TRUE .)
    )               reduce using rule 118 (basicLit -> TRUE .)
    ,               reduce using rule 118 (basicLit -> TRUE .)
    }               reduce using rule 118 (basicLit -> TRUE .)


state 49

    (119) basicLit -> RUNE_LIT .
    (               reduce using rule 119 (basicLit -> RUNE_LIT .)
    LOGIC_AND       reduce using rule 119 (basicLit -> RUNE_LIT .)
    LOGIC_OR        reduce using rule 119 (basicLit -> RUNE_LIT .)
    SHR             reduce using rule 119 (basicLit -> RUNE_LIT .)
    SHL             reduce using rule 119 (basicLit -> RUNE_LIT .)
    AND             reduce using rule 119 (basicLit -> RUNE_LIT .)
    MOD             reduce using rule 119 (basicLit -> RUNE_LIT .)
    DIV             reduce using rule 119 (basicLit -> RUNE_LIT .)
    STAR            reduce using rule 119 (basicLit -> RUNE_LIT .)
    XOR             reduce using rule 119 (basicLit -> RUNE_LIT .)
    OR              reduce using rule 119 (basicLit -> RUNE_LIT .)
    MINUS           reduce using rule 119 (basicLit -> RUNE_LIT .)
    PLUS            reduce using rule 119 (basicLit -> RUNE_LIT .)
    GE              reduce using rule 119 (basicLit -> RUNE_LIT .)
    GT              reduce using rule 119 (basicLit -> RUNE_LIT .)
    LE              reduce using rule 119 (basicLit -> RUNE_LIT .)
    LT              reduce using rule 119 (basicLit -> RUNE_LIT .)
    NE              reduce using rule 119 (basicLit -> RUNE_LIT .)
    EQ              reduce using rule 119 (basicLit -> RUNE_LIT .)
    NEWL            reduce using rule 119 (basicLit -> RUNE_LIT .)
    ;               reduce using rule 119 (basicLit -> RUNE_LIT .)
    )               reduce using rule 119 (basicLit -> RUNE_LIT .)
    ,               reduce using rule 119 (basicLit -> RUNE_LIT .)
    }               reduce using rule 119 (basicLit -> RUNE_LIT .)


state 50

    (120) basicLit -> STRING_LIT .
    (               reduce using rule 120 (basicLit -> STRING_LIT .)
    LOGIC_AND       reduce using rule 120 (basicLit -> STRING_LIT .)
    LOGIC_OR        reduce using rule 120 (basicLit -> STRING_LIT .)
    SHR             reduce using rule 120 (basicLit -> STRING_LIT .)
    SHL             reduce using rule 120 (basicLit -> STRING_LIT .)
    AND             reduce using rule 120 (basicLit -> STRING_LIT .)
    MOD             reduce using rule 120 (basicLit -> STRING_LIT .)
    DIV             reduce using rule 120 (basicLit -> STRING_LIT .)
    STAR            reduce using rule 120 (basicLit -> STRING_LIT .)
    XOR             reduce using rule 120 (basicLit -> STRING_LIT .)
    OR              reduce using rule 120 (basicLit -> STRING_LIT .)
    MINUS           reduce using rule 120 (basicLit -> STRING_LIT .)
    PLUS            reduce using rule 120 (basicLit -> STRING_LIT .)
    GE              reduce using rule 120 (basicLit -> STRING_LIT .)
    GT              reduce using rule 120 (basicLit -> STRING_LIT .)
    LE              reduce using rule 120 (basicLit -> STRING_LIT .)
    LT              reduce using rule 120 (basicLit -> STRING_LIT .)
    NE              reduce using rule 120 (basicLit -> STRING_LIT .)
    EQ              reduce using rule 120 (basicLit -> STRING_LIT .)
    NEWL            reduce using rule 120 (basicLit -> STRING_LIT .)
    ;               reduce using rule 120 (basicLit -> STRING_LIT .)
    )               reduce using rule 120 (basicLit -> STRING_LIT .)
    ,               reduce using rule 120 (basicLit -> STRING_LIT .)
    }               reduce using rule 120 (basicLit -> STRING_LIT .)


state 51

    (99) numericType -> F32 .
    (               reduce using rule 99 (numericType -> F32 .)
    {               reduce using rule 99 (numericType -> F32 .)
    NEWL            reduce using rule 99 (numericType -> F32 .)
    ;               reduce using rule 99 (numericType -> F32 .)
    ,               reduce using rule 99 (numericType -> F32 .)
    )               reduce using rule 99 (numericType -> F32 .)


state 52

    (100) numericType -> F64 .
    (               reduce using rule 100 (numericType -> F64 .)
    {               reduce using rule 100 (numericType -> F64 .)
    NEWL            reduce using rule 100 (numericType -> F64 .)
    ;               reduce using rule 100 (numericType -> F64 .)
    ,               reduce using rule 100 (numericType -> F64 .)
    )               reduce using rule 100 (numericType -> F64 .)


state 53

    (101) numericType -> INT .
    (               reduce using rule 101 (numericType -> INT .)
    {               reduce using rule 101 (numericType -> INT .)
    NEWL            reduce using rule 101 (numericType -> INT .)
    ;               reduce using rule 101 (numericType -> INT .)
    ,               reduce using rule 101 (numericType -> INT .)
    )               reduce using rule 101 (numericType -> INT .)


state 54

    (102) numericType -> ISIZE .
    (               reduce using rule 102 (numericType -> ISIZE .)
    {               reduce using rule 102 (numericType -> ISIZE .)
    NEWL            reduce using rule 102 (numericType -> ISIZE .)
    ;               reduce using rule 102 (numericType -> ISIZE .)
    ,               reduce using rule 102 (numericType -> ISIZE .)
    )               reduce using rule 102 (numericType -> ISIZE .)


state 55

    (103) numericType -> I64 .
    (               reduce using rule 103 (numericType -> I64 .)
    {               reduce using rule 103 (numericType -> I64 .)
    NEWL            reduce using rule 103 (numericType -> I64 .)
    ;               reduce using rule 103 (numericType -> I64 .)
    ,               reduce using rule 103 (numericType -> I64 .)
    )               reduce using rule 103 (numericType -> I64 .)


state 56

    (104) numericType -> I32 .
    (               reduce using rule 104 (numericType -> I32 .)
    {               reduce using rule 104 (numericType -> I32 .)
    NEWL            reduce using rule 104 (numericType -> I32 .)
    ;               reduce using rule 104 (numericType -> I32 .)
    ,               reduce using rule 104 (numericType -> I32 .)
    )               reduce using rule 104 (numericType -> I32 .)


state 57

    (105) numericType -> I16 .
    (               reduce using rule 105 (numericType -> I16 .)
    {               reduce using rule 105 (numericType -> I16 .)
    NEWL            reduce using rule 105 (numericType -> I16 .)
    ;               reduce using rule 105 (numericType -> I16 .)
    ,               reduce using rule 105 (numericType -> I16 .)
    )               reduce using rule 105 (numericType -> I16 .)


state 58

    (106) numericType -> I8 .
    (               reduce using rule 106 (numericType -> I8 .)
    {               reduce using rule 106 (numericType -> I8 .)
    NEWL            reduce using rule 106 (numericType -> I8 .)
    ;               reduce using rule 106 (numericType -> I8 .)
    ,               reduce using rule 106 (numericType -> I8 .)
    )               reduce using rule 106 (numericType -> I8 .)


state 59

    (107) numericType -> UINT .
    (               reduce using rule 107 (numericType -> UINT .)
    {               reduce using rule 107 (numericType -> UINT .)
    NEWL            reduce using rule 107 (numericType -> UINT .)
    ;               reduce using rule 107 (numericType -> UINT .)
    ,               reduce using rule 107 (numericType -> UINT .)
    )               reduce using rule 107 (numericType -> UINT .)


state 60

    (108) numericType -> USIZE .
    (               reduce using rule 108 (numericType -> USIZE .)
    {               reduce using rule 108 (numericType -> USIZE .)
    NEWL            reduce using rule 108 (numericType -> USIZE .)
    ;               reduce using rule 108 (numericType -> USIZE .)
    ,               reduce using rule 108 (numericType -> USIZE .)
    )               reduce using rule 108 (numericType -> USIZE .)


state 61

    (109) numericType -> U64 .
    (               reduce using rule 109 (numericType -> U64 .)
    {               reduce using rule 109 (numericType -> U64 .)
    NEWL            reduce using rule 109 (numericType -> U64 .)
    ;               reduce using rule 109 (numericType -> U64 .)
    ,               reduce using rule 109 (numericType -> U64 .)
    )               reduce using rule 109 (numericType -> U64 .)


state 62

    (110) numericType -> U32 .
    (               reduce using rule 110 (numericType -> U32 .)
    {               reduce using rule 110 (numericType -> U32 .)
    NEWL            reduce using rule 110 (numericType -> U32 .)
    ;               reduce using rule 110 (numericType -> U32 .)
    ,               reduce using rule 110 (numericType -> U32 .)
    )               reduce using rule 110 (numericType -> U32 .)


state 63

    (111) numericType -> U16 .
    (               reduce using rule 111 (numericType -> U16 .)
    {               reduce using rule 111 (numericType -> U16 .)
    NEWL            reduce using rule 111 (numericType -> U16 .)
    ;               reduce using rule 111 (numericType -> U16 .)
    ,               reduce using rule 111 (numericType -> U16 .)
    )               reduce using rule 111 (numericType -> U16 .)


state 64

    (112) numericType -> U8 .
    (               reduce using rule 112 (numericType -> U8 .)
    {               reduce using rule 112 (numericType -> U8 .)
    NEWL            reduce using rule 112 (numericType -> U8 .)
    ;               reduce using rule 112 (numericType -> U8 .)
    ,               reduce using rule 112 (numericType -> U8 .)
    )               reduce using rule 112 (numericType -> U8 .)


state 65

    (124) INT_LIT -> HEX_LIT .
    (               reduce using rule 124 (INT_LIT -> HEX_LIT .)
    LOGIC_AND       reduce using rule 124 (INT_LIT -> HEX_LIT .)
    LOGIC_OR        reduce using rule 124 (INT_LIT -> HEX_LIT .)
    SHR             reduce using rule 124 (INT_LIT -> HEX_LIT .)
    SHL             reduce using rule 124 (INT_LIT -> HEX_LIT .)
    AND             reduce using rule 124 (INT_LIT -> HEX_LIT .)
    MOD             reduce using rule 124 (INT_LIT -> HEX_LIT .)
    DIV             reduce using rule 124 (INT_LIT -> HEX_LIT .)
    STAR            reduce using rule 124 (INT_LIT -> HEX_LIT .)
    XOR             reduce using rule 124 (INT_LIT -> HEX_LIT .)
    OR              reduce using rule 124 (INT_LIT -> HEX_LIT .)
    MINUS           reduce using rule 124 (INT_LIT -> HEX_LIT .)
    PLUS            reduce using rule 124 (INT_LIT -> HEX_LIT .)
    GE              reduce using rule 124 (INT_LIT -> HEX_LIT .)
    GT              reduce using rule 124 (INT_LIT -> HEX_LIT .)
    LE              reduce using rule 124 (INT_LIT -> HEX_LIT .)
    LT              reduce using rule 124 (INT_LIT -> HEX_LIT .)
    NE              reduce using rule 124 (INT_LIT -> HEX_LIT .)
    EQ              reduce using rule 124 (INT_LIT -> HEX_LIT .)
    NEWL            reduce using rule 124 (INT_LIT -> HEX_LIT .)
    ;               reduce using rule 124 (INT_LIT -> HEX_LIT .)
    )               reduce using rule 124 (INT_LIT -> HEX_LIT .)
    ,               reduce using rule 124 (INT_LIT -> HEX_LIT .)
    }               reduce using rule 124 (INT_LIT -> HEX_LIT .)


state 66

    (125) INT_LIT -> OCTAL_LIT .
    (               reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    LOGIC_AND       reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    LOGIC_OR        reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    SHR             reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    SHL             reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    AND             reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    MOD             reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    DIV             reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    STAR            reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    XOR             reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    OR              reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    MINUS           reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    PLUS            reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    GE              reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    GT              reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    LE              reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    LT              reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    NE              reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    EQ              reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    NEWL            reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    ;               reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    )               reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    ,               reduce using rule 125 (INT_LIT -> OCTAL_LIT .)
    }               reduce using rule 125 (INT_LIT -> OCTAL_LIT .)


state 67

    (126) INT_LIT -> BINARY_LIT .
    (               reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    LOGIC_AND       reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    LOGIC_OR        reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    SHR             reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    SHL             reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    AND             reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    MOD             reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    DIV             reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    STAR            reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    XOR             reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    OR              reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    MINUS           reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    PLUS            reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    GE              reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    GT              reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    LE              reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    LT              reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    NE              reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    EQ              reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    NEWL            reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    ;               reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    )               reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    ,               reduce using rule 126 (INT_LIT -> BINARY_LIT .)
    }               reduce using rule 126 (INT_LIT -> BINARY_LIT .)


state 68

    (121) FLOAT_LIT -> . . DECIMAL_LIT
    DECIMAL_LIT     shift and go to state 148


state 69

    (2) sourceFile -> moduleClause orphanStmtList .
    $end            reduce using rule 2 (sourceFile -> moduleClause orphanStmtList .)


state 70

    (7) sourceFile -> moduleClause importDecls . orphanStmtList
    (15) sourceFile -> moduleClause importDecls . topLevelDecls
    (23) sourceFile -> moduleClause importDecls . topLevelDecls orphanStmtList
    (31) importDecls -> importDecls . importDecl eos
    (41) orphanStmtList -> . statementList eos
    (39) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (40) topLevelDecls -> . topLevelDecl eos
    (33) importDecl -> . IMPORT importSpec
    (64) statementList -> . statementList eos statement
    (65) statementList -> . statement
    (42) topLevelDecl -> . functionDecl
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (47) functionDecl -> . FN IDENTIFIER signature
    (48) functionDecl -> . FN IDENTIFIER function_
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IMPORT          shift and go to state 15
    FN              shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    orphanStmtList                 shift and go to state 149
    topLevelDecls                  shift and go to state 150
    importDecl                     shift and go to state 79
    statementList                  shift and go to state 7
    topLevelDecl                   shift and go to state 12
    statement                      shift and go to state 13
    functionDecl                   shift and go to state 16
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 71

    (10) sourceFile -> moduleClause topLevelDecls .
    (18) sourceFile -> moduleClause topLevelDecls . orphanStmtList
    (39) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (64) statementList -> . statementList eos statement
    (65) statementList -> . statement
    (47) functionDecl -> . FN IDENTIFIER signature
    (48) functionDecl -> . FN IDENTIFIER function_
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 10 (sourceFile -> moduleClause topLevelDecls .)
    FN              shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    orphanStmtList                 shift and go to state 151
    topLevelDecl                   shift and go to state 81
    statementList                  shift and go to state 7
    functionDecl                   shift and go to state 16
    statement                      shift and go to state 13
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 72

    (3) sourceFile -> cPreprocessors orphanStmtList .
    $end            reduce using rule 3 (sourceFile -> cPreprocessors orphanStmtList .)


state 73

    (5) sourceFile -> cPreprocessors moduleClause . orphanStmtList
    (8) sourceFile -> cPreprocessors moduleClause . importDecls orphanStmtList
    (13) sourceFile -> cPreprocessors moduleClause . topLevelDecls
    (16) sourceFile -> cPreprocessors moduleClause . importDecls topLevelDecls
    (21) sourceFile -> cPreprocessors moduleClause . topLevelDecls orphanStmtList
    (24) sourceFile -> cPreprocessors moduleClause . importDecls topLevelDecls orphanStmtList
    (41) orphanStmtList -> . statementList eos
    (31) importDecls -> . importDecls importDecl eos
    (32) importDecls -> . importDecl eos
    (39) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (40) topLevelDecls -> . topLevelDecl eos
    (64) statementList -> . statementList eos statement
    (65) statementList -> . statement
    (33) importDecl -> . IMPORT importSpec
    (42) topLevelDecl -> . functionDecl
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (47) functionDecl -> . FN IDENTIFIER signature
    (48) functionDecl -> . FN IDENTIFIER function_
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IMPORT          shift and go to state 15
    FN              shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    orphanStmtList                 shift and go to state 152
    importDecls                    shift and go to state 153
    topLevelDecls                  shift and go to state 154
    statementList                  shift and go to state 7
    importDecl                     shift and go to state 11
    topLevelDecl                   shift and go to state 12
    statement                      shift and go to state 13
    functionDecl                   shift and go to state 16
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 74

    (6) sourceFile -> cPreprocessors importDecls . orphanStmtList
    (14) sourceFile -> cPreprocessors importDecls . topLevelDecls
    (22) sourceFile -> cPreprocessors importDecls . topLevelDecls orphanStmtList
    (31) importDecls -> importDecls . importDecl eos
    (41) orphanStmtList -> . statementList eos
    (39) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (40) topLevelDecls -> . topLevelDecl eos
    (33) importDecl -> . IMPORT importSpec
    (64) statementList -> . statementList eos statement
    (65) statementList -> . statement
    (42) topLevelDecl -> . functionDecl
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (47) functionDecl -> . FN IDENTIFIER signature
    (48) functionDecl -> . FN IDENTIFIER function_
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IMPORT          shift and go to state 15
    FN              shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    orphanStmtList                 shift and go to state 155
    topLevelDecls                  shift and go to state 156
    importDecl                     shift and go to state 79
    statementList                  shift and go to state 7
    topLevelDecl                   shift and go to state 12
    statement                      shift and go to state 13
    functionDecl                   shift and go to state 16
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 75

    (11) sourceFile -> cPreprocessors topLevelDecls .
    (19) sourceFile -> cPreprocessors topLevelDecls . orphanStmtList
    (39) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (64) statementList -> . statementList eos statement
    (65) statementList -> . statement
    (47) functionDecl -> . FN IDENTIFIER signature
    (48) functionDecl -> . FN IDENTIFIER function_
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 11 (sourceFile -> cPreprocessors topLevelDecls .)
    FN              shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    orphanStmtList                 shift and go to state 157
    topLevelDecl                   shift and go to state 81
    statementList                  shift and go to state 7
    functionDecl                   shift and go to state 16
    statement                      shift and go to state 13
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 76

    (26) cPreprocessors -> cPreprocessors cPreprocessor . eos
    (128) eos -> . eos NEWL
    (129) eos -> . NEWL
    (130) eos -> . eos ;
    (131) eos -> . ;
    NEWL            shift and go to state 83
    ;               shift and go to state 84

    eos                            shift and go to state 158

state 77

    (4) sourceFile -> importDecls orphanStmtList .
    $end            reduce using rule 4 (sourceFile -> importDecls orphanStmtList .)


state 78

    (12) sourceFile -> importDecls topLevelDecls .
    (20) sourceFile -> importDecls topLevelDecls . orphanStmtList
    (39) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (64) statementList -> . statementList eos statement
    (65) statementList -> . statement
    (47) functionDecl -> . FN IDENTIFIER signature
    (48) functionDecl -> . FN IDENTIFIER function_
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 12 (sourceFile -> importDecls topLevelDecls .)
    FN              shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    orphanStmtList                 shift and go to state 159
    topLevelDecl                   shift and go to state 81
    statementList                  shift and go to state 7
    functionDecl                   shift and go to state 16
    statement                      shift and go to state 13
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 79

    (31) importDecls -> importDecls importDecl . eos
    (128) eos -> . eos NEWL
    (129) eos -> . NEWL
    (130) eos -> . eos ;
    (131) eos -> . ;
    NEWL            shift and go to state 83
    ;               shift and go to state 84

    eos                            shift and go to state 160

state 80

    (17) sourceFile -> topLevelDecls orphanStmtList .
    $end            reduce using rule 17 (sourceFile -> topLevelDecls orphanStmtList .)


state 81

    (39) topLevelDecls -> topLevelDecls topLevelDecl . eos
    (128) eos -> . eos NEWL
    (129) eos -> . NEWL
    (130) eos -> . eos ;
    (131) eos -> . ;
    NEWL            shift and go to state 83
    ;               shift and go to state 84

    eos                            shift and go to state 161

state 82

    (41) orphanStmtList -> statementList eos .
    (64) statementList -> statementList eos . statement
    (128) eos -> eos . NEWL
    (130) eos -> eos . ;
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 41 (orphanStmtList -> statementList eos .)
    NEWL            shift and go to state 163
    ;               shift and go to state 164
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    FN              shift and go to state 140
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    statement                      shift and go to state 162
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 83

    (129) eos -> NEWL .
    NEWL            reduce using rule 129 (eos -> NEWL .)
    ;               reduce using rule 129 (eos -> NEWL .)
    IDENTIFIER      reduce using rule 129 (eos -> NEWL .)
    AND             reduce using rule 129 (eos -> NEWL .)
    EXCLM           reduce using rule 129 (eos -> NEWL .)
    MINUS           reduce using rule 129 (eos -> NEWL .)
    (               reduce using rule 129 (eos -> NEWL .)
    STRING          reduce using rule 129 (eos -> NEWL .)
    BOOL            reduce using rule 129 (eos -> NEWL .)
    RUNE            reduce using rule 129 (eos -> NEWL .)
    FN              reduce using rule 129 (eos -> NEWL .)
    DECIMAL_LIT     reduce using rule 129 (eos -> NEWL .)
    FALSE           reduce using rule 129 (eos -> NEWL .)
    TRUE            reduce using rule 129 (eos -> NEWL .)
    RUNE_LIT        reduce using rule 129 (eos -> NEWL .)
    STRING_LIT      reduce using rule 129 (eos -> NEWL .)
    F32             reduce using rule 129 (eos -> NEWL .)
    F64             reduce using rule 129 (eos -> NEWL .)
    INT             reduce using rule 129 (eos -> NEWL .)
    ISIZE           reduce using rule 129 (eos -> NEWL .)
    I64             reduce using rule 129 (eos -> NEWL .)
    I32             reduce using rule 129 (eos -> NEWL .)
    I16             reduce using rule 129 (eos -> NEWL .)
    I8              reduce using rule 129 (eos -> NEWL .)
    UINT            reduce using rule 129 (eos -> NEWL .)
    USIZE           reduce using rule 129 (eos -> NEWL .)
    U64             reduce using rule 129 (eos -> NEWL .)
    U32             reduce using rule 129 (eos -> NEWL .)
    U16             reduce using rule 129 (eos -> NEWL .)
    U8              reduce using rule 129 (eos -> NEWL .)
    HEX_LIT         reduce using rule 129 (eos -> NEWL .)
    OCTAL_LIT       reduce using rule 129 (eos -> NEWL .)
    BINARY_LIT      reduce using rule 129 (eos -> NEWL .)
    .               reduce using rule 129 (eos -> NEWL .)
    $end            reduce using rule 129 (eos -> NEWL .)
    MODULE          reduce using rule 129 (eos -> NEWL .)
    C_PREPR         reduce using rule 129 (eos -> NEWL .)
    IMPORT          reduce using rule 129 (eos -> NEWL .)


state 84

    (131) eos -> ; .
    NEWL            reduce using rule 131 (eos -> ; .)
    ;               reduce using rule 131 (eos -> ; .)
    IDENTIFIER      reduce using rule 131 (eos -> ; .)
    AND             reduce using rule 131 (eos -> ; .)
    EXCLM           reduce using rule 131 (eos -> ; .)
    MINUS           reduce using rule 131 (eos -> ; .)
    (               reduce using rule 131 (eos -> ; .)
    STRING          reduce using rule 131 (eos -> ; .)
    BOOL            reduce using rule 131 (eos -> ; .)
    RUNE            reduce using rule 131 (eos -> ; .)
    FN              reduce using rule 131 (eos -> ; .)
    DECIMAL_LIT     reduce using rule 131 (eos -> ; .)
    FALSE           reduce using rule 131 (eos -> ; .)
    TRUE            reduce using rule 131 (eos -> ; .)
    RUNE_LIT        reduce using rule 131 (eos -> ; .)
    STRING_LIT      reduce using rule 131 (eos -> ; .)
    F32             reduce using rule 131 (eos -> ; .)
    F64             reduce using rule 131 (eos -> ; .)
    INT             reduce using rule 131 (eos -> ; .)
    ISIZE           reduce using rule 131 (eos -> ; .)
    I64             reduce using rule 131 (eos -> ; .)
    I32             reduce using rule 131 (eos -> ; .)
    I16             reduce using rule 131 (eos -> ; .)
    I8              reduce using rule 131 (eos -> ; .)
    UINT            reduce using rule 131 (eos -> ; .)
    USIZE           reduce using rule 131 (eos -> ; .)
    U64             reduce using rule 131 (eos -> ; .)
    U32             reduce using rule 131 (eos -> ; .)
    U16             reduce using rule 131 (eos -> ; .)
    U8              reduce using rule 131 (eos -> ; .)
    HEX_LIT         reduce using rule 131 (eos -> ; .)
    OCTAL_LIT       reduce using rule 131 (eos -> ; .)
    BINARY_LIT      reduce using rule 131 (eos -> ; .)
    .               reduce using rule 131 (eos -> ; .)
    $end            reduce using rule 131 (eos -> ; .)
    MODULE          reduce using rule 131 (eos -> ; .)
    C_PREPR         reduce using rule 131 (eos -> ; .)
    IMPORT          reduce using rule 131 (eos -> ; .)


state 85

    (25) moduleClause -> MODULE IDENTIFIER . eos
    (128) eos -> . eos NEWL
    (129) eos -> . NEWL
    (130) eos -> . eos ;
    (131) eos -> . ;
    NEWL            shift and go to state 83
    ;               shift and go to state 84

    eos                            shift and go to state 165

state 86

    (27) cPreprocessors -> cPreprocessor eos .
    (128) eos -> eos . NEWL
    (130) eos -> eos . ;
    MODULE          reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    C_PREPR         reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    IMPORT          reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    FN              reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    IDENTIFIER      reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    AND             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    EXCLM           reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    MINUS           reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    (               reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    STRING          reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    BOOL            reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    RUNE            reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    DECIMAL_LIT     reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    FALSE           reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    TRUE            reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    RUNE_LIT        reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    STRING_LIT      reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    F32             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    F64             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    INT             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    ISIZE           reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    I64             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    I32             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    I16             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    I8              reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    UINT            reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    USIZE           reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    U64             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    U32             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    U16             reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    U8              reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    HEX_LIT         reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    OCTAL_LIT       reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    BINARY_LIT      reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    .               reduce using rule 27 (cPreprocessors -> cPreprocessor eos .)
    NEWL            shift and go to state 163
    ;               shift and go to state 164


state 87

    (32) importDecls -> importDecl eos .
    (128) eos -> eos . NEWL
    (130) eos -> eos . ;
    IMPORT          reduce using rule 32 (importDecls -> importDecl eos .)
    FN              reduce using rule 32 (importDecls -> importDecl eos .)
    IDENTIFIER      reduce using rule 32 (importDecls -> importDecl eos .)
    AND             reduce using rule 32 (importDecls -> importDecl eos .)
    EXCLM           reduce using rule 32 (importDecls -> importDecl eos .)
    MINUS           reduce using rule 32 (importDecls -> importDecl eos .)
    (               reduce using rule 32 (importDecls -> importDecl eos .)
    STRING          reduce using rule 32 (importDecls -> importDecl eos .)
    BOOL            reduce using rule 32 (importDecls -> importDecl eos .)
    RUNE            reduce using rule 32 (importDecls -> importDecl eos .)
    DECIMAL_LIT     reduce using rule 32 (importDecls -> importDecl eos .)
    FALSE           reduce using rule 32 (importDecls -> importDecl eos .)
    TRUE            reduce using rule 32 (importDecls -> importDecl eos .)
    RUNE_LIT        reduce using rule 32 (importDecls -> importDecl eos .)
    STRING_LIT      reduce using rule 32 (importDecls -> importDecl eos .)
    F32             reduce using rule 32 (importDecls -> importDecl eos .)
    F64             reduce using rule 32 (importDecls -> importDecl eos .)
    INT             reduce using rule 32 (importDecls -> importDecl eos .)
    ISIZE           reduce using rule 32 (importDecls -> importDecl eos .)
    I64             reduce using rule 32 (importDecls -> importDecl eos .)
    I32             reduce using rule 32 (importDecls -> importDecl eos .)
    I16             reduce using rule 32 (importDecls -> importDecl eos .)
    I8              reduce using rule 32 (importDecls -> importDecl eos .)
    UINT            reduce using rule 32 (importDecls -> importDecl eos .)
    USIZE           reduce using rule 32 (importDecls -> importDecl eos .)
    U64             reduce using rule 32 (importDecls -> importDecl eos .)
    U32             reduce using rule 32 (importDecls -> importDecl eos .)
    U16             reduce using rule 32 (importDecls -> importDecl eos .)
    U8              reduce using rule 32 (importDecls -> importDecl eos .)
    HEX_LIT         reduce using rule 32 (importDecls -> importDecl eos .)
    OCTAL_LIT       reduce using rule 32 (importDecls -> importDecl eos .)
    BINARY_LIT      reduce using rule 32 (importDecls -> importDecl eos .)
    .               reduce using rule 32 (importDecls -> importDecl eos .)
    NEWL            shift and go to state 163
    ;               shift and go to state 164


state 88

    (40) topLevelDecls -> topLevelDecl eos .
    (128) eos -> eos . NEWL
    (130) eos -> eos . ;
    FN              reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    IDENTIFIER      reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    AND             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    EXCLM           reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    MINUS           reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    (               reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    STRING          reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    BOOL            reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    RUNE            reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    DECIMAL_LIT     reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    FALSE           reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    TRUE            reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    RUNE_LIT        reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    STRING_LIT      reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    F32             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    F64             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    INT             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    ISIZE           reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    I64             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    I32             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    I16             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    I8              reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    UINT            reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    USIZE           reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    U64             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    U32             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    U16             reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    U8              reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    HEX_LIT         reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    OCTAL_LIT       reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    BINARY_LIT      reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    .               reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    $end            reduce using rule 40 (topLevelDecls -> topLevelDecl eos .)
    NEWL            shift and go to state 163
    ;               shift and go to state 164


state 89

    (28) cPreprocessor -> C_PREPR C_STRING_LIT .
    NEWL            reduce using rule 28 (cPreprocessor -> C_PREPR C_STRING_LIT .)
    ;               reduce using rule 28 (cPreprocessor -> C_PREPR C_STRING_LIT .)


state 90

    (29) cPreprocessor -> C_PREPR C_PATH_LIT .
    NEWL            reduce using rule 29 (cPreprocessor -> C_PREPR C_PATH_LIT .)
    ;               reduce using rule 29 (cPreprocessor -> C_PREPR C_PATH_LIT .)


state 91

    (30) cPreprocessor -> C_PREPR IDENTIFIER . expressionList
    (62) expressionList -> . expressionList , expression
    (63) expressionList -> . expression
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    IDENTIFIER      shift and go to state 139
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    FN              shift and go to state 140
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    expressionList                 shift and go to state 166
    expression                     shift and go to state 167
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 92

    (33) importDecl -> IMPORT importSpec .
    NEWL            reduce using rule 33 (importDecl -> IMPORT importSpec .)
    ;               reduce using rule 33 (importDecl -> IMPORT importSpec .)


state 93

    (34) importSpec -> importPath .
    NEWL            reduce using rule 34 (importSpec -> importPath .)
    ;               reduce using rule 34 (importSpec -> importPath .)


state 94

    (35) importSpec -> IDENTIFIER . importPath
    (38) importPath -> IDENTIFIER .
    (37) importPath -> . STRING_LIT
    (38) importPath -> . IDENTIFIER
    NEWL            reduce using rule 38 (importPath -> IDENTIFIER .)
    ;               reduce using rule 38 (importPath -> IDENTIFIER .)
    STRING_LIT      shift and go to state 96
    IDENTIFIER      shift and go to state 168

    importPath                     shift and go to state 169

state 95

    (36) importSpec -> . . importPath
    (37) importPath -> . STRING_LIT
    (38) importPath -> . IDENTIFIER
    STRING_LIT      shift and go to state 96
    IDENTIFIER      shift and go to state 168

    importPath                     shift and go to state 170

state 96

    (37) importPath -> STRING_LIT .
    NEWL            reduce using rule 37 (importPath -> STRING_LIT .)
    ;               reduce using rule 37 (importPath -> STRING_LIT .)


state 97

    (47) functionDecl -> FN IDENTIFIER . signature
    (48) functionDecl -> FN IDENTIFIER . function_
    (50) signature -> . parameters
    (51) signature -> . parameters result
    (49) function_ -> . signature block
    (54) parameters -> . ( parameterList , )
    (55) parameters -> . ( parameterList )
    (56) parameters -> . ( )
    (               shift and go to state 101

    signature                      shift and go to state 171
    function_                      shift and go to state 172
    parameters                     shift and go to state 100

state 98

    (49) function_ -> signature . block
    (66) block -> . { statementList }
    {               shift and go to state 174

    block                          shift and go to state 173

state 99

    (61) functionLit -> FN function_ .
    (               reduce using rule 61 (functionLit -> FN function_ .)
    LOGIC_AND       reduce using rule 61 (functionLit -> FN function_ .)
    LOGIC_OR        reduce using rule 61 (functionLit -> FN function_ .)
    SHR             reduce using rule 61 (functionLit -> FN function_ .)
    SHL             reduce using rule 61 (functionLit -> FN function_ .)
    AND             reduce using rule 61 (functionLit -> FN function_ .)
    MOD             reduce using rule 61 (functionLit -> FN function_ .)
    DIV             reduce using rule 61 (functionLit -> FN function_ .)
    STAR            reduce using rule 61 (functionLit -> FN function_ .)
    XOR             reduce using rule 61 (functionLit -> FN function_ .)
    OR              reduce using rule 61 (functionLit -> FN function_ .)
    MINUS           reduce using rule 61 (functionLit -> FN function_ .)
    PLUS            reduce using rule 61 (functionLit -> FN function_ .)
    GE              reduce using rule 61 (functionLit -> FN function_ .)
    GT              reduce using rule 61 (functionLit -> FN function_ .)
    LE              reduce using rule 61 (functionLit -> FN function_ .)
    LT              reduce using rule 61 (functionLit -> FN function_ .)
    NE              reduce using rule 61 (functionLit -> FN function_ .)
    EQ              reduce using rule 61 (functionLit -> FN function_ .)
    NEWL            reduce using rule 61 (functionLit -> FN function_ .)
    ;               reduce using rule 61 (functionLit -> FN function_ .)
    )               reduce using rule 61 (functionLit -> FN function_ .)
    ,               reduce using rule 61 (functionLit -> FN function_ .)
    }               reduce using rule 61 (functionLit -> FN function_ .)


state 100

    (50) signature -> parameters .
    (51) signature -> parameters . result
    (52) result -> . type_
    (53) result -> . parameters
    (94) type_ -> . typeName
    (54) parameters -> . ( parameterList , )
    (55) parameters -> . ( parameterList )
    (56) parameters -> . ( )
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    {               reduce using rule 50 (signature -> parameters .)
    NEWL            reduce using rule 50 (signature -> parameters .)
    ;               reduce using rule 50 (signature -> parameters .)
    (               shift and go to state 101
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64

    parameters                     shift and go to state 175
    result                         shift and go to state 176
    type_                          shift and go to state 177
    typeName                       shift and go to state 37
    numericType                    shift and go to state 40

state 101

    (54) parameters -> ( . parameterList , )
    (55) parameters -> ( . parameterList )
    (56) parameters -> ( . )
    (57) parameterList -> . parameterList , parameterDecl
    (58) parameterList -> . parameterDecl
    (59) parameterDecl -> . type_
    (60) parameterDecl -> . identifierList type_
    (94) type_ -> . typeName
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    )               shift and go to state 179
    IDENTIFIER      shift and go to state 183
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64

    parameterList                  shift and go to state 178
    parameterDecl                  shift and go to state 180
    type_                          shift and go to state 181
    identifierList                 shift and go to state 182
    typeName                       shift and go to state 37
    numericType                    shift and go to state 40

state 102

    (72) assignment -> identifierList assign_op . expressionList
    (62) expressionList -> . expressionList , expression
    (63) expressionList -> . expression
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    IDENTIFIER      shift and go to state 139
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    FN              shift and go to state 140
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    expressionList                 shift and go to state 184
    expression                     shift and go to state 167
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 103

    (44) varDecl -> identifierList DECL_ASGN . expressionList
    (62) expressionList -> . expressionList , expression
    (63) expressionList -> . expression
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    IDENTIFIER      shift and go to state 139
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    FN              shift and go to state 140
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    expressionList                 shift and go to state 185
    expression                     shift and go to state 167
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 104

    (45) identifierList -> identifierList , . IDENTIFIER
    IDENTIFIER      shift and go to state 186


state 105

    (132) assign_op -> SHR_ASGN .
    AND             reduce using rule 132 (assign_op -> SHR_ASGN .)
    EXCLM           reduce using rule 132 (assign_op -> SHR_ASGN .)
    MINUS           reduce using rule 132 (assign_op -> SHR_ASGN .)
    (               reduce using rule 132 (assign_op -> SHR_ASGN .)
    IDENTIFIER      reduce using rule 132 (assign_op -> SHR_ASGN .)
    STRING          reduce using rule 132 (assign_op -> SHR_ASGN .)
    BOOL            reduce using rule 132 (assign_op -> SHR_ASGN .)
    RUNE            reduce using rule 132 (assign_op -> SHR_ASGN .)
    FN              reduce using rule 132 (assign_op -> SHR_ASGN .)
    DECIMAL_LIT     reduce using rule 132 (assign_op -> SHR_ASGN .)
    FALSE           reduce using rule 132 (assign_op -> SHR_ASGN .)
    TRUE            reduce using rule 132 (assign_op -> SHR_ASGN .)
    RUNE_LIT        reduce using rule 132 (assign_op -> SHR_ASGN .)
    STRING_LIT      reduce using rule 132 (assign_op -> SHR_ASGN .)
    F32             reduce using rule 132 (assign_op -> SHR_ASGN .)
    F64             reduce using rule 132 (assign_op -> SHR_ASGN .)
    INT             reduce using rule 132 (assign_op -> SHR_ASGN .)
    ISIZE           reduce using rule 132 (assign_op -> SHR_ASGN .)
    I64             reduce using rule 132 (assign_op -> SHR_ASGN .)
    I32             reduce using rule 132 (assign_op -> SHR_ASGN .)
    I16             reduce using rule 132 (assign_op -> SHR_ASGN .)
    I8              reduce using rule 132 (assign_op -> SHR_ASGN .)
    UINT            reduce using rule 132 (assign_op -> SHR_ASGN .)
    USIZE           reduce using rule 132 (assign_op -> SHR_ASGN .)
    U64             reduce using rule 132 (assign_op -> SHR_ASGN .)
    U32             reduce using rule 132 (assign_op -> SHR_ASGN .)
    U16             reduce using rule 132 (assign_op -> SHR_ASGN .)
    U8              reduce using rule 132 (assign_op -> SHR_ASGN .)
    HEX_LIT         reduce using rule 132 (assign_op -> SHR_ASGN .)
    OCTAL_LIT       reduce using rule 132 (assign_op -> SHR_ASGN .)
    BINARY_LIT      reduce using rule 132 (assign_op -> SHR_ASGN .)
    .               reduce using rule 132 (assign_op -> SHR_ASGN .)


state 106

    (133) assign_op -> SHL_ASGN .
    AND             reduce using rule 133 (assign_op -> SHL_ASGN .)
    EXCLM           reduce using rule 133 (assign_op -> SHL_ASGN .)
    MINUS           reduce using rule 133 (assign_op -> SHL_ASGN .)
    (               reduce using rule 133 (assign_op -> SHL_ASGN .)
    IDENTIFIER      reduce using rule 133 (assign_op -> SHL_ASGN .)
    STRING          reduce using rule 133 (assign_op -> SHL_ASGN .)
    BOOL            reduce using rule 133 (assign_op -> SHL_ASGN .)
    RUNE            reduce using rule 133 (assign_op -> SHL_ASGN .)
    FN              reduce using rule 133 (assign_op -> SHL_ASGN .)
    DECIMAL_LIT     reduce using rule 133 (assign_op -> SHL_ASGN .)
    FALSE           reduce using rule 133 (assign_op -> SHL_ASGN .)
    TRUE            reduce using rule 133 (assign_op -> SHL_ASGN .)
    RUNE_LIT        reduce using rule 133 (assign_op -> SHL_ASGN .)
    STRING_LIT      reduce using rule 133 (assign_op -> SHL_ASGN .)
    F32             reduce using rule 133 (assign_op -> SHL_ASGN .)
    F64             reduce using rule 133 (assign_op -> SHL_ASGN .)
    INT             reduce using rule 133 (assign_op -> SHL_ASGN .)
    ISIZE           reduce using rule 133 (assign_op -> SHL_ASGN .)
    I64             reduce using rule 133 (assign_op -> SHL_ASGN .)
    I32             reduce using rule 133 (assign_op -> SHL_ASGN .)
    I16             reduce using rule 133 (assign_op -> SHL_ASGN .)
    I8              reduce using rule 133 (assign_op -> SHL_ASGN .)
    UINT            reduce using rule 133 (assign_op -> SHL_ASGN .)
    USIZE           reduce using rule 133 (assign_op -> SHL_ASGN .)
    U64             reduce using rule 133 (assign_op -> SHL_ASGN .)
    U32             reduce using rule 133 (assign_op -> SHL_ASGN .)
    U16             reduce using rule 133 (assign_op -> SHL_ASGN .)
    U8              reduce using rule 133 (assign_op -> SHL_ASGN .)
    HEX_LIT         reduce using rule 133 (assign_op -> SHL_ASGN .)
    OCTAL_LIT       reduce using rule 133 (assign_op -> SHL_ASGN .)
    BINARY_LIT      reduce using rule 133 (assign_op -> SHL_ASGN .)
    .               reduce using rule 133 (assign_op -> SHL_ASGN .)


state 107

    (134) assign_op -> MOD_ASGN .
    AND             reduce using rule 134 (assign_op -> MOD_ASGN .)
    EXCLM           reduce using rule 134 (assign_op -> MOD_ASGN .)
    MINUS           reduce using rule 134 (assign_op -> MOD_ASGN .)
    (               reduce using rule 134 (assign_op -> MOD_ASGN .)
    IDENTIFIER      reduce using rule 134 (assign_op -> MOD_ASGN .)
    STRING          reduce using rule 134 (assign_op -> MOD_ASGN .)
    BOOL            reduce using rule 134 (assign_op -> MOD_ASGN .)
    RUNE            reduce using rule 134 (assign_op -> MOD_ASGN .)
    FN              reduce using rule 134 (assign_op -> MOD_ASGN .)
    DECIMAL_LIT     reduce using rule 134 (assign_op -> MOD_ASGN .)
    FALSE           reduce using rule 134 (assign_op -> MOD_ASGN .)
    TRUE            reduce using rule 134 (assign_op -> MOD_ASGN .)
    RUNE_LIT        reduce using rule 134 (assign_op -> MOD_ASGN .)
    STRING_LIT      reduce using rule 134 (assign_op -> MOD_ASGN .)
    F32             reduce using rule 134 (assign_op -> MOD_ASGN .)
    F64             reduce using rule 134 (assign_op -> MOD_ASGN .)
    INT             reduce using rule 134 (assign_op -> MOD_ASGN .)
    ISIZE           reduce using rule 134 (assign_op -> MOD_ASGN .)
    I64             reduce using rule 134 (assign_op -> MOD_ASGN .)
    I32             reduce using rule 134 (assign_op -> MOD_ASGN .)
    I16             reduce using rule 134 (assign_op -> MOD_ASGN .)
    I8              reduce using rule 134 (assign_op -> MOD_ASGN .)
    UINT            reduce using rule 134 (assign_op -> MOD_ASGN .)
    USIZE           reduce using rule 134 (assign_op -> MOD_ASGN .)
    U64             reduce using rule 134 (assign_op -> MOD_ASGN .)
    U32             reduce using rule 134 (assign_op -> MOD_ASGN .)
    U16             reduce using rule 134 (assign_op -> MOD_ASGN .)
    U8              reduce using rule 134 (assign_op -> MOD_ASGN .)
    HEX_LIT         reduce using rule 134 (assign_op -> MOD_ASGN .)
    OCTAL_LIT       reduce using rule 134 (assign_op -> MOD_ASGN .)
    BINARY_LIT      reduce using rule 134 (assign_op -> MOD_ASGN .)
    .               reduce using rule 134 (assign_op -> MOD_ASGN .)


state 108

    (135) assign_op -> DIV_ASGN .
    AND             reduce using rule 135 (assign_op -> DIV_ASGN .)
    EXCLM           reduce using rule 135 (assign_op -> DIV_ASGN .)
    MINUS           reduce using rule 135 (assign_op -> DIV_ASGN .)
    (               reduce using rule 135 (assign_op -> DIV_ASGN .)
    IDENTIFIER      reduce using rule 135 (assign_op -> DIV_ASGN .)
    STRING          reduce using rule 135 (assign_op -> DIV_ASGN .)
    BOOL            reduce using rule 135 (assign_op -> DIV_ASGN .)
    RUNE            reduce using rule 135 (assign_op -> DIV_ASGN .)
    FN              reduce using rule 135 (assign_op -> DIV_ASGN .)
    DECIMAL_LIT     reduce using rule 135 (assign_op -> DIV_ASGN .)
    FALSE           reduce using rule 135 (assign_op -> DIV_ASGN .)
    TRUE            reduce using rule 135 (assign_op -> DIV_ASGN .)
    RUNE_LIT        reduce using rule 135 (assign_op -> DIV_ASGN .)
    STRING_LIT      reduce using rule 135 (assign_op -> DIV_ASGN .)
    F32             reduce using rule 135 (assign_op -> DIV_ASGN .)
    F64             reduce using rule 135 (assign_op -> DIV_ASGN .)
    INT             reduce using rule 135 (assign_op -> DIV_ASGN .)
    ISIZE           reduce using rule 135 (assign_op -> DIV_ASGN .)
    I64             reduce using rule 135 (assign_op -> DIV_ASGN .)
    I32             reduce using rule 135 (assign_op -> DIV_ASGN .)
    I16             reduce using rule 135 (assign_op -> DIV_ASGN .)
    I8              reduce using rule 135 (assign_op -> DIV_ASGN .)
    UINT            reduce using rule 135 (assign_op -> DIV_ASGN .)
    USIZE           reduce using rule 135 (assign_op -> DIV_ASGN .)
    U64             reduce using rule 135 (assign_op -> DIV_ASGN .)
    U32             reduce using rule 135 (assign_op -> DIV_ASGN .)
    U16             reduce using rule 135 (assign_op -> DIV_ASGN .)
    U8              reduce using rule 135 (assign_op -> DIV_ASGN .)
    HEX_LIT         reduce using rule 135 (assign_op -> DIV_ASGN .)
    OCTAL_LIT       reduce using rule 135 (assign_op -> DIV_ASGN .)
    BINARY_LIT      reduce using rule 135 (assign_op -> DIV_ASGN .)
    .               reduce using rule 135 (assign_op -> DIV_ASGN .)


state 109

    (136) assign_op -> OR_ASGN .
    AND             reduce using rule 136 (assign_op -> OR_ASGN .)
    EXCLM           reduce using rule 136 (assign_op -> OR_ASGN .)
    MINUS           reduce using rule 136 (assign_op -> OR_ASGN .)
    (               reduce using rule 136 (assign_op -> OR_ASGN .)
    IDENTIFIER      reduce using rule 136 (assign_op -> OR_ASGN .)
    STRING          reduce using rule 136 (assign_op -> OR_ASGN .)
    BOOL            reduce using rule 136 (assign_op -> OR_ASGN .)
    RUNE            reduce using rule 136 (assign_op -> OR_ASGN .)
    FN              reduce using rule 136 (assign_op -> OR_ASGN .)
    DECIMAL_LIT     reduce using rule 136 (assign_op -> OR_ASGN .)
    FALSE           reduce using rule 136 (assign_op -> OR_ASGN .)
    TRUE            reduce using rule 136 (assign_op -> OR_ASGN .)
    RUNE_LIT        reduce using rule 136 (assign_op -> OR_ASGN .)
    STRING_LIT      reduce using rule 136 (assign_op -> OR_ASGN .)
    F32             reduce using rule 136 (assign_op -> OR_ASGN .)
    F64             reduce using rule 136 (assign_op -> OR_ASGN .)
    INT             reduce using rule 136 (assign_op -> OR_ASGN .)
    ISIZE           reduce using rule 136 (assign_op -> OR_ASGN .)
    I64             reduce using rule 136 (assign_op -> OR_ASGN .)
    I32             reduce using rule 136 (assign_op -> OR_ASGN .)
    I16             reduce using rule 136 (assign_op -> OR_ASGN .)
    I8              reduce using rule 136 (assign_op -> OR_ASGN .)
    UINT            reduce using rule 136 (assign_op -> OR_ASGN .)
    USIZE           reduce using rule 136 (assign_op -> OR_ASGN .)
    U64             reduce using rule 136 (assign_op -> OR_ASGN .)
    U32             reduce using rule 136 (assign_op -> OR_ASGN .)
    U16             reduce using rule 136 (assign_op -> OR_ASGN .)
    U8              reduce using rule 136 (assign_op -> OR_ASGN .)
    HEX_LIT         reduce using rule 136 (assign_op -> OR_ASGN .)
    OCTAL_LIT       reduce using rule 136 (assign_op -> OR_ASGN .)
    BINARY_LIT      reduce using rule 136 (assign_op -> OR_ASGN .)
    .               reduce using rule 136 (assign_op -> OR_ASGN .)


state 110

    (137) assign_op -> AND_ASGN .
    AND             reduce using rule 137 (assign_op -> AND_ASGN .)
    EXCLM           reduce using rule 137 (assign_op -> AND_ASGN .)
    MINUS           reduce using rule 137 (assign_op -> AND_ASGN .)
    (               reduce using rule 137 (assign_op -> AND_ASGN .)
    IDENTIFIER      reduce using rule 137 (assign_op -> AND_ASGN .)
    STRING          reduce using rule 137 (assign_op -> AND_ASGN .)
    BOOL            reduce using rule 137 (assign_op -> AND_ASGN .)
    RUNE            reduce using rule 137 (assign_op -> AND_ASGN .)
    FN              reduce using rule 137 (assign_op -> AND_ASGN .)
    DECIMAL_LIT     reduce using rule 137 (assign_op -> AND_ASGN .)
    FALSE           reduce using rule 137 (assign_op -> AND_ASGN .)
    TRUE            reduce using rule 137 (assign_op -> AND_ASGN .)
    RUNE_LIT        reduce using rule 137 (assign_op -> AND_ASGN .)
    STRING_LIT      reduce using rule 137 (assign_op -> AND_ASGN .)
    F32             reduce using rule 137 (assign_op -> AND_ASGN .)
    F64             reduce using rule 137 (assign_op -> AND_ASGN .)
    INT             reduce using rule 137 (assign_op -> AND_ASGN .)
    ISIZE           reduce using rule 137 (assign_op -> AND_ASGN .)
    I64             reduce using rule 137 (assign_op -> AND_ASGN .)
    I32             reduce using rule 137 (assign_op -> AND_ASGN .)
    I16             reduce using rule 137 (assign_op -> AND_ASGN .)
    I8              reduce using rule 137 (assign_op -> AND_ASGN .)
    UINT            reduce using rule 137 (assign_op -> AND_ASGN .)
    USIZE           reduce using rule 137 (assign_op -> AND_ASGN .)
    U64             reduce using rule 137 (assign_op -> AND_ASGN .)
    U32             reduce using rule 137 (assign_op -> AND_ASGN .)
    U16             reduce using rule 137 (assign_op -> AND_ASGN .)
    U8              reduce using rule 137 (assign_op -> AND_ASGN .)
    HEX_LIT         reduce using rule 137 (assign_op -> AND_ASGN .)
    OCTAL_LIT       reduce using rule 137 (assign_op -> AND_ASGN .)
    BINARY_LIT      reduce using rule 137 (assign_op -> AND_ASGN .)
    .               reduce using rule 137 (assign_op -> AND_ASGN .)


state 111

    (138) assign_op -> STAR_ASGN .
    AND             reduce using rule 138 (assign_op -> STAR_ASGN .)
    EXCLM           reduce using rule 138 (assign_op -> STAR_ASGN .)
    MINUS           reduce using rule 138 (assign_op -> STAR_ASGN .)
    (               reduce using rule 138 (assign_op -> STAR_ASGN .)
    IDENTIFIER      reduce using rule 138 (assign_op -> STAR_ASGN .)
    STRING          reduce using rule 138 (assign_op -> STAR_ASGN .)
    BOOL            reduce using rule 138 (assign_op -> STAR_ASGN .)
    RUNE            reduce using rule 138 (assign_op -> STAR_ASGN .)
    FN              reduce using rule 138 (assign_op -> STAR_ASGN .)
    DECIMAL_LIT     reduce using rule 138 (assign_op -> STAR_ASGN .)
    FALSE           reduce using rule 138 (assign_op -> STAR_ASGN .)
    TRUE            reduce using rule 138 (assign_op -> STAR_ASGN .)
    RUNE_LIT        reduce using rule 138 (assign_op -> STAR_ASGN .)
    STRING_LIT      reduce using rule 138 (assign_op -> STAR_ASGN .)
    F32             reduce using rule 138 (assign_op -> STAR_ASGN .)
    F64             reduce using rule 138 (assign_op -> STAR_ASGN .)
    INT             reduce using rule 138 (assign_op -> STAR_ASGN .)
    ISIZE           reduce using rule 138 (assign_op -> STAR_ASGN .)
    I64             reduce using rule 138 (assign_op -> STAR_ASGN .)
    I32             reduce using rule 138 (assign_op -> STAR_ASGN .)
    I16             reduce using rule 138 (assign_op -> STAR_ASGN .)
    I8              reduce using rule 138 (assign_op -> STAR_ASGN .)
    UINT            reduce using rule 138 (assign_op -> STAR_ASGN .)
    USIZE           reduce using rule 138 (assign_op -> STAR_ASGN .)
    U64             reduce using rule 138 (assign_op -> STAR_ASGN .)
    U32             reduce using rule 138 (assign_op -> STAR_ASGN .)
    U16             reduce using rule 138 (assign_op -> STAR_ASGN .)
    U8              reduce using rule 138 (assign_op -> STAR_ASGN .)
    HEX_LIT         reduce using rule 138 (assign_op -> STAR_ASGN .)
    OCTAL_LIT       reduce using rule 138 (assign_op -> STAR_ASGN .)
    BINARY_LIT      reduce using rule 138 (assign_op -> STAR_ASGN .)
    .               reduce using rule 138 (assign_op -> STAR_ASGN .)


state 112

    (139) assign_op -> XOR_ASGN .
    AND             reduce using rule 139 (assign_op -> XOR_ASGN .)
    EXCLM           reduce using rule 139 (assign_op -> XOR_ASGN .)
    MINUS           reduce using rule 139 (assign_op -> XOR_ASGN .)
    (               reduce using rule 139 (assign_op -> XOR_ASGN .)
    IDENTIFIER      reduce using rule 139 (assign_op -> XOR_ASGN .)
    STRING          reduce using rule 139 (assign_op -> XOR_ASGN .)
    BOOL            reduce using rule 139 (assign_op -> XOR_ASGN .)
    RUNE            reduce using rule 139 (assign_op -> XOR_ASGN .)
    FN              reduce using rule 139 (assign_op -> XOR_ASGN .)
    DECIMAL_LIT     reduce using rule 139 (assign_op -> XOR_ASGN .)
    FALSE           reduce using rule 139 (assign_op -> XOR_ASGN .)
    TRUE            reduce using rule 139 (assign_op -> XOR_ASGN .)
    RUNE_LIT        reduce using rule 139 (assign_op -> XOR_ASGN .)
    STRING_LIT      reduce using rule 139 (assign_op -> XOR_ASGN .)
    F32             reduce using rule 139 (assign_op -> XOR_ASGN .)
    F64             reduce using rule 139 (assign_op -> XOR_ASGN .)
    INT             reduce using rule 139 (assign_op -> XOR_ASGN .)
    ISIZE           reduce using rule 139 (assign_op -> XOR_ASGN .)
    I64             reduce using rule 139 (assign_op -> XOR_ASGN .)
    I32             reduce using rule 139 (assign_op -> XOR_ASGN .)
    I16             reduce using rule 139 (assign_op -> XOR_ASGN .)
    I8              reduce using rule 139 (assign_op -> XOR_ASGN .)
    UINT            reduce using rule 139 (assign_op -> XOR_ASGN .)
    USIZE           reduce using rule 139 (assign_op -> XOR_ASGN .)
    U64             reduce using rule 139 (assign_op -> XOR_ASGN .)
    U32             reduce using rule 139 (assign_op -> XOR_ASGN .)
    U16             reduce using rule 139 (assign_op -> XOR_ASGN .)
    U8              reduce using rule 139 (assign_op -> XOR_ASGN .)
    HEX_LIT         reduce using rule 139 (assign_op -> XOR_ASGN .)
    OCTAL_LIT       reduce using rule 139 (assign_op -> XOR_ASGN .)
    BINARY_LIT      reduce using rule 139 (assign_op -> XOR_ASGN .)
    .               reduce using rule 139 (assign_op -> XOR_ASGN .)


state 113

    (140) assign_op -> MINUS_ASGN .
    AND             reduce using rule 140 (assign_op -> MINUS_ASGN .)
    EXCLM           reduce using rule 140 (assign_op -> MINUS_ASGN .)
    MINUS           reduce using rule 140 (assign_op -> MINUS_ASGN .)
    (               reduce using rule 140 (assign_op -> MINUS_ASGN .)
    IDENTIFIER      reduce using rule 140 (assign_op -> MINUS_ASGN .)
    STRING          reduce using rule 140 (assign_op -> MINUS_ASGN .)
    BOOL            reduce using rule 140 (assign_op -> MINUS_ASGN .)
    RUNE            reduce using rule 140 (assign_op -> MINUS_ASGN .)
    FN              reduce using rule 140 (assign_op -> MINUS_ASGN .)
    DECIMAL_LIT     reduce using rule 140 (assign_op -> MINUS_ASGN .)
    FALSE           reduce using rule 140 (assign_op -> MINUS_ASGN .)
    TRUE            reduce using rule 140 (assign_op -> MINUS_ASGN .)
    RUNE_LIT        reduce using rule 140 (assign_op -> MINUS_ASGN .)
    STRING_LIT      reduce using rule 140 (assign_op -> MINUS_ASGN .)
    F32             reduce using rule 140 (assign_op -> MINUS_ASGN .)
    F64             reduce using rule 140 (assign_op -> MINUS_ASGN .)
    INT             reduce using rule 140 (assign_op -> MINUS_ASGN .)
    ISIZE           reduce using rule 140 (assign_op -> MINUS_ASGN .)
    I64             reduce using rule 140 (assign_op -> MINUS_ASGN .)
    I32             reduce using rule 140 (assign_op -> MINUS_ASGN .)
    I16             reduce using rule 140 (assign_op -> MINUS_ASGN .)
    I8              reduce using rule 140 (assign_op -> MINUS_ASGN .)
    UINT            reduce using rule 140 (assign_op -> MINUS_ASGN .)
    USIZE           reduce using rule 140 (assign_op -> MINUS_ASGN .)
    U64             reduce using rule 140 (assign_op -> MINUS_ASGN .)
    U32             reduce using rule 140 (assign_op -> MINUS_ASGN .)
    U16             reduce using rule 140 (assign_op -> MINUS_ASGN .)
    U8              reduce using rule 140 (assign_op -> MINUS_ASGN .)
    HEX_LIT         reduce using rule 140 (assign_op -> MINUS_ASGN .)
    OCTAL_LIT       reduce using rule 140 (assign_op -> MINUS_ASGN .)
    BINARY_LIT      reduce using rule 140 (assign_op -> MINUS_ASGN .)
    .               reduce using rule 140 (assign_op -> MINUS_ASGN .)


state 114

    (141) assign_op -> PLUS_ASGN .
    AND             reduce using rule 141 (assign_op -> PLUS_ASGN .)
    EXCLM           reduce using rule 141 (assign_op -> PLUS_ASGN .)
    MINUS           reduce using rule 141 (assign_op -> PLUS_ASGN .)
    (               reduce using rule 141 (assign_op -> PLUS_ASGN .)
    IDENTIFIER      reduce using rule 141 (assign_op -> PLUS_ASGN .)
    STRING          reduce using rule 141 (assign_op -> PLUS_ASGN .)
    BOOL            reduce using rule 141 (assign_op -> PLUS_ASGN .)
    RUNE            reduce using rule 141 (assign_op -> PLUS_ASGN .)
    FN              reduce using rule 141 (assign_op -> PLUS_ASGN .)
    DECIMAL_LIT     reduce using rule 141 (assign_op -> PLUS_ASGN .)
    FALSE           reduce using rule 141 (assign_op -> PLUS_ASGN .)
    TRUE            reduce using rule 141 (assign_op -> PLUS_ASGN .)
    RUNE_LIT        reduce using rule 141 (assign_op -> PLUS_ASGN .)
    STRING_LIT      reduce using rule 141 (assign_op -> PLUS_ASGN .)
    F32             reduce using rule 141 (assign_op -> PLUS_ASGN .)
    F64             reduce using rule 141 (assign_op -> PLUS_ASGN .)
    INT             reduce using rule 141 (assign_op -> PLUS_ASGN .)
    ISIZE           reduce using rule 141 (assign_op -> PLUS_ASGN .)
    I64             reduce using rule 141 (assign_op -> PLUS_ASGN .)
    I32             reduce using rule 141 (assign_op -> PLUS_ASGN .)
    I16             reduce using rule 141 (assign_op -> PLUS_ASGN .)
    I8              reduce using rule 141 (assign_op -> PLUS_ASGN .)
    UINT            reduce using rule 141 (assign_op -> PLUS_ASGN .)
    USIZE           reduce using rule 141 (assign_op -> PLUS_ASGN .)
    U64             reduce using rule 141 (assign_op -> PLUS_ASGN .)
    U32             reduce using rule 141 (assign_op -> PLUS_ASGN .)
    U16             reduce using rule 141 (assign_op -> PLUS_ASGN .)
    U8              reduce using rule 141 (assign_op -> PLUS_ASGN .)
    HEX_LIT         reduce using rule 141 (assign_op -> PLUS_ASGN .)
    OCTAL_LIT       reduce using rule 141 (assign_op -> PLUS_ASGN .)
    BINARY_LIT      reduce using rule 141 (assign_op -> PLUS_ASGN .)
    .               reduce using rule 141 (assign_op -> PLUS_ASGN .)


state 115

    (142) assign_op -> ASSIGN .
    AND             reduce using rule 142 (assign_op -> ASSIGN .)
    EXCLM           reduce using rule 142 (assign_op -> ASSIGN .)
    MINUS           reduce using rule 142 (assign_op -> ASSIGN .)
    (               reduce using rule 142 (assign_op -> ASSIGN .)
    IDENTIFIER      reduce using rule 142 (assign_op -> ASSIGN .)
    STRING          reduce using rule 142 (assign_op -> ASSIGN .)
    BOOL            reduce using rule 142 (assign_op -> ASSIGN .)
    RUNE            reduce using rule 142 (assign_op -> ASSIGN .)
    FN              reduce using rule 142 (assign_op -> ASSIGN .)
    DECIMAL_LIT     reduce using rule 142 (assign_op -> ASSIGN .)
    FALSE           reduce using rule 142 (assign_op -> ASSIGN .)
    TRUE            reduce using rule 142 (assign_op -> ASSIGN .)
    RUNE_LIT        reduce using rule 142 (assign_op -> ASSIGN .)
    STRING_LIT      reduce using rule 142 (assign_op -> ASSIGN .)
    F32             reduce using rule 142 (assign_op -> ASSIGN .)
    F64             reduce using rule 142 (assign_op -> ASSIGN .)
    INT             reduce using rule 142 (assign_op -> ASSIGN .)
    ISIZE           reduce using rule 142 (assign_op -> ASSIGN .)
    I64             reduce using rule 142 (assign_op -> ASSIGN .)
    I32             reduce using rule 142 (assign_op -> ASSIGN .)
    I16             reduce using rule 142 (assign_op -> ASSIGN .)
    I8              reduce using rule 142 (assign_op -> ASSIGN .)
    UINT            reduce using rule 142 (assign_op -> ASSIGN .)
    USIZE           reduce using rule 142 (assign_op -> ASSIGN .)
    U64             reduce using rule 142 (assign_op -> ASSIGN .)
    U32             reduce using rule 142 (assign_op -> ASSIGN .)
    U16             reduce using rule 142 (assign_op -> ASSIGN .)
    U8              reduce using rule 142 (assign_op -> ASSIGN .)
    HEX_LIT         reduce using rule 142 (assign_op -> ASSIGN .)
    OCTAL_LIT       reduce using rule 142 (assign_op -> ASSIGN .)
    BINARY_LIT      reduce using rule 142 (assign_op -> ASSIGN .)
    .               reduce using rule 142 (assign_op -> ASSIGN .)


state 116

    (80) expression -> expression BINARY_OP . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    IDENTIFIER      shift and go to state 139
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    FN              shift and go to state 140
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    unaryExpr                      shift and go to state 187
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 117

    (143) BINARY_OP -> MUL_OP .
    AND             reduce using rule 143 (BINARY_OP -> MUL_OP .)
    EXCLM           reduce using rule 143 (BINARY_OP -> MUL_OP .)
    MINUS           reduce using rule 143 (BINARY_OP -> MUL_OP .)
    (               reduce using rule 143 (BINARY_OP -> MUL_OP .)
    IDENTIFIER      reduce using rule 143 (BINARY_OP -> MUL_OP .)
    STRING          reduce using rule 143 (BINARY_OP -> MUL_OP .)
    BOOL            reduce using rule 143 (BINARY_OP -> MUL_OP .)
    RUNE            reduce using rule 143 (BINARY_OP -> MUL_OP .)
    FN              reduce using rule 143 (BINARY_OP -> MUL_OP .)
    DECIMAL_LIT     reduce using rule 143 (BINARY_OP -> MUL_OP .)
    FALSE           reduce using rule 143 (BINARY_OP -> MUL_OP .)
    TRUE            reduce using rule 143 (BINARY_OP -> MUL_OP .)
    RUNE_LIT        reduce using rule 143 (BINARY_OP -> MUL_OP .)
    STRING_LIT      reduce using rule 143 (BINARY_OP -> MUL_OP .)
    F32             reduce using rule 143 (BINARY_OP -> MUL_OP .)
    F64             reduce using rule 143 (BINARY_OP -> MUL_OP .)
    INT             reduce using rule 143 (BINARY_OP -> MUL_OP .)
    ISIZE           reduce using rule 143 (BINARY_OP -> MUL_OP .)
    I64             reduce using rule 143 (BINARY_OP -> MUL_OP .)
    I32             reduce using rule 143 (BINARY_OP -> MUL_OP .)
    I16             reduce using rule 143 (BINARY_OP -> MUL_OP .)
    I8              reduce using rule 143 (BINARY_OP -> MUL_OP .)
    UINT            reduce using rule 143 (BINARY_OP -> MUL_OP .)
    USIZE           reduce using rule 143 (BINARY_OP -> MUL_OP .)
    U64             reduce using rule 143 (BINARY_OP -> MUL_OP .)
    U32             reduce using rule 143 (BINARY_OP -> MUL_OP .)
    U16             reduce using rule 143 (BINARY_OP -> MUL_OP .)
    U8              reduce using rule 143 (BINARY_OP -> MUL_OP .)
    HEX_LIT         reduce using rule 143 (BINARY_OP -> MUL_OP .)
    OCTAL_LIT       reduce using rule 143 (BINARY_OP -> MUL_OP .)
    BINARY_LIT      reduce using rule 143 (BINARY_OP -> MUL_OP .)
    .               reduce using rule 143 (BINARY_OP -> MUL_OP .)


state 118

    (144) BINARY_OP -> ADD_OP .
    AND             reduce using rule 144 (BINARY_OP -> ADD_OP .)
    EXCLM           reduce using rule 144 (BINARY_OP -> ADD_OP .)
    MINUS           reduce using rule 144 (BINARY_OP -> ADD_OP .)
    (               reduce using rule 144 (BINARY_OP -> ADD_OP .)
    IDENTIFIER      reduce using rule 144 (BINARY_OP -> ADD_OP .)
    STRING          reduce using rule 144 (BINARY_OP -> ADD_OP .)
    BOOL            reduce using rule 144 (BINARY_OP -> ADD_OP .)
    RUNE            reduce using rule 144 (BINARY_OP -> ADD_OP .)
    FN              reduce using rule 144 (BINARY_OP -> ADD_OP .)
    DECIMAL_LIT     reduce using rule 144 (BINARY_OP -> ADD_OP .)
    FALSE           reduce using rule 144 (BINARY_OP -> ADD_OP .)
    TRUE            reduce using rule 144 (BINARY_OP -> ADD_OP .)
    RUNE_LIT        reduce using rule 144 (BINARY_OP -> ADD_OP .)
    STRING_LIT      reduce using rule 144 (BINARY_OP -> ADD_OP .)
    F32             reduce using rule 144 (BINARY_OP -> ADD_OP .)
    F64             reduce using rule 144 (BINARY_OP -> ADD_OP .)
    INT             reduce using rule 144 (BINARY_OP -> ADD_OP .)
    ISIZE           reduce using rule 144 (BINARY_OP -> ADD_OP .)
    I64             reduce using rule 144 (BINARY_OP -> ADD_OP .)
    I32             reduce using rule 144 (BINARY_OP -> ADD_OP .)
    I16             reduce using rule 144 (BINARY_OP -> ADD_OP .)
    I8              reduce using rule 144 (BINARY_OP -> ADD_OP .)
    UINT            reduce using rule 144 (BINARY_OP -> ADD_OP .)
    USIZE           reduce using rule 144 (BINARY_OP -> ADD_OP .)
    U64             reduce using rule 144 (BINARY_OP -> ADD_OP .)
    U32             reduce using rule 144 (BINARY_OP -> ADD_OP .)
    U16             reduce using rule 144 (BINARY_OP -> ADD_OP .)
    U8              reduce using rule 144 (BINARY_OP -> ADD_OP .)
    HEX_LIT         reduce using rule 144 (BINARY_OP -> ADD_OP .)
    OCTAL_LIT       reduce using rule 144 (BINARY_OP -> ADD_OP .)
    BINARY_LIT      reduce using rule 144 (BINARY_OP -> ADD_OP .)
    .               reduce using rule 144 (BINARY_OP -> ADD_OP .)


state 119

    (145) BINARY_OP -> REL_OP .
    AND             reduce using rule 145 (BINARY_OP -> REL_OP .)
    EXCLM           reduce using rule 145 (BINARY_OP -> REL_OP .)
    MINUS           reduce using rule 145 (BINARY_OP -> REL_OP .)
    (               reduce using rule 145 (BINARY_OP -> REL_OP .)
    IDENTIFIER      reduce using rule 145 (BINARY_OP -> REL_OP .)
    STRING          reduce using rule 145 (BINARY_OP -> REL_OP .)
    BOOL            reduce using rule 145 (BINARY_OP -> REL_OP .)
    RUNE            reduce using rule 145 (BINARY_OP -> REL_OP .)
    FN              reduce using rule 145 (BINARY_OP -> REL_OP .)
    DECIMAL_LIT     reduce using rule 145 (BINARY_OP -> REL_OP .)
    FALSE           reduce using rule 145 (BINARY_OP -> REL_OP .)
    TRUE            reduce using rule 145 (BINARY_OP -> REL_OP .)
    RUNE_LIT        reduce using rule 145 (BINARY_OP -> REL_OP .)
    STRING_LIT      reduce using rule 145 (BINARY_OP -> REL_OP .)
    F32             reduce using rule 145 (BINARY_OP -> REL_OP .)
    F64             reduce using rule 145 (BINARY_OP -> REL_OP .)
    INT             reduce using rule 145 (BINARY_OP -> REL_OP .)
    ISIZE           reduce using rule 145 (BINARY_OP -> REL_OP .)
    I64             reduce using rule 145 (BINARY_OP -> REL_OP .)
    I32             reduce using rule 145 (BINARY_OP -> REL_OP .)
    I16             reduce using rule 145 (BINARY_OP -> REL_OP .)
    I8              reduce using rule 145 (BINARY_OP -> REL_OP .)
    UINT            reduce using rule 145 (BINARY_OP -> REL_OP .)
    USIZE           reduce using rule 145 (BINARY_OP -> REL_OP .)
    U64             reduce using rule 145 (BINARY_OP -> REL_OP .)
    U32             reduce using rule 145 (BINARY_OP -> REL_OP .)
    U16             reduce using rule 145 (BINARY_OP -> REL_OP .)
    U8              reduce using rule 145 (BINARY_OP -> REL_OP .)
    HEX_LIT         reduce using rule 145 (BINARY_OP -> REL_OP .)
    OCTAL_LIT       reduce using rule 145 (BINARY_OP -> REL_OP .)
    BINARY_LIT      reduce using rule 145 (BINARY_OP -> REL_OP .)
    .               reduce using rule 145 (BINARY_OP -> REL_OP .)


state 120

    (146) BINARY_OP -> LOGIC_AND .
    AND             reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    EXCLM           reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    MINUS           reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    (               reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    IDENTIFIER      reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    STRING          reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    BOOL            reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    RUNE            reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    FN              reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    DECIMAL_LIT     reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    FALSE           reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    TRUE            reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    RUNE_LIT        reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    STRING_LIT      reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    F32             reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    F64             reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    INT             reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    ISIZE           reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    I64             reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    I32             reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    I16             reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    I8              reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    UINT            reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    USIZE           reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    U64             reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    U32             reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    U16             reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    U8              reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    HEX_LIT         reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    OCTAL_LIT       reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    BINARY_LIT      reduce using rule 146 (BINARY_OP -> LOGIC_AND .)
    .               reduce using rule 146 (BINARY_OP -> LOGIC_AND .)


state 121

    (147) BINARY_OP -> LOGIC_OR .
    AND             reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    EXCLM           reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    MINUS           reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    (               reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    IDENTIFIER      reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    STRING          reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    BOOL            reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    RUNE            reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    FN              reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    DECIMAL_LIT     reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    FALSE           reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    TRUE            reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    RUNE_LIT        reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    STRING_LIT      reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    F32             reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    F64             reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    INT             reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    ISIZE           reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    I64             reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    I32             reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    I16             reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    I8              reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    UINT            reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    USIZE           reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    U64             reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    U32             reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    U16             reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    U8              reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    HEX_LIT         reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    OCTAL_LIT       reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    BINARY_LIT      reduce using rule 147 (BINARY_OP -> LOGIC_OR .)
    .               reduce using rule 147 (BINARY_OP -> LOGIC_OR .)


state 122

    (158) MUL_OP -> SHR .
    AND             reduce using rule 158 (MUL_OP -> SHR .)
    EXCLM           reduce using rule 158 (MUL_OP -> SHR .)
    MINUS           reduce using rule 158 (MUL_OP -> SHR .)
    (               reduce using rule 158 (MUL_OP -> SHR .)
    IDENTIFIER      reduce using rule 158 (MUL_OP -> SHR .)
    STRING          reduce using rule 158 (MUL_OP -> SHR .)
    BOOL            reduce using rule 158 (MUL_OP -> SHR .)
    RUNE            reduce using rule 158 (MUL_OP -> SHR .)
    FN              reduce using rule 158 (MUL_OP -> SHR .)
    DECIMAL_LIT     reduce using rule 158 (MUL_OP -> SHR .)
    FALSE           reduce using rule 158 (MUL_OP -> SHR .)
    TRUE            reduce using rule 158 (MUL_OP -> SHR .)
    RUNE_LIT        reduce using rule 158 (MUL_OP -> SHR .)
    STRING_LIT      reduce using rule 158 (MUL_OP -> SHR .)
    F32             reduce using rule 158 (MUL_OP -> SHR .)
    F64             reduce using rule 158 (MUL_OP -> SHR .)
    INT             reduce using rule 158 (MUL_OP -> SHR .)
    ISIZE           reduce using rule 158 (MUL_OP -> SHR .)
    I64             reduce using rule 158 (MUL_OP -> SHR .)
    I32             reduce using rule 158 (MUL_OP -> SHR .)
    I16             reduce using rule 158 (MUL_OP -> SHR .)
    I8              reduce using rule 158 (MUL_OP -> SHR .)
    UINT            reduce using rule 158 (MUL_OP -> SHR .)
    USIZE           reduce using rule 158 (MUL_OP -> SHR .)
    U64             reduce using rule 158 (MUL_OP -> SHR .)
    U32             reduce using rule 158 (MUL_OP -> SHR .)
    U16             reduce using rule 158 (MUL_OP -> SHR .)
    U8              reduce using rule 158 (MUL_OP -> SHR .)
    HEX_LIT         reduce using rule 158 (MUL_OP -> SHR .)
    OCTAL_LIT       reduce using rule 158 (MUL_OP -> SHR .)
    BINARY_LIT      reduce using rule 158 (MUL_OP -> SHR .)
    .               reduce using rule 158 (MUL_OP -> SHR .)


state 123

    (159) MUL_OP -> SHL .
    AND             reduce using rule 159 (MUL_OP -> SHL .)
    EXCLM           reduce using rule 159 (MUL_OP -> SHL .)
    MINUS           reduce using rule 159 (MUL_OP -> SHL .)
    (               reduce using rule 159 (MUL_OP -> SHL .)
    IDENTIFIER      reduce using rule 159 (MUL_OP -> SHL .)
    STRING          reduce using rule 159 (MUL_OP -> SHL .)
    BOOL            reduce using rule 159 (MUL_OP -> SHL .)
    RUNE            reduce using rule 159 (MUL_OP -> SHL .)
    FN              reduce using rule 159 (MUL_OP -> SHL .)
    DECIMAL_LIT     reduce using rule 159 (MUL_OP -> SHL .)
    FALSE           reduce using rule 159 (MUL_OP -> SHL .)
    TRUE            reduce using rule 159 (MUL_OP -> SHL .)
    RUNE_LIT        reduce using rule 159 (MUL_OP -> SHL .)
    STRING_LIT      reduce using rule 159 (MUL_OP -> SHL .)
    F32             reduce using rule 159 (MUL_OP -> SHL .)
    F64             reduce using rule 159 (MUL_OP -> SHL .)
    INT             reduce using rule 159 (MUL_OP -> SHL .)
    ISIZE           reduce using rule 159 (MUL_OP -> SHL .)
    I64             reduce using rule 159 (MUL_OP -> SHL .)
    I32             reduce using rule 159 (MUL_OP -> SHL .)
    I16             reduce using rule 159 (MUL_OP -> SHL .)
    I8              reduce using rule 159 (MUL_OP -> SHL .)
    UINT            reduce using rule 159 (MUL_OP -> SHL .)
    USIZE           reduce using rule 159 (MUL_OP -> SHL .)
    U64             reduce using rule 159 (MUL_OP -> SHL .)
    U32             reduce using rule 159 (MUL_OP -> SHL .)
    U16             reduce using rule 159 (MUL_OP -> SHL .)
    U8              reduce using rule 159 (MUL_OP -> SHL .)
    HEX_LIT         reduce using rule 159 (MUL_OP -> SHL .)
    OCTAL_LIT       reduce using rule 159 (MUL_OP -> SHL .)
    BINARY_LIT      reduce using rule 159 (MUL_OP -> SHL .)
    .               reduce using rule 159 (MUL_OP -> SHL .)


state 124

    (160) MUL_OP -> AND .
    AND             reduce using rule 160 (MUL_OP -> AND .)
    EXCLM           reduce using rule 160 (MUL_OP -> AND .)
    MINUS           reduce using rule 160 (MUL_OP -> AND .)
    (               reduce using rule 160 (MUL_OP -> AND .)
    IDENTIFIER      reduce using rule 160 (MUL_OP -> AND .)
    STRING          reduce using rule 160 (MUL_OP -> AND .)
    BOOL            reduce using rule 160 (MUL_OP -> AND .)
    RUNE            reduce using rule 160 (MUL_OP -> AND .)
    FN              reduce using rule 160 (MUL_OP -> AND .)
    DECIMAL_LIT     reduce using rule 160 (MUL_OP -> AND .)
    FALSE           reduce using rule 160 (MUL_OP -> AND .)
    TRUE            reduce using rule 160 (MUL_OP -> AND .)
    RUNE_LIT        reduce using rule 160 (MUL_OP -> AND .)
    STRING_LIT      reduce using rule 160 (MUL_OP -> AND .)
    F32             reduce using rule 160 (MUL_OP -> AND .)
    F64             reduce using rule 160 (MUL_OP -> AND .)
    INT             reduce using rule 160 (MUL_OP -> AND .)
    ISIZE           reduce using rule 160 (MUL_OP -> AND .)
    I64             reduce using rule 160 (MUL_OP -> AND .)
    I32             reduce using rule 160 (MUL_OP -> AND .)
    I16             reduce using rule 160 (MUL_OP -> AND .)
    I8              reduce using rule 160 (MUL_OP -> AND .)
    UINT            reduce using rule 160 (MUL_OP -> AND .)
    USIZE           reduce using rule 160 (MUL_OP -> AND .)
    U64             reduce using rule 160 (MUL_OP -> AND .)
    U32             reduce using rule 160 (MUL_OP -> AND .)
    U16             reduce using rule 160 (MUL_OP -> AND .)
    U8              reduce using rule 160 (MUL_OP -> AND .)
    HEX_LIT         reduce using rule 160 (MUL_OP -> AND .)
    OCTAL_LIT       reduce using rule 160 (MUL_OP -> AND .)
    BINARY_LIT      reduce using rule 160 (MUL_OP -> AND .)
    .               reduce using rule 160 (MUL_OP -> AND .)


state 125

    (161) MUL_OP -> MOD .
    AND             reduce using rule 161 (MUL_OP -> MOD .)
    EXCLM           reduce using rule 161 (MUL_OP -> MOD .)
    MINUS           reduce using rule 161 (MUL_OP -> MOD .)
    (               reduce using rule 161 (MUL_OP -> MOD .)
    IDENTIFIER      reduce using rule 161 (MUL_OP -> MOD .)
    STRING          reduce using rule 161 (MUL_OP -> MOD .)
    BOOL            reduce using rule 161 (MUL_OP -> MOD .)
    RUNE            reduce using rule 161 (MUL_OP -> MOD .)
    FN              reduce using rule 161 (MUL_OP -> MOD .)
    DECIMAL_LIT     reduce using rule 161 (MUL_OP -> MOD .)
    FALSE           reduce using rule 161 (MUL_OP -> MOD .)
    TRUE            reduce using rule 161 (MUL_OP -> MOD .)
    RUNE_LIT        reduce using rule 161 (MUL_OP -> MOD .)
    STRING_LIT      reduce using rule 161 (MUL_OP -> MOD .)
    F32             reduce using rule 161 (MUL_OP -> MOD .)
    F64             reduce using rule 161 (MUL_OP -> MOD .)
    INT             reduce using rule 161 (MUL_OP -> MOD .)
    ISIZE           reduce using rule 161 (MUL_OP -> MOD .)
    I64             reduce using rule 161 (MUL_OP -> MOD .)
    I32             reduce using rule 161 (MUL_OP -> MOD .)
    I16             reduce using rule 161 (MUL_OP -> MOD .)
    I8              reduce using rule 161 (MUL_OP -> MOD .)
    UINT            reduce using rule 161 (MUL_OP -> MOD .)
    USIZE           reduce using rule 161 (MUL_OP -> MOD .)
    U64             reduce using rule 161 (MUL_OP -> MOD .)
    U32             reduce using rule 161 (MUL_OP -> MOD .)
    U16             reduce using rule 161 (MUL_OP -> MOD .)
    U8              reduce using rule 161 (MUL_OP -> MOD .)
    HEX_LIT         reduce using rule 161 (MUL_OP -> MOD .)
    OCTAL_LIT       reduce using rule 161 (MUL_OP -> MOD .)
    BINARY_LIT      reduce using rule 161 (MUL_OP -> MOD .)
    .               reduce using rule 161 (MUL_OP -> MOD .)


state 126

    (162) MUL_OP -> DIV .
    AND             reduce using rule 162 (MUL_OP -> DIV .)
    EXCLM           reduce using rule 162 (MUL_OP -> DIV .)
    MINUS           reduce using rule 162 (MUL_OP -> DIV .)
    (               reduce using rule 162 (MUL_OP -> DIV .)
    IDENTIFIER      reduce using rule 162 (MUL_OP -> DIV .)
    STRING          reduce using rule 162 (MUL_OP -> DIV .)
    BOOL            reduce using rule 162 (MUL_OP -> DIV .)
    RUNE            reduce using rule 162 (MUL_OP -> DIV .)
    FN              reduce using rule 162 (MUL_OP -> DIV .)
    DECIMAL_LIT     reduce using rule 162 (MUL_OP -> DIV .)
    FALSE           reduce using rule 162 (MUL_OP -> DIV .)
    TRUE            reduce using rule 162 (MUL_OP -> DIV .)
    RUNE_LIT        reduce using rule 162 (MUL_OP -> DIV .)
    STRING_LIT      reduce using rule 162 (MUL_OP -> DIV .)
    F32             reduce using rule 162 (MUL_OP -> DIV .)
    F64             reduce using rule 162 (MUL_OP -> DIV .)
    INT             reduce using rule 162 (MUL_OP -> DIV .)
    ISIZE           reduce using rule 162 (MUL_OP -> DIV .)
    I64             reduce using rule 162 (MUL_OP -> DIV .)
    I32             reduce using rule 162 (MUL_OP -> DIV .)
    I16             reduce using rule 162 (MUL_OP -> DIV .)
    I8              reduce using rule 162 (MUL_OP -> DIV .)
    UINT            reduce using rule 162 (MUL_OP -> DIV .)
    USIZE           reduce using rule 162 (MUL_OP -> DIV .)
    U64             reduce using rule 162 (MUL_OP -> DIV .)
    U32             reduce using rule 162 (MUL_OP -> DIV .)
    U16             reduce using rule 162 (MUL_OP -> DIV .)
    U8              reduce using rule 162 (MUL_OP -> DIV .)
    HEX_LIT         reduce using rule 162 (MUL_OP -> DIV .)
    OCTAL_LIT       reduce using rule 162 (MUL_OP -> DIV .)
    BINARY_LIT      reduce using rule 162 (MUL_OP -> DIV .)
    .               reduce using rule 162 (MUL_OP -> DIV .)


state 127

    (163) MUL_OP -> STAR .
    AND             reduce using rule 163 (MUL_OP -> STAR .)
    EXCLM           reduce using rule 163 (MUL_OP -> STAR .)
    MINUS           reduce using rule 163 (MUL_OP -> STAR .)
    (               reduce using rule 163 (MUL_OP -> STAR .)
    IDENTIFIER      reduce using rule 163 (MUL_OP -> STAR .)
    STRING          reduce using rule 163 (MUL_OP -> STAR .)
    BOOL            reduce using rule 163 (MUL_OP -> STAR .)
    RUNE            reduce using rule 163 (MUL_OP -> STAR .)
    FN              reduce using rule 163 (MUL_OP -> STAR .)
    DECIMAL_LIT     reduce using rule 163 (MUL_OP -> STAR .)
    FALSE           reduce using rule 163 (MUL_OP -> STAR .)
    TRUE            reduce using rule 163 (MUL_OP -> STAR .)
    RUNE_LIT        reduce using rule 163 (MUL_OP -> STAR .)
    STRING_LIT      reduce using rule 163 (MUL_OP -> STAR .)
    F32             reduce using rule 163 (MUL_OP -> STAR .)
    F64             reduce using rule 163 (MUL_OP -> STAR .)
    INT             reduce using rule 163 (MUL_OP -> STAR .)
    ISIZE           reduce using rule 163 (MUL_OP -> STAR .)
    I64             reduce using rule 163 (MUL_OP -> STAR .)
    I32             reduce using rule 163 (MUL_OP -> STAR .)
    I16             reduce using rule 163 (MUL_OP -> STAR .)
    I8              reduce using rule 163 (MUL_OP -> STAR .)
    UINT            reduce using rule 163 (MUL_OP -> STAR .)
    USIZE           reduce using rule 163 (MUL_OP -> STAR .)
    U64             reduce using rule 163 (MUL_OP -> STAR .)
    U32             reduce using rule 163 (MUL_OP -> STAR .)
    U16             reduce using rule 163 (MUL_OP -> STAR .)
    U8              reduce using rule 163 (MUL_OP -> STAR .)
    HEX_LIT         reduce using rule 163 (MUL_OP -> STAR .)
    OCTAL_LIT       reduce using rule 163 (MUL_OP -> STAR .)
    BINARY_LIT      reduce using rule 163 (MUL_OP -> STAR .)
    .               reduce using rule 163 (MUL_OP -> STAR .)


state 128

    (154) ADD_OP -> XOR .
    AND             reduce using rule 154 (ADD_OP -> XOR .)
    EXCLM           reduce using rule 154 (ADD_OP -> XOR .)
    MINUS           reduce using rule 154 (ADD_OP -> XOR .)
    (               reduce using rule 154 (ADD_OP -> XOR .)
    IDENTIFIER      reduce using rule 154 (ADD_OP -> XOR .)
    STRING          reduce using rule 154 (ADD_OP -> XOR .)
    BOOL            reduce using rule 154 (ADD_OP -> XOR .)
    RUNE            reduce using rule 154 (ADD_OP -> XOR .)
    FN              reduce using rule 154 (ADD_OP -> XOR .)
    DECIMAL_LIT     reduce using rule 154 (ADD_OP -> XOR .)
    FALSE           reduce using rule 154 (ADD_OP -> XOR .)
    TRUE            reduce using rule 154 (ADD_OP -> XOR .)
    RUNE_LIT        reduce using rule 154 (ADD_OP -> XOR .)
    STRING_LIT      reduce using rule 154 (ADD_OP -> XOR .)
    F32             reduce using rule 154 (ADD_OP -> XOR .)
    F64             reduce using rule 154 (ADD_OP -> XOR .)
    INT             reduce using rule 154 (ADD_OP -> XOR .)
    ISIZE           reduce using rule 154 (ADD_OP -> XOR .)
    I64             reduce using rule 154 (ADD_OP -> XOR .)
    I32             reduce using rule 154 (ADD_OP -> XOR .)
    I16             reduce using rule 154 (ADD_OP -> XOR .)
    I8              reduce using rule 154 (ADD_OP -> XOR .)
    UINT            reduce using rule 154 (ADD_OP -> XOR .)
    USIZE           reduce using rule 154 (ADD_OP -> XOR .)
    U64             reduce using rule 154 (ADD_OP -> XOR .)
    U32             reduce using rule 154 (ADD_OP -> XOR .)
    U16             reduce using rule 154 (ADD_OP -> XOR .)
    U8              reduce using rule 154 (ADD_OP -> XOR .)
    HEX_LIT         reduce using rule 154 (ADD_OP -> XOR .)
    OCTAL_LIT       reduce using rule 154 (ADD_OP -> XOR .)
    BINARY_LIT      reduce using rule 154 (ADD_OP -> XOR .)
    .               reduce using rule 154 (ADD_OP -> XOR .)


state 129

    (155) ADD_OP -> OR .
    AND             reduce using rule 155 (ADD_OP -> OR .)
    EXCLM           reduce using rule 155 (ADD_OP -> OR .)
    MINUS           reduce using rule 155 (ADD_OP -> OR .)
    (               reduce using rule 155 (ADD_OP -> OR .)
    IDENTIFIER      reduce using rule 155 (ADD_OP -> OR .)
    STRING          reduce using rule 155 (ADD_OP -> OR .)
    BOOL            reduce using rule 155 (ADD_OP -> OR .)
    RUNE            reduce using rule 155 (ADD_OP -> OR .)
    FN              reduce using rule 155 (ADD_OP -> OR .)
    DECIMAL_LIT     reduce using rule 155 (ADD_OP -> OR .)
    FALSE           reduce using rule 155 (ADD_OP -> OR .)
    TRUE            reduce using rule 155 (ADD_OP -> OR .)
    RUNE_LIT        reduce using rule 155 (ADD_OP -> OR .)
    STRING_LIT      reduce using rule 155 (ADD_OP -> OR .)
    F32             reduce using rule 155 (ADD_OP -> OR .)
    F64             reduce using rule 155 (ADD_OP -> OR .)
    INT             reduce using rule 155 (ADD_OP -> OR .)
    ISIZE           reduce using rule 155 (ADD_OP -> OR .)
    I64             reduce using rule 155 (ADD_OP -> OR .)
    I32             reduce using rule 155 (ADD_OP -> OR .)
    I16             reduce using rule 155 (ADD_OP -> OR .)
    I8              reduce using rule 155 (ADD_OP -> OR .)
    UINT            reduce using rule 155 (ADD_OP -> OR .)
    USIZE           reduce using rule 155 (ADD_OP -> OR .)
    U64             reduce using rule 155 (ADD_OP -> OR .)
    U32             reduce using rule 155 (ADD_OP -> OR .)
    U16             reduce using rule 155 (ADD_OP -> OR .)
    U8              reduce using rule 155 (ADD_OP -> OR .)
    HEX_LIT         reduce using rule 155 (ADD_OP -> OR .)
    OCTAL_LIT       reduce using rule 155 (ADD_OP -> OR .)
    BINARY_LIT      reduce using rule 155 (ADD_OP -> OR .)
    .               reduce using rule 155 (ADD_OP -> OR .)


state 130

    (156) ADD_OP -> MINUS .
    AND             reduce using rule 156 (ADD_OP -> MINUS .)
    EXCLM           reduce using rule 156 (ADD_OP -> MINUS .)
    MINUS           reduce using rule 156 (ADD_OP -> MINUS .)
    (               reduce using rule 156 (ADD_OP -> MINUS .)
    IDENTIFIER      reduce using rule 156 (ADD_OP -> MINUS .)
    STRING          reduce using rule 156 (ADD_OP -> MINUS .)
    BOOL            reduce using rule 156 (ADD_OP -> MINUS .)
    RUNE            reduce using rule 156 (ADD_OP -> MINUS .)
    FN              reduce using rule 156 (ADD_OP -> MINUS .)
    DECIMAL_LIT     reduce using rule 156 (ADD_OP -> MINUS .)
    FALSE           reduce using rule 156 (ADD_OP -> MINUS .)
    TRUE            reduce using rule 156 (ADD_OP -> MINUS .)
    RUNE_LIT        reduce using rule 156 (ADD_OP -> MINUS .)
    STRING_LIT      reduce using rule 156 (ADD_OP -> MINUS .)
    F32             reduce using rule 156 (ADD_OP -> MINUS .)
    F64             reduce using rule 156 (ADD_OP -> MINUS .)
    INT             reduce using rule 156 (ADD_OP -> MINUS .)
    ISIZE           reduce using rule 156 (ADD_OP -> MINUS .)
    I64             reduce using rule 156 (ADD_OP -> MINUS .)
    I32             reduce using rule 156 (ADD_OP -> MINUS .)
    I16             reduce using rule 156 (ADD_OP -> MINUS .)
    I8              reduce using rule 156 (ADD_OP -> MINUS .)
    UINT            reduce using rule 156 (ADD_OP -> MINUS .)
    USIZE           reduce using rule 156 (ADD_OP -> MINUS .)
    U64             reduce using rule 156 (ADD_OP -> MINUS .)
    U32             reduce using rule 156 (ADD_OP -> MINUS .)
    U16             reduce using rule 156 (ADD_OP -> MINUS .)
    U8              reduce using rule 156 (ADD_OP -> MINUS .)
    HEX_LIT         reduce using rule 156 (ADD_OP -> MINUS .)
    OCTAL_LIT       reduce using rule 156 (ADD_OP -> MINUS .)
    BINARY_LIT      reduce using rule 156 (ADD_OP -> MINUS .)
    .               reduce using rule 156 (ADD_OP -> MINUS .)


state 131

    (157) ADD_OP -> PLUS .
    AND             reduce using rule 157 (ADD_OP -> PLUS .)
    EXCLM           reduce using rule 157 (ADD_OP -> PLUS .)
    MINUS           reduce using rule 157 (ADD_OP -> PLUS .)
    (               reduce using rule 157 (ADD_OP -> PLUS .)
    IDENTIFIER      reduce using rule 157 (ADD_OP -> PLUS .)
    STRING          reduce using rule 157 (ADD_OP -> PLUS .)
    BOOL            reduce using rule 157 (ADD_OP -> PLUS .)
    RUNE            reduce using rule 157 (ADD_OP -> PLUS .)
    FN              reduce using rule 157 (ADD_OP -> PLUS .)
    DECIMAL_LIT     reduce using rule 157 (ADD_OP -> PLUS .)
    FALSE           reduce using rule 157 (ADD_OP -> PLUS .)
    TRUE            reduce using rule 157 (ADD_OP -> PLUS .)
    RUNE_LIT        reduce using rule 157 (ADD_OP -> PLUS .)
    STRING_LIT      reduce using rule 157 (ADD_OP -> PLUS .)
    F32             reduce using rule 157 (ADD_OP -> PLUS .)
    F64             reduce using rule 157 (ADD_OP -> PLUS .)
    INT             reduce using rule 157 (ADD_OP -> PLUS .)
    ISIZE           reduce using rule 157 (ADD_OP -> PLUS .)
    I64             reduce using rule 157 (ADD_OP -> PLUS .)
    I32             reduce using rule 157 (ADD_OP -> PLUS .)
    I16             reduce using rule 157 (ADD_OP -> PLUS .)
    I8              reduce using rule 157 (ADD_OP -> PLUS .)
    UINT            reduce using rule 157 (ADD_OP -> PLUS .)
    USIZE           reduce using rule 157 (ADD_OP -> PLUS .)
    U64             reduce using rule 157 (ADD_OP -> PLUS .)
    U32             reduce using rule 157 (ADD_OP -> PLUS .)
    U16             reduce using rule 157 (ADD_OP -> PLUS .)
    U8              reduce using rule 157 (ADD_OP -> PLUS .)
    HEX_LIT         reduce using rule 157 (ADD_OP -> PLUS .)
    OCTAL_LIT       reduce using rule 157 (ADD_OP -> PLUS .)
    BINARY_LIT      reduce using rule 157 (ADD_OP -> PLUS .)
    .               reduce using rule 157 (ADD_OP -> PLUS .)


state 132

    (148) REL_OP -> GE .
    AND             reduce using rule 148 (REL_OP -> GE .)
    EXCLM           reduce using rule 148 (REL_OP -> GE .)
    MINUS           reduce using rule 148 (REL_OP -> GE .)
    (               reduce using rule 148 (REL_OP -> GE .)
    IDENTIFIER      reduce using rule 148 (REL_OP -> GE .)
    STRING          reduce using rule 148 (REL_OP -> GE .)
    BOOL            reduce using rule 148 (REL_OP -> GE .)
    RUNE            reduce using rule 148 (REL_OP -> GE .)
    FN              reduce using rule 148 (REL_OP -> GE .)
    DECIMAL_LIT     reduce using rule 148 (REL_OP -> GE .)
    FALSE           reduce using rule 148 (REL_OP -> GE .)
    TRUE            reduce using rule 148 (REL_OP -> GE .)
    RUNE_LIT        reduce using rule 148 (REL_OP -> GE .)
    STRING_LIT      reduce using rule 148 (REL_OP -> GE .)
    F32             reduce using rule 148 (REL_OP -> GE .)
    F64             reduce using rule 148 (REL_OP -> GE .)
    INT             reduce using rule 148 (REL_OP -> GE .)
    ISIZE           reduce using rule 148 (REL_OP -> GE .)
    I64             reduce using rule 148 (REL_OP -> GE .)
    I32             reduce using rule 148 (REL_OP -> GE .)
    I16             reduce using rule 148 (REL_OP -> GE .)
    I8              reduce using rule 148 (REL_OP -> GE .)
    UINT            reduce using rule 148 (REL_OP -> GE .)
    USIZE           reduce using rule 148 (REL_OP -> GE .)
    U64             reduce using rule 148 (REL_OP -> GE .)
    U32             reduce using rule 148 (REL_OP -> GE .)
    U16             reduce using rule 148 (REL_OP -> GE .)
    U8              reduce using rule 148 (REL_OP -> GE .)
    HEX_LIT         reduce using rule 148 (REL_OP -> GE .)
    OCTAL_LIT       reduce using rule 148 (REL_OP -> GE .)
    BINARY_LIT      reduce using rule 148 (REL_OP -> GE .)
    .               reduce using rule 148 (REL_OP -> GE .)


state 133

    (149) REL_OP -> GT .
    AND             reduce using rule 149 (REL_OP -> GT .)
    EXCLM           reduce using rule 149 (REL_OP -> GT .)
    MINUS           reduce using rule 149 (REL_OP -> GT .)
    (               reduce using rule 149 (REL_OP -> GT .)
    IDENTIFIER      reduce using rule 149 (REL_OP -> GT .)
    STRING          reduce using rule 149 (REL_OP -> GT .)
    BOOL            reduce using rule 149 (REL_OP -> GT .)
    RUNE            reduce using rule 149 (REL_OP -> GT .)
    FN              reduce using rule 149 (REL_OP -> GT .)
    DECIMAL_LIT     reduce using rule 149 (REL_OP -> GT .)
    FALSE           reduce using rule 149 (REL_OP -> GT .)
    TRUE            reduce using rule 149 (REL_OP -> GT .)
    RUNE_LIT        reduce using rule 149 (REL_OP -> GT .)
    STRING_LIT      reduce using rule 149 (REL_OP -> GT .)
    F32             reduce using rule 149 (REL_OP -> GT .)
    F64             reduce using rule 149 (REL_OP -> GT .)
    INT             reduce using rule 149 (REL_OP -> GT .)
    ISIZE           reduce using rule 149 (REL_OP -> GT .)
    I64             reduce using rule 149 (REL_OP -> GT .)
    I32             reduce using rule 149 (REL_OP -> GT .)
    I16             reduce using rule 149 (REL_OP -> GT .)
    I8              reduce using rule 149 (REL_OP -> GT .)
    UINT            reduce using rule 149 (REL_OP -> GT .)
    USIZE           reduce using rule 149 (REL_OP -> GT .)
    U64             reduce using rule 149 (REL_OP -> GT .)
    U32             reduce using rule 149 (REL_OP -> GT .)
    U16             reduce using rule 149 (REL_OP -> GT .)
    U8              reduce using rule 149 (REL_OP -> GT .)
    HEX_LIT         reduce using rule 149 (REL_OP -> GT .)
    OCTAL_LIT       reduce using rule 149 (REL_OP -> GT .)
    BINARY_LIT      reduce using rule 149 (REL_OP -> GT .)
    .               reduce using rule 149 (REL_OP -> GT .)


state 134

    (150) REL_OP -> LE .
    AND             reduce using rule 150 (REL_OP -> LE .)
    EXCLM           reduce using rule 150 (REL_OP -> LE .)
    MINUS           reduce using rule 150 (REL_OP -> LE .)
    (               reduce using rule 150 (REL_OP -> LE .)
    IDENTIFIER      reduce using rule 150 (REL_OP -> LE .)
    STRING          reduce using rule 150 (REL_OP -> LE .)
    BOOL            reduce using rule 150 (REL_OP -> LE .)
    RUNE            reduce using rule 150 (REL_OP -> LE .)
    FN              reduce using rule 150 (REL_OP -> LE .)
    DECIMAL_LIT     reduce using rule 150 (REL_OP -> LE .)
    FALSE           reduce using rule 150 (REL_OP -> LE .)
    TRUE            reduce using rule 150 (REL_OP -> LE .)
    RUNE_LIT        reduce using rule 150 (REL_OP -> LE .)
    STRING_LIT      reduce using rule 150 (REL_OP -> LE .)
    F32             reduce using rule 150 (REL_OP -> LE .)
    F64             reduce using rule 150 (REL_OP -> LE .)
    INT             reduce using rule 150 (REL_OP -> LE .)
    ISIZE           reduce using rule 150 (REL_OP -> LE .)
    I64             reduce using rule 150 (REL_OP -> LE .)
    I32             reduce using rule 150 (REL_OP -> LE .)
    I16             reduce using rule 150 (REL_OP -> LE .)
    I8              reduce using rule 150 (REL_OP -> LE .)
    UINT            reduce using rule 150 (REL_OP -> LE .)
    USIZE           reduce using rule 150 (REL_OP -> LE .)
    U64             reduce using rule 150 (REL_OP -> LE .)
    U32             reduce using rule 150 (REL_OP -> LE .)
    U16             reduce using rule 150 (REL_OP -> LE .)
    U8              reduce using rule 150 (REL_OP -> LE .)
    HEX_LIT         reduce using rule 150 (REL_OP -> LE .)
    OCTAL_LIT       reduce using rule 150 (REL_OP -> LE .)
    BINARY_LIT      reduce using rule 150 (REL_OP -> LE .)
    .               reduce using rule 150 (REL_OP -> LE .)


state 135

    (151) REL_OP -> LT .
    AND             reduce using rule 151 (REL_OP -> LT .)
    EXCLM           reduce using rule 151 (REL_OP -> LT .)
    MINUS           reduce using rule 151 (REL_OP -> LT .)
    (               reduce using rule 151 (REL_OP -> LT .)
    IDENTIFIER      reduce using rule 151 (REL_OP -> LT .)
    STRING          reduce using rule 151 (REL_OP -> LT .)
    BOOL            reduce using rule 151 (REL_OP -> LT .)
    RUNE            reduce using rule 151 (REL_OP -> LT .)
    FN              reduce using rule 151 (REL_OP -> LT .)
    DECIMAL_LIT     reduce using rule 151 (REL_OP -> LT .)
    FALSE           reduce using rule 151 (REL_OP -> LT .)
    TRUE            reduce using rule 151 (REL_OP -> LT .)
    RUNE_LIT        reduce using rule 151 (REL_OP -> LT .)
    STRING_LIT      reduce using rule 151 (REL_OP -> LT .)
    F32             reduce using rule 151 (REL_OP -> LT .)
    F64             reduce using rule 151 (REL_OP -> LT .)
    INT             reduce using rule 151 (REL_OP -> LT .)
    ISIZE           reduce using rule 151 (REL_OP -> LT .)
    I64             reduce using rule 151 (REL_OP -> LT .)
    I32             reduce using rule 151 (REL_OP -> LT .)
    I16             reduce using rule 151 (REL_OP -> LT .)
    I8              reduce using rule 151 (REL_OP -> LT .)
    UINT            reduce using rule 151 (REL_OP -> LT .)
    USIZE           reduce using rule 151 (REL_OP -> LT .)
    U64             reduce using rule 151 (REL_OP -> LT .)
    U32             reduce using rule 151 (REL_OP -> LT .)
    U16             reduce using rule 151 (REL_OP -> LT .)
    U8              reduce using rule 151 (REL_OP -> LT .)
    HEX_LIT         reduce using rule 151 (REL_OP -> LT .)
    OCTAL_LIT       reduce using rule 151 (REL_OP -> LT .)
    BINARY_LIT      reduce using rule 151 (REL_OP -> LT .)
    .               reduce using rule 151 (REL_OP -> LT .)


state 136

    (152) REL_OP -> NE .
    AND             reduce using rule 152 (REL_OP -> NE .)
    EXCLM           reduce using rule 152 (REL_OP -> NE .)
    MINUS           reduce using rule 152 (REL_OP -> NE .)
    (               reduce using rule 152 (REL_OP -> NE .)
    IDENTIFIER      reduce using rule 152 (REL_OP -> NE .)
    STRING          reduce using rule 152 (REL_OP -> NE .)
    BOOL            reduce using rule 152 (REL_OP -> NE .)
    RUNE            reduce using rule 152 (REL_OP -> NE .)
    FN              reduce using rule 152 (REL_OP -> NE .)
    DECIMAL_LIT     reduce using rule 152 (REL_OP -> NE .)
    FALSE           reduce using rule 152 (REL_OP -> NE .)
    TRUE            reduce using rule 152 (REL_OP -> NE .)
    RUNE_LIT        reduce using rule 152 (REL_OP -> NE .)
    STRING_LIT      reduce using rule 152 (REL_OP -> NE .)
    F32             reduce using rule 152 (REL_OP -> NE .)
    F64             reduce using rule 152 (REL_OP -> NE .)
    INT             reduce using rule 152 (REL_OP -> NE .)
    ISIZE           reduce using rule 152 (REL_OP -> NE .)
    I64             reduce using rule 152 (REL_OP -> NE .)
    I32             reduce using rule 152 (REL_OP -> NE .)
    I16             reduce using rule 152 (REL_OP -> NE .)
    I8              reduce using rule 152 (REL_OP -> NE .)
    UINT            reduce using rule 152 (REL_OP -> NE .)
    USIZE           reduce using rule 152 (REL_OP -> NE .)
    U64             reduce using rule 152 (REL_OP -> NE .)
    U32             reduce using rule 152 (REL_OP -> NE .)
    U16             reduce using rule 152 (REL_OP -> NE .)
    U8              reduce using rule 152 (REL_OP -> NE .)
    HEX_LIT         reduce using rule 152 (REL_OP -> NE .)
    OCTAL_LIT       reduce using rule 152 (REL_OP -> NE .)
    BINARY_LIT      reduce using rule 152 (REL_OP -> NE .)
    .               reduce using rule 152 (REL_OP -> NE .)


state 137

    (153) REL_OP -> EQ .
    AND             reduce using rule 153 (REL_OP -> EQ .)
    EXCLM           reduce using rule 153 (REL_OP -> EQ .)
    MINUS           reduce using rule 153 (REL_OP -> EQ .)
    (               reduce using rule 153 (REL_OP -> EQ .)
    IDENTIFIER      reduce using rule 153 (REL_OP -> EQ .)
    STRING          reduce using rule 153 (REL_OP -> EQ .)
    BOOL            reduce using rule 153 (REL_OP -> EQ .)
    RUNE            reduce using rule 153 (REL_OP -> EQ .)
    FN              reduce using rule 153 (REL_OP -> EQ .)
    DECIMAL_LIT     reduce using rule 153 (REL_OP -> EQ .)
    FALSE           reduce using rule 153 (REL_OP -> EQ .)
    TRUE            reduce using rule 153 (REL_OP -> EQ .)
    RUNE_LIT        reduce using rule 153 (REL_OP -> EQ .)
    STRING_LIT      reduce using rule 153 (REL_OP -> EQ .)
    F32             reduce using rule 153 (REL_OP -> EQ .)
    F64             reduce using rule 153 (REL_OP -> EQ .)
    INT             reduce using rule 153 (REL_OP -> EQ .)
    ISIZE           reduce using rule 153 (REL_OP -> EQ .)
    I64             reduce using rule 153 (REL_OP -> EQ .)
    I32             reduce using rule 153 (REL_OP -> EQ .)
    I16             reduce using rule 153 (REL_OP -> EQ .)
    I8              reduce using rule 153 (REL_OP -> EQ .)
    UINT            reduce using rule 153 (REL_OP -> EQ .)
    USIZE           reduce using rule 153 (REL_OP -> EQ .)
    U64             reduce using rule 153 (REL_OP -> EQ .)
    U32             reduce using rule 153 (REL_OP -> EQ .)
    U16             reduce using rule 153 (REL_OP -> EQ .)
    U8              reduce using rule 153 (REL_OP -> EQ .)
    HEX_LIT         reduce using rule 153 (REL_OP -> EQ .)
    OCTAL_LIT       reduce using rule 153 (REL_OP -> EQ .)
    BINARY_LIT      reduce using rule 153 (REL_OP -> EQ .)
    .               reduce using rule 153 (REL_OP -> EQ .)


state 138

    (82) unaryExpr -> UNARY_OP unaryExpr .
    LOGIC_AND       reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    LOGIC_OR        reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    SHR             reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    SHL             reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    AND             reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    MOD             reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    DIV             reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    STAR            reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    XOR             reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    OR              reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    MINUS           reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    PLUS            reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    GE              reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    GT              reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    LE              reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    LT              reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    NE              reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    EQ              reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    NEWL            reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    ;               reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    )               reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    ,               reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)
    }               reduce using rule 82 (unaryExpr -> UNARY_OP unaryExpr .)


state 139

    (90) operandName -> IDENTIFIER .
    (               reduce using rule 90 (operandName -> IDENTIFIER .)
    LOGIC_AND       reduce using rule 90 (operandName -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 90 (operandName -> IDENTIFIER .)
    SHR             reduce using rule 90 (operandName -> IDENTIFIER .)
    SHL             reduce using rule 90 (operandName -> IDENTIFIER .)
    AND             reduce using rule 90 (operandName -> IDENTIFIER .)
    MOD             reduce using rule 90 (operandName -> IDENTIFIER .)
    DIV             reduce using rule 90 (operandName -> IDENTIFIER .)
    STAR            reduce using rule 90 (operandName -> IDENTIFIER .)
    XOR             reduce using rule 90 (operandName -> IDENTIFIER .)
    OR              reduce using rule 90 (operandName -> IDENTIFIER .)
    MINUS           reduce using rule 90 (operandName -> IDENTIFIER .)
    PLUS            reduce using rule 90 (operandName -> IDENTIFIER .)
    GE              reduce using rule 90 (operandName -> IDENTIFIER .)
    GT              reduce using rule 90 (operandName -> IDENTIFIER .)
    LE              reduce using rule 90 (operandName -> IDENTIFIER .)
    LT              reduce using rule 90 (operandName -> IDENTIFIER .)
    NE              reduce using rule 90 (operandName -> IDENTIFIER .)
    EQ              reduce using rule 90 (operandName -> IDENTIFIER .)
    NEWL            reduce using rule 90 (operandName -> IDENTIFIER .)
    ;               reduce using rule 90 (operandName -> IDENTIFIER .)
    )               reduce using rule 90 (operandName -> IDENTIFIER .)
    ,               reduce using rule 90 (operandName -> IDENTIFIER .)
    }               reduce using rule 90 (operandName -> IDENTIFIER .)


state 140

    (61) functionLit -> FN . function_
    (49) function_ -> . signature block
    (50) signature -> . parameters
    (51) signature -> . parameters result
    (54) parameters -> . ( parameterList , )
    (55) parameters -> . ( parameterList )
    (56) parameters -> . ( )
    (               shift and go to state 101

    function_                      shift and go to state 99
    signature                      shift and go to state 98
    parameters                     shift and go to state 100

state 141

    (84) primaryExpr -> primaryExpr arguments .
    (               reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    LOGIC_AND       reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    LOGIC_OR        reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    SHR             reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    SHL             reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    AND             reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    MOD             reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    DIV             reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    STAR            reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    XOR             reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    OR              reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    MINUS           reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    PLUS            reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    GE              reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    GT              reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    LE              reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    LT              reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    NE              reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    EQ              reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    NEWL            reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    ;               reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    )               reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    ,               reduce using rule 84 (primaryExpr -> primaryExpr arguments .)
    }               reduce using rule 84 (primaryExpr -> primaryExpr arguments .)


state 142

    (73) arguments -> ( . type_ , expressionList , )
    (74) arguments -> ( . type_ , expressionList )
    (75) arguments -> ( . type_ , )
    (76) arguments -> ( . type_ )
    (77) arguments -> ( . expressionList , )
    (78) arguments -> ( . expressionList )
    (79) arguments -> ( . )
    (94) type_ -> . typeName
    (62) expressionList -> . expressionList , expression
    (63) expressionList -> . expression
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    )               shift and go to state 190
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    IDENTIFIER      shift and go to state 139
    FN              shift and go to state 140
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    type_                          shift and go to state 188
    expressionList                 shift and go to state 189
    typeName                       shift and go to state 37
    expression                     shift and go to state 167
    numericType                    shift and go to state 40
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 143

    (93) conversion -> type_ ( . expression )
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    IDENTIFIER      shift and go to state 139
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    FN              shift and go to state 140
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    type_                          shift and go to state 33
    expression                     shift and go to state 191
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 144

    (87) operand -> ( expression . )
    (80) expression -> expression . BINARY_OP unaryExpr
    (143) BINARY_OP -> . MUL_OP
    (144) BINARY_OP -> . ADD_OP
    (145) BINARY_OP -> . REL_OP
    (146) BINARY_OP -> . LOGIC_AND
    (147) BINARY_OP -> . LOGIC_OR
    (158) MUL_OP -> . SHR
    (159) MUL_OP -> . SHL
    (160) MUL_OP -> . AND
    (161) MUL_OP -> . MOD
    (162) MUL_OP -> . DIV
    (163) MUL_OP -> . STAR
    (154) ADD_OP -> . XOR
    (155) ADD_OP -> . OR
    (156) ADD_OP -> . MINUS
    (157) ADD_OP -> . PLUS
    (148) REL_OP -> . GE
    (149) REL_OP -> . GT
    (150) REL_OP -> . LE
    (151) REL_OP -> . LT
    (152) REL_OP -> . NE
    (153) REL_OP -> . EQ
    )               shift and go to state 192
    LOGIC_AND       shift and go to state 120
    LOGIC_OR        shift and go to state 121
    SHR             shift and go to state 122
    SHL             shift and go to state 123
    AND             shift and go to state 124
    MOD             shift and go to state 125
    DIV             shift and go to state 126
    STAR            shift and go to state 127
    XOR             shift and go to state 128
    OR              shift and go to state 129
    MINUS           shift and go to state 130
    PLUS            shift and go to state 131
    GE              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    LT              shift and go to state 135
    NE              shift and go to state 136
    EQ              shift and go to state 137

    BINARY_OP                      shift and go to state 116
    MUL_OP                         shift and go to state 117
    ADD_OP                         shift and go to state 118
    REL_OP                         shift and go to state 119

state 145

    (116) basicLit -> FLOAT_LIT EXPONENT .
    (               reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    LOGIC_AND       reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    LOGIC_OR        reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    SHR             reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    SHL             reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    AND             reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    MOD             reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    DIV             reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    STAR            reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    XOR             reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    OR              reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    MINUS           reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    PLUS            reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    GE              reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    GT              reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    LE              reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    LT              reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    NE              reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    EQ              reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    NEWL            reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    ;               reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    )               reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    ,               reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)
    }               reduce using rule 116 (basicLit -> FLOAT_LIT EXPONENT .)


state 146

    (115) basicLit -> DECIMAL_LIT EXPONENT .
    (               reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    LOGIC_AND       reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    LOGIC_OR        reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    SHR             reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    SHL             reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    AND             reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    MOD             reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    DIV             reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    STAR            reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    XOR             reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    OR              reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    MINUS           reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    PLUS            reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    GE              reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    GT              reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    LE              reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    LT              reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    NE              reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    EQ              reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    NEWL            reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    ;               reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    )               reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    ,               reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)
    }               reduce using rule 115 (basicLit -> DECIMAL_LIT EXPONENT .)


state 147

    (122) FLOAT_LIT -> DECIMAL_LIT . .
    (123) FLOAT_LIT -> DECIMAL_LIT . . DECIMAL_LIT
    EXPONENT        reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    (               reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    LOGIC_AND       reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    LOGIC_OR        reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    SHR             reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    SHL             reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    AND             reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    MOD             reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    DIV             reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    STAR            reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    XOR             reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    OR              reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    MINUS           reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    PLUS            reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    GE              reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    GT              reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    LE              reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    LT              reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    NE              reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    EQ              reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    NEWL            reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    ;               reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    )               reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    ,               reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    }               reduce using rule 122 (FLOAT_LIT -> DECIMAL_LIT . .)
    DECIMAL_LIT     shift and go to state 193


state 148

    (121) FLOAT_LIT -> . DECIMAL_LIT .
    EXPONENT        reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    (               reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    SHR             reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    SHL             reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    AND             reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    MOD             reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    DIV             reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    STAR            reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    XOR             reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    OR              reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    MINUS           reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    PLUS            reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    GE              reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    GT              reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    LE              reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    LT              reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    NE              reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    EQ              reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    NEWL            reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    ;               reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    )               reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    ,               reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)
    }               reduce using rule 121 (FLOAT_LIT -> . DECIMAL_LIT .)


state 149

    (7) sourceFile -> moduleClause importDecls orphanStmtList .
    $end            reduce using rule 7 (sourceFile -> moduleClause importDecls orphanStmtList .)


state 150

    (15) sourceFile -> moduleClause importDecls topLevelDecls .
    (23) sourceFile -> moduleClause importDecls topLevelDecls . orphanStmtList
    (39) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (64) statementList -> . statementList eos statement
    (65) statementList -> . statement
    (47) functionDecl -> . FN IDENTIFIER signature
    (48) functionDecl -> . FN IDENTIFIER function_
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 15 (sourceFile -> moduleClause importDecls topLevelDecls .)
    FN              shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    orphanStmtList                 shift and go to state 194
    topLevelDecl                   shift and go to state 81
    statementList                  shift and go to state 7
    functionDecl                   shift and go to state 16
    statement                      shift and go to state 13
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 151

    (18) sourceFile -> moduleClause topLevelDecls orphanStmtList .
    $end            reduce using rule 18 (sourceFile -> moduleClause topLevelDecls orphanStmtList .)


state 152

    (5) sourceFile -> cPreprocessors moduleClause orphanStmtList .
    $end            reduce using rule 5 (sourceFile -> cPreprocessors moduleClause orphanStmtList .)


state 153

    (8) sourceFile -> cPreprocessors moduleClause importDecls . orphanStmtList
    (16) sourceFile -> cPreprocessors moduleClause importDecls . topLevelDecls
    (24) sourceFile -> cPreprocessors moduleClause importDecls . topLevelDecls orphanStmtList
    (31) importDecls -> importDecls . importDecl eos
    (41) orphanStmtList -> . statementList eos
    (39) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (40) topLevelDecls -> . topLevelDecl eos
    (33) importDecl -> . IMPORT importSpec
    (64) statementList -> . statementList eos statement
    (65) statementList -> . statement
    (42) topLevelDecl -> . functionDecl
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (47) functionDecl -> . FN IDENTIFIER signature
    (48) functionDecl -> . FN IDENTIFIER function_
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IMPORT          shift and go to state 15
    FN              shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    orphanStmtList                 shift and go to state 195
    topLevelDecls                  shift and go to state 196
    importDecl                     shift and go to state 79
    statementList                  shift and go to state 7
    topLevelDecl                   shift and go to state 12
    statement                      shift and go to state 13
    functionDecl                   shift and go to state 16
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 154

    (13) sourceFile -> cPreprocessors moduleClause topLevelDecls .
    (21) sourceFile -> cPreprocessors moduleClause topLevelDecls . orphanStmtList
    (39) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (64) statementList -> . statementList eos statement
    (65) statementList -> . statement
    (47) functionDecl -> . FN IDENTIFIER signature
    (48) functionDecl -> . FN IDENTIFIER function_
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 13 (sourceFile -> cPreprocessors moduleClause topLevelDecls .)
    FN              shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    orphanStmtList                 shift and go to state 197
    topLevelDecl                   shift and go to state 81
    statementList                  shift and go to state 7
    functionDecl                   shift and go to state 16
    statement                      shift and go to state 13
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 155

    (6) sourceFile -> cPreprocessors importDecls orphanStmtList .
    $end            reduce using rule 6 (sourceFile -> cPreprocessors importDecls orphanStmtList .)


state 156

    (14) sourceFile -> cPreprocessors importDecls topLevelDecls .
    (22) sourceFile -> cPreprocessors importDecls topLevelDecls . orphanStmtList
    (39) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (64) statementList -> . statementList eos statement
    (65) statementList -> . statement
    (47) functionDecl -> . FN IDENTIFIER signature
    (48) functionDecl -> . FN IDENTIFIER function_
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 14 (sourceFile -> cPreprocessors importDecls topLevelDecls .)
    FN              shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    orphanStmtList                 shift and go to state 198
    topLevelDecl                   shift and go to state 81
    statementList                  shift and go to state 7
    functionDecl                   shift and go to state 16
    statement                      shift and go to state 13
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 157

    (19) sourceFile -> cPreprocessors topLevelDecls orphanStmtList .
    $end            reduce using rule 19 (sourceFile -> cPreprocessors topLevelDecls orphanStmtList .)


state 158

    (26) cPreprocessors -> cPreprocessors cPreprocessor eos .
    (128) eos -> eos . NEWL
    (130) eos -> eos . ;
    MODULE          reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    C_PREPR         reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    IMPORT          reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    FN              reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    IDENTIFIER      reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    AND             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    EXCLM           reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    MINUS           reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    (               reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    STRING          reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    BOOL            reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    RUNE            reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    DECIMAL_LIT     reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    FALSE           reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    TRUE            reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    RUNE_LIT        reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    STRING_LIT      reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    F32             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    F64             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    INT             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    ISIZE           reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    I64             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    I32             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    I16             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    I8              reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    UINT            reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    USIZE           reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    U64             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    U32             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    U16             reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    U8              reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    HEX_LIT         reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    OCTAL_LIT       reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    BINARY_LIT      reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    .               reduce using rule 26 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    NEWL            shift and go to state 163
    ;               shift and go to state 164


state 159

    (20) sourceFile -> importDecls topLevelDecls orphanStmtList .
    $end            reduce using rule 20 (sourceFile -> importDecls topLevelDecls orphanStmtList .)


state 160

    (31) importDecls -> importDecls importDecl eos .
    (128) eos -> eos . NEWL
    (130) eos -> eos . ;
    IMPORT          reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    FN              reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    IDENTIFIER      reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    AND             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    EXCLM           reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    MINUS           reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    (               reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    STRING          reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    BOOL            reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    RUNE            reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    DECIMAL_LIT     reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    FALSE           reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    TRUE            reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    RUNE_LIT        reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    STRING_LIT      reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    F32             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    F64             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    INT             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    ISIZE           reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    I64             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    I32             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    I16             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    I8              reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    UINT            reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    USIZE           reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    U64             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    U32             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    U16             reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    U8              reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    HEX_LIT         reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    OCTAL_LIT       reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    BINARY_LIT      reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    .               reduce using rule 31 (importDecls -> importDecls importDecl eos .)
    NEWL            shift and go to state 163
    ;               shift and go to state 164


state 161

    (39) topLevelDecls -> topLevelDecls topLevelDecl eos .
    (128) eos -> eos . NEWL
    (130) eos -> eos . ;
    FN              reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    IDENTIFIER      reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    AND             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    EXCLM           reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    MINUS           reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    (               reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    STRING          reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    BOOL            reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    RUNE            reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    DECIMAL_LIT     reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    FALSE           reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    TRUE            reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    RUNE_LIT        reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    STRING_LIT      reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    F32             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    F64             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    INT             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    ISIZE           reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I64             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I32             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I16             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I8              reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    UINT            reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    USIZE           reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U64             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U32             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U16             reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U8              reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    HEX_LIT         reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    OCTAL_LIT       reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    BINARY_LIT      reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    .               reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    $end            reduce using rule 39 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    NEWL            shift and go to state 163
    ;               shift and go to state 164


state 162

    (64) statementList -> statementList eos statement .
    NEWL            reduce using rule 64 (statementList -> statementList eos statement .)
    ;               reduce using rule 64 (statementList -> statementList eos statement .)
    }               reduce using rule 64 (statementList -> statementList eos statement .)


state 163

    (128) eos -> eos NEWL .
    NEWL            reduce using rule 128 (eos -> eos NEWL .)
    ;               reduce using rule 128 (eos -> eos NEWL .)
    IDENTIFIER      reduce using rule 128 (eos -> eos NEWL .)
    AND             reduce using rule 128 (eos -> eos NEWL .)
    EXCLM           reduce using rule 128 (eos -> eos NEWL .)
    MINUS           reduce using rule 128 (eos -> eos NEWL .)
    (               reduce using rule 128 (eos -> eos NEWL .)
    STRING          reduce using rule 128 (eos -> eos NEWL .)
    BOOL            reduce using rule 128 (eos -> eos NEWL .)
    RUNE            reduce using rule 128 (eos -> eos NEWL .)
    FN              reduce using rule 128 (eos -> eos NEWL .)
    DECIMAL_LIT     reduce using rule 128 (eos -> eos NEWL .)
    FALSE           reduce using rule 128 (eos -> eos NEWL .)
    TRUE            reduce using rule 128 (eos -> eos NEWL .)
    RUNE_LIT        reduce using rule 128 (eos -> eos NEWL .)
    STRING_LIT      reduce using rule 128 (eos -> eos NEWL .)
    F32             reduce using rule 128 (eos -> eos NEWL .)
    F64             reduce using rule 128 (eos -> eos NEWL .)
    INT             reduce using rule 128 (eos -> eos NEWL .)
    ISIZE           reduce using rule 128 (eos -> eos NEWL .)
    I64             reduce using rule 128 (eos -> eos NEWL .)
    I32             reduce using rule 128 (eos -> eos NEWL .)
    I16             reduce using rule 128 (eos -> eos NEWL .)
    I8              reduce using rule 128 (eos -> eos NEWL .)
    UINT            reduce using rule 128 (eos -> eos NEWL .)
    USIZE           reduce using rule 128 (eos -> eos NEWL .)
    U64             reduce using rule 128 (eos -> eos NEWL .)
    U32             reduce using rule 128 (eos -> eos NEWL .)
    U16             reduce using rule 128 (eos -> eos NEWL .)
    U8              reduce using rule 128 (eos -> eos NEWL .)
    HEX_LIT         reduce using rule 128 (eos -> eos NEWL .)
    OCTAL_LIT       reduce using rule 128 (eos -> eos NEWL .)
    BINARY_LIT      reduce using rule 128 (eos -> eos NEWL .)
    .               reduce using rule 128 (eos -> eos NEWL .)
    $end            reduce using rule 128 (eos -> eos NEWL .)
    MODULE          reduce using rule 128 (eos -> eos NEWL .)
    C_PREPR         reduce using rule 128 (eos -> eos NEWL .)
    IMPORT          reduce using rule 128 (eos -> eos NEWL .)


state 164

    (130) eos -> eos ; .
    NEWL            reduce using rule 130 (eos -> eos ; .)
    ;               reduce using rule 130 (eos -> eos ; .)
    IDENTIFIER      reduce using rule 130 (eos -> eos ; .)
    AND             reduce using rule 130 (eos -> eos ; .)
    EXCLM           reduce using rule 130 (eos -> eos ; .)
    MINUS           reduce using rule 130 (eos -> eos ; .)
    (               reduce using rule 130 (eos -> eos ; .)
    STRING          reduce using rule 130 (eos -> eos ; .)
    BOOL            reduce using rule 130 (eos -> eos ; .)
    RUNE            reduce using rule 130 (eos -> eos ; .)
    FN              reduce using rule 130 (eos -> eos ; .)
    DECIMAL_LIT     reduce using rule 130 (eos -> eos ; .)
    FALSE           reduce using rule 130 (eos -> eos ; .)
    TRUE            reduce using rule 130 (eos -> eos ; .)
    RUNE_LIT        reduce using rule 130 (eos -> eos ; .)
    STRING_LIT      reduce using rule 130 (eos -> eos ; .)
    F32             reduce using rule 130 (eos -> eos ; .)
    F64             reduce using rule 130 (eos -> eos ; .)
    INT             reduce using rule 130 (eos -> eos ; .)
    ISIZE           reduce using rule 130 (eos -> eos ; .)
    I64             reduce using rule 130 (eos -> eos ; .)
    I32             reduce using rule 130 (eos -> eos ; .)
    I16             reduce using rule 130 (eos -> eos ; .)
    I8              reduce using rule 130 (eos -> eos ; .)
    UINT            reduce using rule 130 (eos -> eos ; .)
    USIZE           reduce using rule 130 (eos -> eos ; .)
    U64             reduce using rule 130 (eos -> eos ; .)
    U32             reduce using rule 130 (eos -> eos ; .)
    U16             reduce using rule 130 (eos -> eos ; .)
    U8              reduce using rule 130 (eos -> eos ; .)
    HEX_LIT         reduce using rule 130 (eos -> eos ; .)
    OCTAL_LIT       reduce using rule 130 (eos -> eos ; .)
    BINARY_LIT      reduce using rule 130 (eos -> eos ; .)
    .               reduce using rule 130 (eos -> eos ; .)
    $end            reduce using rule 130 (eos -> eos ; .)
    MODULE          reduce using rule 130 (eos -> eos ; .)
    C_PREPR         reduce using rule 130 (eos -> eos ; .)
    IMPORT          reduce using rule 130 (eos -> eos ; .)


state 165

    (25) moduleClause -> MODULE IDENTIFIER eos .
    (128) eos -> eos . NEWL
    (130) eos -> eos . ;
    IMPORT          reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    FN              reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    IDENTIFIER      reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    AND             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    EXCLM           reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    MINUS           reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    (               reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    STRING          reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    BOOL            reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    RUNE            reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    DECIMAL_LIT     reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    FALSE           reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    TRUE            reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    RUNE_LIT        reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    STRING_LIT      reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    F32             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    F64             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    INT             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    ISIZE           reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    I64             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    I32             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    I16             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    I8              reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    UINT            reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    USIZE           reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    U64             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    U32             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    U16             reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    U8              reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    HEX_LIT         reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    OCTAL_LIT       reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    BINARY_LIT      reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    .               reduce using rule 25 (moduleClause -> MODULE IDENTIFIER eos .)
    NEWL            shift and go to state 163
    ;               shift and go to state 164


state 166

    (30) cPreprocessor -> C_PREPR IDENTIFIER expressionList .
    (62) expressionList -> expressionList . , expression
    NEWL            reduce using rule 30 (cPreprocessor -> C_PREPR IDENTIFIER expressionList .)
    ;               reduce using rule 30 (cPreprocessor -> C_PREPR IDENTIFIER expressionList .)
    ,               shift and go to state 199


state 167

    (63) expressionList -> expression .
    (80) expression -> expression . BINARY_OP unaryExpr
    (143) BINARY_OP -> . MUL_OP
    (144) BINARY_OP -> . ADD_OP
    (145) BINARY_OP -> . REL_OP
    (146) BINARY_OP -> . LOGIC_AND
    (147) BINARY_OP -> . LOGIC_OR
    (158) MUL_OP -> . SHR
    (159) MUL_OP -> . SHL
    (160) MUL_OP -> . AND
    (161) MUL_OP -> . MOD
    (162) MUL_OP -> . DIV
    (163) MUL_OP -> . STAR
    (154) ADD_OP -> . XOR
    (155) ADD_OP -> . OR
    (156) ADD_OP -> . MINUS
    (157) ADD_OP -> . PLUS
    (148) REL_OP -> . GE
    (149) REL_OP -> . GT
    (150) REL_OP -> . LE
    (151) REL_OP -> . LT
    (152) REL_OP -> . NE
    (153) REL_OP -> . EQ
    ,               reduce using rule 63 (expressionList -> expression .)
    NEWL            reduce using rule 63 (expressionList -> expression .)
    ;               reduce using rule 63 (expressionList -> expression .)
    }               reduce using rule 63 (expressionList -> expression .)
    )               reduce using rule 63 (expressionList -> expression .)
    LOGIC_AND       shift and go to state 120
    LOGIC_OR        shift and go to state 121
    SHR             shift and go to state 122
    SHL             shift and go to state 123
    AND             shift and go to state 124
    MOD             shift and go to state 125
    DIV             shift and go to state 126
    STAR            shift and go to state 127
    XOR             shift and go to state 128
    OR              shift and go to state 129
    MINUS           shift and go to state 130
    PLUS            shift and go to state 131
    GE              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    LT              shift and go to state 135
    NE              shift and go to state 136
    EQ              shift and go to state 137

    BINARY_OP                      shift and go to state 116
    MUL_OP                         shift and go to state 117
    ADD_OP                         shift and go to state 118
    REL_OP                         shift and go to state 119

state 168

    (38) importPath -> IDENTIFIER .
    NEWL            reduce using rule 38 (importPath -> IDENTIFIER .)
    ;               reduce using rule 38 (importPath -> IDENTIFIER .)


state 169

    (35) importSpec -> IDENTIFIER importPath .
    NEWL            reduce using rule 35 (importSpec -> IDENTIFIER importPath .)
    ;               reduce using rule 35 (importSpec -> IDENTIFIER importPath .)


state 170

    (36) importSpec -> . importPath .
    NEWL            reduce using rule 36 (importSpec -> . importPath .)
    ;               reduce using rule 36 (importSpec -> . importPath .)


state 171

    (47) functionDecl -> FN IDENTIFIER signature .
    (49) function_ -> signature . block
    (66) block -> . { statementList }
    NEWL            reduce using rule 47 (functionDecl -> FN IDENTIFIER signature .)
    ;               reduce using rule 47 (functionDecl -> FN IDENTIFIER signature .)
    {               shift and go to state 174

    block                          shift and go to state 173

state 172

    (48) functionDecl -> FN IDENTIFIER function_ .
    NEWL            reduce using rule 48 (functionDecl -> FN IDENTIFIER function_ .)
    ;               reduce using rule 48 (functionDecl -> FN IDENTIFIER function_ .)


state 173

    (49) function_ -> signature block .
    (               reduce using rule 49 (function_ -> signature block .)
    LOGIC_AND       reduce using rule 49 (function_ -> signature block .)
    LOGIC_OR        reduce using rule 49 (function_ -> signature block .)
    SHR             reduce using rule 49 (function_ -> signature block .)
    SHL             reduce using rule 49 (function_ -> signature block .)
    AND             reduce using rule 49 (function_ -> signature block .)
    MOD             reduce using rule 49 (function_ -> signature block .)
    DIV             reduce using rule 49 (function_ -> signature block .)
    STAR            reduce using rule 49 (function_ -> signature block .)
    XOR             reduce using rule 49 (function_ -> signature block .)
    OR              reduce using rule 49 (function_ -> signature block .)
    MINUS           reduce using rule 49 (function_ -> signature block .)
    PLUS            reduce using rule 49 (function_ -> signature block .)
    GE              reduce using rule 49 (function_ -> signature block .)
    GT              reduce using rule 49 (function_ -> signature block .)
    LE              reduce using rule 49 (function_ -> signature block .)
    LT              reduce using rule 49 (function_ -> signature block .)
    NE              reduce using rule 49 (function_ -> signature block .)
    EQ              reduce using rule 49 (function_ -> signature block .)
    NEWL            reduce using rule 49 (function_ -> signature block .)
    ;               reduce using rule 49 (function_ -> signature block .)
    )               reduce using rule 49 (function_ -> signature block .)
    ,               reduce using rule 49 (function_ -> signature block .)
    }               reduce using rule 49 (function_ -> signature block .)


state 174

    (66) block -> { . statementList }
    (64) statementList -> . statementList eos statement
    (65) statementList -> . statement
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    FN              shift and go to state 140
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    statementList                  shift and go to state 200
    statement                      shift and go to state 13
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 175

    (53) result -> parameters .
    {               reduce using rule 53 (result -> parameters .)
    NEWL            reduce using rule 53 (result -> parameters .)
    ;               reduce using rule 53 (result -> parameters .)


state 176

    (51) signature -> parameters result .
    {               reduce using rule 51 (signature -> parameters result .)
    NEWL            reduce using rule 51 (signature -> parameters result .)
    ;               reduce using rule 51 (signature -> parameters result .)


state 177

    (52) result -> type_ .
    {               reduce using rule 52 (result -> type_ .)
    NEWL            reduce using rule 52 (result -> type_ .)
    ;               reduce using rule 52 (result -> type_ .)


state 178

    (54) parameters -> ( parameterList . , )
    (55) parameters -> ( parameterList . )
    (57) parameterList -> parameterList . , parameterDecl
    ,               shift and go to state 201
    )               shift and go to state 202


state 179

    (56) parameters -> ( ) .
    (               reduce using rule 56 (parameters -> ( ) .)
    STRING          reduce using rule 56 (parameters -> ( ) .)
    BOOL            reduce using rule 56 (parameters -> ( ) .)
    RUNE            reduce using rule 56 (parameters -> ( ) .)
    F32             reduce using rule 56 (parameters -> ( ) .)
    F64             reduce using rule 56 (parameters -> ( ) .)
    INT             reduce using rule 56 (parameters -> ( ) .)
    ISIZE           reduce using rule 56 (parameters -> ( ) .)
    I64             reduce using rule 56 (parameters -> ( ) .)
    I32             reduce using rule 56 (parameters -> ( ) .)
    I16             reduce using rule 56 (parameters -> ( ) .)
    I8              reduce using rule 56 (parameters -> ( ) .)
    UINT            reduce using rule 56 (parameters -> ( ) .)
    USIZE           reduce using rule 56 (parameters -> ( ) .)
    U64             reduce using rule 56 (parameters -> ( ) .)
    U32             reduce using rule 56 (parameters -> ( ) .)
    U16             reduce using rule 56 (parameters -> ( ) .)
    U8              reduce using rule 56 (parameters -> ( ) .)
    {               reduce using rule 56 (parameters -> ( ) .)
    NEWL            reduce using rule 56 (parameters -> ( ) .)
    ;               reduce using rule 56 (parameters -> ( ) .)


state 180

    (58) parameterList -> parameterDecl .
    ,               reduce using rule 58 (parameterList -> parameterDecl .)
    )               reduce using rule 58 (parameterList -> parameterDecl .)


state 181

    (59) parameterDecl -> type_ .
    ,               reduce using rule 59 (parameterDecl -> type_ .)
    )               reduce using rule 59 (parameterDecl -> type_ .)


state 182

    (60) parameterDecl -> identifierList . type_
    (45) identifierList -> identifierList . , IDENTIFIER
    (94) type_ -> . typeName
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    ,               shift and go to state 104
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64

    type_                          shift and go to state 203
    typeName                       shift and go to state 37
    numericType                    shift and go to state 40

state 183

    (46) identifierList -> IDENTIFIER .
    ,               reduce using rule 46 (identifierList -> IDENTIFIER .)
    STRING          reduce using rule 46 (identifierList -> IDENTIFIER .)
    BOOL            reduce using rule 46 (identifierList -> IDENTIFIER .)
    RUNE            reduce using rule 46 (identifierList -> IDENTIFIER .)
    F32             reduce using rule 46 (identifierList -> IDENTIFIER .)
    F64             reduce using rule 46 (identifierList -> IDENTIFIER .)
    INT             reduce using rule 46 (identifierList -> IDENTIFIER .)
    ISIZE           reduce using rule 46 (identifierList -> IDENTIFIER .)
    I64             reduce using rule 46 (identifierList -> IDENTIFIER .)
    I32             reduce using rule 46 (identifierList -> IDENTIFIER .)
    I16             reduce using rule 46 (identifierList -> IDENTIFIER .)
    I8              reduce using rule 46 (identifierList -> IDENTIFIER .)
    UINT            reduce using rule 46 (identifierList -> IDENTIFIER .)
    USIZE           reduce using rule 46 (identifierList -> IDENTIFIER .)
    U64             reduce using rule 46 (identifierList -> IDENTIFIER .)
    U32             reduce using rule 46 (identifierList -> IDENTIFIER .)
    U16             reduce using rule 46 (identifierList -> IDENTIFIER .)
    U8              reduce using rule 46 (identifierList -> IDENTIFIER .)


state 184

    (72) assignment -> identifierList assign_op expressionList .
    (62) expressionList -> expressionList . , expression
    NEWL            reduce using rule 72 (assignment -> identifierList assign_op expressionList .)
    ;               reduce using rule 72 (assignment -> identifierList assign_op expressionList .)
    }               reduce using rule 72 (assignment -> identifierList assign_op expressionList .)
    ,               shift and go to state 199


state 185

    (44) varDecl -> identifierList DECL_ASGN expressionList .
    (62) expressionList -> expressionList . , expression
    NEWL            reduce using rule 44 (varDecl -> identifierList DECL_ASGN expressionList .)
    ;               reduce using rule 44 (varDecl -> identifierList DECL_ASGN expressionList .)
    }               reduce using rule 44 (varDecl -> identifierList DECL_ASGN expressionList .)
    ,               shift and go to state 199


state 186

    (45) identifierList -> identifierList , IDENTIFIER .
    DECL_ASGN       reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    ,               reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    SHR_ASGN        reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    SHL_ASGN        reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    MOD_ASGN        reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    DIV_ASGN        reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    OR_ASGN         reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    AND_ASGN        reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    STAR_ASGN       reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    XOR_ASGN        reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    MINUS_ASGN      reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    PLUS_ASGN       reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    ASSIGN          reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    STRING          reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    BOOL            reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    RUNE            reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    F32             reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    F64             reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    INT             reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    ISIZE           reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    I64             reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    I32             reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    I16             reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    I8              reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    UINT            reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    USIZE           reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    U64             reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    U32             reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    U16             reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)
    U8              reduce using rule 45 (identifierList -> identifierList , IDENTIFIER .)


state 187

    (80) expression -> expression BINARY_OP unaryExpr .
    LOGIC_AND       reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    LOGIC_OR        reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    SHR             reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    SHL             reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    AND             reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    MOD             reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    DIV             reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    STAR            reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    XOR             reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    OR              reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    MINUS           reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    PLUS            reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    GE              reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    GT              reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    LE              reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    LT              reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    NE              reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    EQ              reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    NEWL            reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    ;               reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    )               reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    ,               reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)
    }               reduce using rule 80 (expression -> expression BINARY_OP unaryExpr .)


state 188

    (73) arguments -> ( type_ . , expressionList , )
    (74) arguments -> ( type_ . , expressionList )
    (75) arguments -> ( type_ . , )
    (76) arguments -> ( type_ . )
    (93) conversion -> type_ . ( expression )
    ,               shift and go to state 204
    )               shift and go to state 205
    (               shift and go to state 143


state 189

    (77) arguments -> ( expressionList . , )
    (78) arguments -> ( expressionList . )
    (62) expressionList -> expressionList . , expression
    ,               shift and go to state 206
    )               shift and go to state 207


state 190

    (79) arguments -> ( ) .
    (               reduce using rule 79 (arguments -> ( ) .)
    LOGIC_AND       reduce using rule 79 (arguments -> ( ) .)
    LOGIC_OR        reduce using rule 79 (arguments -> ( ) .)
    SHR             reduce using rule 79 (arguments -> ( ) .)
    SHL             reduce using rule 79 (arguments -> ( ) .)
    AND             reduce using rule 79 (arguments -> ( ) .)
    MOD             reduce using rule 79 (arguments -> ( ) .)
    DIV             reduce using rule 79 (arguments -> ( ) .)
    STAR            reduce using rule 79 (arguments -> ( ) .)
    XOR             reduce using rule 79 (arguments -> ( ) .)
    OR              reduce using rule 79 (arguments -> ( ) .)
    MINUS           reduce using rule 79 (arguments -> ( ) .)
    PLUS            reduce using rule 79 (arguments -> ( ) .)
    GE              reduce using rule 79 (arguments -> ( ) .)
    GT              reduce using rule 79 (arguments -> ( ) .)
    LE              reduce using rule 79 (arguments -> ( ) .)
    LT              reduce using rule 79 (arguments -> ( ) .)
    NE              reduce using rule 79 (arguments -> ( ) .)
    EQ              reduce using rule 79 (arguments -> ( ) .)
    NEWL            reduce using rule 79 (arguments -> ( ) .)
    ;               reduce using rule 79 (arguments -> ( ) .)
    )               reduce using rule 79 (arguments -> ( ) .)
    ,               reduce using rule 79 (arguments -> ( ) .)
    }               reduce using rule 79 (arguments -> ( ) .)


state 191

    (93) conversion -> type_ ( expression . )
    (80) expression -> expression . BINARY_OP unaryExpr
    (143) BINARY_OP -> . MUL_OP
    (144) BINARY_OP -> . ADD_OP
    (145) BINARY_OP -> . REL_OP
    (146) BINARY_OP -> . LOGIC_AND
    (147) BINARY_OP -> . LOGIC_OR
    (158) MUL_OP -> . SHR
    (159) MUL_OP -> . SHL
    (160) MUL_OP -> . AND
    (161) MUL_OP -> . MOD
    (162) MUL_OP -> . DIV
    (163) MUL_OP -> . STAR
    (154) ADD_OP -> . XOR
    (155) ADD_OP -> . OR
    (156) ADD_OP -> . MINUS
    (157) ADD_OP -> . PLUS
    (148) REL_OP -> . GE
    (149) REL_OP -> . GT
    (150) REL_OP -> . LE
    (151) REL_OP -> . LT
    (152) REL_OP -> . NE
    (153) REL_OP -> . EQ
    )               shift and go to state 208
    LOGIC_AND       shift and go to state 120
    LOGIC_OR        shift and go to state 121
    SHR             shift and go to state 122
    SHL             shift and go to state 123
    AND             shift and go to state 124
    MOD             shift and go to state 125
    DIV             shift and go to state 126
    STAR            shift and go to state 127
    XOR             shift and go to state 128
    OR              shift and go to state 129
    MINUS           shift and go to state 130
    PLUS            shift and go to state 131
    GE              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    LT              shift and go to state 135
    NE              shift and go to state 136
    EQ              shift and go to state 137

    BINARY_OP                      shift and go to state 116
    MUL_OP                         shift and go to state 117
    ADD_OP                         shift and go to state 118
    REL_OP                         shift and go to state 119

state 192

    (87) operand -> ( expression ) .
    (               reduce using rule 87 (operand -> ( expression ) .)
    LOGIC_AND       reduce using rule 87 (operand -> ( expression ) .)
    LOGIC_OR        reduce using rule 87 (operand -> ( expression ) .)
    SHR             reduce using rule 87 (operand -> ( expression ) .)
    SHL             reduce using rule 87 (operand -> ( expression ) .)
    AND             reduce using rule 87 (operand -> ( expression ) .)
    MOD             reduce using rule 87 (operand -> ( expression ) .)
    DIV             reduce using rule 87 (operand -> ( expression ) .)
    STAR            reduce using rule 87 (operand -> ( expression ) .)
    XOR             reduce using rule 87 (operand -> ( expression ) .)
    OR              reduce using rule 87 (operand -> ( expression ) .)
    MINUS           reduce using rule 87 (operand -> ( expression ) .)
    PLUS            reduce using rule 87 (operand -> ( expression ) .)
    GE              reduce using rule 87 (operand -> ( expression ) .)
    GT              reduce using rule 87 (operand -> ( expression ) .)
    LE              reduce using rule 87 (operand -> ( expression ) .)
    LT              reduce using rule 87 (operand -> ( expression ) .)
    NE              reduce using rule 87 (operand -> ( expression ) .)
    EQ              reduce using rule 87 (operand -> ( expression ) .)
    NEWL            reduce using rule 87 (operand -> ( expression ) .)
    ;               reduce using rule 87 (operand -> ( expression ) .)
    )               reduce using rule 87 (operand -> ( expression ) .)
    ,               reduce using rule 87 (operand -> ( expression ) .)
    }               reduce using rule 87 (operand -> ( expression ) .)


state 193

    (123) FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .
    EXPONENT        reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    (               reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    SHR             reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    SHL             reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    AND             reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    MOD             reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    DIV             reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    STAR            reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    XOR             reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    OR              reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    MINUS           reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    PLUS            reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    GE              reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    GT              reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LE              reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LT              reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    NE              reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    EQ              reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    NEWL            reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    ;               reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    )               reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    ,               reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    }               reduce using rule 123 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)


state 194

    (23) sourceFile -> moduleClause importDecls topLevelDecls orphanStmtList .
    $end            reduce using rule 23 (sourceFile -> moduleClause importDecls topLevelDecls orphanStmtList .)


state 195

    (8) sourceFile -> cPreprocessors moduleClause importDecls orphanStmtList .
    $end            reduce using rule 8 (sourceFile -> cPreprocessors moduleClause importDecls orphanStmtList .)


state 196

    (16) sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls .
    (24) sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls . orphanStmtList
    (39) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (41) orphanStmtList -> . statementList eos
    (42) topLevelDecl -> . functionDecl
    (64) statementList -> . statementList eos statement
    (65) statementList -> . statement
    (47) functionDecl -> . FN IDENTIFIER signature
    (48) functionDecl -> . FN IDENTIFIER function_
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 16 (sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls .)
    FN              shift and go to state 19
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    orphanStmtList                 shift and go to state 209
    topLevelDecl                   shift and go to state 81
    statementList                  shift and go to state 7
    functionDecl                   shift and go to state 16
    statement                      shift and go to state 13
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 197

    (21) sourceFile -> cPreprocessors moduleClause topLevelDecls orphanStmtList .
    $end            reduce using rule 21 (sourceFile -> cPreprocessors moduleClause topLevelDecls orphanStmtList .)


state 198

    (22) sourceFile -> cPreprocessors importDecls topLevelDecls orphanStmtList .
    $end            reduce using rule 22 (sourceFile -> cPreprocessors importDecls topLevelDecls orphanStmtList .)


state 199

    (62) expressionList -> expressionList , . expression
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    IDENTIFIER      shift and go to state 139
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    FN              shift and go to state 140
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    expression                     shift and go to state 210
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 200

    (66) block -> { statementList . }
    (64) statementList -> statementList . eos statement
    (128) eos -> . eos NEWL
    (129) eos -> . NEWL
    (130) eos -> . eos ;
    (131) eos -> . ;
    }               shift and go to state 211
    NEWL            shift and go to state 83
    ;               shift and go to state 84

    eos                            shift and go to state 212

state 201

    (54) parameters -> ( parameterList , . )
    (57) parameterList -> parameterList , . parameterDecl
    (59) parameterDecl -> . type_
    (60) parameterDecl -> . identifierList type_
    (94) type_ -> . typeName
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    )               shift and go to state 213
    IDENTIFIER      shift and go to state 183
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64

    parameterDecl                  shift and go to state 214
    type_                          shift and go to state 181
    identifierList                 shift and go to state 182
    typeName                       shift and go to state 37
    numericType                    shift and go to state 40

state 202

    (55) parameters -> ( parameterList ) .
    (               reduce using rule 55 (parameters -> ( parameterList ) .)
    STRING          reduce using rule 55 (parameters -> ( parameterList ) .)
    BOOL            reduce using rule 55 (parameters -> ( parameterList ) .)
    RUNE            reduce using rule 55 (parameters -> ( parameterList ) .)
    F32             reduce using rule 55 (parameters -> ( parameterList ) .)
    F64             reduce using rule 55 (parameters -> ( parameterList ) .)
    INT             reduce using rule 55 (parameters -> ( parameterList ) .)
    ISIZE           reduce using rule 55 (parameters -> ( parameterList ) .)
    I64             reduce using rule 55 (parameters -> ( parameterList ) .)
    I32             reduce using rule 55 (parameters -> ( parameterList ) .)
    I16             reduce using rule 55 (parameters -> ( parameterList ) .)
    I8              reduce using rule 55 (parameters -> ( parameterList ) .)
    UINT            reduce using rule 55 (parameters -> ( parameterList ) .)
    USIZE           reduce using rule 55 (parameters -> ( parameterList ) .)
    U64             reduce using rule 55 (parameters -> ( parameterList ) .)
    U32             reduce using rule 55 (parameters -> ( parameterList ) .)
    U16             reduce using rule 55 (parameters -> ( parameterList ) .)
    U8              reduce using rule 55 (parameters -> ( parameterList ) .)
    {               reduce using rule 55 (parameters -> ( parameterList ) .)
    NEWL            reduce using rule 55 (parameters -> ( parameterList ) .)
    ;               reduce using rule 55 (parameters -> ( parameterList ) .)


state 203

    (60) parameterDecl -> identifierList type_ .
    ,               reduce using rule 60 (parameterDecl -> identifierList type_ .)
    )               reduce using rule 60 (parameterDecl -> identifierList type_ .)


state 204

    (73) arguments -> ( type_ , . expressionList , )
    (74) arguments -> ( type_ , . expressionList )
    (75) arguments -> ( type_ , . )
    (62) expressionList -> . expressionList , expression
    (63) expressionList -> . expression
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    )               shift and go to state 216
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    IDENTIFIER      shift and go to state 139
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    FN              shift and go to state 140
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    type_                          shift and go to state 33
    expressionList                 shift and go to state 215
    expression                     shift and go to state 167
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 205

    (76) arguments -> ( type_ ) .
    (               reduce using rule 76 (arguments -> ( type_ ) .)
    LOGIC_AND       reduce using rule 76 (arguments -> ( type_ ) .)
    LOGIC_OR        reduce using rule 76 (arguments -> ( type_ ) .)
    SHR             reduce using rule 76 (arguments -> ( type_ ) .)
    SHL             reduce using rule 76 (arguments -> ( type_ ) .)
    AND             reduce using rule 76 (arguments -> ( type_ ) .)
    MOD             reduce using rule 76 (arguments -> ( type_ ) .)
    DIV             reduce using rule 76 (arguments -> ( type_ ) .)
    STAR            reduce using rule 76 (arguments -> ( type_ ) .)
    XOR             reduce using rule 76 (arguments -> ( type_ ) .)
    OR              reduce using rule 76 (arguments -> ( type_ ) .)
    MINUS           reduce using rule 76 (arguments -> ( type_ ) .)
    PLUS            reduce using rule 76 (arguments -> ( type_ ) .)
    GE              reduce using rule 76 (arguments -> ( type_ ) .)
    GT              reduce using rule 76 (arguments -> ( type_ ) .)
    LE              reduce using rule 76 (arguments -> ( type_ ) .)
    LT              reduce using rule 76 (arguments -> ( type_ ) .)
    NE              reduce using rule 76 (arguments -> ( type_ ) .)
    EQ              reduce using rule 76 (arguments -> ( type_ ) .)
    NEWL            reduce using rule 76 (arguments -> ( type_ ) .)
    ;               reduce using rule 76 (arguments -> ( type_ ) .)
    )               reduce using rule 76 (arguments -> ( type_ ) .)
    ,               reduce using rule 76 (arguments -> ( type_ ) .)
    }               reduce using rule 76 (arguments -> ( type_ ) .)


state 206

    (77) arguments -> ( expressionList , . )
    (62) expressionList -> expressionList , . expression
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    )               shift and go to state 217
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    IDENTIFIER      shift and go to state 139
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    FN              shift and go to state 140
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    expression                     shift and go to state 210
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 207

    (78) arguments -> ( expressionList ) .
    (               reduce using rule 78 (arguments -> ( expressionList ) .)
    LOGIC_AND       reduce using rule 78 (arguments -> ( expressionList ) .)
    LOGIC_OR        reduce using rule 78 (arguments -> ( expressionList ) .)
    SHR             reduce using rule 78 (arguments -> ( expressionList ) .)
    SHL             reduce using rule 78 (arguments -> ( expressionList ) .)
    AND             reduce using rule 78 (arguments -> ( expressionList ) .)
    MOD             reduce using rule 78 (arguments -> ( expressionList ) .)
    DIV             reduce using rule 78 (arguments -> ( expressionList ) .)
    STAR            reduce using rule 78 (arguments -> ( expressionList ) .)
    XOR             reduce using rule 78 (arguments -> ( expressionList ) .)
    OR              reduce using rule 78 (arguments -> ( expressionList ) .)
    MINUS           reduce using rule 78 (arguments -> ( expressionList ) .)
    PLUS            reduce using rule 78 (arguments -> ( expressionList ) .)
    GE              reduce using rule 78 (arguments -> ( expressionList ) .)
    GT              reduce using rule 78 (arguments -> ( expressionList ) .)
    LE              reduce using rule 78 (arguments -> ( expressionList ) .)
    LT              reduce using rule 78 (arguments -> ( expressionList ) .)
    NE              reduce using rule 78 (arguments -> ( expressionList ) .)
    EQ              reduce using rule 78 (arguments -> ( expressionList ) .)
    NEWL            reduce using rule 78 (arguments -> ( expressionList ) .)
    ;               reduce using rule 78 (arguments -> ( expressionList ) .)
    )               reduce using rule 78 (arguments -> ( expressionList ) .)
    ,               reduce using rule 78 (arguments -> ( expressionList ) .)
    }               reduce using rule 78 (arguments -> ( expressionList ) .)


state 208

    (93) conversion -> type_ ( expression ) .
    (               reduce using rule 93 (conversion -> type_ ( expression ) .)
    LOGIC_AND       reduce using rule 93 (conversion -> type_ ( expression ) .)
    LOGIC_OR        reduce using rule 93 (conversion -> type_ ( expression ) .)
    SHR             reduce using rule 93 (conversion -> type_ ( expression ) .)
    SHL             reduce using rule 93 (conversion -> type_ ( expression ) .)
    AND             reduce using rule 93 (conversion -> type_ ( expression ) .)
    MOD             reduce using rule 93 (conversion -> type_ ( expression ) .)
    DIV             reduce using rule 93 (conversion -> type_ ( expression ) .)
    STAR            reduce using rule 93 (conversion -> type_ ( expression ) .)
    XOR             reduce using rule 93 (conversion -> type_ ( expression ) .)
    OR              reduce using rule 93 (conversion -> type_ ( expression ) .)
    MINUS           reduce using rule 93 (conversion -> type_ ( expression ) .)
    PLUS            reduce using rule 93 (conversion -> type_ ( expression ) .)
    GE              reduce using rule 93 (conversion -> type_ ( expression ) .)
    GT              reduce using rule 93 (conversion -> type_ ( expression ) .)
    LE              reduce using rule 93 (conversion -> type_ ( expression ) .)
    LT              reduce using rule 93 (conversion -> type_ ( expression ) .)
    NE              reduce using rule 93 (conversion -> type_ ( expression ) .)
    EQ              reduce using rule 93 (conversion -> type_ ( expression ) .)
    NEWL            reduce using rule 93 (conversion -> type_ ( expression ) .)
    ;               reduce using rule 93 (conversion -> type_ ( expression ) .)
    )               reduce using rule 93 (conversion -> type_ ( expression ) .)
    ,               reduce using rule 93 (conversion -> type_ ( expression ) .)
    }               reduce using rule 93 (conversion -> type_ ( expression ) .)


state 209

    (24) sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls orphanStmtList .
    $end            reduce using rule 24 (sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls orphanStmtList .)


state 210

    (62) expressionList -> expressionList , expression .
    (80) expression -> expression . BINARY_OP unaryExpr
    (143) BINARY_OP -> . MUL_OP
    (144) BINARY_OP -> . ADD_OP
    (145) BINARY_OP -> . REL_OP
    (146) BINARY_OP -> . LOGIC_AND
    (147) BINARY_OP -> . LOGIC_OR
    (158) MUL_OP -> . SHR
    (159) MUL_OP -> . SHL
    (160) MUL_OP -> . AND
    (161) MUL_OP -> . MOD
    (162) MUL_OP -> . DIV
    (163) MUL_OP -> . STAR
    (154) ADD_OP -> . XOR
    (155) ADD_OP -> . OR
    (156) ADD_OP -> . MINUS
    (157) ADD_OP -> . PLUS
    (148) REL_OP -> . GE
    (149) REL_OP -> . GT
    (150) REL_OP -> . LE
    (151) REL_OP -> . LT
    (152) REL_OP -> . NE
    (153) REL_OP -> . EQ
    ,               reduce using rule 62 (expressionList -> expressionList , expression .)
    NEWL            reduce using rule 62 (expressionList -> expressionList , expression .)
    ;               reduce using rule 62 (expressionList -> expressionList , expression .)
    }               reduce using rule 62 (expressionList -> expressionList , expression .)
    )               reduce using rule 62 (expressionList -> expressionList , expression .)
    LOGIC_AND       shift and go to state 120
    LOGIC_OR        shift and go to state 121
    SHR             shift and go to state 122
    SHL             shift and go to state 123
    AND             shift and go to state 124
    MOD             shift and go to state 125
    DIV             shift and go to state 126
    STAR            shift and go to state 127
    XOR             shift and go to state 128
    OR              shift and go to state 129
    MINUS           shift and go to state 130
    PLUS            shift and go to state 131
    GE              shift and go to state 132
    GT              shift and go to state 133
    LE              shift and go to state 134
    LT              shift and go to state 135
    NE              shift and go to state 136
    EQ              shift and go to state 137

    BINARY_OP                      shift and go to state 116
    MUL_OP                         shift and go to state 117
    ADD_OP                         shift and go to state 118
    REL_OP                         shift and go to state 119

state 211

    (66) block -> { statementList } .
    (               reduce using rule 66 (block -> { statementList } .)
    LOGIC_AND       reduce using rule 66 (block -> { statementList } .)
    LOGIC_OR        reduce using rule 66 (block -> { statementList } .)
    SHR             reduce using rule 66 (block -> { statementList } .)
    SHL             reduce using rule 66 (block -> { statementList } .)
    AND             reduce using rule 66 (block -> { statementList } .)
    MOD             reduce using rule 66 (block -> { statementList } .)
    DIV             reduce using rule 66 (block -> { statementList } .)
    STAR            reduce using rule 66 (block -> { statementList } .)
    XOR             reduce using rule 66 (block -> { statementList } .)
    OR              reduce using rule 66 (block -> { statementList } .)
    MINUS           reduce using rule 66 (block -> { statementList } .)
    PLUS            reduce using rule 66 (block -> { statementList } .)
    GE              reduce using rule 66 (block -> { statementList } .)
    GT              reduce using rule 66 (block -> { statementList } .)
    LE              reduce using rule 66 (block -> { statementList } .)
    LT              reduce using rule 66 (block -> { statementList } .)
    NE              reduce using rule 66 (block -> { statementList } .)
    EQ              reduce using rule 66 (block -> { statementList } .)
    NEWL            reduce using rule 66 (block -> { statementList } .)
    ;               reduce using rule 66 (block -> { statementList } .)
    )               reduce using rule 66 (block -> { statementList } .)
    ,               reduce using rule 66 (block -> { statementList } .)
    }               reduce using rule 66 (block -> { statementList } .)


state 212

    (64) statementList -> statementList eos . statement
    (128) eos -> eos . NEWL
    (130) eos -> eos . ;
    (67) statement -> . simpleStmt
    (68) statement -> . declaration
    (69) simpleStmt -> . assignment
    (70) simpleStmt -> . expressionStmt
    (43) declaration -> . varDecl
    (72) assignment -> . identifierList assign_op expressionList
    (71) expressionStmt -> . expression
    (44) varDecl -> . identifierList DECL_ASGN expressionList
    (45) identifierList -> . identifierList , IDENTIFIER
    (46) identifierList -> . IDENTIFIER
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    NEWL            shift and go to state 163
    ;               shift and go to state 164
    IDENTIFIER      shift and go to state 9
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    FN              shift and go to state 140
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    statement                      shift and go to state 162
    simpleStmt                     shift and go to state 17
    declaration                    shift and go to state 18
    assignment                     shift and go to state 20
    expressionStmt                 shift and go to state 21
    varDecl                        shift and go to state 22
    identifierList                 shift and go to state 23
    expression                     shift and go to state 24
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    type_                          shift and go to state 33
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 213

    (54) parameters -> ( parameterList , ) .
    (               reduce using rule 54 (parameters -> ( parameterList , ) .)
    STRING          reduce using rule 54 (parameters -> ( parameterList , ) .)
    BOOL            reduce using rule 54 (parameters -> ( parameterList , ) .)
    RUNE            reduce using rule 54 (parameters -> ( parameterList , ) .)
    F32             reduce using rule 54 (parameters -> ( parameterList , ) .)
    F64             reduce using rule 54 (parameters -> ( parameterList , ) .)
    INT             reduce using rule 54 (parameters -> ( parameterList , ) .)
    ISIZE           reduce using rule 54 (parameters -> ( parameterList , ) .)
    I64             reduce using rule 54 (parameters -> ( parameterList , ) .)
    I32             reduce using rule 54 (parameters -> ( parameterList , ) .)
    I16             reduce using rule 54 (parameters -> ( parameterList , ) .)
    I8              reduce using rule 54 (parameters -> ( parameterList , ) .)
    UINT            reduce using rule 54 (parameters -> ( parameterList , ) .)
    USIZE           reduce using rule 54 (parameters -> ( parameterList , ) .)
    U64             reduce using rule 54 (parameters -> ( parameterList , ) .)
    U32             reduce using rule 54 (parameters -> ( parameterList , ) .)
    U16             reduce using rule 54 (parameters -> ( parameterList , ) .)
    U8              reduce using rule 54 (parameters -> ( parameterList , ) .)
    {               reduce using rule 54 (parameters -> ( parameterList , ) .)
    NEWL            reduce using rule 54 (parameters -> ( parameterList , ) .)
    ;               reduce using rule 54 (parameters -> ( parameterList , ) .)


state 214

    (57) parameterList -> parameterList , parameterDecl .
    ,               reduce using rule 57 (parameterList -> parameterList , parameterDecl .)
    )               reduce using rule 57 (parameterList -> parameterList , parameterDecl .)


state 215

    (73) arguments -> ( type_ , expressionList . , )
    (74) arguments -> ( type_ , expressionList . )
    (62) expressionList -> expressionList . , expression
    ,               shift and go to state 218
    )               shift and go to state 219


state 216

    (75) arguments -> ( type_ , ) .
    (               reduce using rule 75 (arguments -> ( type_ , ) .)
    LOGIC_AND       reduce using rule 75 (arguments -> ( type_ , ) .)
    LOGIC_OR        reduce using rule 75 (arguments -> ( type_ , ) .)
    SHR             reduce using rule 75 (arguments -> ( type_ , ) .)
    SHL             reduce using rule 75 (arguments -> ( type_ , ) .)
    AND             reduce using rule 75 (arguments -> ( type_ , ) .)
    MOD             reduce using rule 75 (arguments -> ( type_ , ) .)
    DIV             reduce using rule 75 (arguments -> ( type_ , ) .)
    STAR            reduce using rule 75 (arguments -> ( type_ , ) .)
    XOR             reduce using rule 75 (arguments -> ( type_ , ) .)
    OR              reduce using rule 75 (arguments -> ( type_ , ) .)
    MINUS           reduce using rule 75 (arguments -> ( type_ , ) .)
    PLUS            reduce using rule 75 (arguments -> ( type_ , ) .)
    GE              reduce using rule 75 (arguments -> ( type_ , ) .)
    GT              reduce using rule 75 (arguments -> ( type_ , ) .)
    LE              reduce using rule 75 (arguments -> ( type_ , ) .)
    LT              reduce using rule 75 (arguments -> ( type_ , ) .)
    NE              reduce using rule 75 (arguments -> ( type_ , ) .)
    EQ              reduce using rule 75 (arguments -> ( type_ , ) .)
    NEWL            reduce using rule 75 (arguments -> ( type_ , ) .)
    ;               reduce using rule 75 (arguments -> ( type_ , ) .)
    )               reduce using rule 75 (arguments -> ( type_ , ) .)
    ,               reduce using rule 75 (arguments -> ( type_ , ) .)
    }               reduce using rule 75 (arguments -> ( type_ , ) .)


state 217

    (77) arguments -> ( expressionList , ) .
    (               reduce using rule 77 (arguments -> ( expressionList , ) .)
    LOGIC_AND       reduce using rule 77 (arguments -> ( expressionList , ) .)
    LOGIC_OR        reduce using rule 77 (arguments -> ( expressionList , ) .)
    SHR             reduce using rule 77 (arguments -> ( expressionList , ) .)
    SHL             reduce using rule 77 (arguments -> ( expressionList , ) .)
    AND             reduce using rule 77 (arguments -> ( expressionList , ) .)
    MOD             reduce using rule 77 (arguments -> ( expressionList , ) .)
    DIV             reduce using rule 77 (arguments -> ( expressionList , ) .)
    STAR            reduce using rule 77 (arguments -> ( expressionList , ) .)
    XOR             reduce using rule 77 (arguments -> ( expressionList , ) .)
    OR              reduce using rule 77 (arguments -> ( expressionList , ) .)
    MINUS           reduce using rule 77 (arguments -> ( expressionList , ) .)
    PLUS            reduce using rule 77 (arguments -> ( expressionList , ) .)
    GE              reduce using rule 77 (arguments -> ( expressionList , ) .)
    GT              reduce using rule 77 (arguments -> ( expressionList , ) .)
    LE              reduce using rule 77 (arguments -> ( expressionList , ) .)
    LT              reduce using rule 77 (arguments -> ( expressionList , ) .)
    NE              reduce using rule 77 (arguments -> ( expressionList , ) .)
    EQ              reduce using rule 77 (arguments -> ( expressionList , ) .)
    NEWL            reduce using rule 77 (arguments -> ( expressionList , ) .)
    ;               reduce using rule 77 (arguments -> ( expressionList , ) .)
    )               reduce using rule 77 (arguments -> ( expressionList , ) .)
    ,               reduce using rule 77 (arguments -> ( expressionList , ) .)
    }               reduce using rule 77 (arguments -> ( expressionList , ) .)


state 218

    (73) arguments -> ( type_ , expressionList , . )
    (62) expressionList -> expressionList , . expression
    (80) expression -> . expression BINARY_OP unaryExpr
    (81) expression -> . unaryExpr
    (82) unaryExpr -> . UNARY_OP unaryExpr
    (83) unaryExpr -> . primaryExpr
    (164) UNARY_OP -> . AND
    (165) UNARY_OP -> . EXCLM
    (166) UNARY_OP -> . MINUS
    (84) primaryExpr -> . primaryExpr arguments
    (85) primaryExpr -> . conversion
    (86) primaryExpr -> . operand
    (93) conversion -> . type_ ( expression )
    (87) operand -> . ( expression )
    (88) operand -> . operandName
    (89) operand -> . literal
    (94) type_ -> . typeName
    (90) operandName -> . IDENTIFIER
    (91) literal -> . functionLit
    (92) literal -> . basicLit
    (95) typeName -> . numericType
    (96) typeName -> . STRING
    (97) typeName -> . BOOL
    (98) typeName -> . RUNE
    (61) functionLit -> . FN function_
    (113) basicLit -> . INT_LIT
    (114) basicLit -> . FLOAT_LIT
    (115) basicLit -> . DECIMAL_LIT EXPONENT
    (116) basicLit -> . FLOAT_LIT EXPONENT
    (117) basicLit -> . FALSE
    (118) basicLit -> . TRUE
    (119) basicLit -> . RUNE_LIT
    (120) basicLit -> . STRING_LIT
    (99) numericType -> . F32
    (100) numericType -> . F64
    (101) numericType -> . INT
    (102) numericType -> . ISIZE
    (103) numericType -> . I64
    (104) numericType -> . I32
    (105) numericType -> . I16
    (106) numericType -> . I8
    (107) numericType -> . UINT
    (108) numericType -> . USIZE
    (109) numericType -> . U64
    (110) numericType -> . U32
    (111) numericType -> . U16
    (112) numericType -> . U8
    (124) INT_LIT -> . HEX_LIT
    (125) INT_LIT -> . OCTAL_LIT
    (126) INT_LIT -> . BINARY_LIT
    (127) INT_LIT -> . DECIMAL_LIT
    (121) FLOAT_LIT -> . . DECIMAL_LIT
    (122) FLOAT_LIT -> . DECIMAL_LIT .
    (123) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    )               shift and go to state 220
    AND             shift and go to state 28
    EXCLM           shift and go to state 29
    MINUS           shift and go to state 30
    (               shift and go to state 34
    IDENTIFIER      shift and go to state 139
    STRING          shift and go to state 41
    BOOL            shift and go to state 42
    RUNE            shift and go to state 43
    FN              shift and go to state 140
    DECIMAL_LIT     shift and go to state 46
    FALSE           shift and go to state 47
    TRUE            shift and go to state 48
    RUNE_LIT        shift and go to state 49
    STRING_LIT      shift and go to state 50
    F32             shift and go to state 51
    F64             shift and go to state 52
    INT             shift and go to state 53
    ISIZE           shift and go to state 54
    I64             shift and go to state 55
    I32             shift and go to state 56
    I16             shift and go to state 57
    I8              shift and go to state 58
    UINT            shift and go to state 59
    USIZE           shift and go to state 60
    U64             shift and go to state 61
    U32             shift and go to state 62
    U16             shift and go to state 63
    U8              shift and go to state 64
    HEX_LIT         shift and go to state 65
    OCTAL_LIT       shift and go to state 66
    BINARY_LIT      shift and go to state 67
    .               shift and go to state 68

    type_                          shift and go to state 33
    expression                     shift and go to state 210
    unaryExpr                      shift and go to state 25
    UNARY_OP                       shift and go to state 26
    primaryExpr                    shift and go to state 27
    conversion                     shift and go to state 31
    operand                        shift and go to state 32
    operandName                    shift and go to state 35
    literal                        shift and go to state 36
    typeName                       shift and go to state 37
    functionLit                    shift and go to state 38
    basicLit                       shift and go to state 39
    numericType                    shift and go to state 40
    INT_LIT                        shift and go to state 44
    FLOAT_LIT                      shift and go to state 45

state 219

    (74) arguments -> ( type_ , expressionList ) .
    (               reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    LOGIC_AND       reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    LOGIC_OR        reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    SHR             reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    SHL             reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    AND             reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    MOD             reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    DIV             reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    STAR            reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    XOR             reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    OR              reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    MINUS           reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    PLUS            reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    GE              reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    GT              reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    LE              reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    LT              reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    NE              reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    EQ              reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    NEWL            reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    ;               reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    )               reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    ,               reduce using rule 74 (arguments -> ( type_ , expressionList ) .)
    }               reduce using rule 74 (arguments -> ( type_ , expressionList ) .)


state 220

    (73) arguments -> ( type_ , expressionList , ) .
    (               reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    LOGIC_AND       reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    LOGIC_OR        reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    SHR             reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    SHL             reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    AND             reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    MOD             reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    DIV             reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    STAR            reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    XOR             reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    OR              reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    MINUS           reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    PLUS            reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    GE              reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    GT              reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    LE              reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    LT              reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    NE              reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    EQ              reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    NEWL            reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    ;               reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    )               reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    ,               reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
    }               reduce using rule 73 (arguments -> ( type_ , expressionList , ) .)
