Grammar:

Rule 0     S' -> sourceFile
Rule 1     sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls orphanStmtList
Rule 2     sourceFile -> cPreprocessors moduleClause importDecls orphanStmtList
Rule 3     moduleClause -> MODULE IDENTIFIER eos
Rule 4     moduleClause -> empty  [precedence=right, level=7]
Rule 5     cPreprocessors -> cPreprocessors cPreprocessor eos
Rule 6     cPreprocessors -> cPreprocessor eos
Rule 7     cPreprocessors -> empty  [precedence=right, level=7]
Rule 8     cPreprocessor -> C_PREPR C_STRING_LIT
Rule 9     cPreprocessor -> C_PREPR C_PATH_LIT
Rule 10    cPreprocessor -> C_PREPR IDENTIFIER expressionList
Rule 11    importDecls -> importDecls importDecl eos
Rule 12    importDecls -> importDecl eos
Rule 13    importDecls -> empty  [precedence=right, level=7]
Rule 14    importDecl -> IMPORT importSpec
Rule 15    importSpec -> importPath
Rule 16    importSpec -> IDENTIFIER importPath
Rule 17    importSpec -> . importPath
Rule 18    importPath -> STRING_LIT
Rule 19    importPath -> IDENTIFIER
Rule 20    topLevelDecls -> topLevelDecls topLevelDecl eos
Rule 21    topLevelDecls -> topLevelDecl eos
Rule 22    orphanStmtList -> statementList eos
Rule 23    topLevelDecl -> functionDecl
Rule 24    declaration -> varDecl
Rule 25    varDecl -> identifierList DECL_ASGN expressionList
Rule 26    identifierList -> identifierList , IDENTIFIER
Rule 27    identifierList -> IDENTIFIER
Rule 28    functionDecl -> FN IDENTIFIER signature
Rule 29    functionDecl -> FN IDENTIFIER function_
Rule 30    function_ -> signature block
Rule 31    signature -> parameters
Rule 32    signature -> parameters result
Rule 33    result -> type_
Rule 34    result -> parameters
Rule 35    parameters -> ( parameterList , )
Rule 36    parameters -> ( parameterList )
Rule 37    parameters -> ( )
Rule 38    parameterList -> parameterList , parameterDecl
Rule 39    parameterList -> parameterDecl
Rule 40    parameterDecl -> type_
Rule 41    parameterDecl -> identifierList type_
Rule 42    functionLit -> FN function_
Rule 43    expressionList -> expressionList , expression
Rule 44    expressionList -> expression
Rule 45    statementList -> statementList eos statement
Rule 46    statementList -> statement
Rule 47    block -> { statementList }
Rule 48    statement -> simpleStmt
Rule 49    statement -> declaration
Rule 50    simpleStmt -> assignment
Rule 51    simpleStmt -> expressionStmt
Rule 52    expressionStmt -> expression
Rule 53    assignment -> identifierList assign_op expressionList
Rule 54    arguments -> ( type_ , expressionList , )
Rule 55    arguments -> ( type_ , expressionList )
Rule 56    arguments -> ( type_ , )
Rule 57    arguments -> ( type_ )
Rule 58    arguments -> ( expressionList , )
Rule 59    arguments -> ( expressionList )
Rule 60    arguments -> ( )
Rule 61    expression -> expression BINARY_OP unaryExpr
Rule 62    expression -> unaryExpr
Rule 63    unaryExpr -> UNARY_OP unaryExpr  [precedence=right, level=7]
Rule 64    unaryExpr -> primaryExpr
Rule 65    primaryExpr -> primaryExpr arguments
Rule 66    primaryExpr -> conversion
Rule 67    primaryExpr -> operand
Rule 68    operand -> ( expression )
Rule 69    operand -> operandName
Rule 70    operand -> literal
Rule 71    operandName -> IDENTIFIER
Rule 72    literal -> functionLit
Rule 73    literal -> basicLit
Rule 74    conversion -> type_ ( expression )
Rule 75    type_ -> typeName
Rule 76    typeName -> numericType
Rule 77    typeName -> STRING
Rule 78    typeName -> BOOL
Rule 79    typeName -> RUNE
Rule 80    numericType -> F32
Rule 81    numericType -> F64
Rule 82    numericType -> INT
Rule 83    numericType -> ISIZE
Rule 84    numericType -> I64
Rule 85    numericType -> I32
Rule 86    numericType -> I16
Rule 87    numericType -> I8
Rule 88    numericType -> UINT
Rule 89    numericType -> USIZE
Rule 90    numericType -> U64
Rule 91    numericType -> U32
Rule 92    numericType -> U16
Rule 93    numericType -> U8
Rule 94    basicLit -> INT_LIT
Rule 95    basicLit -> FLOAT_LIT
Rule 96    basicLit -> DECIMAL_LIT EXPONENT
Rule 97    basicLit -> FLOAT_LIT EXPONENT
Rule 98    basicLit -> FALSE
Rule 99    basicLit -> TRUE
Rule 100   basicLit -> RUNE_LIT
Rule 101   basicLit -> STRING_LIT
Rule 102   FLOAT_LIT -> . DECIMAL_LIT
Rule 103   FLOAT_LIT -> DECIMAL_LIT .
Rule 104   FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT
Rule 105   INT_LIT -> HEX_LIT
Rule 106   INT_LIT -> OCTAL_LIT
Rule 107   INT_LIT -> BINARY_LIT
Rule 108   INT_LIT -> DECIMAL_LIT
Rule 109   eos -> eos NEWL
Rule 110   eos -> NEWL
Rule 111   eos -> eos ;
Rule 112   eos -> ;
Rule 113   assign_op -> SHR_ASGN  [precedence=right, level=8]
Rule 114   assign_op -> SHL_ASGN  [precedence=right, level=8]
Rule 115   assign_op -> MOD_ASGN  [precedence=right, level=8]
Rule 116   assign_op -> DIV_ASGN  [precedence=right, level=8]
Rule 117   assign_op -> OR_ASGN  [precedence=right, level=8]
Rule 118   assign_op -> AND_ASGN  [precedence=right, level=8]
Rule 119   assign_op -> STAR_ASGN  [precedence=right, level=8]
Rule 120   assign_op -> XOR_ASGN  [precedence=right, level=8]
Rule 121   assign_op -> MINUS_ASGN  [precedence=right, level=8]
Rule 122   assign_op -> PLUS_ASGN  [precedence=right, level=8]
Rule 123   assign_op -> ASSIGN  [precedence=right, level=8]
Rule 124   BINARY_OP -> MUL_OP
Rule 125   BINARY_OP -> ADD_OP
Rule 126   BINARY_OP -> REL_OP
Rule 127   BINARY_OP -> LOGIC_AND  [precedence=left, level=2]
Rule 128   BINARY_OP -> LOGIC_OR  [precedence=left, level=1]
Rule 129   REL_OP -> GE  [precedence=left, level=3]
Rule 130   REL_OP -> GT  [precedence=left, level=3]
Rule 131   REL_OP -> LE  [precedence=left, level=3]
Rule 132   REL_OP -> LT  [precedence=left, level=3]
Rule 133   REL_OP -> NE  [precedence=left, level=3]
Rule 134   REL_OP -> EQ  [precedence=left, level=3]
Rule 135   ADD_OP -> XOR  [precedence=left, level=4]
Rule 136   ADD_OP -> OR  [precedence=left, level=4]
Rule 137   ADD_OP -> MINUS  [precedence=left, level=4]
Rule 138   ADD_OP -> PLUS  [precedence=left, level=4]
Rule 139   MUL_OP -> SHR  [precedence=left, level=5]
Rule 140   MUL_OP -> SHL  [precedence=left, level=5]
Rule 141   MUL_OP -> AND  [precedence=left, level=5]
Rule 142   MUL_OP -> MOD  [precedence=left, level=5]
Rule 143   MUL_OP -> DIV  [precedence=left, level=5]
Rule 144   MUL_OP -> STAR  [precedence=left, level=5]
Rule 145   UNARY_OP -> AND  [precedence=left, level=5]
Rule 146   UNARY_OP -> EXCLM
Rule 147   UNARY_OP -> MINUS  [precedence=left, level=4]
Rule 148   empty -> <empty>

Unused terminals:

    STRUCT
    BREAK
    TYPE
    MINUS_MINUS
    ELSE
    AS
    STATIC
    RETURN
    FOR
    IF
    CONST
    CONTINUE
    ENUM
    PLUS_PLUS
    IN
    MATCH
    MAP

Terminals, with rules where they appear:

(                    : 35 36 37 54 55 56 57 58 59 60 68 74
)                    : 35 36 37 54 55 56 57 58 59 60 68 74
,                    : 26 35 38 43 54 54 55 56 58
.                    : 17 102 103 104
;                    : 111 112
AND                  : 141 145
AND_ASGN             : 118
AS                   : 
ASSIGN               : 123
BINARY_LIT           : 107
BOOL                 : 78
BREAK                : 
CONST                : 
CONTINUE             : 
C_PATH_LIT           : 9
C_PREPR              : 8 9 10
C_STRING_LIT         : 8
DECIMAL_LIT          : 96 102 103 104 104 108
DECL_ASGN            : 25
DIV                  : 143
DIV_ASGN             : 116
ELSE                 : 
ENUM                 : 
EQ                   : 134
EXCLM                : 146
EXPONENT             : 96 97
F32                  : 80
F64                  : 81
FALSE                : 98
FN                   : 28 29 42
FOR                  : 
GE                   : 129
GT                   : 130
HEX_LIT              : 105
I16                  : 86
I32                  : 85
I64                  : 84
I8                   : 87
IDENTIFIER           : 3 10 16 19 26 27 28 29 71
IF                   : 
IMPORT               : 14
IN                   : 
INT                  : 82
ISIZE                : 83
LE                   : 131
LOGIC_AND            : 127
LOGIC_OR             : 128
LT                   : 132
MAP                  : 
MATCH                : 
MINUS                : 137 147
MINUS_ASGN           : 121
MINUS_MINUS          : 
MOD                  : 142
MODULE               : 3
MOD_ASGN             : 115
NE                   : 133
NEWL                 : 109 110
OCTAL_LIT            : 106
OR                   : 136
OR_ASGN              : 117
PLUS                 : 138
PLUS_ASGN            : 122
PLUS_PLUS            : 
RETURN               : 
RUNE                 : 79
RUNE_LIT             : 100
SHL                  : 140
SHL_ASGN             : 114
SHR                  : 139
SHR_ASGN             : 113
STAR                 : 144
STAR_ASGN            : 119
STATIC               : 
STRING               : 77
STRING_LIT           : 18 101
STRUCT               : 
TRUE                 : 99
TYPE                 : 
U16                  : 92
U32                  : 91
U64                  : 90
U8                   : 93
UINT                 : 88
USIZE                : 89
XOR                  : 135
XOR_ASGN             : 120
error                : 
{                    : 47
}                    : 47

Nonterminals, with rules where they appear:

ADD_OP               : 125
BINARY_OP            : 61
FLOAT_LIT            : 95 97
INT_LIT              : 94
MUL_OP               : 124
REL_OP               : 126
UNARY_OP             : 63
arguments            : 65
assign_op            : 53
assignment           : 50
basicLit             : 73
block                : 30
cPreprocessor        : 5 6
cPreprocessors       : 1 2 5
conversion           : 66
declaration          : 49
empty                : 4 7 13
eos                  : 3 5 6 11 12 20 21 22 45 109 111
expression           : 43 44 52 61 68 74
expressionList       : 10 25 43 53 54 55 58 59
expressionStmt       : 51
functionDecl         : 23
functionLit          : 72
function_            : 29 42
identifierList       : 25 26 41 53
importDecl           : 11 12
importDecls          : 1 2 11
importPath           : 15 16 17
importSpec           : 14
literal              : 70
moduleClause         : 1 2
numericType          : 76
operand              : 67
operandName          : 69
orphanStmtList       : 1 2
parameterDecl        : 38 39
parameterList        : 35 36 38
parameters           : 31 32 34
primaryExpr          : 64 65
result               : 32
signature            : 28 30
simpleStmt           : 48
sourceFile           : 0
statement            : 45 46
statementList        : 22 45 47
topLevelDecl         : 20 21
topLevelDecls        : 1 20
typeName             : 75
type_                : 33 40 41 54 55 56 57 74
unaryExpr            : 61 62 63
varDecl              : 24


state 0

    (0) S' -> . sourceFile
    (1) sourceFile -> . cPreprocessors moduleClause importDecls topLevelDecls orphanStmtList
    (2) sourceFile -> . cPreprocessors moduleClause importDecls orphanStmtList
    (5) cPreprocessors -> . cPreprocessors cPreprocessor eos
    (6) cPreprocessors -> . cPreprocessor eos
    (7) cPreprocessors -> . empty
    (8) cPreprocessor -> . C_PREPR C_STRING_LIT
    (9) cPreprocessor -> . C_PREPR C_PATH_LIT
    (10) cPreprocessor -> . C_PREPR IDENTIFIER expressionList
    (148) empty -> .
  ! shift/reduce conflict for C_PREPR resolved as shift
    C_PREPR         shift and go to state 5
    MODULE          reduce using rule 148 (empty -> .)
    IMPORT          reduce using rule 148 (empty -> .)
    FN              reduce using rule 148 (empty -> .)
    IDENTIFIER      reduce using rule 148 (empty -> .)
    AND             reduce using rule 148 (empty -> .)
    EXCLM           reduce using rule 148 (empty -> .)
    MINUS           reduce using rule 148 (empty -> .)
    (               reduce using rule 148 (empty -> .)
    STRING          reduce using rule 148 (empty -> .)
    BOOL            reduce using rule 148 (empty -> .)
    RUNE            reduce using rule 148 (empty -> .)
    DECIMAL_LIT     reduce using rule 148 (empty -> .)
    FALSE           reduce using rule 148 (empty -> .)
    TRUE            reduce using rule 148 (empty -> .)
    RUNE_LIT        reduce using rule 148 (empty -> .)
    STRING_LIT      reduce using rule 148 (empty -> .)
    F32             reduce using rule 148 (empty -> .)
    F64             reduce using rule 148 (empty -> .)
    INT             reduce using rule 148 (empty -> .)
    ISIZE           reduce using rule 148 (empty -> .)
    I64             reduce using rule 148 (empty -> .)
    I32             reduce using rule 148 (empty -> .)
    I16             reduce using rule 148 (empty -> .)
    I8              reduce using rule 148 (empty -> .)
    UINT            reduce using rule 148 (empty -> .)
    USIZE           reduce using rule 148 (empty -> .)
    U64             reduce using rule 148 (empty -> .)
    U32             reduce using rule 148 (empty -> .)
    U16             reduce using rule 148 (empty -> .)
    U8              reduce using rule 148 (empty -> .)
    HEX_LIT         reduce using rule 148 (empty -> .)
    OCTAL_LIT       reduce using rule 148 (empty -> .)
    BINARY_LIT      reduce using rule 148 (empty -> .)
    .               reduce using rule 148 (empty -> .)

    sourceFile                     shift and go to state 1
    cPreprocessors                 shift and go to state 2
    cPreprocessor                  shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> sourceFile .


state 2

    (1) sourceFile -> cPreprocessors . moduleClause importDecls topLevelDecls orphanStmtList
    (2) sourceFile -> cPreprocessors . moduleClause importDecls orphanStmtList
    (5) cPreprocessors -> cPreprocessors . cPreprocessor eos
    (3) moduleClause -> . MODULE IDENTIFIER eos
    (4) moduleClause -> . empty
    (8) cPreprocessor -> . C_PREPR C_STRING_LIT
    (9) cPreprocessor -> . C_PREPR C_PATH_LIT
    (10) cPreprocessor -> . C_PREPR IDENTIFIER expressionList
    (148) empty -> .
    MODULE          shift and go to state 8
    C_PREPR         shift and go to state 5
    IMPORT          reduce using rule 148 (empty -> .)
    FN              reduce using rule 148 (empty -> .)
    IDENTIFIER      reduce using rule 148 (empty -> .)
    AND             reduce using rule 148 (empty -> .)
    EXCLM           reduce using rule 148 (empty -> .)
    MINUS           reduce using rule 148 (empty -> .)
    (               reduce using rule 148 (empty -> .)
    STRING          reduce using rule 148 (empty -> .)
    BOOL            reduce using rule 148 (empty -> .)
    RUNE            reduce using rule 148 (empty -> .)
    DECIMAL_LIT     reduce using rule 148 (empty -> .)
    FALSE           reduce using rule 148 (empty -> .)
    TRUE            reduce using rule 148 (empty -> .)
    RUNE_LIT        reduce using rule 148 (empty -> .)
    STRING_LIT      reduce using rule 148 (empty -> .)
    F32             reduce using rule 148 (empty -> .)
    F64             reduce using rule 148 (empty -> .)
    INT             reduce using rule 148 (empty -> .)
    ISIZE           reduce using rule 148 (empty -> .)
    I64             reduce using rule 148 (empty -> .)
    I32             reduce using rule 148 (empty -> .)
    I16             reduce using rule 148 (empty -> .)
    I8              reduce using rule 148 (empty -> .)
    UINT            reduce using rule 148 (empty -> .)
    USIZE           reduce using rule 148 (empty -> .)
    U64             reduce using rule 148 (empty -> .)
    U32             reduce using rule 148 (empty -> .)
    U16             reduce using rule 148 (empty -> .)
    U8              reduce using rule 148 (empty -> .)
    HEX_LIT         reduce using rule 148 (empty -> .)
    OCTAL_LIT       reduce using rule 148 (empty -> .)
    BINARY_LIT      reduce using rule 148 (empty -> .)
    .               reduce using rule 148 (empty -> .)

    moduleClause                   shift and go to state 6
    cPreprocessor                  shift and go to state 7
    empty                          shift and go to state 9

state 3

    (6) cPreprocessors -> cPreprocessor . eos
    (109) eos -> . eos NEWL
    (110) eos -> . NEWL
    (111) eos -> . eos ;
    (112) eos -> . ;
    NEWL            shift and go to state 11
    ;               shift and go to state 12

    eos                            shift and go to state 10

state 4

    (7) cPreprocessors -> empty .
    MODULE          reduce using rule 7 (cPreprocessors -> empty .)
    C_PREPR         reduce using rule 7 (cPreprocessors -> empty .)
    IMPORT          reduce using rule 7 (cPreprocessors -> empty .)
    FN              reduce using rule 7 (cPreprocessors -> empty .)
    IDENTIFIER      reduce using rule 7 (cPreprocessors -> empty .)
    AND             reduce using rule 7 (cPreprocessors -> empty .)
    EXCLM           reduce using rule 7 (cPreprocessors -> empty .)
    MINUS           reduce using rule 7 (cPreprocessors -> empty .)
    (               reduce using rule 7 (cPreprocessors -> empty .)
    STRING          reduce using rule 7 (cPreprocessors -> empty .)
    BOOL            reduce using rule 7 (cPreprocessors -> empty .)
    RUNE            reduce using rule 7 (cPreprocessors -> empty .)
    DECIMAL_LIT     reduce using rule 7 (cPreprocessors -> empty .)
    FALSE           reduce using rule 7 (cPreprocessors -> empty .)
    TRUE            reduce using rule 7 (cPreprocessors -> empty .)
    RUNE_LIT        reduce using rule 7 (cPreprocessors -> empty .)
    STRING_LIT      reduce using rule 7 (cPreprocessors -> empty .)
    F32             reduce using rule 7 (cPreprocessors -> empty .)
    F64             reduce using rule 7 (cPreprocessors -> empty .)
    INT             reduce using rule 7 (cPreprocessors -> empty .)
    ISIZE           reduce using rule 7 (cPreprocessors -> empty .)
    I64             reduce using rule 7 (cPreprocessors -> empty .)
    I32             reduce using rule 7 (cPreprocessors -> empty .)
    I16             reduce using rule 7 (cPreprocessors -> empty .)
    I8              reduce using rule 7 (cPreprocessors -> empty .)
    UINT            reduce using rule 7 (cPreprocessors -> empty .)
    USIZE           reduce using rule 7 (cPreprocessors -> empty .)
    U64             reduce using rule 7 (cPreprocessors -> empty .)
    U32             reduce using rule 7 (cPreprocessors -> empty .)
    U16             reduce using rule 7 (cPreprocessors -> empty .)
    U8              reduce using rule 7 (cPreprocessors -> empty .)
    HEX_LIT         reduce using rule 7 (cPreprocessors -> empty .)
    OCTAL_LIT       reduce using rule 7 (cPreprocessors -> empty .)
    BINARY_LIT      reduce using rule 7 (cPreprocessors -> empty .)
    .               reduce using rule 7 (cPreprocessors -> empty .)


state 5

    (8) cPreprocessor -> C_PREPR . C_STRING_LIT
    (9) cPreprocessor -> C_PREPR . C_PATH_LIT
    (10) cPreprocessor -> C_PREPR . IDENTIFIER expressionList
    C_STRING_LIT    shift and go to state 13
    C_PATH_LIT      shift and go to state 14
    IDENTIFIER      shift and go to state 15


state 6

    (1) sourceFile -> cPreprocessors moduleClause . importDecls topLevelDecls orphanStmtList
    (2) sourceFile -> cPreprocessors moduleClause . importDecls orphanStmtList
    (11) importDecls -> . importDecls importDecl eos
    (12) importDecls -> . importDecl eos
    (13) importDecls -> . empty
    (14) importDecl -> . IMPORT importSpec
    (148) empty -> .
  ! shift/reduce conflict for IMPORT resolved as shift
    IMPORT          shift and go to state 19
    FN              reduce using rule 148 (empty -> .)
    IDENTIFIER      reduce using rule 148 (empty -> .)
    AND             reduce using rule 148 (empty -> .)
    EXCLM           reduce using rule 148 (empty -> .)
    MINUS           reduce using rule 148 (empty -> .)
    (               reduce using rule 148 (empty -> .)
    STRING          reduce using rule 148 (empty -> .)
    BOOL            reduce using rule 148 (empty -> .)
    RUNE            reduce using rule 148 (empty -> .)
    DECIMAL_LIT     reduce using rule 148 (empty -> .)
    FALSE           reduce using rule 148 (empty -> .)
    TRUE            reduce using rule 148 (empty -> .)
    RUNE_LIT        reduce using rule 148 (empty -> .)
    STRING_LIT      reduce using rule 148 (empty -> .)
    F32             reduce using rule 148 (empty -> .)
    F64             reduce using rule 148 (empty -> .)
    INT             reduce using rule 148 (empty -> .)
    ISIZE           reduce using rule 148 (empty -> .)
    I64             reduce using rule 148 (empty -> .)
    I32             reduce using rule 148 (empty -> .)
    I16             reduce using rule 148 (empty -> .)
    I8              reduce using rule 148 (empty -> .)
    UINT            reduce using rule 148 (empty -> .)
    USIZE           reduce using rule 148 (empty -> .)
    U64             reduce using rule 148 (empty -> .)
    U32             reduce using rule 148 (empty -> .)
    U16             reduce using rule 148 (empty -> .)
    U8              reduce using rule 148 (empty -> .)
    HEX_LIT         reduce using rule 148 (empty -> .)
    OCTAL_LIT       reduce using rule 148 (empty -> .)
    BINARY_LIT      reduce using rule 148 (empty -> .)
    .               reduce using rule 148 (empty -> .)

    importDecls                    shift and go to state 16
    importDecl                     shift and go to state 17
    empty                          shift and go to state 18

state 7

    (5) cPreprocessors -> cPreprocessors cPreprocessor . eos
    (109) eos -> . eos NEWL
    (110) eos -> . NEWL
    (111) eos -> . eos ;
    (112) eos -> . ;
    NEWL            shift and go to state 11
    ;               shift and go to state 12

    eos                            shift and go to state 20

state 8

    (3) moduleClause -> MODULE . IDENTIFIER eos
    IDENTIFIER      shift and go to state 21


state 9

    (4) moduleClause -> empty .
    IMPORT          reduce using rule 4 (moduleClause -> empty .)
    FN              reduce using rule 4 (moduleClause -> empty .)
    IDENTIFIER      reduce using rule 4 (moduleClause -> empty .)
    AND             reduce using rule 4 (moduleClause -> empty .)
    EXCLM           reduce using rule 4 (moduleClause -> empty .)
    MINUS           reduce using rule 4 (moduleClause -> empty .)
    (               reduce using rule 4 (moduleClause -> empty .)
    STRING          reduce using rule 4 (moduleClause -> empty .)
    BOOL            reduce using rule 4 (moduleClause -> empty .)
    RUNE            reduce using rule 4 (moduleClause -> empty .)
    DECIMAL_LIT     reduce using rule 4 (moduleClause -> empty .)
    FALSE           reduce using rule 4 (moduleClause -> empty .)
    TRUE            reduce using rule 4 (moduleClause -> empty .)
    RUNE_LIT        reduce using rule 4 (moduleClause -> empty .)
    STRING_LIT      reduce using rule 4 (moduleClause -> empty .)
    F32             reduce using rule 4 (moduleClause -> empty .)
    F64             reduce using rule 4 (moduleClause -> empty .)
    INT             reduce using rule 4 (moduleClause -> empty .)
    ISIZE           reduce using rule 4 (moduleClause -> empty .)
    I64             reduce using rule 4 (moduleClause -> empty .)
    I32             reduce using rule 4 (moduleClause -> empty .)
    I16             reduce using rule 4 (moduleClause -> empty .)
    I8              reduce using rule 4 (moduleClause -> empty .)
    UINT            reduce using rule 4 (moduleClause -> empty .)
    USIZE           reduce using rule 4 (moduleClause -> empty .)
    U64             reduce using rule 4 (moduleClause -> empty .)
    U32             reduce using rule 4 (moduleClause -> empty .)
    U16             reduce using rule 4 (moduleClause -> empty .)
    U8              reduce using rule 4 (moduleClause -> empty .)
    HEX_LIT         reduce using rule 4 (moduleClause -> empty .)
    OCTAL_LIT       reduce using rule 4 (moduleClause -> empty .)
    BINARY_LIT      reduce using rule 4 (moduleClause -> empty .)
    .               reduce using rule 4 (moduleClause -> empty .)


state 10

    (6) cPreprocessors -> cPreprocessor eos .
    (109) eos -> eos . NEWL
    (111) eos -> eos . ;
    MODULE          reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    C_PREPR         reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    IMPORT          reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    FN              reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    IDENTIFIER      reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    AND             reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    EXCLM           reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    MINUS           reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    (               reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    STRING          reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    BOOL            reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    RUNE            reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    DECIMAL_LIT     reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    FALSE           reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    TRUE            reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    RUNE_LIT        reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    STRING_LIT      reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    F32             reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    F64             reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    INT             reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    ISIZE           reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    I64             reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    I32             reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    I16             reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    I8              reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    UINT            reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    USIZE           reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    U64             reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    U32             reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    U16             reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    U8              reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    HEX_LIT         reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    OCTAL_LIT       reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    BINARY_LIT      reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    .               reduce using rule 6 (cPreprocessors -> cPreprocessor eos .)
    NEWL            shift and go to state 22
    ;               shift and go to state 23


state 11

    (110) eos -> NEWL .
    NEWL            reduce using rule 110 (eos -> NEWL .)
    ;               reduce using rule 110 (eos -> NEWL .)
    MODULE          reduce using rule 110 (eos -> NEWL .)
    C_PREPR         reduce using rule 110 (eos -> NEWL .)
    IMPORT          reduce using rule 110 (eos -> NEWL .)
    FN              reduce using rule 110 (eos -> NEWL .)
    IDENTIFIER      reduce using rule 110 (eos -> NEWL .)
    AND             reduce using rule 110 (eos -> NEWL .)
    EXCLM           reduce using rule 110 (eos -> NEWL .)
    MINUS           reduce using rule 110 (eos -> NEWL .)
    (               reduce using rule 110 (eos -> NEWL .)
    STRING          reduce using rule 110 (eos -> NEWL .)
    BOOL            reduce using rule 110 (eos -> NEWL .)
    RUNE            reduce using rule 110 (eos -> NEWL .)
    DECIMAL_LIT     reduce using rule 110 (eos -> NEWL .)
    FALSE           reduce using rule 110 (eos -> NEWL .)
    TRUE            reduce using rule 110 (eos -> NEWL .)
    RUNE_LIT        reduce using rule 110 (eos -> NEWL .)
    STRING_LIT      reduce using rule 110 (eos -> NEWL .)
    F32             reduce using rule 110 (eos -> NEWL .)
    F64             reduce using rule 110 (eos -> NEWL .)
    INT             reduce using rule 110 (eos -> NEWL .)
    ISIZE           reduce using rule 110 (eos -> NEWL .)
    I64             reduce using rule 110 (eos -> NEWL .)
    I32             reduce using rule 110 (eos -> NEWL .)
    I16             reduce using rule 110 (eos -> NEWL .)
    I8              reduce using rule 110 (eos -> NEWL .)
    UINT            reduce using rule 110 (eos -> NEWL .)
    USIZE           reduce using rule 110 (eos -> NEWL .)
    U64             reduce using rule 110 (eos -> NEWL .)
    U32             reduce using rule 110 (eos -> NEWL .)
    U16             reduce using rule 110 (eos -> NEWL .)
    U8              reduce using rule 110 (eos -> NEWL .)
    HEX_LIT         reduce using rule 110 (eos -> NEWL .)
    OCTAL_LIT       reduce using rule 110 (eos -> NEWL .)
    BINARY_LIT      reduce using rule 110 (eos -> NEWL .)
    .               reduce using rule 110 (eos -> NEWL .)
    $end            reduce using rule 110 (eos -> NEWL .)


state 12

    (112) eos -> ; .
    NEWL            reduce using rule 112 (eos -> ; .)
    ;               reduce using rule 112 (eos -> ; .)
    MODULE          reduce using rule 112 (eos -> ; .)
    C_PREPR         reduce using rule 112 (eos -> ; .)
    IMPORT          reduce using rule 112 (eos -> ; .)
    FN              reduce using rule 112 (eos -> ; .)
    IDENTIFIER      reduce using rule 112 (eos -> ; .)
    AND             reduce using rule 112 (eos -> ; .)
    EXCLM           reduce using rule 112 (eos -> ; .)
    MINUS           reduce using rule 112 (eos -> ; .)
    (               reduce using rule 112 (eos -> ; .)
    STRING          reduce using rule 112 (eos -> ; .)
    BOOL            reduce using rule 112 (eos -> ; .)
    RUNE            reduce using rule 112 (eos -> ; .)
    DECIMAL_LIT     reduce using rule 112 (eos -> ; .)
    FALSE           reduce using rule 112 (eos -> ; .)
    TRUE            reduce using rule 112 (eos -> ; .)
    RUNE_LIT        reduce using rule 112 (eos -> ; .)
    STRING_LIT      reduce using rule 112 (eos -> ; .)
    F32             reduce using rule 112 (eos -> ; .)
    F64             reduce using rule 112 (eos -> ; .)
    INT             reduce using rule 112 (eos -> ; .)
    ISIZE           reduce using rule 112 (eos -> ; .)
    I64             reduce using rule 112 (eos -> ; .)
    I32             reduce using rule 112 (eos -> ; .)
    I16             reduce using rule 112 (eos -> ; .)
    I8              reduce using rule 112 (eos -> ; .)
    UINT            reduce using rule 112 (eos -> ; .)
    USIZE           reduce using rule 112 (eos -> ; .)
    U64             reduce using rule 112 (eos -> ; .)
    U32             reduce using rule 112 (eos -> ; .)
    U16             reduce using rule 112 (eos -> ; .)
    U8              reduce using rule 112 (eos -> ; .)
    HEX_LIT         reduce using rule 112 (eos -> ; .)
    OCTAL_LIT       reduce using rule 112 (eos -> ; .)
    BINARY_LIT      reduce using rule 112 (eos -> ; .)
    .               reduce using rule 112 (eos -> ; .)
    $end            reduce using rule 112 (eos -> ; .)


state 13

    (8) cPreprocessor -> C_PREPR C_STRING_LIT .
    NEWL            reduce using rule 8 (cPreprocessor -> C_PREPR C_STRING_LIT .)
    ;               reduce using rule 8 (cPreprocessor -> C_PREPR C_STRING_LIT .)


state 14

    (9) cPreprocessor -> C_PREPR C_PATH_LIT .
    NEWL            reduce using rule 9 (cPreprocessor -> C_PREPR C_PATH_LIT .)
    ;               reduce using rule 9 (cPreprocessor -> C_PREPR C_PATH_LIT .)


state 15

    (10) cPreprocessor -> C_PREPR IDENTIFIER . expressionList
    (43) expressionList -> . expressionList , expression
    (44) expressionList -> . expression
    (61) expression -> . expression BINARY_OP unaryExpr
    (62) expression -> . unaryExpr
    (63) unaryExpr -> . UNARY_OP unaryExpr
    (64) unaryExpr -> . primaryExpr
    (145) UNARY_OP -> . AND
    (146) UNARY_OP -> . EXCLM
    (147) UNARY_OP -> . MINUS
    (65) primaryExpr -> . primaryExpr arguments
    (66) primaryExpr -> . conversion
    (67) primaryExpr -> . operand
    (74) conversion -> . type_ ( expression )
    (68) operand -> . ( expression )
    (69) operand -> . operandName
    (70) operand -> . literal
    (75) type_ -> . typeName
    (71) operandName -> . IDENTIFIER
    (72) literal -> . functionLit
    (73) literal -> . basicLit
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (42) functionLit -> . FN function_
    (94) basicLit -> . INT_LIT
    (95) basicLit -> . FLOAT_LIT
    (96) basicLit -> . DECIMAL_LIT EXPONENT
    (97) basicLit -> . FLOAT_LIT EXPONENT
    (98) basicLit -> . FALSE
    (99) basicLit -> . TRUE
    (100) basicLit -> . RUNE_LIT
    (101) basicLit -> . STRING_LIT
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    (105) INT_LIT -> . HEX_LIT
    (106) INT_LIT -> . OCTAL_LIT
    (107) INT_LIT -> . BINARY_LIT
    (108) INT_LIT -> . DECIMAL_LIT
    (102) FLOAT_LIT -> . . DECIMAL_LIT
    (103) FLOAT_LIT -> . DECIMAL_LIT .
    (104) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 30
    EXCLM           shift and go to state 31
    MINUS           shift and go to state 32
    (               shift and go to state 36
    IDENTIFIER      shift and go to state 24
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 46
    DECIMAL_LIT     shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    RUNE_LIT        shift and go to state 52
    STRING_LIT      shift and go to state 53
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67
    HEX_LIT         shift and go to state 68
    OCTAL_LIT       shift and go to state 69
    BINARY_LIT      shift and go to state 70
    .               shift and go to state 71

    expressionList                 shift and go to state 25
    expression                     shift and go to state 26
    unaryExpr                      shift and go to state 27
    UNARY_OP                       shift and go to state 28
    primaryExpr                    shift and go to state 29
    conversion                     shift and go to state 33
    operand                        shift and go to state 34
    type_                          shift and go to state 35
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 47
    FLOAT_LIT                      shift and go to state 48

state 16

    (1) sourceFile -> cPreprocessors moduleClause importDecls . topLevelDecls orphanStmtList
    (2) sourceFile -> cPreprocessors moduleClause importDecls . orphanStmtList
    (11) importDecls -> importDecls . importDecl eos
    (20) topLevelDecls -> . topLevelDecls topLevelDecl eos
    (21) topLevelDecls -> . topLevelDecl eos
    (22) orphanStmtList -> . statementList eos
    (14) importDecl -> . IMPORT importSpec
    (23) topLevelDecl -> . functionDecl
    (45) statementList -> . statementList eos statement
    (46) statementList -> . statement
    (28) functionDecl -> . FN IDENTIFIER signature
    (29) functionDecl -> . FN IDENTIFIER function_
    (48) statement -> . simpleStmt
    (49) statement -> . declaration
    (50) simpleStmt -> . assignment
    (51) simpleStmt -> . expressionStmt
    (24) declaration -> . varDecl
    (53) assignment -> . identifierList assign_op expressionList
    (52) expressionStmt -> . expression
    (25) varDecl -> . identifierList DECL_ASGN expressionList
    (26) identifierList -> . identifierList , IDENTIFIER
    (27) identifierList -> . IDENTIFIER
    (61) expression -> . expression BINARY_OP unaryExpr
    (62) expression -> . unaryExpr
    (63) unaryExpr -> . UNARY_OP unaryExpr
    (64) unaryExpr -> . primaryExpr
    (145) UNARY_OP -> . AND
    (146) UNARY_OP -> . EXCLM
    (147) UNARY_OP -> . MINUS
    (65) primaryExpr -> . primaryExpr arguments
    (66) primaryExpr -> . conversion
    (67) primaryExpr -> . operand
    (74) conversion -> . type_ ( expression )
    (68) operand -> . ( expression )
    (69) operand -> . operandName
    (70) operand -> . literal
    (75) type_ -> . typeName
    (71) operandName -> . IDENTIFIER
    (72) literal -> . functionLit
    (73) literal -> . basicLit
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (42) functionLit -> . FN function_
    (94) basicLit -> . INT_LIT
    (95) basicLit -> . FLOAT_LIT
    (96) basicLit -> . DECIMAL_LIT EXPONENT
    (97) basicLit -> . FLOAT_LIT EXPONENT
    (98) basicLit -> . FALSE
    (99) basicLit -> . TRUE
    (100) basicLit -> . RUNE_LIT
    (101) basicLit -> . STRING_LIT
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    (105) INT_LIT -> . HEX_LIT
    (106) INT_LIT -> . OCTAL_LIT
    (107) INT_LIT -> . BINARY_LIT
    (108) INT_LIT -> . DECIMAL_LIT
    (102) FLOAT_LIT -> . . DECIMAL_LIT
    (103) FLOAT_LIT -> . DECIMAL_LIT .
    (104) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IMPORT          shift and go to state 19
    FN              shift and go to state 79
    IDENTIFIER      shift and go to state 80
    AND             shift and go to state 30
    EXCLM           shift and go to state 31
    MINUS           shift and go to state 32
    (               shift and go to state 36
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    RUNE_LIT        shift and go to state 52
    STRING_LIT      shift and go to state 53
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67
    HEX_LIT         shift and go to state 68
    OCTAL_LIT       shift and go to state 69
    BINARY_LIT      shift and go to state 70
    .               shift and go to state 71

    topLevelDecls                  shift and go to state 72
    orphanStmtList                 shift and go to state 73
    importDecl                     shift and go to state 74
    topLevelDecl                   shift and go to state 75
    statementList                  shift and go to state 76
    functionDecl                   shift and go to state 77
    statement                      shift and go to state 78
    simpleStmt                     shift and go to state 81
    declaration                    shift and go to state 82
    assignment                     shift and go to state 83
    expressionStmt                 shift and go to state 84
    varDecl                        shift and go to state 85
    identifierList                 shift and go to state 86
    expression                     shift and go to state 87
    unaryExpr                      shift and go to state 27
    UNARY_OP                       shift and go to state 28
    primaryExpr                    shift and go to state 29
    conversion                     shift and go to state 33
    operand                        shift and go to state 34
    type_                          shift and go to state 35
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 47
    FLOAT_LIT                      shift and go to state 48

state 17

    (12) importDecls -> importDecl . eos
    (109) eos -> . eos NEWL
    (110) eos -> . NEWL
    (111) eos -> . eos ;
    (112) eos -> . ;
    NEWL            shift and go to state 11
    ;               shift and go to state 12

    eos                            shift and go to state 88

state 18

    (13) importDecls -> empty .
    IMPORT          reduce using rule 13 (importDecls -> empty .)
    FN              reduce using rule 13 (importDecls -> empty .)
    IDENTIFIER      reduce using rule 13 (importDecls -> empty .)
    AND             reduce using rule 13 (importDecls -> empty .)
    EXCLM           reduce using rule 13 (importDecls -> empty .)
    MINUS           reduce using rule 13 (importDecls -> empty .)
    (               reduce using rule 13 (importDecls -> empty .)
    STRING          reduce using rule 13 (importDecls -> empty .)
    BOOL            reduce using rule 13 (importDecls -> empty .)
    RUNE            reduce using rule 13 (importDecls -> empty .)
    DECIMAL_LIT     reduce using rule 13 (importDecls -> empty .)
    FALSE           reduce using rule 13 (importDecls -> empty .)
    TRUE            reduce using rule 13 (importDecls -> empty .)
    RUNE_LIT        reduce using rule 13 (importDecls -> empty .)
    STRING_LIT      reduce using rule 13 (importDecls -> empty .)
    F32             reduce using rule 13 (importDecls -> empty .)
    F64             reduce using rule 13 (importDecls -> empty .)
    INT             reduce using rule 13 (importDecls -> empty .)
    ISIZE           reduce using rule 13 (importDecls -> empty .)
    I64             reduce using rule 13 (importDecls -> empty .)
    I32             reduce using rule 13 (importDecls -> empty .)
    I16             reduce using rule 13 (importDecls -> empty .)
    I8              reduce using rule 13 (importDecls -> empty .)
    UINT            reduce using rule 13 (importDecls -> empty .)
    USIZE           reduce using rule 13 (importDecls -> empty .)
    U64             reduce using rule 13 (importDecls -> empty .)
    U32             reduce using rule 13 (importDecls -> empty .)
    U16             reduce using rule 13 (importDecls -> empty .)
    U8              reduce using rule 13 (importDecls -> empty .)
    HEX_LIT         reduce using rule 13 (importDecls -> empty .)
    OCTAL_LIT       reduce using rule 13 (importDecls -> empty .)
    BINARY_LIT      reduce using rule 13 (importDecls -> empty .)
    .               reduce using rule 13 (importDecls -> empty .)


state 19

    (14) importDecl -> IMPORT . importSpec
    (15) importSpec -> . importPath
    (16) importSpec -> . IDENTIFIER importPath
    (17) importSpec -> . . importPath
    (18) importPath -> . STRING_LIT
    (19) importPath -> . IDENTIFIER
    IDENTIFIER      shift and go to state 91
    .               shift and go to state 92
    STRING_LIT      shift and go to state 93

    importSpec                     shift and go to state 89
    importPath                     shift and go to state 90

state 20

    (5) cPreprocessors -> cPreprocessors cPreprocessor eos .
    (109) eos -> eos . NEWL
    (111) eos -> eos . ;
    MODULE          reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    C_PREPR         reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    IMPORT          reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    FN              reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    IDENTIFIER      reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    AND             reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    EXCLM           reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    MINUS           reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    (               reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    STRING          reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    BOOL            reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    RUNE            reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    DECIMAL_LIT     reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    FALSE           reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    TRUE            reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    RUNE_LIT        reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    STRING_LIT      reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    F32             reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    F64             reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    INT             reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    ISIZE           reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    I64             reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    I32             reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    I16             reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    I8              reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    UINT            reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    USIZE           reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    U64             reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    U32             reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    U16             reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    U8              reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    HEX_LIT         reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    OCTAL_LIT       reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    BINARY_LIT      reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    .               reduce using rule 5 (cPreprocessors -> cPreprocessors cPreprocessor eos .)
    NEWL            shift and go to state 22
    ;               shift and go to state 23


state 21

    (3) moduleClause -> MODULE IDENTIFIER . eos
    (109) eos -> . eos NEWL
    (110) eos -> . NEWL
    (111) eos -> . eos ;
    (112) eos -> . ;
    NEWL            shift and go to state 11
    ;               shift and go to state 12

    eos                            shift and go to state 94

state 22

    (109) eos -> eos NEWL .
    NEWL            reduce using rule 109 (eos -> eos NEWL .)
    ;               reduce using rule 109 (eos -> eos NEWL .)
    MODULE          reduce using rule 109 (eos -> eos NEWL .)
    C_PREPR         reduce using rule 109 (eos -> eos NEWL .)
    IMPORT          reduce using rule 109 (eos -> eos NEWL .)
    FN              reduce using rule 109 (eos -> eos NEWL .)
    IDENTIFIER      reduce using rule 109 (eos -> eos NEWL .)
    AND             reduce using rule 109 (eos -> eos NEWL .)
    EXCLM           reduce using rule 109 (eos -> eos NEWL .)
    MINUS           reduce using rule 109 (eos -> eos NEWL .)
    (               reduce using rule 109 (eos -> eos NEWL .)
    STRING          reduce using rule 109 (eos -> eos NEWL .)
    BOOL            reduce using rule 109 (eos -> eos NEWL .)
    RUNE            reduce using rule 109 (eos -> eos NEWL .)
    DECIMAL_LIT     reduce using rule 109 (eos -> eos NEWL .)
    FALSE           reduce using rule 109 (eos -> eos NEWL .)
    TRUE            reduce using rule 109 (eos -> eos NEWL .)
    RUNE_LIT        reduce using rule 109 (eos -> eos NEWL .)
    STRING_LIT      reduce using rule 109 (eos -> eos NEWL .)
    F32             reduce using rule 109 (eos -> eos NEWL .)
    F64             reduce using rule 109 (eos -> eos NEWL .)
    INT             reduce using rule 109 (eos -> eos NEWL .)
    ISIZE           reduce using rule 109 (eos -> eos NEWL .)
    I64             reduce using rule 109 (eos -> eos NEWL .)
    I32             reduce using rule 109 (eos -> eos NEWL .)
    I16             reduce using rule 109 (eos -> eos NEWL .)
    I8              reduce using rule 109 (eos -> eos NEWL .)
    UINT            reduce using rule 109 (eos -> eos NEWL .)
    USIZE           reduce using rule 109 (eos -> eos NEWL .)
    U64             reduce using rule 109 (eos -> eos NEWL .)
    U32             reduce using rule 109 (eos -> eos NEWL .)
    U16             reduce using rule 109 (eos -> eos NEWL .)
    U8              reduce using rule 109 (eos -> eos NEWL .)
    HEX_LIT         reduce using rule 109 (eos -> eos NEWL .)
    OCTAL_LIT       reduce using rule 109 (eos -> eos NEWL .)
    BINARY_LIT      reduce using rule 109 (eos -> eos NEWL .)
    .               reduce using rule 109 (eos -> eos NEWL .)
    $end            reduce using rule 109 (eos -> eos NEWL .)


state 23

    (111) eos -> eos ; .
    NEWL            reduce using rule 111 (eos -> eos ; .)
    ;               reduce using rule 111 (eos -> eos ; .)
    MODULE          reduce using rule 111 (eos -> eos ; .)
    C_PREPR         reduce using rule 111 (eos -> eos ; .)
    IMPORT          reduce using rule 111 (eos -> eos ; .)
    FN              reduce using rule 111 (eos -> eos ; .)
    IDENTIFIER      reduce using rule 111 (eos -> eos ; .)
    AND             reduce using rule 111 (eos -> eos ; .)
    EXCLM           reduce using rule 111 (eos -> eos ; .)
    MINUS           reduce using rule 111 (eos -> eos ; .)
    (               reduce using rule 111 (eos -> eos ; .)
    STRING          reduce using rule 111 (eos -> eos ; .)
    BOOL            reduce using rule 111 (eos -> eos ; .)
    RUNE            reduce using rule 111 (eos -> eos ; .)
    DECIMAL_LIT     reduce using rule 111 (eos -> eos ; .)
    FALSE           reduce using rule 111 (eos -> eos ; .)
    TRUE            reduce using rule 111 (eos -> eos ; .)
    RUNE_LIT        reduce using rule 111 (eos -> eos ; .)
    STRING_LIT      reduce using rule 111 (eos -> eos ; .)
    F32             reduce using rule 111 (eos -> eos ; .)
    F64             reduce using rule 111 (eos -> eos ; .)
    INT             reduce using rule 111 (eos -> eos ; .)
    ISIZE           reduce using rule 111 (eos -> eos ; .)
    I64             reduce using rule 111 (eos -> eos ; .)
    I32             reduce using rule 111 (eos -> eos ; .)
    I16             reduce using rule 111 (eos -> eos ; .)
    I8              reduce using rule 111 (eos -> eos ; .)
    UINT            reduce using rule 111 (eos -> eos ; .)
    USIZE           reduce using rule 111 (eos -> eos ; .)
    U64             reduce using rule 111 (eos -> eos ; .)
    U32             reduce using rule 111 (eos -> eos ; .)
    U16             reduce using rule 111 (eos -> eos ; .)
    U8              reduce using rule 111 (eos -> eos ; .)
    HEX_LIT         reduce using rule 111 (eos -> eos ; .)
    OCTAL_LIT       reduce using rule 111 (eos -> eos ; .)
    BINARY_LIT      reduce using rule 111 (eos -> eos ; .)
    .               reduce using rule 111 (eos -> eos ; .)
    $end            reduce using rule 111 (eos -> eos ; .)


state 24

    (71) operandName -> IDENTIFIER .
    (               reduce using rule 71 (operandName -> IDENTIFIER .)
    LOGIC_AND       reduce using rule 71 (operandName -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 71 (operandName -> IDENTIFIER .)
    SHR             reduce using rule 71 (operandName -> IDENTIFIER .)
    SHL             reduce using rule 71 (operandName -> IDENTIFIER .)
    AND             reduce using rule 71 (operandName -> IDENTIFIER .)
    MOD             reduce using rule 71 (operandName -> IDENTIFIER .)
    DIV             reduce using rule 71 (operandName -> IDENTIFIER .)
    STAR            reduce using rule 71 (operandName -> IDENTIFIER .)
    XOR             reduce using rule 71 (operandName -> IDENTIFIER .)
    OR              reduce using rule 71 (operandName -> IDENTIFIER .)
    MINUS           reduce using rule 71 (operandName -> IDENTIFIER .)
    PLUS            reduce using rule 71 (operandName -> IDENTIFIER .)
    GE              reduce using rule 71 (operandName -> IDENTIFIER .)
    GT              reduce using rule 71 (operandName -> IDENTIFIER .)
    LE              reduce using rule 71 (operandName -> IDENTIFIER .)
    LT              reduce using rule 71 (operandName -> IDENTIFIER .)
    NE              reduce using rule 71 (operandName -> IDENTIFIER .)
    EQ              reduce using rule 71 (operandName -> IDENTIFIER .)
    ,               reduce using rule 71 (operandName -> IDENTIFIER .)
    NEWL            reduce using rule 71 (operandName -> IDENTIFIER .)
    ;               reduce using rule 71 (operandName -> IDENTIFIER .)
    )               reduce using rule 71 (operandName -> IDENTIFIER .)
    }               reduce using rule 71 (operandName -> IDENTIFIER .)


state 25

    (10) cPreprocessor -> C_PREPR IDENTIFIER expressionList .
    (43) expressionList -> expressionList . , expression
    NEWL            reduce using rule 10 (cPreprocessor -> C_PREPR IDENTIFIER expressionList .)
    ;               reduce using rule 10 (cPreprocessor -> C_PREPR IDENTIFIER expressionList .)
    ,               shift and go to state 95


state 26

    (44) expressionList -> expression .
    (61) expression -> expression . BINARY_OP unaryExpr
    (124) BINARY_OP -> . MUL_OP
    (125) BINARY_OP -> . ADD_OP
    (126) BINARY_OP -> . REL_OP
    (127) BINARY_OP -> . LOGIC_AND
    (128) BINARY_OP -> . LOGIC_OR
    (139) MUL_OP -> . SHR
    (140) MUL_OP -> . SHL
    (141) MUL_OP -> . AND
    (142) MUL_OP -> . MOD
    (143) MUL_OP -> . DIV
    (144) MUL_OP -> . STAR
    (135) ADD_OP -> . XOR
    (136) ADD_OP -> . OR
    (137) ADD_OP -> . MINUS
    (138) ADD_OP -> . PLUS
    (129) REL_OP -> . GE
    (130) REL_OP -> . GT
    (131) REL_OP -> . LE
    (132) REL_OP -> . LT
    (133) REL_OP -> . NE
    (134) REL_OP -> . EQ
    ,               reduce using rule 44 (expressionList -> expression .)
    NEWL            reduce using rule 44 (expressionList -> expression .)
    ;               reduce using rule 44 (expressionList -> expression .)
    )               reduce using rule 44 (expressionList -> expression .)
    }               reduce using rule 44 (expressionList -> expression .)
    LOGIC_AND       shift and go to state 100
    LOGIC_OR        shift and go to state 101
    SHR             shift and go to state 102
    SHL             shift and go to state 103
    AND             shift and go to state 104
    MOD             shift and go to state 105
    DIV             shift and go to state 106
    STAR            shift and go to state 107
    XOR             shift and go to state 108
    OR              shift and go to state 109
    MINUS           shift and go to state 110
    PLUS            shift and go to state 111
    GE              shift and go to state 112
    GT              shift and go to state 113
    LE              shift and go to state 114
    LT              shift and go to state 115
    NE              shift and go to state 116
    EQ              shift and go to state 117

    BINARY_OP                      shift and go to state 96
    MUL_OP                         shift and go to state 97
    ADD_OP                         shift and go to state 98
    REL_OP                         shift and go to state 99

state 27

    (62) expression -> unaryExpr .
    LOGIC_AND       reduce using rule 62 (expression -> unaryExpr .)
    LOGIC_OR        reduce using rule 62 (expression -> unaryExpr .)
    SHR             reduce using rule 62 (expression -> unaryExpr .)
    SHL             reduce using rule 62 (expression -> unaryExpr .)
    AND             reduce using rule 62 (expression -> unaryExpr .)
    MOD             reduce using rule 62 (expression -> unaryExpr .)
    DIV             reduce using rule 62 (expression -> unaryExpr .)
    STAR            reduce using rule 62 (expression -> unaryExpr .)
    XOR             reduce using rule 62 (expression -> unaryExpr .)
    OR              reduce using rule 62 (expression -> unaryExpr .)
    MINUS           reduce using rule 62 (expression -> unaryExpr .)
    PLUS            reduce using rule 62 (expression -> unaryExpr .)
    GE              reduce using rule 62 (expression -> unaryExpr .)
    GT              reduce using rule 62 (expression -> unaryExpr .)
    LE              reduce using rule 62 (expression -> unaryExpr .)
    LT              reduce using rule 62 (expression -> unaryExpr .)
    NE              reduce using rule 62 (expression -> unaryExpr .)
    EQ              reduce using rule 62 (expression -> unaryExpr .)
    ,               reduce using rule 62 (expression -> unaryExpr .)
    NEWL            reduce using rule 62 (expression -> unaryExpr .)
    ;               reduce using rule 62 (expression -> unaryExpr .)
    )               reduce using rule 62 (expression -> unaryExpr .)
    }               reduce using rule 62 (expression -> unaryExpr .)


state 28

    (63) unaryExpr -> UNARY_OP . unaryExpr
    (63) unaryExpr -> . UNARY_OP unaryExpr
    (64) unaryExpr -> . primaryExpr
    (145) UNARY_OP -> . AND
    (146) UNARY_OP -> . EXCLM
    (147) UNARY_OP -> . MINUS
    (65) primaryExpr -> . primaryExpr arguments
    (66) primaryExpr -> . conversion
    (67) primaryExpr -> . operand
    (74) conversion -> . type_ ( expression )
    (68) operand -> . ( expression )
    (69) operand -> . operandName
    (70) operand -> . literal
    (75) type_ -> . typeName
    (71) operandName -> . IDENTIFIER
    (72) literal -> . functionLit
    (73) literal -> . basicLit
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (42) functionLit -> . FN function_
    (94) basicLit -> . INT_LIT
    (95) basicLit -> . FLOAT_LIT
    (96) basicLit -> . DECIMAL_LIT EXPONENT
    (97) basicLit -> . FLOAT_LIT EXPONENT
    (98) basicLit -> . FALSE
    (99) basicLit -> . TRUE
    (100) basicLit -> . RUNE_LIT
    (101) basicLit -> . STRING_LIT
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    (105) INT_LIT -> . HEX_LIT
    (106) INT_LIT -> . OCTAL_LIT
    (107) INT_LIT -> . BINARY_LIT
    (108) INT_LIT -> . DECIMAL_LIT
    (102) FLOAT_LIT -> . . DECIMAL_LIT
    (103) FLOAT_LIT -> . DECIMAL_LIT .
    (104) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 30
    EXCLM           shift and go to state 31
    MINUS           shift and go to state 32
    (               shift and go to state 36
    IDENTIFIER      shift and go to state 24
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 46
    DECIMAL_LIT     shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    RUNE_LIT        shift and go to state 52
    STRING_LIT      shift and go to state 53
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67
    HEX_LIT         shift and go to state 68
    OCTAL_LIT       shift and go to state 69
    BINARY_LIT      shift and go to state 70
    .               shift and go to state 71

    UNARY_OP                       shift and go to state 28
    unaryExpr                      shift and go to state 118
    primaryExpr                    shift and go to state 29
    conversion                     shift and go to state 33
    operand                        shift and go to state 34
    type_                          shift and go to state 35
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 47
    FLOAT_LIT                      shift and go to state 48

state 29

    (64) unaryExpr -> primaryExpr .
    (65) primaryExpr -> primaryExpr . arguments
    (54) arguments -> . ( type_ , expressionList , )
    (55) arguments -> . ( type_ , expressionList )
    (56) arguments -> . ( type_ , )
    (57) arguments -> . ( type_ )
    (58) arguments -> . ( expressionList , )
    (59) arguments -> . ( expressionList )
    (60) arguments -> . ( )
    LOGIC_AND       reduce using rule 64 (unaryExpr -> primaryExpr .)
    LOGIC_OR        reduce using rule 64 (unaryExpr -> primaryExpr .)
    SHR             reduce using rule 64 (unaryExpr -> primaryExpr .)
    SHL             reduce using rule 64 (unaryExpr -> primaryExpr .)
    AND             reduce using rule 64 (unaryExpr -> primaryExpr .)
    MOD             reduce using rule 64 (unaryExpr -> primaryExpr .)
    DIV             reduce using rule 64 (unaryExpr -> primaryExpr .)
    STAR            reduce using rule 64 (unaryExpr -> primaryExpr .)
    XOR             reduce using rule 64 (unaryExpr -> primaryExpr .)
    OR              reduce using rule 64 (unaryExpr -> primaryExpr .)
    MINUS           reduce using rule 64 (unaryExpr -> primaryExpr .)
    PLUS            reduce using rule 64 (unaryExpr -> primaryExpr .)
    GE              reduce using rule 64 (unaryExpr -> primaryExpr .)
    GT              reduce using rule 64 (unaryExpr -> primaryExpr .)
    LE              reduce using rule 64 (unaryExpr -> primaryExpr .)
    LT              reduce using rule 64 (unaryExpr -> primaryExpr .)
    NE              reduce using rule 64 (unaryExpr -> primaryExpr .)
    EQ              reduce using rule 64 (unaryExpr -> primaryExpr .)
    ,               reduce using rule 64 (unaryExpr -> primaryExpr .)
    NEWL            reduce using rule 64 (unaryExpr -> primaryExpr .)
    ;               reduce using rule 64 (unaryExpr -> primaryExpr .)
    )               reduce using rule 64 (unaryExpr -> primaryExpr .)
    }               reduce using rule 64 (unaryExpr -> primaryExpr .)
    (               shift and go to state 120

    arguments                      shift and go to state 119

state 30

    (145) UNARY_OP -> AND .
    AND             reduce using rule 145 (UNARY_OP -> AND .)
    EXCLM           reduce using rule 145 (UNARY_OP -> AND .)
    MINUS           reduce using rule 145 (UNARY_OP -> AND .)
    (               reduce using rule 145 (UNARY_OP -> AND .)
    IDENTIFIER      reduce using rule 145 (UNARY_OP -> AND .)
    STRING          reduce using rule 145 (UNARY_OP -> AND .)
    BOOL            reduce using rule 145 (UNARY_OP -> AND .)
    RUNE            reduce using rule 145 (UNARY_OP -> AND .)
    FN              reduce using rule 145 (UNARY_OP -> AND .)
    DECIMAL_LIT     reduce using rule 145 (UNARY_OP -> AND .)
    FALSE           reduce using rule 145 (UNARY_OP -> AND .)
    TRUE            reduce using rule 145 (UNARY_OP -> AND .)
    RUNE_LIT        reduce using rule 145 (UNARY_OP -> AND .)
    STRING_LIT      reduce using rule 145 (UNARY_OP -> AND .)
    F32             reduce using rule 145 (UNARY_OP -> AND .)
    F64             reduce using rule 145 (UNARY_OP -> AND .)
    INT             reduce using rule 145 (UNARY_OP -> AND .)
    ISIZE           reduce using rule 145 (UNARY_OP -> AND .)
    I64             reduce using rule 145 (UNARY_OP -> AND .)
    I32             reduce using rule 145 (UNARY_OP -> AND .)
    I16             reduce using rule 145 (UNARY_OP -> AND .)
    I8              reduce using rule 145 (UNARY_OP -> AND .)
    UINT            reduce using rule 145 (UNARY_OP -> AND .)
    USIZE           reduce using rule 145 (UNARY_OP -> AND .)
    U64             reduce using rule 145 (UNARY_OP -> AND .)
    U32             reduce using rule 145 (UNARY_OP -> AND .)
    U16             reduce using rule 145 (UNARY_OP -> AND .)
    U8              reduce using rule 145 (UNARY_OP -> AND .)
    HEX_LIT         reduce using rule 145 (UNARY_OP -> AND .)
    OCTAL_LIT       reduce using rule 145 (UNARY_OP -> AND .)
    BINARY_LIT      reduce using rule 145 (UNARY_OP -> AND .)
    .               reduce using rule 145 (UNARY_OP -> AND .)


state 31

    (146) UNARY_OP -> EXCLM .
    AND             reduce using rule 146 (UNARY_OP -> EXCLM .)
    EXCLM           reduce using rule 146 (UNARY_OP -> EXCLM .)
    MINUS           reduce using rule 146 (UNARY_OP -> EXCLM .)
    (               reduce using rule 146 (UNARY_OP -> EXCLM .)
    IDENTIFIER      reduce using rule 146 (UNARY_OP -> EXCLM .)
    STRING          reduce using rule 146 (UNARY_OP -> EXCLM .)
    BOOL            reduce using rule 146 (UNARY_OP -> EXCLM .)
    RUNE            reduce using rule 146 (UNARY_OP -> EXCLM .)
    FN              reduce using rule 146 (UNARY_OP -> EXCLM .)
    DECIMAL_LIT     reduce using rule 146 (UNARY_OP -> EXCLM .)
    FALSE           reduce using rule 146 (UNARY_OP -> EXCLM .)
    TRUE            reduce using rule 146 (UNARY_OP -> EXCLM .)
    RUNE_LIT        reduce using rule 146 (UNARY_OP -> EXCLM .)
    STRING_LIT      reduce using rule 146 (UNARY_OP -> EXCLM .)
    F32             reduce using rule 146 (UNARY_OP -> EXCLM .)
    F64             reduce using rule 146 (UNARY_OP -> EXCLM .)
    INT             reduce using rule 146 (UNARY_OP -> EXCLM .)
    ISIZE           reduce using rule 146 (UNARY_OP -> EXCLM .)
    I64             reduce using rule 146 (UNARY_OP -> EXCLM .)
    I32             reduce using rule 146 (UNARY_OP -> EXCLM .)
    I16             reduce using rule 146 (UNARY_OP -> EXCLM .)
    I8              reduce using rule 146 (UNARY_OP -> EXCLM .)
    UINT            reduce using rule 146 (UNARY_OP -> EXCLM .)
    USIZE           reduce using rule 146 (UNARY_OP -> EXCLM .)
    U64             reduce using rule 146 (UNARY_OP -> EXCLM .)
    U32             reduce using rule 146 (UNARY_OP -> EXCLM .)
    U16             reduce using rule 146 (UNARY_OP -> EXCLM .)
    U8              reduce using rule 146 (UNARY_OP -> EXCLM .)
    HEX_LIT         reduce using rule 146 (UNARY_OP -> EXCLM .)
    OCTAL_LIT       reduce using rule 146 (UNARY_OP -> EXCLM .)
    BINARY_LIT      reduce using rule 146 (UNARY_OP -> EXCLM .)
    .               reduce using rule 146 (UNARY_OP -> EXCLM .)


state 32

    (147) UNARY_OP -> MINUS .
    AND             reduce using rule 147 (UNARY_OP -> MINUS .)
    EXCLM           reduce using rule 147 (UNARY_OP -> MINUS .)
    MINUS           reduce using rule 147 (UNARY_OP -> MINUS .)
    (               reduce using rule 147 (UNARY_OP -> MINUS .)
    IDENTIFIER      reduce using rule 147 (UNARY_OP -> MINUS .)
    STRING          reduce using rule 147 (UNARY_OP -> MINUS .)
    BOOL            reduce using rule 147 (UNARY_OP -> MINUS .)
    RUNE            reduce using rule 147 (UNARY_OP -> MINUS .)
    FN              reduce using rule 147 (UNARY_OP -> MINUS .)
    DECIMAL_LIT     reduce using rule 147 (UNARY_OP -> MINUS .)
    FALSE           reduce using rule 147 (UNARY_OP -> MINUS .)
    TRUE            reduce using rule 147 (UNARY_OP -> MINUS .)
    RUNE_LIT        reduce using rule 147 (UNARY_OP -> MINUS .)
    STRING_LIT      reduce using rule 147 (UNARY_OP -> MINUS .)
    F32             reduce using rule 147 (UNARY_OP -> MINUS .)
    F64             reduce using rule 147 (UNARY_OP -> MINUS .)
    INT             reduce using rule 147 (UNARY_OP -> MINUS .)
    ISIZE           reduce using rule 147 (UNARY_OP -> MINUS .)
    I64             reduce using rule 147 (UNARY_OP -> MINUS .)
    I32             reduce using rule 147 (UNARY_OP -> MINUS .)
    I16             reduce using rule 147 (UNARY_OP -> MINUS .)
    I8              reduce using rule 147 (UNARY_OP -> MINUS .)
    UINT            reduce using rule 147 (UNARY_OP -> MINUS .)
    USIZE           reduce using rule 147 (UNARY_OP -> MINUS .)
    U64             reduce using rule 147 (UNARY_OP -> MINUS .)
    U32             reduce using rule 147 (UNARY_OP -> MINUS .)
    U16             reduce using rule 147 (UNARY_OP -> MINUS .)
    U8              reduce using rule 147 (UNARY_OP -> MINUS .)
    HEX_LIT         reduce using rule 147 (UNARY_OP -> MINUS .)
    OCTAL_LIT       reduce using rule 147 (UNARY_OP -> MINUS .)
    BINARY_LIT      reduce using rule 147 (UNARY_OP -> MINUS .)
    .               reduce using rule 147 (UNARY_OP -> MINUS .)


state 33

    (66) primaryExpr -> conversion .
    (               reduce using rule 66 (primaryExpr -> conversion .)
    LOGIC_AND       reduce using rule 66 (primaryExpr -> conversion .)
    LOGIC_OR        reduce using rule 66 (primaryExpr -> conversion .)
    SHR             reduce using rule 66 (primaryExpr -> conversion .)
    SHL             reduce using rule 66 (primaryExpr -> conversion .)
    AND             reduce using rule 66 (primaryExpr -> conversion .)
    MOD             reduce using rule 66 (primaryExpr -> conversion .)
    DIV             reduce using rule 66 (primaryExpr -> conversion .)
    STAR            reduce using rule 66 (primaryExpr -> conversion .)
    XOR             reduce using rule 66 (primaryExpr -> conversion .)
    OR              reduce using rule 66 (primaryExpr -> conversion .)
    MINUS           reduce using rule 66 (primaryExpr -> conversion .)
    PLUS            reduce using rule 66 (primaryExpr -> conversion .)
    GE              reduce using rule 66 (primaryExpr -> conversion .)
    GT              reduce using rule 66 (primaryExpr -> conversion .)
    LE              reduce using rule 66 (primaryExpr -> conversion .)
    LT              reduce using rule 66 (primaryExpr -> conversion .)
    NE              reduce using rule 66 (primaryExpr -> conversion .)
    EQ              reduce using rule 66 (primaryExpr -> conversion .)
    ,               reduce using rule 66 (primaryExpr -> conversion .)
    NEWL            reduce using rule 66 (primaryExpr -> conversion .)
    ;               reduce using rule 66 (primaryExpr -> conversion .)
    )               reduce using rule 66 (primaryExpr -> conversion .)
    }               reduce using rule 66 (primaryExpr -> conversion .)


state 34

    (67) primaryExpr -> operand .
    (               reduce using rule 67 (primaryExpr -> operand .)
    LOGIC_AND       reduce using rule 67 (primaryExpr -> operand .)
    LOGIC_OR        reduce using rule 67 (primaryExpr -> operand .)
    SHR             reduce using rule 67 (primaryExpr -> operand .)
    SHL             reduce using rule 67 (primaryExpr -> operand .)
    AND             reduce using rule 67 (primaryExpr -> operand .)
    MOD             reduce using rule 67 (primaryExpr -> operand .)
    DIV             reduce using rule 67 (primaryExpr -> operand .)
    STAR            reduce using rule 67 (primaryExpr -> operand .)
    XOR             reduce using rule 67 (primaryExpr -> operand .)
    OR              reduce using rule 67 (primaryExpr -> operand .)
    MINUS           reduce using rule 67 (primaryExpr -> operand .)
    PLUS            reduce using rule 67 (primaryExpr -> operand .)
    GE              reduce using rule 67 (primaryExpr -> operand .)
    GT              reduce using rule 67 (primaryExpr -> operand .)
    LE              reduce using rule 67 (primaryExpr -> operand .)
    LT              reduce using rule 67 (primaryExpr -> operand .)
    NE              reduce using rule 67 (primaryExpr -> operand .)
    EQ              reduce using rule 67 (primaryExpr -> operand .)
    ,               reduce using rule 67 (primaryExpr -> operand .)
    NEWL            reduce using rule 67 (primaryExpr -> operand .)
    ;               reduce using rule 67 (primaryExpr -> operand .)
    )               reduce using rule 67 (primaryExpr -> operand .)
    }               reduce using rule 67 (primaryExpr -> operand .)


state 35

    (74) conversion -> type_ . ( expression )
    (               shift and go to state 121


state 36

    (68) operand -> ( . expression )
    (61) expression -> . expression BINARY_OP unaryExpr
    (62) expression -> . unaryExpr
    (63) unaryExpr -> . UNARY_OP unaryExpr
    (64) unaryExpr -> . primaryExpr
    (145) UNARY_OP -> . AND
    (146) UNARY_OP -> . EXCLM
    (147) UNARY_OP -> . MINUS
    (65) primaryExpr -> . primaryExpr arguments
    (66) primaryExpr -> . conversion
    (67) primaryExpr -> . operand
    (74) conversion -> . type_ ( expression )
    (68) operand -> . ( expression )
    (69) operand -> . operandName
    (70) operand -> . literal
    (75) type_ -> . typeName
    (71) operandName -> . IDENTIFIER
    (72) literal -> . functionLit
    (73) literal -> . basicLit
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (42) functionLit -> . FN function_
    (94) basicLit -> . INT_LIT
    (95) basicLit -> . FLOAT_LIT
    (96) basicLit -> . DECIMAL_LIT EXPONENT
    (97) basicLit -> . FLOAT_LIT EXPONENT
    (98) basicLit -> . FALSE
    (99) basicLit -> . TRUE
    (100) basicLit -> . RUNE_LIT
    (101) basicLit -> . STRING_LIT
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    (105) INT_LIT -> . HEX_LIT
    (106) INT_LIT -> . OCTAL_LIT
    (107) INT_LIT -> . BINARY_LIT
    (108) INT_LIT -> . DECIMAL_LIT
    (102) FLOAT_LIT -> . . DECIMAL_LIT
    (103) FLOAT_LIT -> . DECIMAL_LIT .
    (104) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 30
    EXCLM           shift and go to state 31
    MINUS           shift and go to state 32
    (               shift and go to state 36
    IDENTIFIER      shift and go to state 24
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 46
    DECIMAL_LIT     shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    RUNE_LIT        shift and go to state 52
    STRING_LIT      shift and go to state 53
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67
    HEX_LIT         shift and go to state 68
    OCTAL_LIT       shift and go to state 69
    BINARY_LIT      shift and go to state 70
    .               shift and go to state 71

    expression                     shift and go to state 122
    unaryExpr                      shift and go to state 27
    UNARY_OP                       shift and go to state 28
    primaryExpr                    shift and go to state 29
    conversion                     shift and go to state 33
    operand                        shift and go to state 34
    type_                          shift and go to state 35
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 47
    FLOAT_LIT                      shift and go to state 48

state 37

    (69) operand -> operandName .
    (               reduce using rule 69 (operand -> operandName .)
    LOGIC_AND       reduce using rule 69 (operand -> operandName .)
    LOGIC_OR        reduce using rule 69 (operand -> operandName .)
    SHR             reduce using rule 69 (operand -> operandName .)
    SHL             reduce using rule 69 (operand -> operandName .)
    AND             reduce using rule 69 (operand -> operandName .)
    MOD             reduce using rule 69 (operand -> operandName .)
    DIV             reduce using rule 69 (operand -> operandName .)
    STAR            reduce using rule 69 (operand -> operandName .)
    XOR             reduce using rule 69 (operand -> operandName .)
    OR              reduce using rule 69 (operand -> operandName .)
    MINUS           reduce using rule 69 (operand -> operandName .)
    PLUS            reduce using rule 69 (operand -> operandName .)
    GE              reduce using rule 69 (operand -> operandName .)
    GT              reduce using rule 69 (operand -> operandName .)
    LE              reduce using rule 69 (operand -> operandName .)
    LT              reduce using rule 69 (operand -> operandName .)
    NE              reduce using rule 69 (operand -> operandName .)
    EQ              reduce using rule 69 (operand -> operandName .)
    ,               reduce using rule 69 (operand -> operandName .)
    NEWL            reduce using rule 69 (operand -> operandName .)
    ;               reduce using rule 69 (operand -> operandName .)
    )               reduce using rule 69 (operand -> operandName .)
    }               reduce using rule 69 (operand -> operandName .)


state 38

    (70) operand -> literal .
    (               reduce using rule 70 (operand -> literal .)
    LOGIC_AND       reduce using rule 70 (operand -> literal .)
    LOGIC_OR        reduce using rule 70 (operand -> literal .)
    SHR             reduce using rule 70 (operand -> literal .)
    SHL             reduce using rule 70 (operand -> literal .)
    AND             reduce using rule 70 (operand -> literal .)
    MOD             reduce using rule 70 (operand -> literal .)
    DIV             reduce using rule 70 (operand -> literal .)
    STAR            reduce using rule 70 (operand -> literal .)
    XOR             reduce using rule 70 (operand -> literal .)
    OR              reduce using rule 70 (operand -> literal .)
    MINUS           reduce using rule 70 (operand -> literal .)
    PLUS            reduce using rule 70 (operand -> literal .)
    GE              reduce using rule 70 (operand -> literal .)
    GT              reduce using rule 70 (operand -> literal .)
    LE              reduce using rule 70 (operand -> literal .)
    LT              reduce using rule 70 (operand -> literal .)
    NE              reduce using rule 70 (operand -> literal .)
    EQ              reduce using rule 70 (operand -> literal .)
    ,               reduce using rule 70 (operand -> literal .)
    NEWL            reduce using rule 70 (operand -> literal .)
    ;               reduce using rule 70 (operand -> literal .)
    )               reduce using rule 70 (operand -> literal .)
    }               reduce using rule 70 (operand -> literal .)


state 39

    (75) type_ -> typeName .
    (               reduce using rule 75 (type_ -> typeName .)
    ,               reduce using rule 75 (type_ -> typeName .)
    )               reduce using rule 75 (type_ -> typeName .)
    {               reduce using rule 75 (type_ -> typeName .)
    NEWL            reduce using rule 75 (type_ -> typeName .)
    ;               reduce using rule 75 (type_ -> typeName .)


state 40

    (72) literal -> functionLit .
    (               reduce using rule 72 (literal -> functionLit .)
    LOGIC_AND       reduce using rule 72 (literal -> functionLit .)
    LOGIC_OR        reduce using rule 72 (literal -> functionLit .)
    SHR             reduce using rule 72 (literal -> functionLit .)
    SHL             reduce using rule 72 (literal -> functionLit .)
    AND             reduce using rule 72 (literal -> functionLit .)
    MOD             reduce using rule 72 (literal -> functionLit .)
    DIV             reduce using rule 72 (literal -> functionLit .)
    STAR            reduce using rule 72 (literal -> functionLit .)
    XOR             reduce using rule 72 (literal -> functionLit .)
    OR              reduce using rule 72 (literal -> functionLit .)
    MINUS           reduce using rule 72 (literal -> functionLit .)
    PLUS            reduce using rule 72 (literal -> functionLit .)
    GE              reduce using rule 72 (literal -> functionLit .)
    GT              reduce using rule 72 (literal -> functionLit .)
    LE              reduce using rule 72 (literal -> functionLit .)
    LT              reduce using rule 72 (literal -> functionLit .)
    NE              reduce using rule 72 (literal -> functionLit .)
    EQ              reduce using rule 72 (literal -> functionLit .)
    ,               reduce using rule 72 (literal -> functionLit .)
    NEWL            reduce using rule 72 (literal -> functionLit .)
    ;               reduce using rule 72 (literal -> functionLit .)
    )               reduce using rule 72 (literal -> functionLit .)
    }               reduce using rule 72 (literal -> functionLit .)


state 41

    (73) literal -> basicLit .
    (               reduce using rule 73 (literal -> basicLit .)
    LOGIC_AND       reduce using rule 73 (literal -> basicLit .)
    LOGIC_OR        reduce using rule 73 (literal -> basicLit .)
    SHR             reduce using rule 73 (literal -> basicLit .)
    SHL             reduce using rule 73 (literal -> basicLit .)
    AND             reduce using rule 73 (literal -> basicLit .)
    MOD             reduce using rule 73 (literal -> basicLit .)
    DIV             reduce using rule 73 (literal -> basicLit .)
    STAR            reduce using rule 73 (literal -> basicLit .)
    XOR             reduce using rule 73 (literal -> basicLit .)
    OR              reduce using rule 73 (literal -> basicLit .)
    MINUS           reduce using rule 73 (literal -> basicLit .)
    PLUS            reduce using rule 73 (literal -> basicLit .)
    GE              reduce using rule 73 (literal -> basicLit .)
    GT              reduce using rule 73 (literal -> basicLit .)
    LE              reduce using rule 73 (literal -> basicLit .)
    LT              reduce using rule 73 (literal -> basicLit .)
    NE              reduce using rule 73 (literal -> basicLit .)
    EQ              reduce using rule 73 (literal -> basicLit .)
    ,               reduce using rule 73 (literal -> basicLit .)
    NEWL            reduce using rule 73 (literal -> basicLit .)
    ;               reduce using rule 73 (literal -> basicLit .)
    )               reduce using rule 73 (literal -> basicLit .)
    }               reduce using rule 73 (literal -> basicLit .)


state 42

    (76) typeName -> numericType .
    (               reduce using rule 76 (typeName -> numericType .)
    ,               reduce using rule 76 (typeName -> numericType .)
    )               reduce using rule 76 (typeName -> numericType .)
    {               reduce using rule 76 (typeName -> numericType .)
    NEWL            reduce using rule 76 (typeName -> numericType .)
    ;               reduce using rule 76 (typeName -> numericType .)


state 43

    (77) typeName -> STRING .
    (               reduce using rule 77 (typeName -> STRING .)
    ,               reduce using rule 77 (typeName -> STRING .)
    )               reduce using rule 77 (typeName -> STRING .)
    {               reduce using rule 77 (typeName -> STRING .)
    NEWL            reduce using rule 77 (typeName -> STRING .)
    ;               reduce using rule 77 (typeName -> STRING .)


state 44

    (78) typeName -> BOOL .
    (               reduce using rule 78 (typeName -> BOOL .)
    ,               reduce using rule 78 (typeName -> BOOL .)
    )               reduce using rule 78 (typeName -> BOOL .)
    {               reduce using rule 78 (typeName -> BOOL .)
    NEWL            reduce using rule 78 (typeName -> BOOL .)
    ;               reduce using rule 78 (typeName -> BOOL .)


state 45

    (79) typeName -> RUNE .
    (               reduce using rule 79 (typeName -> RUNE .)
    ,               reduce using rule 79 (typeName -> RUNE .)
    )               reduce using rule 79 (typeName -> RUNE .)
    {               reduce using rule 79 (typeName -> RUNE .)
    NEWL            reduce using rule 79 (typeName -> RUNE .)
    ;               reduce using rule 79 (typeName -> RUNE .)


state 46

    (42) functionLit -> FN . function_
    (30) function_ -> . signature block
    (31) signature -> . parameters
    (32) signature -> . parameters result
    (35) parameters -> . ( parameterList , )
    (36) parameters -> . ( parameterList )
    (37) parameters -> . ( )
    (               shift and go to state 126

    function_                      shift and go to state 123
    signature                      shift and go to state 124
    parameters                     shift and go to state 125

state 47

    (94) basicLit -> INT_LIT .
    (               reduce using rule 94 (basicLit -> INT_LIT .)
    LOGIC_AND       reduce using rule 94 (basicLit -> INT_LIT .)
    LOGIC_OR        reduce using rule 94 (basicLit -> INT_LIT .)
    SHR             reduce using rule 94 (basicLit -> INT_LIT .)
    SHL             reduce using rule 94 (basicLit -> INT_LIT .)
    AND             reduce using rule 94 (basicLit -> INT_LIT .)
    MOD             reduce using rule 94 (basicLit -> INT_LIT .)
    DIV             reduce using rule 94 (basicLit -> INT_LIT .)
    STAR            reduce using rule 94 (basicLit -> INT_LIT .)
    XOR             reduce using rule 94 (basicLit -> INT_LIT .)
    OR              reduce using rule 94 (basicLit -> INT_LIT .)
    MINUS           reduce using rule 94 (basicLit -> INT_LIT .)
    PLUS            reduce using rule 94 (basicLit -> INT_LIT .)
    GE              reduce using rule 94 (basicLit -> INT_LIT .)
    GT              reduce using rule 94 (basicLit -> INT_LIT .)
    LE              reduce using rule 94 (basicLit -> INT_LIT .)
    LT              reduce using rule 94 (basicLit -> INT_LIT .)
    NE              reduce using rule 94 (basicLit -> INT_LIT .)
    EQ              reduce using rule 94 (basicLit -> INT_LIT .)
    ,               reduce using rule 94 (basicLit -> INT_LIT .)
    NEWL            reduce using rule 94 (basicLit -> INT_LIT .)
    ;               reduce using rule 94 (basicLit -> INT_LIT .)
    )               reduce using rule 94 (basicLit -> INT_LIT .)
    }               reduce using rule 94 (basicLit -> INT_LIT .)


state 48

    (95) basicLit -> FLOAT_LIT .
    (97) basicLit -> FLOAT_LIT . EXPONENT
    (               reduce using rule 95 (basicLit -> FLOAT_LIT .)
    LOGIC_AND       reduce using rule 95 (basicLit -> FLOAT_LIT .)
    LOGIC_OR        reduce using rule 95 (basicLit -> FLOAT_LIT .)
    SHR             reduce using rule 95 (basicLit -> FLOAT_LIT .)
    SHL             reduce using rule 95 (basicLit -> FLOAT_LIT .)
    AND             reduce using rule 95 (basicLit -> FLOAT_LIT .)
    MOD             reduce using rule 95 (basicLit -> FLOAT_LIT .)
    DIV             reduce using rule 95 (basicLit -> FLOAT_LIT .)
    STAR            reduce using rule 95 (basicLit -> FLOAT_LIT .)
    XOR             reduce using rule 95 (basicLit -> FLOAT_LIT .)
    OR              reduce using rule 95 (basicLit -> FLOAT_LIT .)
    MINUS           reduce using rule 95 (basicLit -> FLOAT_LIT .)
    PLUS            reduce using rule 95 (basicLit -> FLOAT_LIT .)
    GE              reduce using rule 95 (basicLit -> FLOAT_LIT .)
    GT              reduce using rule 95 (basicLit -> FLOAT_LIT .)
    LE              reduce using rule 95 (basicLit -> FLOAT_LIT .)
    LT              reduce using rule 95 (basicLit -> FLOAT_LIT .)
    NE              reduce using rule 95 (basicLit -> FLOAT_LIT .)
    EQ              reduce using rule 95 (basicLit -> FLOAT_LIT .)
    ,               reduce using rule 95 (basicLit -> FLOAT_LIT .)
    NEWL            reduce using rule 95 (basicLit -> FLOAT_LIT .)
    ;               reduce using rule 95 (basicLit -> FLOAT_LIT .)
    )               reduce using rule 95 (basicLit -> FLOAT_LIT .)
    }               reduce using rule 95 (basicLit -> FLOAT_LIT .)
    EXPONENT        shift and go to state 127


state 49

    (96) basicLit -> DECIMAL_LIT . EXPONENT
    (108) INT_LIT -> DECIMAL_LIT .
    (103) FLOAT_LIT -> DECIMAL_LIT . .
    (104) FLOAT_LIT -> DECIMAL_LIT . . DECIMAL_LIT
    EXPONENT        shift and go to state 128
    (               reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    SHR             reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    SHL             reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    AND             reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    MOD             reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    DIV             reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    STAR            reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    XOR             reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    OR              reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    MINUS           reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    PLUS            reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    GE              reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    GT              reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    LE              reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    LT              reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    NE              reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    EQ              reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    ,               reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    NEWL            reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    ;               reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    )               reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    }               reduce using rule 108 (INT_LIT -> DECIMAL_LIT .)
    .               shift and go to state 129


state 50

    (98) basicLit -> FALSE .
    (               reduce using rule 98 (basicLit -> FALSE .)
    LOGIC_AND       reduce using rule 98 (basicLit -> FALSE .)
    LOGIC_OR        reduce using rule 98 (basicLit -> FALSE .)
    SHR             reduce using rule 98 (basicLit -> FALSE .)
    SHL             reduce using rule 98 (basicLit -> FALSE .)
    AND             reduce using rule 98 (basicLit -> FALSE .)
    MOD             reduce using rule 98 (basicLit -> FALSE .)
    DIV             reduce using rule 98 (basicLit -> FALSE .)
    STAR            reduce using rule 98 (basicLit -> FALSE .)
    XOR             reduce using rule 98 (basicLit -> FALSE .)
    OR              reduce using rule 98 (basicLit -> FALSE .)
    MINUS           reduce using rule 98 (basicLit -> FALSE .)
    PLUS            reduce using rule 98 (basicLit -> FALSE .)
    GE              reduce using rule 98 (basicLit -> FALSE .)
    GT              reduce using rule 98 (basicLit -> FALSE .)
    LE              reduce using rule 98 (basicLit -> FALSE .)
    LT              reduce using rule 98 (basicLit -> FALSE .)
    NE              reduce using rule 98 (basicLit -> FALSE .)
    EQ              reduce using rule 98 (basicLit -> FALSE .)
    ,               reduce using rule 98 (basicLit -> FALSE .)
    NEWL            reduce using rule 98 (basicLit -> FALSE .)
    ;               reduce using rule 98 (basicLit -> FALSE .)
    )               reduce using rule 98 (basicLit -> FALSE .)
    }               reduce using rule 98 (basicLit -> FALSE .)


state 51

    (99) basicLit -> TRUE .
    (               reduce using rule 99 (basicLit -> TRUE .)
    LOGIC_AND       reduce using rule 99 (basicLit -> TRUE .)
    LOGIC_OR        reduce using rule 99 (basicLit -> TRUE .)
    SHR             reduce using rule 99 (basicLit -> TRUE .)
    SHL             reduce using rule 99 (basicLit -> TRUE .)
    AND             reduce using rule 99 (basicLit -> TRUE .)
    MOD             reduce using rule 99 (basicLit -> TRUE .)
    DIV             reduce using rule 99 (basicLit -> TRUE .)
    STAR            reduce using rule 99 (basicLit -> TRUE .)
    XOR             reduce using rule 99 (basicLit -> TRUE .)
    OR              reduce using rule 99 (basicLit -> TRUE .)
    MINUS           reduce using rule 99 (basicLit -> TRUE .)
    PLUS            reduce using rule 99 (basicLit -> TRUE .)
    GE              reduce using rule 99 (basicLit -> TRUE .)
    GT              reduce using rule 99 (basicLit -> TRUE .)
    LE              reduce using rule 99 (basicLit -> TRUE .)
    LT              reduce using rule 99 (basicLit -> TRUE .)
    NE              reduce using rule 99 (basicLit -> TRUE .)
    EQ              reduce using rule 99 (basicLit -> TRUE .)
    ,               reduce using rule 99 (basicLit -> TRUE .)
    NEWL            reduce using rule 99 (basicLit -> TRUE .)
    ;               reduce using rule 99 (basicLit -> TRUE .)
    )               reduce using rule 99 (basicLit -> TRUE .)
    }               reduce using rule 99 (basicLit -> TRUE .)


state 52

    (100) basicLit -> RUNE_LIT .
    (               reduce using rule 100 (basicLit -> RUNE_LIT .)
    LOGIC_AND       reduce using rule 100 (basicLit -> RUNE_LIT .)
    LOGIC_OR        reduce using rule 100 (basicLit -> RUNE_LIT .)
    SHR             reduce using rule 100 (basicLit -> RUNE_LIT .)
    SHL             reduce using rule 100 (basicLit -> RUNE_LIT .)
    AND             reduce using rule 100 (basicLit -> RUNE_LIT .)
    MOD             reduce using rule 100 (basicLit -> RUNE_LIT .)
    DIV             reduce using rule 100 (basicLit -> RUNE_LIT .)
    STAR            reduce using rule 100 (basicLit -> RUNE_LIT .)
    XOR             reduce using rule 100 (basicLit -> RUNE_LIT .)
    OR              reduce using rule 100 (basicLit -> RUNE_LIT .)
    MINUS           reduce using rule 100 (basicLit -> RUNE_LIT .)
    PLUS            reduce using rule 100 (basicLit -> RUNE_LIT .)
    GE              reduce using rule 100 (basicLit -> RUNE_LIT .)
    GT              reduce using rule 100 (basicLit -> RUNE_LIT .)
    LE              reduce using rule 100 (basicLit -> RUNE_LIT .)
    LT              reduce using rule 100 (basicLit -> RUNE_LIT .)
    NE              reduce using rule 100 (basicLit -> RUNE_LIT .)
    EQ              reduce using rule 100 (basicLit -> RUNE_LIT .)
    ,               reduce using rule 100 (basicLit -> RUNE_LIT .)
    NEWL            reduce using rule 100 (basicLit -> RUNE_LIT .)
    ;               reduce using rule 100 (basicLit -> RUNE_LIT .)
    )               reduce using rule 100 (basicLit -> RUNE_LIT .)
    }               reduce using rule 100 (basicLit -> RUNE_LIT .)


state 53

    (101) basicLit -> STRING_LIT .
    (               reduce using rule 101 (basicLit -> STRING_LIT .)
    LOGIC_AND       reduce using rule 101 (basicLit -> STRING_LIT .)
    LOGIC_OR        reduce using rule 101 (basicLit -> STRING_LIT .)
    SHR             reduce using rule 101 (basicLit -> STRING_LIT .)
    SHL             reduce using rule 101 (basicLit -> STRING_LIT .)
    AND             reduce using rule 101 (basicLit -> STRING_LIT .)
    MOD             reduce using rule 101 (basicLit -> STRING_LIT .)
    DIV             reduce using rule 101 (basicLit -> STRING_LIT .)
    STAR            reduce using rule 101 (basicLit -> STRING_LIT .)
    XOR             reduce using rule 101 (basicLit -> STRING_LIT .)
    OR              reduce using rule 101 (basicLit -> STRING_LIT .)
    MINUS           reduce using rule 101 (basicLit -> STRING_LIT .)
    PLUS            reduce using rule 101 (basicLit -> STRING_LIT .)
    GE              reduce using rule 101 (basicLit -> STRING_LIT .)
    GT              reduce using rule 101 (basicLit -> STRING_LIT .)
    LE              reduce using rule 101 (basicLit -> STRING_LIT .)
    LT              reduce using rule 101 (basicLit -> STRING_LIT .)
    NE              reduce using rule 101 (basicLit -> STRING_LIT .)
    EQ              reduce using rule 101 (basicLit -> STRING_LIT .)
    ,               reduce using rule 101 (basicLit -> STRING_LIT .)
    NEWL            reduce using rule 101 (basicLit -> STRING_LIT .)
    ;               reduce using rule 101 (basicLit -> STRING_LIT .)
    )               reduce using rule 101 (basicLit -> STRING_LIT .)
    }               reduce using rule 101 (basicLit -> STRING_LIT .)


state 54

    (80) numericType -> F32 .
    (               reduce using rule 80 (numericType -> F32 .)
    ,               reduce using rule 80 (numericType -> F32 .)
    )               reduce using rule 80 (numericType -> F32 .)
    {               reduce using rule 80 (numericType -> F32 .)
    NEWL            reduce using rule 80 (numericType -> F32 .)
    ;               reduce using rule 80 (numericType -> F32 .)


state 55

    (81) numericType -> F64 .
    (               reduce using rule 81 (numericType -> F64 .)
    ,               reduce using rule 81 (numericType -> F64 .)
    )               reduce using rule 81 (numericType -> F64 .)
    {               reduce using rule 81 (numericType -> F64 .)
    NEWL            reduce using rule 81 (numericType -> F64 .)
    ;               reduce using rule 81 (numericType -> F64 .)


state 56

    (82) numericType -> INT .
    (               reduce using rule 82 (numericType -> INT .)
    ,               reduce using rule 82 (numericType -> INT .)
    )               reduce using rule 82 (numericType -> INT .)
    {               reduce using rule 82 (numericType -> INT .)
    NEWL            reduce using rule 82 (numericType -> INT .)
    ;               reduce using rule 82 (numericType -> INT .)


state 57

    (83) numericType -> ISIZE .
    (               reduce using rule 83 (numericType -> ISIZE .)
    ,               reduce using rule 83 (numericType -> ISIZE .)
    )               reduce using rule 83 (numericType -> ISIZE .)
    {               reduce using rule 83 (numericType -> ISIZE .)
    NEWL            reduce using rule 83 (numericType -> ISIZE .)
    ;               reduce using rule 83 (numericType -> ISIZE .)


state 58

    (84) numericType -> I64 .
    (               reduce using rule 84 (numericType -> I64 .)
    ,               reduce using rule 84 (numericType -> I64 .)
    )               reduce using rule 84 (numericType -> I64 .)
    {               reduce using rule 84 (numericType -> I64 .)
    NEWL            reduce using rule 84 (numericType -> I64 .)
    ;               reduce using rule 84 (numericType -> I64 .)


state 59

    (85) numericType -> I32 .
    (               reduce using rule 85 (numericType -> I32 .)
    ,               reduce using rule 85 (numericType -> I32 .)
    )               reduce using rule 85 (numericType -> I32 .)
    {               reduce using rule 85 (numericType -> I32 .)
    NEWL            reduce using rule 85 (numericType -> I32 .)
    ;               reduce using rule 85 (numericType -> I32 .)


state 60

    (86) numericType -> I16 .
    (               reduce using rule 86 (numericType -> I16 .)
    ,               reduce using rule 86 (numericType -> I16 .)
    )               reduce using rule 86 (numericType -> I16 .)
    {               reduce using rule 86 (numericType -> I16 .)
    NEWL            reduce using rule 86 (numericType -> I16 .)
    ;               reduce using rule 86 (numericType -> I16 .)


state 61

    (87) numericType -> I8 .
    (               reduce using rule 87 (numericType -> I8 .)
    ,               reduce using rule 87 (numericType -> I8 .)
    )               reduce using rule 87 (numericType -> I8 .)
    {               reduce using rule 87 (numericType -> I8 .)
    NEWL            reduce using rule 87 (numericType -> I8 .)
    ;               reduce using rule 87 (numericType -> I8 .)


state 62

    (88) numericType -> UINT .
    (               reduce using rule 88 (numericType -> UINT .)
    ,               reduce using rule 88 (numericType -> UINT .)
    )               reduce using rule 88 (numericType -> UINT .)
    {               reduce using rule 88 (numericType -> UINT .)
    NEWL            reduce using rule 88 (numericType -> UINT .)
    ;               reduce using rule 88 (numericType -> UINT .)


state 63

    (89) numericType -> USIZE .
    (               reduce using rule 89 (numericType -> USIZE .)
    ,               reduce using rule 89 (numericType -> USIZE .)
    )               reduce using rule 89 (numericType -> USIZE .)
    {               reduce using rule 89 (numericType -> USIZE .)
    NEWL            reduce using rule 89 (numericType -> USIZE .)
    ;               reduce using rule 89 (numericType -> USIZE .)


state 64

    (90) numericType -> U64 .
    (               reduce using rule 90 (numericType -> U64 .)
    ,               reduce using rule 90 (numericType -> U64 .)
    )               reduce using rule 90 (numericType -> U64 .)
    {               reduce using rule 90 (numericType -> U64 .)
    NEWL            reduce using rule 90 (numericType -> U64 .)
    ;               reduce using rule 90 (numericType -> U64 .)


state 65

    (91) numericType -> U32 .
    (               reduce using rule 91 (numericType -> U32 .)
    ,               reduce using rule 91 (numericType -> U32 .)
    )               reduce using rule 91 (numericType -> U32 .)
    {               reduce using rule 91 (numericType -> U32 .)
    NEWL            reduce using rule 91 (numericType -> U32 .)
    ;               reduce using rule 91 (numericType -> U32 .)


state 66

    (92) numericType -> U16 .
    (               reduce using rule 92 (numericType -> U16 .)
    ,               reduce using rule 92 (numericType -> U16 .)
    )               reduce using rule 92 (numericType -> U16 .)
    {               reduce using rule 92 (numericType -> U16 .)
    NEWL            reduce using rule 92 (numericType -> U16 .)
    ;               reduce using rule 92 (numericType -> U16 .)


state 67

    (93) numericType -> U8 .
    (               reduce using rule 93 (numericType -> U8 .)
    ,               reduce using rule 93 (numericType -> U8 .)
    )               reduce using rule 93 (numericType -> U8 .)
    {               reduce using rule 93 (numericType -> U8 .)
    NEWL            reduce using rule 93 (numericType -> U8 .)
    ;               reduce using rule 93 (numericType -> U8 .)


state 68

    (105) INT_LIT -> HEX_LIT .
    (               reduce using rule 105 (INT_LIT -> HEX_LIT .)
    LOGIC_AND       reduce using rule 105 (INT_LIT -> HEX_LIT .)
    LOGIC_OR        reduce using rule 105 (INT_LIT -> HEX_LIT .)
    SHR             reduce using rule 105 (INT_LIT -> HEX_LIT .)
    SHL             reduce using rule 105 (INT_LIT -> HEX_LIT .)
    AND             reduce using rule 105 (INT_LIT -> HEX_LIT .)
    MOD             reduce using rule 105 (INT_LIT -> HEX_LIT .)
    DIV             reduce using rule 105 (INT_LIT -> HEX_LIT .)
    STAR            reduce using rule 105 (INT_LIT -> HEX_LIT .)
    XOR             reduce using rule 105 (INT_LIT -> HEX_LIT .)
    OR              reduce using rule 105 (INT_LIT -> HEX_LIT .)
    MINUS           reduce using rule 105 (INT_LIT -> HEX_LIT .)
    PLUS            reduce using rule 105 (INT_LIT -> HEX_LIT .)
    GE              reduce using rule 105 (INT_LIT -> HEX_LIT .)
    GT              reduce using rule 105 (INT_LIT -> HEX_LIT .)
    LE              reduce using rule 105 (INT_LIT -> HEX_LIT .)
    LT              reduce using rule 105 (INT_LIT -> HEX_LIT .)
    NE              reduce using rule 105 (INT_LIT -> HEX_LIT .)
    EQ              reduce using rule 105 (INT_LIT -> HEX_LIT .)
    ,               reduce using rule 105 (INT_LIT -> HEX_LIT .)
    NEWL            reduce using rule 105 (INT_LIT -> HEX_LIT .)
    ;               reduce using rule 105 (INT_LIT -> HEX_LIT .)
    )               reduce using rule 105 (INT_LIT -> HEX_LIT .)
    }               reduce using rule 105 (INT_LIT -> HEX_LIT .)


state 69

    (106) INT_LIT -> OCTAL_LIT .
    (               reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    LOGIC_AND       reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    LOGIC_OR        reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    SHR             reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    SHL             reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    AND             reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    MOD             reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    DIV             reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    STAR            reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    XOR             reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    OR              reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    MINUS           reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    PLUS            reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    GE              reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    GT              reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    LE              reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    LT              reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    NE              reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    EQ              reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    ,               reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    NEWL            reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    ;               reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    )               reduce using rule 106 (INT_LIT -> OCTAL_LIT .)
    }               reduce using rule 106 (INT_LIT -> OCTAL_LIT .)


state 70

    (107) INT_LIT -> BINARY_LIT .
    (               reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    LOGIC_AND       reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    LOGIC_OR        reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    SHR             reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    SHL             reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    AND             reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    MOD             reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    DIV             reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    STAR            reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    XOR             reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    OR              reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    MINUS           reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    PLUS            reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    GE              reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    GT              reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    LE              reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    LT              reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    NE              reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    EQ              reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    ,               reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    NEWL            reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    ;               reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    )               reduce using rule 107 (INT_LIT -> BINARY_LIT .)
    }               reduce using rule 107 (INT_LIT -> BINARY_LIT .)


state 71

    (102) FLOAT_LIT -> . . DECIMAL_LIT
    DECIMAL_LIT     shift and go to state 130


state 72

    (1) sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls . orphanStmtList
    (20) topLevelDecls -> topLevelDecls . topLevelDecl eos
    (22) orphanStmtList -> . statementList eos
    (23) topLevelDecl -> . functionDecl
    (45) statementList -> . statementList eos statement
    (46) statementList -> . statement
    (28) functionDecl -> . FN IDENTIFIER signature
    (29) functionDecl -> . FN IDENTIFIER function_
    (48) statement -> . simpleStmt
    (49) statement -> . declaration
    (50) simpleStmt -> . assignment
    (51) simpleStmt -> . expressionStmt
    (24) declaration -> . varDecl
    (53) assignment -> . identifierList assign_op expressionList
    (52) expressionStmt -> . expression
    (25) varDecl -> . identifierList DECL_ASGN expressionList
    (26) identifierList -> . identifierList , IDENTIFIER
    (27) identifierList -> . IDENTIFIER
    (61) expression -> . expression BINARY_OP unaryExpr
    (62) expression -> . unaryExpr
    (63) unaryExpr -> . UNARY_OP unaryExpr
    (64) unaryExpr -> . primaryExpr
    (145) UNARY_OP -> . AND
    (146) UNARY_OP -> . EXCLM
    (147) UNARY_OP -> . MINUS
    (65) primaryExpr -> . primaryExpr arguments
    (66) primaryExpr -> . conversion
    (67) primaryExpr -> . operand
    (74) conversion -> . type_ ( expression )
    (68) operand -> . ( expression )
    (69) operand -> . operandName
    (70) operand -> . literal
    (75) type_ -> . typeName
    (71) operandName -> . IDENTIFIER
    (72) literal -> . functionLit
    (73) literal -> . basicLit
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (42) functionLit -> . FN function_
    (94) basicLit -> . INT_LIT
    (95) basicLit -> . FLOAT_LIT
    (96) basicLit -> . DECIMAL_LIT EXPONENT
    (97) basicLit -> . FLOAT_LIT EXPONENT
    (98) basicLit -> . FALSE
    (99) basicLit -> . TRUE
    (100) basicLit -> . RUNE_LIT
    (101) basicLit -> . STRING_LIT
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    (105) INT_LIT -> . HEX_LIT
    (106) INT_LIT -> . OCTAL_LIT
    (107) INT_LIT -> . BINARY_LIT
    (108) INT_LIT -> . DECIMAL_LIT
    (102) FLOAT_LIT -> . . DECIMAL_LIT
    (103) FLOAT_LIT -> . DECIMAL_LIT .
    (104) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    FN              shift and go to state 79
    IDENTIFIER      shift and go to state 80
    AND             shift and go to state 30
    EXCLM           shift and go to state 31
    MINUS           shift and go to state 32
    (               shift and go to state 36
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    DECIMAL_LIT     shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    RUNE_LIT        shift and go to state 52
    STRING_LIT      shift and go to state 53
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67
    HEX_LIT         shift and go to state 68
    OCTAL_LIT       shift and go to state 69
    BINARY_LIT      shift and go to state 70
    .               shift and go to state 71

    orphanStmtList                 shift and go to state 131
    topLevelDecl                   shift and go to state 132
    statementList                  shift and go to state 76
    functionDecl                   shift and go to state 77
    statement                      shift and go to state 78
    simpleStmt                     shift and go to state 81
    declaration                    shift and go to state 82
    assignment                     shift and go to state 83
    expressionStmt                 shift and go to state 84
    varDecl                        shift and go to state 85
    identifierList                 shift and go to state 86
    expression                     shift and go to state 87
    unaryExpr                      shift and go to state 27
    UNARY_OP                       shift and go to state 28
    primaryExpr                    shift and go to state 29
    conversion                     shift and go to state 33
    operand                        shift and go to state 34
    type_                          shift and go to state 35
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 47
    FLOAT_LIT                      shift and go to state 48

state 73

    (2) sourceFile -> cPreprocessors moduleClause importDecls orphanStmtList .
    $end            reduce using rule 2 (sourceFile -> cPreprocessors moduleClause importDecls orphanStmtList .)


state 74

    (11) importDecls -> importDecls importDecl . eos
    (109) eos -> . eos NEWL
    (110) eos -> . NEWL
    (111) eos -> . eos ;
    (112) eos -> . ;
    NEWL            shift and go to state 11
    ;               shift and go to state 12

    eos                            shift and go to state 133

state 75

    (21) topLevelDecls -> topLevelDecl . eos
    (109) eos -> . eos NEWL
    (110) eos -> . NEWL
    (111) eos -> . eos ;
    (112) eos -> . ;
    NEWL            shift and go to state 11
    ;               shift and go to state 12

    eos                            shift and go to state 134

state 76

    (22) orphanStmtList -> statementList . eos
    (45) statementList -> statementList . eos statement
    (109) eos -> . eos NEWL
    (110) eos -> . NEWL
    (111) eos -> . eos ;
    (112) eos -> . ;
    NEWL            shift and go to state 11
    ;               shift and go to state 12

    eos                            shift and go to state 135

state 77

    (23) topLevelDecl -> functionDecl .
    NEWL            reduce using rule 23 (topLevelDecl -> functionDecl .)
    ;               reduce using rule 23 (topLevelDecl -> functionDecl .)


state 78

    (46) statementList -> statement .
    NEWL            reduce using rule 46 (statementList -> statement .)
    ;               reduce using rule 46 (statementList -> statement .)
    }               reduce using rule 46 (statementList -> statement .)


state 79

    (28) functionDecl -> FN . IDENTIFIER signature
    (29) functionDecl -> FN . IDENTIFIER function_
    (42) functionLit -> FN . function_
    (30) function_ -> . signature block
    (31) signature -> . parameters
    (32) signature -> . parameters result
    (35) parameters -> . ( parameterList , )
    (36) parameters -> . ( parameterList )
    (37) parameters -> . ( )
    IDENTIFIER      shift and go to state 136
    (               shift and go to state 126

    signature                      shift and go to state 124
    function_                      shift and go to state 123
    parameters                     shift and go to state 125

state 80

    (27) identifierList -> IDENTIFIER .
    (71) operandName -> IDENTIFIER .
    DECL_ASGN       reduce using rule 27 (identifierList -> IDENTIFIER .)
    ,               reduce using rule 27 (identifierList -> IDENTIFIER .)
    SHR_ASGN        reduce using rule 27 (identifierList -> IDENTIFIER .)
    SHL_ASGN        reduce using rule 27 (identifierList -> IDENTIFIER .)
    MOD_ASGN        reduce using rule 27 (identifierList -> IDENTIFIER .)
    DIV_ASGN        reduce using rule 27 (identifierList -> IDENTIFIER .)
    OR_ASGN         reduce using rule 27 (identifierList -> IDENTIFIER .)
    AND_ASGN        reduce using rule 27 (identifierList -> IDENTIFIER .)
    STAR_ASGN       reduce using rule 27 (identifierList -> IDENTIFIER .)
    XOR_ASGN        reduce using rule 27 (identifierList -> IDENTIFIER .)
    MINUS_ASGN      reduce using rule 27 (identifierList -> IDENTIFIER .)
    PLUS_ASGN       reduce using rule 27 (identifierList -> IDENTIFIER .)
    ASSIGN          reduce using rule 27 (identifierList -> IDENTIFIER .)
    (               reduce using rule 71 (operandName -> IDENTIFIER .)
    LOGIC_AND       reduce using rule 71 (operandName -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 71 (operandName -> IDENTIFIER .)
    SHR             reduce using rule 71 (operandName -> IDENTIFIER .)
    SHL             reduce using rule 71 (operandName -> IDENTIFIER .)
    AND             reduce using rule 71 (operandName -> IDENTIFIER .)
    MOD             reduce using rule 71 (operandName -> IDENTIFIER .)
    DIV             reduce using rule 71 (operandName -> IDENTIFIER .)
    STAR            reduce using rule 71 (operandName -> IDENTIFIER .)
    XOR             reduce using rule 71 (operandName -> IDENTIFIER .)
    OR              reduce using rule 71 (operandName -> IDENTIFIER .)
    MINUS           reduce using rule 71 (operandName -> IDENTIFIER .)
    PLUS            reduce using rule 71 (operandName -> IDENTIFIER .)
    GE              reduce using rule 71 (operandName -> IDENTIFIER .)
    GT              reduce using rule 71 (operandName -> IDENTIFIER .)
    LE              reduce using rule 71 (operandName -> IDENTIFIER .)
    LT              reduce using rule 71 (operandName -> IDENTIFIER .)
    NE              reduce using rule 71 (operandName -> IDENTIFIER .)
    EQ              reduce using rule 71 (operandName -> IDENTIFIER .)
    NEWL            reduce using rule 71 (operandName -> IDENTIFIER .)
    ;               reduce using rule 71 (operandName -> IDENTIFIER .)
    }               reduce using rule 71 (operandName -> IDENTIFIER .)


state 81

    (48) statement -> simpleStmt .
    NEWL            reduce using rule 48 (statement -> simpleStmt .)
    ;               reduce using rule 48 (statement -> simpleStmt .)
    }               reduce using rule 48 (statement -> simpleStmt .)


state 82

    (49) statement -> declaration .
    NEWL            reduce using rule 49 (statement -> declaration .)
    ;               reduce using rule 49 (statement -> declaration .)
    }               reduce using rule 49 (statement -> declaration .)


state 83

    (50) simpleStmt -> assignment .
    NEWL            reduce using rule 50 (simpleStmt -> assignment .)
    ;               reduce using rule 50 (simpleStmt -> assignment .)
    }               reduce using rule 50 (simpleStmt -> assignment .)


state 84

    (51) simpleStmt -> expressionStmt .
    NEWL            reduce using rule 51 (simpleStmt -> expressionStmt .)
    ;               reduce using rule 51 (simpleStmt -> expressionStmt .)
    }               reduce using rule 51 (simpleStmt -> expressionStmt .)


state 85

    (24) declaration -> varDecl .
    NEWL            reduce using rule 24 (declaration -> varDecl .)
    ;               reduce using rule 24 (declaration -> varDecl .)
    }               reduce using rule 24 (declaration -> varDecl .)


state 86

    (53) assignment -> identifierList . assign_op expressionList
    (25) varDecl -> identifierList . DECL_ASGN expressionList
    (26) identifierList -> identifierList . , IDENTIFIER
    (113) assign_op -> . SHR_ASGN
    (114) assign_op -> . SHL_ASGN
    (115) assign_op -> . MOD_ASGN
    (116) assign_op -> . DIV_ASGN
    (117) assign_op -> . OR_ASGN
    (118) assign_op -> . AND_ASGN
    (119) assign_op -> . STAR_ASGN
    (120) assign_op -> . XOR_ASGN
    (121) assign_op -> . MINUS_ASGN
    (122) assign_op -> . PLUS_ASGN
    (123) assign_op -> . ASSIGN
    DECL_ASGN       shift and go to state 138
    ,               shift and go to state 139
    SHR_ASGN        shift and go to state 140
    SHL_ASGN        shift and go to state 141
    MOD_ASGN        shift and go to state 142
    DIV_ASGN        shift and go to state 143
    OR_ASGN         shift and go to state 144
    AND_ASGN        shift and go to state 145
    STAR_ASGN       shift and go to state 146
    XOR_ASGN        shift and go to state 147
    MINUS_ASGN      shift and go to state 148
    PLUS_ASGN       shift and go to state 149
    ASSIGN          shift and go to state 150

    assign_op                      shift and go to state 137

state 87

    (52) expressionStmt -> expression .
    (61) expression -> expression . BINARY_OP unaryExpr
    (124) BINARY_OP -> . MUL_OP
    (125) BINARY_OP -> . ADD_OP
    (126) BINARY_OP -> . REL_OP
    (127) BINARY_OP -> . LOGIC_AND
    (128) BINARY_OP -> . LOGIC_OR
    (139) MUL_OP -> . SHR
    (140) MUL_OP -> . SHL
    (141) MUL_OP -> . AND
    (142) MUL_OP -> . MOD
    (143) MUL_OP -> . DIV
    (144) MUL_OP -> . STAR
    (135) ADD_OP -> . XOR
    (136) ADD_OP -> . OR
    (137) ADD_OP -> . MINUS
    (138) ADD_OP -> . PLUS
    (129) REL_OP -> . GE
    (130) REL_OP -> . GT
    (131) REL_OP -> . LE
    (132) REL_OP -> . LT
    (133) REL_OP -> . NE
    (134) REL_OP -> . EQ
    NEWL            reduce using rule 52 (expressionStmt -> expression .)
    ;               reduce using rule 52 (expressionStmt -> expression .)
    }               reduce using rule 52 (expressionStmt -> expression .)
    LOGIC_AND       shift and go to state 100
    LOGIC_OR        shift and go to state 101
    SHR             shift and go to state 102
    SHL             shift and go to state 103
    AND             shift and go to state 104
    MOD             shift and go to state 105
    DIV             shift and go to state 106
    STAR            shift and go to state 107
    XOR             shift and go to state 108
    OR              shift and go to state 109
    MINUS           shift and go to state 110
    PLUS            shift and go to state 111
    GE              shift and go to state 112
    GT              shift and go to state 113
    LE              shift and go to state 114
    LT              shift and go to state 115
    NE              shift and go to state 116
    EQ              shift and go to state 117

    BINARY_OP                      shift and go to state 96
    MUL_OP                         shift and go to state 97
    ADD_OP                         shift and go to state 98
    REL_OP                         shift and go to state 99

state 88

    (12) importDecls -> importDecl eos .
    (109) eos -> eos . NEWL
    (111) eos -> eos . ;
    IMPORT          reduce using rule 12 (importDecls -> importDecl eos .)
    FN              reduce using rule 12 (importDecls -> importDecl eos .)
    IDENTIFIER      reduce using rule 12 (importDecls -> importDecl eos .)
    AND             reduce using rule 12 (importDecls -> importDecl eos .)
    EXCLM           reduce using rule 12 (importDecls -> importDecl eos .)
    MINUS           reduce using rule 12 (importDecls -> importDecl eos .)
    (               reduce using rule 12 (importDecls -> importDecl eos .)
    STRING          reduce using rule 12 (importDecls -> importDecl eos .)
    BOOL            reduce using rule 12 (importDecls -> importDecl eos .)
    RUNE            reduce using rule 12 (importDecls -> importDecl eos .)
    DECIMAL_LIT     reduce using rule 12 (importDecls -> importDecl eos .)
    FALSE           reduce using rule 12 (importDecls -> importDecl eos .)
    TRUE            reduce using rule 12 (importDecls -> importDecl eos .)
    RUNE_LIT        reduce using rule 12 (importDecls -> importDecl eos .)
    STRING_LIT      reduce using rule 12 (importDecls -> importDecl eos .)
    F32             reduce using rule 12 (importDecls -> importDecl eos .)
    F64             reduce using rule 12 (importDecls -> importDecl eos .)
    INT             reduce using rule 12 (importDecls -> importDecl eos .)
    ISIZE           reduce using rule 12 (importDecls -> importDecl eos .)
    I64             reduce using rule 12 (importDecls -> importDecl eos .)
    I32             reduce using rule 12 (importDecls -> importDecl eos .)
    I16             reduce using rule 12 (importDecls -> importDecl eos .)
    I8              reduce using rule 12 (importDecls -> importDecl eos .)
    UINT            reduce using rule 12 (importDecls -> importDecl eos .)
    USIZE           reduce using rule 12 (importDecls -> importDecl eos .)
    U64             reduce using rule 12 (importDecls -> importDecl eos .)
    U32             reduce using rule 12 (importDecls -> importDecl eos .)
    U16             reduce using rule 12 (importDecls -> importDecl eos .)
    U8              reduce using rule 12 (importDecls -> importDecl eos .)
    HEX_LIT         reduce using rule 12 (importDecls -> importDecl eos .)
    OCTAL_LIT       reduce using rule 12 (importDecls -> importDecl eos .)
    BINARY_LIT      reduce using rule 12 (importDecls -> importDecl eos .)
    .               reduce using rule 12 (importDecls -> importDecl eos .)
    NEWL            shift and go to state 22
    ;               shift and go to state 23


state 89

    (14) importDecl -> IMPORT importSpec .
    NEWL            reduce using rule 14 (importDecl -> IMPORT importSpec .)
    ;               reduce using rule 14 (importDecl -> IMPORT importSpec .)


state 90

    (15) importSpec -> importPath .
    NEWL            reduce using rule 15 (importSpec -> importPath .)
    ;               reduce using rule 15 (importSpec -> importPath .)


state 91

    (16) importSpec -> IDENTIFIER . importPath
    (19) importPath -> IDENTIFIER .
    (18) importPath -> . STRING_LIT
    (19) importPath -> . IDENTIFIER
    NEWL            reduce using rule 19 (importPath -> IDENTIFIER .)
    ;               reduce using rule 19 (importPath -> IDENTIFIER .)
    STRING_LIT      shift and go to state 93
    IDENTIFIER      shift and go to state 151

    importPath                     shift and go to state 152

state 92

    (17) importSpec -> . . importPath
    (18) importPath -> . STRING_LIT
    (19) importPath -> . IDENTIFIER
    STRING_LIT      shift and go to state 93
    IDENTIFIER      shift and go to state 151

    importPath                     shift and go to state 153

state 93

    (18) importPath -> STRING_LIT .
    NEWL            reduce using rule 18 (importPath -> STRING_LIT .)
    ;               reduce using rule 18 (importPath -> STRING_LIT .)


state 94

    (3) moduleClause -> MODULE IDENTIFIER eos .
    (109) eos -> eos . NEWL
    (111) eos -> eos . ;
    IMPORT          reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    FN              reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    IDENTIFIER      reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    AND             reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    EXCLM           reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    MINUS           reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    (               reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    STRING          reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    BOOL            reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    RUNE            reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    DECIMAL_LIT     reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    FALSE           reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    TRUE            reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    RUNE_LIT        reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    STRING_LIT      reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    F32             reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    F64             reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    INT             reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    ISIZE           reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    I64             reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    I32             reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    I16             reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    I8              reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    UINT            reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    USIZE           reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    U64             reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    U32             reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    U16             reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    U8              reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    HEX_LIT         reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    OCTAL_LIT       reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    BINARY_LIT      reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    .               reduce using rule 3 (moduleClause -> MODULE IDENTIFIER eos .)
    NEWL            shift and go to state 22
    ;               shift and go to state 23


state 95

    (43) expressionList -> expressionList , . expression
    (61) expression -> . expression BINARY_OP unaryExpr
    (62) expression -> . unaryExpr
    (63) unaryExpr -> . UNARY_OP unaryExpr
    (64) unaryExpr -> . primaryExpr
    (145) UNARY_OP -> . AND
    (146) UNARY_OP -> . EXCLM
    (147) UNARY_OP -> . MINUS
    (65) primaryExpr -> . primaryExpr arguments
    (66) primaryExpr -> . conversion
    (67) primaryExpr -> . operand
    (74) conversion -> . type_ ( expression )
    (68) operand -> . ( expression )
    (69) operand -> . operandName
    (70) operand -> . literal
    (75) type_ -> . typeName
    (71) operandName -> . IDENTIFIER
    (72) literal -> . functionLit
    (73) literal -> . basicLit
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (42) functionLit -> . FN function_
    (94) basicLit -> . INT_LIT
    (95) basicLit -> . FLOAT_LIT
    (96) basicLit -> . DECIMAL_LIT EXPONENT
    (97) basicLit -> . FLOAT_LIT EXPONENT
    (98) basicLit -> . FALSE
    (99) basicLit -> . TRUE
    (100) basicLit -> . RUNE_LIT
    (101) basicLit -> . STRING_LIT
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    (105) INT_LIT -> . HEX_LIT
    (106) INT_LIT -> . OCTAL_LIT
    (107) INT_LIT -> . BINARY_LIT
    (108) INT_LIT -> . DECIMAL_LIT
    (102) FLOAT_LIT -> . . DECIMAL_LIT
    (103) FLOAT_LIT -> . DECIMAL_LIT .
    (104) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 30
    EXCLM           shift and go to state 31
    MINUS           shift and go to state 32
    (               shift and go to state 36
    IDENTIFIER      shift and go to state 24
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 46
    DECIMAL_LIT     shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    RUNE_LIT        shift and go to state 52
    STRING_LIT      shift and go to state 53
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67
    HEX_LIT         shift and go to state 68
    OCTAL_LIT       shift and go to state 69
    BINARY_LIT      shift and go to state 70
    .               shift and go to state 71

    expression                     shift and go to state 154
    unaryExpr                      shift and go to state 27
    UNARY_OP                       shift and go to state 28
    primaryExpr                    shift and go to state 29
    conversion                     shift and go to state 33
    operand                        shift and go to state 34
    type_                          shift and go to state 35
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 47
    FLOAT_LIT                      shift and go to state 48

state 96

    (61) expression -> expression BINARY_OP . unaryExpr
    (63) unaryExpr -> . UNARY_OP unaryExpr
    (64) unaryExpr -> . primaryExpr
    (145) UNARY_OP -> . AND
    (146) UNARY_OP -> . EXCLM
    (147) UNARY_OP -> . MINUS
    (65) primaryExpr -> . primaryExpr arguments
    (66) primaryExpr -> . conversion
    (67) primaryExpr -> . operand
    (74) conversion -> . type_ ( expression )
    (68) operand -> . ( expression )
    (69) operand -> . operandName
    (70) operand -> . literal
    (75) type_ -> . typeName
    (71) operandName -> . IDENTIFIER
    (72) literal -> . functionLit
    (73) literal -> . basicLit
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (42) functionLit -> . FN function_
    (94) basicLit -> . INT_LIT
    (95) basicLit -> . FLOAT_LIT
    (96) basicLit -> . DECIMAL_LIT EXPONENT
    (97) basicLit -> . FLOAT_LIT EXPONENT
    (98) basicLit -> . FALSE
    (99) basicLit -> . TRUE
    (100) basicLit -> . RUNE_LIT
    (101) basicLit -> . STRING_LIT
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    (105) INT_LIT -> . HEX_LIT
    (106) INT_LIT -> . OCTAL_LIT
    (107) INT_LIT -> . BINARY_LIT
    (108) INT_LIT -> . DECIMAL_LIT
    (102) FLOAT_LIT -> . . DECIMAL_LIT
    (103) FLOAT_LIT -> . DECIMAL_LIT .
    (104) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 30
    EXCLM           shift and go to state 31
    MINUS           shift and go to state 32
    (               shift and go to state 36
    IDENTIFIER      shift and go to state 24
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 46
    DECIMAL_LIT     shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    RUNE_LIT        shift and go to state 52
    STRING_LIT      shift and go to state 53
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67
    HEX_LIT         shift and go to state 68
    OCTAL_LIT       shift and go to state 69
    BINARY_LIT      shift and go to state 70
    .               shift and go to state 71

    unaryExpr                      shift and go to state 155
    UNARY_OP                       shift and go to state 28
    primaryExpr                    shift and go to state 29
    conversion                     shift and go to state 33
    operand                        shift and go to state 34
    type_                          shift and go to state 35
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 47
    FLOAT_LIT                      shift and go to state 48

state 97

    (124) BINARY_OP -> MUL_OP .
    AND             reduce using rule 124 (BINARY_OP -> MUL_OP .)
    EXCLM           reduce using rule 124 (BINARY_OP -> MUL_OP .)
    MINUS           reduce using rule 124 (BINARY_OP -> MUL_OP .)
    (               reduce using rule 124 (BINARY_OP -> MUL_OP .)
    IDENTIFIER      reduce using rule 124 (BINARY_OP -> MUL_OP .)
    STRING          reduce using rule 124 (BINARY_OP -> MUL_OP .)
    BOOL            reduce using rule 124 (BINARY_OP -> MUL_OP .)
    RUNE            reduce using rule 124 (BINARY_OP -> MUL_OP .)
    FN              reduce using rule 124 (BINARY_OP -> MUL_OP .)
    DECIMAL_LIT     reduce using rule 124 (BINARY_OP -> MUL_OP .)
    FALSE           reduce using rule 124 (BINARY_OP -> MUL_OP .)
    TRUE            reduce using rule 124 (BINARY_OP -> MUL_OP .)
    RUNE_LIT        reduce using rule 124 (BINARY_OP -> MUL_OP .)
    STRING_LIT      reduce using rule 124 (BINARY_OP -> MUL_OP .)
    F32             reduce using rule 124 (BINARY_OP -> MUL_OP .)
    F64             reduce using rule 124 (BINARY_OP -> MUL_OP .)
    INT             reduce using rule 124 (BINARY_OP -> MUL_OP .)
    ISIZE           reduce using rule 124 (BINARY_OP -> MUL_OP .)
    I64             reduce using rule 124 (BINARY_OP -> MUL_OP .)
    I32             reduce using rule 124 (BINARY_OP -> MUL_OP .)
    I16             reduce using rule 124 (BINARY_OP -> MUL_OP .)
    I8              reduce using rule 124 (BINARY_OP -> MUL_OP .)
    UINT            reduce using rule 124 (BINARY_OP -> MUL_OP .)
    USIZE           reduce using rule 124 (BINARY_OP -> MUL_OP .)
    U64             reduce using rule 124 (BINARY_OP -> MUL_OP .)
    U32             reduce using rule 124 (BINARY_OP -> MUL_OP .)
    U16             reduce using rule 124 (BINARY_OP -> MUL_OP .)
    U8              reduce using rule 124 (BINARY_OP -> MUL_OP .)
    HEX_LIT         reduce using rule 124 (BINARY_OP -> MUL_OP .)
    OCTAL_LIT       reduce using rule 124 (BINARY_OP -> MUL_OP .)
    BINARY_LIT      reduce using rule 124 (BINARY_OP -> MUL_OP .)
    .               reduce using rule 124 (BINARY_OP -> MUL_OP .)


state 98

    (125) BINARY_OP -> ADD_OP .
    AND             reduce using rule 125 (BINARY_OP -> ADD_OP .)
    EXCLM           reduce using rule 125 (BINARY_OP -> ADD_OP .)
    MINUS           reduce using rule 125 (BINARY_OP -> ADD_OP .)
    (               reduce using rule 125 (BINARY_OP -> ADD_OP .)
    IDENTIFIER      reduce using rule 125 (BINARY_OP -> ADD_OP .)
    STRING          reduce using rule 125 (BINARY_OP -> ADD_OP .)
    BOOL            reduce using rule 125 (BINARY_OP -> ADD_OP .)
    RUNE            reduce using rule 125 (BINARY_OP -> ADD_OP .)
    FN              reduce using rule 125 (BINARY_OP -> ADD_OP .)
    DECIMAL_LIT     reduce using rule 125 (BINARY_OP -> ADD_OP .)
    FALSE           reduce using rule 125 (BINARY_OP -> ADD_OP .)
    TRUE            reduce using rule 125 (BINARY_OP -> ADD_OP .)
    RUNE_LIT        reduce using rule 125 (BINARY_OP -> ADD_OP .)
    STRING_LIT      reduce using rule 125 (BINARY_OP -> ADD_OP .)
    F32             reduce using rule 125 (BINARY_OP -> ADD_OP .)
    F64             reduce using rule 125 (BINARY_OP -> ADD_OP .)
    INT             reduce using rule 125 (BINARY_OP -> ADD_OP .)
    ISIZE           reduce using rule 125 (BINARY_OP -> ADD_OP .)
    I64             reduce using rule 125 (BINARY_OP -> ADD_OP .)
    I32             reduce using rule 125 (BINARY_OP -> ADD_OP .)
    I16             reduce using rule 125 (BINARY_OP -> ADD_OP .)
    I8              reduce using rule 125 (BINARY_OP -> ADD_OP .)
    UINT            reduce using rule 125 (BINARY_OP -> ADD_OP .)
    USIZE           reduce using rule 125 (BINARY_OP -> ADD_OP .)
    U64             reduce using rule 125 (BINARY_OP -> ADD_OP .)
    U32             reduce using rule 125 (BINARY_OP -> ADD_OP .)
    U16             reduce using rule 125 (BINARY_OP -> ADD_OP .)
    U8              reduce using rule 125 (BINARY_OP -> ADD_OP .)
    HEX_LIT         reduce using rule 125 (BINARY_OP -> ADD_OP .)
    OCTAL_LIT       reduce using rule 125 (BINARY_OP -> ADD_OP .)
    BINARY_LIT      reduce using rule 125 (BINARY_OP -> ADD_OP .)
    .               reduce using rule 125 (BINARY_OP -> ADD_OP .)


state 99

    (126) BINARY_OP -> REL_OP .
    AND             reduce using rule 126 (BINARY_OP -> REL_OP .)
    EXCLM           reduce using rule 126 (BINARY_OP -> REL_OP .)
    MINUS           reduce using rule 126 (BINARY_OP -> REL_OP .)
    (               reduce using rule 126 (BINARY_OP -> REL_OP .)
    IDENTIFIER      reduce using rule 126 (BINARY_OP -> REL_OP .)
    STRING          reduce using rule 126 (BINARY_OP -> REL_OP .)
    BOOL            reduce using rule 126 (BINARY_OP -> REL_OP .)
    RUNE            reduce using rule 126 (BINARY_OP -> REL_OP .)
    FN              reduce using rule 126 (BINARY_OP -> REL_OP .)
    DECIMAL_LIT     reduce using rule 126 (BINARY_OP -> REL_OP .)
    FALSE           reduce using rule 126 (BINARY_OP -> REL_OP .)
    TRUE            reduce using rule 126 (BINARY_OP -> REL_OP .)
    RUNE_LIT        reduce using rule 126 (BINARY_OP -> REL_OP .)
    STRING_LIT      reduce using rule 126 (BINARY_OP -> REL_OP .)
    F32             reduce using rule 126 (BINARY_OP -> REL_OP .)
    F64             reduce using rule 126 (BINARY_OP -> REL_OP .)
    INT             reduce using rule 126 (BINARY_OP -> REL_OP .)
    ISIZE           reduce using rule 126 (BINARY_OP -> REL_OP .)
    I64             reduce using rule 126 (BINARY_OP -> REL_OP .)
    I32             reduce using rule 126 (BINARY_OP -> REL_OP .)
    I16             reduce using rule 126 (BINARY_OP -> REL_OP .)
    I8              reduce using rule 126 (BINARY_OP -> REL_OP .)
    UINT            reduce using rule 126 (BINARY_OP -> REL_OP .)
    USIZE           reduce using rule 126 (BINARY_OP -> REL_OP .)
    U64             reduce using rule 126 (BINARY_OP -> REL_OP .)
    U32             reduce using rule 126 (BINARY_OP -> REL_OP .)
    U16             reduce using rule 126 (BINARY_OP -> REL_OP .)
    U8              reduce using rule 126 (BINARY_OP -> REL_OP .)
    HEX_LIT         reduce using rule 126 (BINARY_OP -> REL_OP .)
    OCTAL_LIT       reduce using rule 126 (BINARY_OP -> REL_OP .)
    BINARY_LIT      reduce using rule 126 (BINARY_OP -> REL_OP .)
    .               reduce using rule 126 (BINARY_OP -> REL_OP .)


state 100

    (127) BINARY_OP -> LOGIC_AND .
    AND             reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    EXCLM           reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    MINUS           reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    (               reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    IDENTIFIER      reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    STRING          reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    BOOL            reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    RUNE            reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    FN              reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    DECIMAL_LIT     reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    FALSE           reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    TRUE            reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    RUNE_LIT        reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    STRING_LIT      reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    F32             reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    F64             reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    INT             reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    ISIZE           reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    I64             reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    I32             reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    I16             reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    I8              reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    UINT            reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    USIZE           reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    U64             reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    U32             reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    U16             reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    U8              reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    HEX_LIT         reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    OCTAL_LIT       reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    BINARY_LIT      reduce using rule 127 (BINARY_OP -> LOGIC_AND .)
    .               reduce using rule 127 (BINARY_OP -> LOGIC_AND .)


state 101

    (128) BINARY_OP -> LOGIC_OR .
    AND             reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    EXCLM           reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    MINUS           reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    (               reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    IDENTIFIER      reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    STRING          reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    BOOL            reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    RUNE            reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    FN              reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    DECIMAL_LIT     reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    FALSE           reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    TRUE            reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    RUNE_LIT        reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    STRING_LIT      reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    F32             reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    F64             reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    INT             reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    ISIZE           reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    I64             reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    I32             reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    I16             reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    I8              reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    UINT            reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    USIZE           reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    U64             reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    U32             reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    U16             reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    U8              reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    HEX_LIT         reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    OCTAL_LIT       reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    BINARY_LIT      reduce using rule 128 (BINARY_OP -> LOGIC_OR .)
    .               reduce using rule 128 (BINARY_OP -> LOGIC_OR .)


state 102

    (139) MUL_OP -> SHR .
    AND             reduce using rule 139 (MUL_OP -> SHR .)
    EXCLM           reduce using rule 139 (MUL_OP -> SHR .)
    MINUS           reduce using rule 139 (MUL_OP -> SHR .)
    (               reduce using rule 139 (MUL_OP -> SHR .)
    IDENTIFIER      reduce using rule 139 (MUL_OP -> SHR .)
    STRING          reduce using rule 139 (MUL_OP -> SHR .)
    BOOL            reduce using rule 139 (MUL_OP -> SHR .)
    RUNE            reduce using rule 139 (MUL_OP -> SHR .)
    FN              reduce using rule 139 (MUL_OP -> SHR .)
    DECIMAL_LIT     reduce using rule 139 (MUL_OP -> SHR .)
    FALSE           reduce using rule 139 (MUL_OP -> SHR .)
    TRUE            reduce using rule 139 (MUL_OP -> SHR .)
    RUNE_LIT        reduce using rule 139 (MUL_OP -> SHR .)
    STRING_LIT      reduce using rule 139 (MUL_OP -> SHR .)
    F32             reduce using rule 139 (MUL_OP -> SHR .)
    F64             reduce using rule 139 (MUL_OP -> SHR .)
    INT             reduce using rule 139 (MUL_OP -> SHR .)
    ISIZE           reduce using rule 139 (MUL_OP -> SHR .)
    I64             reduce using rule 139 (MUL_OP -> SHR .)
    I32             reduce using rule 139 (MUL_OP -> SHR .)
    I16             reduce using rule 139 (MUL_OP -> SHR .)
    I8              reduce using rule 139 (MUL_OP -> SHR .)
    UINT            reduce using rule 139 (MUL_OP -> SHR .)
    USIZE           reduce using rule 139 (MUL_OP -> SHR .)
    U64             reduce using rule 139 (MUL_OP -> SHR .)
    U32             reduce using rule 139 (MUL_OP -> SHR .)
    U16             reduce using rule 139 (MUL_OP -> SHR .)
    U8              reduce using rule 139 (MUL_OP -> SHR .)
    HEX_LIT         reduce using rule 139 (MUL_OP -> SHR .)
    OCTAL_LIT       reduce using rule 139 (MUL_OP -> SHR .)
    BINARY_LIT      reduce using rule 139 (MUL_OP -> SHR .)
    .               reduce using rule 139 (MUL_OP -> SHR .)


state 103

    (140) MUL_OP -> SHL .
    AND             reduce using rule 140 (MUL_OP -> SHL .)
    EXCLM           reduce using rule 140 (MUL_OP -> SHL .)
    MINUS           reduce using rule 140 (MUL_OP -> SHL .)
    (               reduce using rule 140 (MUL_OP -> SHL .)
    IDENTIFIER      reduce using rule 140 (MUL_OP -> SHL .)
    STRING          reduce using rule 140 (MUL_OP -> SHL .)
    BOOL            reduce using rule 140 (MUL_OP -> SHL .)
    RUNE            reduce using rule 140 (MUL_OP -> SHL .)
    FN              reduce using rule 140 (MUL_OP -> SHL .)
    DECIMAL_LIT     reduce using rule 140 (MUL_OP -> SHL .)
    FALSE           reduce using rule 140 (MUL_OP -> SHL .)
    TRUE            reduce using rule 140 (MUL_OP -> SHL .)
    RUNE_LIT        reduce using rule 140 (MUL_OP -> SHL .)
    STRING_LIT      reduce using rule 140 (MUL_OP -> SHL .)
    F32             reduce using rule 140 (MUL_OP -> SHL .)
    F64             reduce using rule 140 (MUL_OP -> SHL .)
    INT             reduce using rule 140 (MUL_OP -> SHL .)
    ISIZE           reduce using rule 140 (MUL_OP -> SHL .)
    I64             reduce using rule 140 (MUL_OP -> SHL .)
    I32             reduce using rule 140 (MUL_OP -> SHL .)
    I16             reduce using rule 140 (MUL_OP -> SHL .)
    I8              reduce using rule 140 (MUL_OP -> SHL .)
    UINT            reduce using rule 140 (MUL_OP -> SHL .)
    USIZE           reduce using rule 140 (MUL_OP -> SHL .)
    U64             reduce using rule 140 (MUL_OP -> SHL .)
    U32             reduce using rule 140 (MUL_OP -> SHL .)
    U16             reduce using rule 140 (MUL_OP -> SHL .)
    U8              reduce using rule 140 (MUL_OP -> SHL .)
    HEX_LIT         reduce using rule 140 (MUL_OP -> SHL .)
    OCTAL_LIT       reduce using rule 140 (MUL_OP -> SHL .)
    BINARY_LIT      reduce using rule 140 (MUL_OP -> SHL .)
    .               reduce using rule 140 (MUL_OP -> SHL .)


state 104

    (141) MUL_OP -> AND .
    AND             reduce using rule 141 (MUL_OP -> AND .)
    EXCLM           reduce using rule 141 (MUL_OP -> AND .)
    MINUS           reduce using rule 141 (MUL_OP -> AND .)
    (               reduce using rule 141 (MUL_OP -> AND .)
    IDENTIFIER      reduce using rule 141 (MUL_OP -> AND .)
    STRING          reduce using rule 141 (MUL_OP -> AND .)
    BOOL            reduce using rule 141 (MUL_OP -> AND .)
    RUNE            reduce using rule 141 (MUL_OP -> AND .)
    FN              reduce using rule 141 (MUL_OP -> AND .)
    DECIMAL_LIT     reduce using rule 141 (MUL_OP -> AND .)
    FALSE           reduce using rule 141 (MUL_OP -> AND .)
    TRUE            reduce using rule 141 (MUL_OP -> AND .)
    RUNE_LIT        reduce using rule 141 (MUL_OP -> AND .)
    STRING_LIT      reduce using rule 141 (MUL_OP -> AND .)
    F32             reduce using rule 141 (MUL_OP -> AND .)
    F64             reduce using rule 141 (MUL_OP -> AND .)
    INT             reduce using rule 141 (MUL_OP -> AND .)
    ISIZE           reduce using rule 141 (MUL_OP -> AND .)
    I64             reduce using rule 141 (MUL_OP -> AND .)
    I32             reduce using rule 141 (MUL_OP -> AND .)
    I16             reduce using rule 141 (MUL_OP -> AND .)
    I8              reduce using rule 141 (MUL_OP -> AND .)
    UINT            reduce using rule 141 (MUL_OP -> AND .)
    USIZE           reduce using rule 141 (MUL_OP -> AND .)
    U64             reduce using rule 141 (MUL_OP -> AND .)
    U32             reduce using rule 141 (MUL_OP -> AND .)
    U16             reduce using rule 141 (MUL_OP -> AND .)
    U8              reduce using rule 141 (MUL_OP -> AND .)
    HEX_LIT         reduce using rule 141 (MUL_OP -> AND .)
    OCTAL_LIT       reduce using rule 141 (MUL_OP -> AND .)
    BINARY_LIT      reduce using rule 141 (MUL_OP -> AND .)
    .               reduce using rule 141 (MUL_OP -> AND .)


state 105

    (142) MUL_OP -> MOD .
    AND             reduce using rule 142 (MUL_OP -> MOD .)
    EXCLM           reduce using rule 142 (MUL_OP -> MOD .)
    MINUS           reduce using rule 142 (MUL_OP -> MOD .)
    (               reduce using rule 142 (MUL_OP -> MOD .)
    IDENTIFIER      reduce using rule 142 (MUL_OP -> MOD .)
    STRING          reduce using rule 142 (MUL_OP -> MOD .)
    BOOL            reduce using rule 142 (MUL_OP -> MOD .)
    RUNE            reduce using rule 142 (MUL_OP -> MOD .)
    FN              reduce using rule 142 (MUL_OP -> MOD .)
    DECIMAL_LIT     reduce using rule 142 (MUL_OP -> MOD .)
    FALSE           reduce using rule 142 (MUL_OP -> MOD .)
    TRUE            reduce using rule 142 (MUL_OP -> MOD .)
    RUNE_LIT        reduce using rule 142 (MUL_OP -> MOD .)
    STRING_LIT      reduce using rule 142 (MUL_OP -> MOD .)
    F32             reduce using rule 142 (MUL_OP -> MOD .)
    F64             reduce using rule 142 (MUL_OP -> MOD .)
    INT             reduce using rule 142 (MUL_OP -> MOD .)
    ISIZE           reduce using rule 142 (MUL_OP -> MOD .)
    I64             reduce using rule 142 (MUL_OP -> MOD .)
    I32             reduce using rule 142 (MUL_OP -> MOD .)
    I16             reduce using rule 142 (MUL_OP -> MOD .)
    I8              reduce using rule 142 (MUL_OP -> MOD .)
    UINT            reduce using rule 142 (MUL_OP -> MOD .)
    USIZE           reduce using rule 142 (MUL_OP -> MOD .)
    U64             reduce using rule 142 (MUL_OP -> MOD .)
    U32             reduce using rule 142 (MUL_OP -> MOD .)
    U16             reduce using rule 142 (MUL_OP -> MOD .)
    U8              reduce using rule 142 (MUL_OP -> MOD .)
    HEX_LIT         reduce using rule 142 (MUL_OP -> MOD .)
    OCTAL_LIT       reduce using rule 142 (MUL_OP -> MOD .)
    BINARY_LIT      reduce using rule 142 (MUL_OP -> MOD .)
    .               reduce using rule 142 (MUL_OP -> MOD .)


state 106

    (143) MUL_OP -> DIV .
    AND             reduce using rule 143 (MUL_OP -> DIV .)
    EXCLM           reduce using rule 143 (MUL_OP -> DIV .)
    MINUS           reduce using rule 143 (MUL_OP -> DIV .)
    (               reduce using rule 143 (MUL_OP -> DIV .)
    IDENTIFIER      reduce using rule 143 (MUL_OP -> DIV .)
    STRING          reduce using rule 143 (MUL_OP -> DIV .)
    BOOL            reduce using rule 143 (MUL_OP -> DIV .)
    RUNE            reduce using rule 143 (MUL_OP -> DIV .)
    FN              reduce using rule 143 (MUL_OP -> DIV .)
    DECIMAL_LIT     reduce using rule 143 (MUL_OP -> DIV .)
    FALSE           reduce using rule 143 (MUL_OP -> DIV .)
    TRUE            reduce using rule 143 (MUL_OP -> DIV .)
    RUNE_LIT        reduce using rule 143 (MUL_OP -> DIV .)
    STRING_LIT      reduce using rule 143 (MUL_OP -> DIV .)
    F32             reduce using rule 143 (MUL_OP -> DIV .)
    F64             reduce using rule 143 (MUL_OP -> DIV .)
    INT             reduce using rule 143 (MUL_OP -> DIV .)
    ISIZE           reduce using rule 143 (MUL_OP -> DIV .)
    I64             reduce using rule 143 (MUL_OP -> DIV .)
    I32             reduce using rule 143 (MUL_OP -> DIV .)
    I16             reduce using rule 143 (MUL_OP -> DIV .)
    I8              reduce using rule 143 (MUL_OP -> DIV .)
    UINT            reduce using rule 143 (MUL_OP -> DIV .)
    USIZE           reduce using rule 143 (MUL_OP -> DIV .)
    U64             reduce using rule 143 (MUL_OP -> DIV .)
    U32             reduce using rule 143 (MUL_OP -> DIV .)
    U16             reduce using rule 143 (MUL_OP -> DIV .)
    U8              reduce using rule 143 (MUL_OP -> DIV .)
    HEX_LIT         reduce using rule 143 (MUL_OP -> DIV .)
    OCTAL_LIT       reduce using rule 143 (MUL_OP -> DIV .)
    BINARY_LIT      reduce using rule 143 (MUL_OP -> DIV .)
    .               reduce using rule 143 (MUL_OP -> DIV .)


state 107

    (144) MUL_OP -> STAR .
    AND             reduce using rule 144 (MUL_OP -> STAR .)
    EXCLM           reduce using rule 144 (MUL_OP -> STAR .)
    MINUS           reduce using rule 144 (MUL_OP -> STAR .)
    (               reduce using rule 144 (MUL_OP -> STAR .)
    IDENTIFIER      reduce using rule 144 (MUL_OP -> STAR .)
    STRING          reduce using rule 144 (MUL_OP -> STAR .)
    BOOL            reduce using rule 144 (MUL_OP -> STAR .)
    RUNE            reduce using rule 144 (MUL_OP -> STAR .)
    FN              reduce using rule 144 (MUL_OP -> STAR .)
    DECIMAL_LIT     reduce using rule 144 (MUL_OP -> STAR .)
    FALSE           reduce using rule 144 (MUL_OP -> STAR .)
    TRUE            reduce using rule 144 (MUL_OP -> STAR .)
    RUNE_LIT        reduce using rule 144 (MUL_OP -> STAR .)
    STRING_LIT      reduce using rule 144 (MUL_OP -> STAR .)
    F32             reduce using rule 144 (MUL_OP -> STAR .)
    F64             reduce using rule 144 (MUL_OP -> STAR .)
    INT             reduce using rule 144 (MUL_OP -> STAR .)
    ISIZE           reduce using rule 144 (MUL_OP -> STAR .)
    I64             reduce using rule 144 (MUL_OP -> STAR .)
    I32             reduce using rule 144 (MUL_OP -> STAR .)
    I16             reduce using rule 144 (MUL_OP -> STAR .)
    I8              reduce using rule 144 (MUL_OP -> STAR .)
    UINT            reduce using rule 144 (MUL_OP -> STAR .)
    USIZE           reduce using rule 144 (MUL_OP -> STAR .)
    U64             reduce using rule 144 (MUL_OP -> STAR .)
    U32             reduce using rule 144 (MUL_OP -> STAR .)
    U16             reduce using rule 144 (MUL_OP -> STAR .)
    U8              reduce using rule 144 (MUL_OP -> STAR .)
    HEX_LIT         reduce using rule 144 (MUL_OP -> STAR .)
    OCTAL_LIT       reduce using rule 144 (MUL_OP -> STAR .)
    BINARY_LIT      reduce using rule 144 (MUL_OP -> STAR .)
    .               reduce using rule 144 (MUL_OP -> STAR .)


state 108

    (135) ADD_OP -> XOR .
    AND             reduce using rule 135 (ADD_OP -> XOR .)
    EXCLM           reduce using rule 135 (ADD_OP -> XOR .)
    MINUS           reduce using rule 135 (ADD_OP -> XOR .)
    (               reduce using rule 135 (ADD_OP -> XOR .)
    IDENTIFIER      reduce using rule 135 (ADD_OP -> XOR .)
    STRING          reduce using rule 135 (ADD_OP -> XOR .)
    BOOL            reduce using rule 135 (ADD_OP -> XOR .)
    RUNE            reduce using rule 135 (ADD_OP -> XOR .)
    FN              reduce using rule 135 (ADD_OP -> XOR .)
    DECIMAL_LIT     reduce using rule 135 (ADD_OP -> XOR .)
    FALSE           reduce using rule 135 (ADD_OP -> XOR .)
    TRUE            reduce using rule 135 (ADD_OP -> XOR .)
    RUNE_LIT        reduce using rule 135 (ADD_OP -> XOR .)
    STRING_LIT      reduce using rule 135 (ADD_OP -> XOR .)
    F32             reduce using rule 135 (ADD_OP -> XOR .)
    F64             reduce using rule 135 (ADD_OP -> XOR .)
    INT             reduce using rule 135 (ADD_OP -> XOR .)
    ISIZE           reduce using rule 135 (ADD_OP -> XOR .)
    I64             reduce using rule 135 (ADD_OP -> XOR .)
    I32             reduce using rule 135 (ADD_OP -> XOR .)
    I16             reduce using rule 135 (ADD_OP -> XOR .)
    I8              reduce using rule 135 (ADD_OP -> XOR .)
    UINT            reduce using rule 135 (ADD_OP -> XOR .)
    USIZE           reduce using rule 135 (ADD_OP -> XOR .)
    U64             reduce using rule 135 (ADD_OP -> XOR .)
    U32             reduce using rule 135 (ADD_OP -> XOR .)
    U16             reduce using rule 135 (ADD_OP -> XOR .)
    U8              reduce using rule 135 (ADD_OP -> XOR .)
    HEX_LIT         reduce using rule 135 (ADD_OP -> XOR .)
    OCTAL_LIT       reduce using rule 135 (ADD_OP -> XOR .)
    BINARY_LIT      reduce using rule 135 (ADD_OP -> XOR .)
    .               reduce using rule 135 (ADD_OP -> XOR .)


state 109

    (136) ADD_OP -> OR .
    AND             reduce using rule 136 (ADD_OP -> OR .)
    EXCLM           reduce using rule 136 (ADD_OP -> OR .)
    MINUS           reduce using rule 136 (ADD_OP -> OR .)
    (               reduce using rule 136 (ADD_OP -> OR .)
    IDENTIFIER      reduce using rule 136 (ADD_OP -> OR .)
    STRING          reduce using rule 136 (ADD_OP -> OR .)
    BOOL            reduce using rule 136 (ADD_OP -> OR .)
    RUNE            reduce using rule 136 (ADD_OP -> OR .)
    FN              reduce using rule 136 (ADD_OP -> OR .)
    DECIMAL_LIT     reduce using rule 136 (ADD_OP -> OR .)
    FALSE           reduce using rule 136 (ADD_OP -> OR .)
    TRUE            reduce using rule 136 (ADD_OP -> OR .)
    RUNE_LIT        reduce using rule 136 (ADD_OP -> OR .)
    STRING_LIT      reduce using rule 136 (ADD_OP -> OR .)
    F32             reduce using rule 136 (ADD_OP -> OR .)
    F64             reduce using rule 136 (ADD_OP -> OR .)
    INT             reduce using rule 136 (ADD_OP -> OR .)
    ISIZE           reduce using rule 136 (ADD_OP -> OR .)
    I64             reduce using rule 136 (ADD_OP -> OR .)
    I32             reduce using rule 136 (ADD_OP -> OR .)
    I16             reduce using rule 136 (ADD_OP -> OR .)
    I8              reduce using rule 136 (ADD_OP -> OR .)
    UINT            reduce using rule 136 (ADD_OP -> OR .)
    USIZE           reduce using rule 136 (ADD_OP -> OR .)
    U64             reduce using rule 136 (ADD_OP -> OR .)
    U32             reduce using rule 136 (ADD_OP -> OR .)
    U16             reduce using rule 136 (ADD_OP -> OR .)
    U8              reduce using rule 136 (ADD_OP -> OR .)
    HEX_LIT         reduce using rule 136 (ADD_OP -> OR .)
    OCTAL_LIT       reduce using rule 136 (ADD_OP -> OR .)
    BINARY_LIT      reduce using rule 136 (ADD_OP -> OR .)
    .               reduce using rule 136 (ADD_OP -> OR .)


state 110

    (137) ADD_OP -> MINUS .
    AND             reduce using rule 137 (ADD_OP -> MINUS .)
    EXCLM           reduce using rule 137 (ADD_OP -> MINUS .)
    MINUS           reduce using rule 137 (ADD_OP -> MINUS .)
    (               reduce using rule 137 (ADD_OP -> MINUS .)
    IDENTIFIER      reduce using rule 137 (ADD_OP -> MINUS .)
    STRING          reduce using rule 137 (ADD_OP -> MINUS .)
    BOOL            reduce using rule 137 (ADD_OP -> MINUS .)
    RUNE            reduce using rule 137 (ADD_OP -> MINUS .)
    FN              reduce using rule 137 (ADD_OP -> MINUS .)
    DECIMAL_LIT     reduce using rule 137 (ADD_OP -> MINUS .)
    FALSE           reduce using rule 137 (ADD_OP -> MINUS .)
    TRUE            reduce using rule 137 (ADD_OP -> MINUS .)
    RUNE_LIT        reduce using rule 137 (ADD_OP -> MINUS .)
    STRING_LIT      reduce using rule 137 (ADD_OP -> MINUS .)
    F32             reduce using rule 137 (ADD_OP -> MINUS .)
    F64             reduce using rule 137 (ADD_OP -> MINUS .)
    INT             reduce using rule 137 (ADD_OP -> MINUS .)
    ISIZE           reduce using rule 137 (ADD_OP -> MINUS .)
    I64             reduce using rule 137 (ADD_OP -> MINUS .)
    I32             reduce using rule 137 (ADD_OP -> MINUS .)
    I16             reduce using rule 137 (ADD_OP -> MINUS .)
    I8              reduce using rule 137 (ADD_OP -> MINUS .)
    UINT            reduce using rule 137 (ADD_OP -> MINUS .)
    USIZE           reduce using rule 137 (ADD_OP -> MINUS .)
    U64             reduce using rule 137 (ADD_OP -> MINUS .)
    U32             reduce using rule 137 (ADD_OP -> MINUS .)
    U16             reduce using rule 137 (ADD_OP -> MINUS .)
    U8              reduce using rule 137 (ADD_OP -> MINUS .)
    HEX_LIT         reduce using rule 137 (ADD_OP -> MINUS .)
    OCTAL_LIT       reduce using rule 137 (ADD_OP -> MINUS .)
    BINARY_LIT      reduce using rule 137 (ADD_OP -> MINUS .)
    .               reduce using rule 137 (ADD_OP -> MINUS .)


state 111

    (138) ADD_OP -> PLUS .
    AND             reduce using rule 138 (ADD_OP -> PLUS .)
    EXCLM           reduce using rule 138 (ADD_OP -> PLUS .)
    MINUS           reduce using rule 138 (ADD_OP -> PLUS .)
    (               reduce using rule 138 (ADD_OP -> PLUS .)
    IDENTIFIER      reduce using rule 138 (ADD_OP -> PLUS .)
    STRING          reduce using rule 138 (ADD_OP -> PLUS .)
    BOOL            reduce using rule 138 (ADD_OP -> PLUS .)
    RUNE            reduce using rule 138 (ADD_OP -> PLUS .)
    FN              reduce using rule 138 (ADD_OP -> PLUS .)
    DECIMAL_LIT     reduce using rule 138 (ADD_OP -> PLUS .)
    FALSE           reduce using rule 138 (ADD_OP -> PLUS .)
    TRUE            reduce using rule 138 (ADD_OP -> PLUS .)
    RUNE_LIT        reduce using rule 138 (ADD_OP -> PLUS .)
    STRING_LIT      reduce using rule 138 (ADD_OP -> PLUS .)
    F32             reduce using rule 138 (ADD_OP -> PLUS .)
    F64             reduce using rule 138 (ADD_OP -> PLUS .)
    INT             reduce using rule 138 (ADD_OP -> PLUS .)
    ISIZE           reduce using rule 138 (ADD_OP -> PLUS .)
    I64             reduce using rule 138 (ADD_OP -> PLUS .)
    I32             reduce using rule 138 (ADD_OP -> PLUS .)
    I16             reduce using rule 138 (ADD_OP -> PLUS .)
    I8              reduce using rule 138 (ADD_OP -> PLUS .)
    UINT            reduce using rule 138 (ADD_OP -> PLUS .)
    USIZE           reduce using rule 138 (ADD_OP -> PLUS .)
    U64             reduce using rule 138 (ADD_OP -> PLUS .)
    U32             reduce using rule 138 (ADD_OP -> PLUS .)
    U16             reduce using rule 138 (ADD_OP -> PLUS .)
    U8              reduce using rule 138 (ADD_OP -> PLUS .)
    HEX_LIT         reduce using rule 138 (ADD_OP -> PLUS .)
    OCTAL_LIT       reduce using rule 138 (ADD_OP -> PLUS .)
    BINARY_LIT      reduce using rule 138 (ADD_OP -> PLUS .)
    .               reduce using rule 138 (ADD_OP -> PLUS .)


state 112

    (129) REL_OP -> GE .
    AND             reduce using rule 129 (REL_OP -> GE .)
    EXCLM           reduce using rule 129 (REL_OP -> GE .)
    MINUS           reduce using rule 129 (REL_OP -> GE .)
    (               reduce using rule 129 (REL_OP -> GE .)
    IDENTIFIER      reduce using rule 129 (REL_OP -> GE .)
    STRING          reduce using rule 129 (REL_OP -> GE .)
    BOOL            reduce using rule 129 (REL_OP -> GE .)
    RUNE            reduce using rule 129 (REL_OP -> GE .)
    FN              reduce using rule 129 (REL_OP -> GE .)
    DECIMAL_LIT     reduce using rule 129 (REL_OP -> GE .)
    FALSE           reduce using rule 129 (REL_OP -> GE .)
    TRUE            reduce using rule 129 (REL_OP -> GE .)
    RUNE_LIT        reduce using rule 129 (REL_OP -> GE .)
    STRING_LIT      reduce using rule 129 (REL_OP -> GE .)
    F32             reduce using rule 129 (REL_OP -> GE .)
    F64             reduce using rule 129 (REL_OP -> GE .)
    INT             reduce using rule 129 (REL_OP -> GE .)
    ISIZE           reduce using rule 129 (REL_OP -> GE .)
    I64             reduce using rule 129 (REL_OP -> GE .)
    I32             reduce using rule 129 (REL_OP -> GE .)
    I16             reduce using rule 129 (REL_OP -> GE .)
    I8              reduce using rule 129 (REL_OP -> GE .)
    UINT            reduce using rule 129 (REL_OP -> GE .)
    USIZE           reduce using rule 129 (REL_OP -> GE .)
    U64             reduce using rule 129 (REL_OP -> GE .)
    U32             reduce using rule 129 (REL_OP -> GE .)
    U16             reduce using rule 129 (REL_OP -> GE .)
    U8              reduce using rule 129 (REL_OP -> GE .)
    HEX_LIT         reduce using rule 129 (REL_OP -> GE .)
    OCTAL_LIT       reduce using rule 129 (REL_OP -> GE .)
    BINARY_LIT      reduce using rule 129 (REL_OP -> GE .)
    .               reduce using rule 129 (REL_OP -> GE .)


state 113

    (130) REL_OP -> GT .
    AND             reduce using rule 130 (REL_OP -> GT .)
    EXCLM           reduce using rule 130 (REL_OP -> GT .)
    MINUS           reduce using rule 130 (REL_OP -> GT .)
    (               reduce using rule 130 (REL_OP -> GT .)
    IDENTIFIER      reduce using rule 130 (REL_OP -> GT .)
    STRING          reduce using rule 130 (REL_OP -> GT .)
    BOOL            reduce using rule 130 (REL_OP -> GT .)
    RUNE            reduce using rule 130 (REL_OP -> GT .)
    FN              reduce using rule 130 (REL_OP -> GT .)
    DECIMAL_LIT     reduce using rule 130 (REL_OP -> GT .)
    FALSE           reduce using rule 130 (REL_OP -> GT .)
    TRUE            reduce using rule 130 (REL_OP -> GT .)
    RUNE_LIT        reduce using rule 130 (REL_OP -> GT .)
    STRING_LIT      reduce using rule 130 (REL_OP -> GT .)
    F32             reduce using rule 130 (REL_OP -> GT .)
    F64             reduce using rule 130 (REL_OP -> GT .)
    INT             reduce using rule 130 (REL_OP -> GT .)
    ISIZE           reduce using rule 130 (REL_OP -> GT .)
    I64             reduce using rule 130 (REL_OP -> GT .)
    I32             reduce using rule 130 (REL_OP -> GT .)
    I16             reduce using rule 130 (REL_OP -> GT .)
    I8              reduce using rule 130 (REL_OP -> GT .)
    UINT            reduce using rule 130 (REL_OP -> GT .)
    USIZE           reduce using rule 130 (REL_OP -> GT .)
    U64             reduce using rule 130 (REL_OP -> GT .)
    U32             reduce using rule 130 (REL_OP -> GT .)
    U16             reduce using rule 130 (REL_OP -> GT .)
    U8              reduce using rule 130 (REL_OP -> GT .)
    HEX_LIT         reduce using rule 130 (REL_OP -> GT .)
    OCTAL_LIT       reduce using rule 130 (REL_OP -> GT .)
    BINARY_LIT      reduce using rule 130 (REL_OP -> GT .)
    .               reduce using rule 130 (REL_OP -> GT .)


state 114

    (131) REL_OP -> LE .
    AND             reduce using rule 131 (REL_OP -> LE .)
    EXCLM           reduce using rule 131 (REL_OP -> LE .)
    MINUS           reduce using rule 131 (REL_OP -> LE .)
    (               reduce using rule 131 (REL_OP -> LE .)
    IDENTIFIER      reduce using rule 131 (REL_OP -> LE .)
    STRING          reduce using rule 131 (REL_OP -> LE .)
    BOOL            reduce using rule 131 (REL_OP -> LE .)
    RUNE            reduce using rule 131 (REL_OP -> LE .)
    FN              reduce using rule 131 (REL_OP -> LE .)
    DECIMAL_LIT     reduce using rule 131 (REL_OP -> LE .)
    FALSE           reduce using rule 131 (REL_OP -> LE .)
    TRUE            reduce using rule 131 (REL_OP -> LE .)
    RUNE_LIT        reduce using rule 131 (REL_OP -> LE .)
    STRING_LIT      reduce using rule 131 (REL_OP -> LE .)
    F32             reduce using rule 131 (REL_OP -> LE .)
    F64             reduce using rule 131 (REL_OP -> LE .)
    INT             reduce using rule 131 (REL_OP -> LE .)
    ISIZE           reduce using rule 131 (REL_OP -> LE .)
    I64             reduce using rule 131 (REL_OP -> LE .)
    I32             reduce using rule 131 (REL_OP -> LE .)
    I16             reduce using rule 131 (REL_OP -> LE .)
    I8              reduce using rule 131 (REL_OP -> LE .)
    UINT            reduce using rule 131 (REL_OP -> LE .)
    USIZE           reduce using rule 131 (REL_OP -> LE .)
    U64             reduce using rule 131 (REL_OP -> LE .)
    U32             reduce using rule 131 (REL_OP -> LE .)
    U16             reduce using rule 131 (REL_OP -> LE .)
    U8              reduce using rule 131 (REL_OP -> LE .)
    HEX_LIT         reduce using rule 131 (REL_OP -> LE .)
    OCTAL_LIT       reduce using rule 131 (REL_OP -> LE .)
    BINARY_LIT      reduce using rule 131 (REL_OP -> LE .)
    .               reduce using rule 131 (REL_OP -> LE .)


state 115

    (132) REL_OP -> LT .
    AND             reduce using rule 132 (REL_OP -> LT .)
    EXCLM           reduce using rule 132 (REL_OP -> LT .)
    MINUS           reduce using rule 132 (REL_OP -> LT .)
    (               reduce using rule 132 (REL_OP -> LT .)
    IDENTIFIER      reduce using rule 132 (REL_OP -> LT .)
    STRING          reduce using rule 132 (REL_OP -> LT .)
    BOOL            reduce using rule 132 (REL_OP -> LT .)
    RUNE            reduce using rule 132 (REL_OP -> LT .)
    FN              reduce using rule 132 (REL_OP -> LT .)
    DECIMAL_LIT     reduce using rule 132 (REL_OP -> LT .)
    FALSE           reduce using rule 132 (REL_OP -> LT .)
    TRUE            reduce using rule 132 (REL_OP -> LT .)
    RUNE_LIT        reduce using rule 132 (REL_OP -> LT .)
    STRING_LIT      reduce using rule 132 (REL_OP -> LT .)
    F32             reduce using rule 132 (REL_OP -> LT .)
    F64             reduce using rule 132 (REL_OP -> LT .)
    INT             reduce using rule 132 (REL_OP -> LT .)
    ISIZE           reduce using rule 132 (REL_OP -> LT .)
    I64             reduce using rule 132 (REL_OP -> LT .)
    I32             reduce using rule 132 (REL_OP -> LT .)
    I16             reduce using rule 132 (REL_OP -> LT .)
    I8              reduce using rule 132 (REL_OP -> LT .)
    UINT            reduce using rule 132 (REL_OP -> LT .)
    USIZE           reduce using rule 132 (REL_OP -> LT .)
    U64             reduce using rule 132 (REL_OP -> LT .)
    U32             reduce using rule 132 (REL_OP -> LT .)
    U16             reduce using rule 132 (REL_OP -> LT .)
    U8              reduce using rule 132 (REL_OP -> LT .)
    HEX_LIT         reduce using rule 132 (REL_OP -> LT .)
    OCTAL_LIT       reduce using rule 132 (REL_OP -> LT .)
    BINARY_LIT      reduce using rule 132 (REL_OP -> LT .)
    .               reduce using rule 132 (REL_OP -> LT .)


state 116

    (133) REL_OP -> NE .
    AND             reduce using rule 133 (REL_OP -> NE .)
    EXCLM           reduce using rule 133 (REL_OP -> NE .)
    MINUS           reduce using rule 133 (REL_OP -> NE .)
    (               reduce using rule 133 (REL_OP -> NE .)
    IDENTIFIER      reduce using rule 133 (REL_OP -> NE .)
    STRING          reduce using rule 133 (REL_OP -> NE .)
    BOOL            reduce using rule 133 (REL_OP -> NE .)
    RUNE            reduce using rule 133 (REL_OP -> NE .)
    FN              reduce using rule 133 (REL_OP -> NE .)
    DECIMAL_LIT     reduce using rule 133 (REL_OP -> NE .)
    FALSE           reduce using rule 133 (REL_OP -> NE .)
    TRUE            reduce using rule 133 (REL_OP -> NE .)
    RUNE_LIT        reduce using rule 133 (REL_OP -> NE .)
    STRING_LIT      reduce using rule 133 (REL_OP -> NE .)
    F32             reduce using rule 133 (REL_OP -> NE .)
    F64             reduce using rule 133 (REL_OP -> NE .)
    INT             reduce using rule 133 (REL_OP -> NE .)
    ISIZE           reduce using rule 133 (REL_OP -> NE .)
    I64             reduce using rule 133 (REL_OP -> NE .)
    I32             reduce using rule 133 (REL_OP -> NE .)
    I16             reduce using rule 133 (REL_OP -> NE .)
    I8              reduce using rule 133 (REL_OP -> NE .)
    UINT            reduce using rule 133 (REL_OP -> NE .)
    USIZE           reduce using rule 133 (REL_OP -> NE .)
    U64             reduce using rule 133 (REL_OP -> NE .)
    U32             reduce using rule 133 (REL_OP -> NE .)
    U16             reduce using rule 133 (REL_OP -> NE .)
    U8              reduce using rule 133 (REL_OP -> NE .)
    HEX_LIT         reduce using rule 133 (REL_OP -> NE .)
    OCTAL_LIT       reduce using rule 133 (REL_OP -> NE .)
    BINARY_LIT      reduce using rule 133 (REL_OP -> NE .)
    .               reduce using rule 133 (REL_OP -> NE .)


state 117

    (134) REL_OP -> EQ .
    AND             reduce using rule 134 (REL_OP -> EQ .)
    EXCLM           reduce using rule 134 (REL_OP -> EQ .)
    MINUS           reduce using rule 134 (REL_OP -> EQ .)
    (               reduce using rule 134 (REL_OP -> EQ .)
    IDENTIFIER      reduce using rule 134 (REL_OP -> EQ .)
    STRING          reduce using rule 134 (REL_OP -> EQ .)
    BOOL            reduce using rule 134 (REL_OP -> EQ .)
    RUNE            reduce using rule 134 (REL_OP -> EQ .)
    FN              reduce using rule 134 (REL_OP -> EQ .)
    DECIMAL_LIT     reduce using rule 134 (REL_OP -> EQ .)
    FALSE           reduce using rule 134 (REL_OP -> EQ .)
    TRUE            reduce using rule 134 (REL_OP -> EQ .)
    RUNE_LIT        reduce using rule 134 (REL_OP -> EQ .)
    STRING_LIT      reduce using rule 134 (REL_OP -> EQ .)
    F32             reduce using rule 134 (REL_OP -> EQ .)
    F64             reduce using rule 134 (REL_OP -> EQ .)
    INT             reduce using rule 134 (REL_OP -> EQ .)
    ISIZE           reduce using rule 134 (REL_OP -> EQ .)
    I64             reduce using rule 134 (REL_OP -> EQ .)
    I32             reduce using rule 134 (REL_OP -> EQ .)
    I16             reduce using rule 134 (REL_OP -> EQ .)
    I8              reduce using rule 134 (REL_OP -> EQ .)
    UINT            reduce using rule 134 (REL_OP -> EQ .)
    USIZE           reduce using rule 134 (REL_OP -> EQ .)
    U64             reduce using rule 134 (REL_OP -> EQ .)
    U32             reduce using rule 134 (REL_OP -> EQ .)
    U16             reduce using rule 134 (REL_OP -> EQ .)
    U8              reduce using rule 134 (REL_OP -> EQ .)
    HEX_LIT         reduce using rule 134 (REL_OP -> EQ .)
    OCTAL_LIT       reduce using rule 134 (REL_OP -> EQ .)
    BINARY_LIT      reduce using rule 134 (REL_OP -> EQ .)
    .               reduce using rule 134 (REL_OP -> EQ .)


state 118

    (63) unaryExpr -> UNARY_OP unaryExpr .
    LOGIC_AND       reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    LOGIC_OR        reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    SHR             reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    SHL             reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    AND             reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    MOD             reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    DIV             reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    STAR            reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    XOR             reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    OR              reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    MINUS           reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    PLUS            reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    GE              reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    GT              reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    LE              reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    LT              reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    NE              reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    EQ              reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    ,               reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    NEWL            reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    ;               reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    )               reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)
    }               reduce using rule 63 (unaryExpr -> UNARY_OP unaryExpr .)


state 119

    (65) primaryExpr -> primaryExpr arguments .
    (               reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    LOGIC_AND       reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    LOGIC_OR        reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    SHR             reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    SHL             reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    AND             reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    MOD             reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    DIV             reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    STAR            reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    XOR             reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    OR              reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    MINUS           reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    PLUS            reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    GE              reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    GT              reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    LE              reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    LT              reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    NE              reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    EQ              reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    ,               reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    NEWL            reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    ;               reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    )               reduce using rule 65 (primaryExpr -> primaryExpr arguments .)
    }               reduce using rule 65 (primaryExpr -> primaryExpr arguments .)


state 120

    (54) arguments -> ( . type_ , expressionList , )
    (55) arguments -> ( . type_ , expressionList )
    (56) arguments -> ( . type_ , )
    (57) arguments -> ( . type_ )
    (58) arguments -> ( . expressionList , )
    (59) arguments -> ( . expressionList )
    (60) arguments -> ( . )
    (75) type_ -> . typeName
    (43) expressionList -> . expressionList , expression
    (44) expressionList -> . expression
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (61) expression -> . expression BINARY_OP unaryExpr
    (62) expression -> . unaryExpr
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    (63) unaryExpr -> . UNARY_OP unaryExpr
    (64) unaryExpr -> . primaryExpr
    (145) UNARY_OP -> . AND
    (146) UNARY_OP -> . EXCLM
    (147) UNARY_OP -> . MINUS
    (65) primaryExpr -> . primaryExpr arguments
    (66) primaryExpr -> . conversion
    (67) primaryExpr -> . operand
    (74) conversion -> . type_ ( expression )
    (68) operand -> . ( expression )
    (69) operand -> . operandName
    (70) operand -> . literal
    (71) operandName -> . IDENTIFIER
    (72) literal -> . functionLit
    (73) literal -> . basicLit
    (42) functionLit -> . FN function_
    (94) basicLit -> . INT_LIT
    (95) basicLit -> . FLOAT_LIT
    (96) basicLit -> . DECIMAL_LIT EXPONENT
    (97) basicLit -> . FLOAT_LIT EXPONENT
    (98) basicLit -> . FALSE
    (99) basicLit -> . TRUE
    (100) basicLit -> . RUNE_LIT
    (101) basicLit -> . STRING_LIT
    (105) INT_LIT -> . HEX_LIT
    (106) INT_LIT -> . OCTAL_LIT
    (107) INT_LIT -> . BINARY_LIT
    (108) INT_LIT -> . DECIMAL_LIT
    (102) FLOAT_LIT -> . . DECIMAL_LIT
    (103) FLOAT_LIT -> . DECIMAL_LIT .
    (104) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    )               shift and go to state 158
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67
    AND             shift and go to state 30
    EXCLM           shift and go to state 31
    MINUS           shift and go to state 32
    (               shift and go to state 36
    IDENTIFIER      shift and go to state 24
    FN              shift and go to state 46
    DECIMAL_LIT     shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    RUNE_LIT        shift and go to state 52
    STRING_LIT      shift and go to state 53
    HEX_LIT         shift and go to state 68
    OCTAL_LIT       shift and go to state 69
    BINARY_LIT      shift and go to state 70
    .               shift and go to state 71

    type_                          shift and go to state 156
    expressionList                 shift and go to state 157
    typeName                       shift and go to state 39
    expression                     shift and go to state 26
    numericType                    shift and go to state 42
    unaryExpr                      shift and go to state 27
    UNARY_OP                       shift and go to state 28
    primaryExpr                    shift and go to state 29
    conversion                     shift and go to state 33
    operand                        shift and go to state 34
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    INT_LIT                        shift and go to state 47
    FLOAT_LIT                      shift and go to state 48

state 121

    (74) conversion -> type_ ( . expression )
    (61) expression -> . expression BINARY_OP unaryExpr
    (62) expression -> . unaryExpr
    (63) unaryExpr -> . UNARY_OP unaryExpr
    (64) unaryExpr -> . primaryExpr
    (145) UNARY_OP -> . AND
    (146) UNARY_OP -> . EXCLM
    (147) UNARY_OP -> . MINUS
    (65) primaryExpr -> . primaryExpr arguments
    (66) primaryExpr -> . conversion
    (67) primaryExpr -> . operand
    (74) conversion -> . type_ ( expression )
    (68) operand -> . ( expression )
    (69) operand -> . operandName
    (70) operand -> . literal
    (75) type_ -> . typeName
    (71) operandName -> . IDENTIFIER
    (72) literal -> . functionLit
    (73) literal -> . basicLit
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (42) functionLit -> . FN function_
    (94) basicLit -> . INT_LIT
    (95) basicLit -> . FLOAT_LIT
    (96) basicLit -> . DECIMAL_LIT EXPONENT
    (97) basicLit -> . FLOAT_LIT EXPONENT
    (98) basicLit -> . FALSE
    (99) basicLit -> . TRUE
    (100) basicLit -> . RUNE_LIT
    (101) basicLit -> . STRING_LIT
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    (105) INT_LIT -> . HEX_LIT
    (106) INT_LIT -> . OCTAL_LIT
    (107) INT_LIT -> . BINARY_LIT
    (108) INT_LIT -> . DECIMAL_LIT
    (102) FLOAT_LIT -> . . DECIMAL_LIT
    (103) FLOAT_LIT -> . DECIMAL_LIT .
    (104) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 30
    EXCLM           shift and go to state 31
    MINUS           shift and go to state 32
    (               shift and go to state 36
    IDENTIFIER      shift and go to state 24
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 46
    DECIMAL_LIT     shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    RUNE_LIT        shift and go to state 52
    STRING_LIT      shift and go to state 53
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67
    HEX_LIT         shift and go to state 68
    OCTAL_LIT       shift and go to state 69
    BINARY_LIT      shift and go to state 70
    .               shift and go to state 71

    type_                          shift and go to state 35
    expression                     shift and go to state 159
    unaryExpr                      shift and go to state 27
    UNARY_OP                       shift and go to state 28
    primaryExpr                    shift and go to state 29
    conversion                     shift and go to state 33
    operand                        shift and go to state 34
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 47
    FLOAT_LIT                      shift and go to state 48

state 122

    (68) operand -> ( expression . )
    (61) expression -> expression . BINARY_OP unaryExpr
    (124) BINARY_OP -> . MUL_OP
    (125) BINARY_OP -> . ADD_OP
    (126) BINARY_OP -> . REL_OP
    (127) BINARY_OP -> . LOGIC_AND
    (128) BINARY_OP -> . LOGIC_OR
    (139) MUL_OP -> . SHR
    (140) MUL_OP -> . SHL
    (141) MUL_OP -> . AND
    (142) MUL_OP -> . MOD
    (143) MUL_OP -> . DIV
    (144) MUL_OP -> . STAR
    (135) ADD_OP -> . XOR
    (136) ADD_OP -> . OR
    (137) ADD_OP -> . MINUS
    (138) ADD_OP -> . PLUS
    (129) REL_OP -> . GE
    (130) REL_OP -> . GT
    (131) REL_OP -> . LE
    (132) REL_OP -> . LT
    (133) REL_OP -> . NE
    (134) REL_OP -> . EQ
    )               shift and go to state 160
    LOGIC_AND       shift and go to state 100
    LOGIC_OR        shift and go to state 101
    SHR             shift and go to state 102
    SHL             shift and go to state 103
    AND             shift and go to state 104
    MOD             shift and go to state 105
    DIV             shift and go to state 106
    STAR            shift and go to state 107
    XOR             shift and go to state 108
    OR              shift and go to state 109
    MINUS           shift and go to state 110
    PLUS            shift and go to state 111
    GE              shift and go to state 112
    GT              shift and go to state 113
    LE              shift and go to state 114
    LT              shift and go to state 115
    NE              shift and go to state 116
    EQ              shift and go to state 117

    BINARY_OP                      shift and go to state 96
    MUL_OP                         shift and go to state 97
    ADD_OP                         shift and go to state 98
    REL_OP                         shift and go to state 99

state 123

    (42) functionLit -> FN function_ .
    (               reduce using rule 42 (functionLit -> FN function_ .)
    LOGIC_AND       reduce using rule 42 (functionLit -> FN function_ .)
    LOGIC_OR        reduce using rule 42 (functionLit -> FN function_ .)
    SHR             reduce using rule 42 (functionLit -> FN function_ .)
    SHL             reduce using rule 42 (functionLit -> FN function_ .)
    AND             reduce using rule 42 (functionLit -> FN function_ .)
    MOD             reduce using rule 42 (functionLit -> FN function_ .)
    DIV             reduce using rule 42 (functionLit -> FN function_ .)
    STAR            reduce using rule 42 (functionLit -> FN function_ .)
    XOR             reduce using rule 42 (functionLit -> FN function_ .)
    OR              reduce using rule 42 (functionLit -> FN function_ .)
    MINUS           reduce using rule 42 (functionLit -> FN function_ .)
    PLUS            reduce using rule 42 (functionLit -> FN function_ .)
    GE              reduce using rule 42 (functionLit -> FN function_ .)
    GT              reduce using rule 42 (functionLit -> FN function_ .)
    LE              reduce using rule 42 (functionLit -> FN function_ .)
    LT              reduce using rule 42 (functionLit -> FN function_ .)
    NE              reduce using rule 42 (functionLit -> FN function_ .)
    EQ              reduce using rule 42 (functionLit -> FN function_ .)
    ,               reduce using rule 42 (functionLit -> FN function_ .)
    NEWL            reduce using rule 42 (functionLit -> FN function_ .)
    ;               reduce using rule 42 (functionLit -> FN function_ .)
    )               reduce using rule 42 (functionLit -> FN function_ .)
    }               reduce using rule 42 (functionLit -> FN function_ .)


state 124

    (30) function_ -> signature . block
    (47) block -> . { statementList }
    {               shift and go to state 162

    block                          shift and go to state 161

state 125

    (31) signature -> parameters .
    (32) signature -> parameters . result
    (33) result -> . type_
    (34) result -> . parameters
    (75) type_ -> . typeName
    (35) parameters -> . ( parameterList , )
    (36) parameters -> . ( parameterList )
    (37) parameters -> . ( )
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    {               reduce using rule 31 (signature -> parameters .)
    NEWL            reduce using rule 31 (signature -> parameters .)
    ;               reduce using rule 31 (signature -> parameters .)
    (               shift and go to state 126
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67

    parameters                     shift and go to state 163
    result                         shift and go to state 164
    type_                          shift and go to state 165
    typeName                       shift and go to state 39
    numericType                    shift and go to state 42

state 126

    (35) parameters -> ( . parameterList , )
    (36) parameters -> ( . parameterList )
    (37) parameters -> ( . )
    (38) parameterList -> . parameterList , parameterDecl
    (39) parameterList -> . parameterDecl
    (40) parameterDecl -> . type_
    (41) parameterDecl -> . identifierList type_
    (75) type_ -> . typeName
    (26) identifierList -> . identifierList , IDENTIFIER
    (27) identifierList -> . IDENTIFIER
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    )               shift and go to state 167
    IDENTIFIER      shift and go to state 171
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67

    parameterList                  shift and go to state 166
    parameterDecl                  shift and go to state 168
    type_                          shift and go to state 169
    identifierList                 shift and go to state 170
    typeName                       shift and go to state 39
    numericType                    shift and go to state 42

state 127

    (97) basicLit -> FLOAT_LIT EXPONENT .
    (               reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    LOGIC_AND       reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    LOGIC_OR        reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    SHR             reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    SHL             reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    AND             reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    MOD             reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    DIV             reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    STAR            reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    XOR             reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    OR              reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    MINUS           reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    PLUS            reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    GE              reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    GT              reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    LE              reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    LT              reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    NE              reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    EQ              reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    ,               reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    NEWL            reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    ;               reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    )               reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)
    }               reduce using rule 97 (basicLit -> FLOAT_LIT EXPONENT .)


state 128

    (96) basicLit -> DECIMAL_LIT EXPONENT .
    (               reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    LOGIC_AND       reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    LOGIC_OR        reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    SHR             reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    SHL             reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    AND             reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    MOD             reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    DIV             reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    STAR            reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    XOR             reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    OR              reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    MINUS           reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    PLUS            reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    GE              reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    GT              reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    LE              reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    LT              reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    NE              reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    EQ              reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    ,               reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    NEWL            reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    ;               reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    )               reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)
    }               reduce using rule 96 (basicLit -> DECIMAL_LIT EXPONENT .)


state 129

    (103) FLOAT_LIT -> DECIMAL_LIT . .
    (104) FLOAT_LIT -> DECIMAL_LIT . . DECIMAL_LIT
    EXPONENT        reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    (               reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    LOGIC_AND       reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    LOGIC_OR        reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    SHR             reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    SHL             reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    AND             reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    MOD             reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    DIV             reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    STAR            reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    XOR             reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    OR              reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    MINUS           reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    PLUS            reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    GE              reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    GT              reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    LE              reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    LT              reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    NE              reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    EQ              reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    ,               reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    NEWL            reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    ;               reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    )               reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    }               reduce using rule 103 (FLOAT_LIT -> DECIMAL_LIT . .)
    DECIMAL_LIT     shift and go to state 172


state 130

    (102) FLOAT_LIT -> . DECIMAL_LIT .
    EXPONENT        reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    (               reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    SHR             reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    SHL             reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    AND             reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    MOD             reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    DIV             reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    STAR            reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    XOR             reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    OR              reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    MINUS           reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    PLUS            reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    GE              reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    GT              reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    LE              reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    LT              reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    NE              reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    EQ              reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    ,               reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    NEWL            reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    ;               reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    )               reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)
    }               reduce using rule 102 (FLOAT_LIT -> . DECIMAL_LIT .)


state 131

    (1) sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls orphanStmtList .
    $end            reduce using rule 1 (sourceFile -> cPreprocessors moduleClause importDecls topLevelDecls orphanStmtList .)


state 132

    (20) topLevelDecls -> topLevelDecls topLevelDecl . eos
    (109) eos -> . eos NEWL
    (110) eos -> . NEWL
    (111) eos -> . eos ;
    (112) eos -> . ;
    NEWL            shift and go to state 11
    ;               shift and go to state 12

    eos                            shift and go to state 173

state 133

    (11) importDecls -> importDecls importDecl eos .
    (109) eos -> eos . NEWL
    (111) eos -> eos . ;
    IMPORT          reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    FN              reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    IDENTIFIER      reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    AND             reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    EXCLM           reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    MINUS           reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    (               reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    STRING          reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    BOOL            reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    RUNE            reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    DECIMAL_LIT     reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    FALSE           reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    TRUE            reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    RUNE_LIT        reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    STRING_LIT      reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    F32             reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    F64             reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    INT             reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    ISIZE           reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    I64             reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    I32             reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    I16             reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    I8              reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    UINT            reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    USIZE           reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    U64             reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    U32             reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    U16             reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    U8              reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    HEX_LIT         reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    OCTAL_LIT       reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    BINARY_LIT      reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    .               reduce using rule 11 (importDecls -> importDecls importDecl eos .)
    NEWL            shift and go to state 22
    ;               shift and go to state 23


state 134

    (21) topLevelDecls -> topLevelDecl eos .
    (109) eos -> eos . NEWL
    (111) eos -> eos . ;
    FN              reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    IDENTIFIER      reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    AND             reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    EXCLM           reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    MINUS           reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    (               reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    STRING          reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    BOOL            reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    RUNE            reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    DECIMAL_LIT     reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    FALSE           reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    TRUE            reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    RUNE_LIT        reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    STRING_LIT      reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    F32             reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    F64             reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    INT             reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    ISIZE           reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    I64             reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    I32             reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    I16             reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    I8              reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    UINT            reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    USIZE           reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    U64             reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    U32             reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    U16             reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    U8              reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    HEX_LIT         reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    OCTAL_LIT       reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    BINARY_LIT      reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    .               reduce using rule 21 (topLevelDecls -> topLevelDecl eos .)
    NEWL            shift and go to state 22
    ;               shift and go to state 23


state 135

    (22) orphanStmtList -> statementList eos .
    (45) statementList -> statementList eos . statement
    (109) eos -> eos . NEWL
    (111) eos -> eos . ;
    (48) statement -> . simpleStmt
    (49) statement -> . declaration
    (50) simpleStmt -> . assignment
    (51) simpleStmt -> . expressionStmt
    (24) declaration -> . varDecl
    (53) assignment -> . identifierList assign_op expressionList
    (52) expressionStmt -> . expression
    (25) varDecl -> . identifierList DECL_ASGN expressionList
    (26) identifierList -> . identifierList , IDENTIFIER
    (27) identifierList -> . IDENTIFIER
    (61) expression -> . expression BINARY_OP unaryExpr
    (62) expression -> . unaryExpr
    (63) unaryExpr -> . UNARY_OP unaryExpr
    (64) unaryExpr -> . primaryExpr
    (145) UNARY_OP -> . AND
    (146) UNARY_OP -> . EXCLM
    (147) UNARY_OP -> . MINUS
    (65) primaryExpr -> . primaryExpr arguments
    (66) primaryExpr -> . conversion
    (67) primaryExpr -> . operand
    (74) conversion -> . type_ ( expression )
    (68) operand -> . ( expression )
    (69) operand -> . operandName
    (70) operand -> . literal
    (75) type_ -> . typeName
    (71) operandName -> . IDENTIFIER
    (72) literal -> . functionLit
    (73) literal -> . basicLit
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (42) functionLit -> . FN function_
    (94) basicLit -> . INT_LIT
    (95) basicLit -> . FLOAT_LIT
    (96) basicLit -> . DECIMAL_LIT EXPONENT
    (97) basicLit -> . FLOAT_LIT EXPONENT
    (98) basicLit -> . FALSE
    (99) basicLit -> . TRUE
    (100) basicLit -> . RUNE_LIT
    (101) basicLit -> . STRING_LIT
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    (105) INT_LIT -> . HEX_LIT
    (106) INT_LIT -> . OCTAL_LIT
    (107) INT_LIT -> . BINARY_LIT
    (108) INT_LIT -> . DECIMAL_LIT
    (102) FLOAT_LIT -> . . DECIMAL_LIT
    (103) FLOAT_LIT -> . DECIMAL_LIT .
    (104) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    $end            reduce using rule 22 (orphanStmtList -> statementList eos .)
    NEWL            shift and go to state 22
    ;               shift and go to state 23
    IDENTIFIER      shift and go to state 80
    AND             shift and go to state 30
    EXCLM           shift and go to state 31
    MINUS           shift and go to state 32
    (               shift and go to state 36
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 46
    DECIMAL_LIT     shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    RUNE_LIT        shift and go to state 52
    STRING_LIT      shift and go to state 53
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67
    HEX_LIT         shift and go to state 68
    OCTAL_LIT       shift and go to state 69
    BINARY_LIT      shift and go to state 70
    .               shift and go to state 71

    statement                      shift and go to state 174
    simpleStmt                     shift and go to state 81
    declaration                    shift and go to state 82
    assignment                     shift and go to state 83
    expressionStmt                 shift and go to state 84
    varDecl                        shift and go to state 85
    identifierList                 shift and go to state 86
    expression                     shift and go to state 87
    unaryExpr                      shift and go to state 27
    UNARY_OP                       shift and go to state 28
    primaryExpr                    shift and go to state 29
    conversion                     shift and go to state 33
    operand                        shift and go to state 34
    type_                          shift and go to state 35
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 47
    FLOAT_LIT                      shift and go to state 48

state 136

    (28) functionDecl -> FN IDENTIFIER . signature
    (29) functionDecl -> FN IDENTIFIER . function_
    (31) signature -> . parameters
    (32) signature -> . parameters result
    (30) function_ -> . signature block
    (35) parameters -> . ( parameterList , )
    (36) parameters -> . ( parameterList )
    (37) parameters -> . ( )
    (               shift and go to state 126

    signature                      shift and go to state 175
    function_                      shift and go to state 176
    parameters                     shift and go to state 125

state 137

    (53) assignment -> identifierList assign_op . expressionList
    (43) expressionList -> . expressionList , expression
    (44) expressionList -> . expression
    (61) expression -> . expression BINARY_OP unaryExpr
    (62) expression -> . unaryExpr
    (63) unaryExpr -> . UNARY_OP unaryExpr
    (64) unaryExpr -> . primaryExpr
    (145) UNARY_OP -> . AND
    (146) UNARY_OP -> . EXCLM
    (147) UNARY_OP -> . MINUS
    (65) primaryExpr -> . primaryExpr arguments
    (66) primaryExpr -> . conversion
    (67) primaryExpr -> . operand
    (74) conversion -> . type_ ( expression )
    (68) operand -> . ( expression )
    (69) operand -> . operandName
    (70) operand -> . literal
    (75) type_ -> . typeName
    (71) operandName -> . IDENTIFIER
    (72) literal -> . functionLit
    (73) literal -> . basicLit
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (42) functionLit -> . FN function_
    (94) basicLit -> . INT_LIT
    (95) basicLit -> . FLOAT_LIT
    (96) basicLit -> . DECIMAL_LIT EXPONENT
    (97) basicLit -> . FLOAT_LIT EXPONENT
    (98) basicLit -> . FALSE
    (99) basicLit -> . TRUE
    (100) basicLit -> . RUNE_LIT
    (101) basicLit -> . STRING_LIT
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    (105) INT_LIT -> . HEX_LIT
    (106) INT_LIT -> . OCTAL_LIT
    (107) INT_LIT -> . BINARY_LIT
    (108) INT_LIT -> . DECIMAL_LIT
    (102) FLOAT_LIT -> . . DECIMAL_LIT
    (103) FLOAT_LIT -> . DECIMAL_LIT .
    (104) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 30
    EXCLM           shift and go to state 31
    MINUS           shift and go to state 32
    (               shift and go to state 36
    IDENTIFIER      shift and go to state 24
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 46
    DECIMAL_LIT     shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    RUNE_LIT        shift and go to state 52
    STRING_LIT      shift and go to state 53
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67
    HEX_LIT         shift and go to state 68
    OCTAL_LIT       shift and go to state 69
    BINARY_LIT      shift and go to state 70
    .               shift and go to state 71

    expressionList                 shift and go to state 177
    expression                     shift and go to state 26
    unaryExpr                      shift and go to state 27
    UNARY_OP                       shift and go to state 28
    primaryExpr                    shift and go to state 29
    conversion                     shift and go to state 33
    operand                        shift and go to state 34
    type_                          shift and go to state 35
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 47
    FLOAT_LIT                      shift and go to state 48

state 138

    (25) varDecl -> identifierList DECL_ASGN . expressionList
    (43) expressionList -> . expressionList , expression
    (44) expressionList -> . expression
    (61) expression -> . expression BINARY_OP unaryExpr
    (62) expression -> . unaryExpr
    (63) unaryExpr -> . UNARY_OP unaryExpr
    (64) unaryExpr -> . primaryExpr
    (145) UNARY_OP -> . AND
    (146) UNARY_OP -> . EXCLM
    (147) UNARY_OP -> . MINUS
    (65) primaryExpr -> . primaryExpr arguments
    (66) primaryExpr -> . conversion
    (67) primaryExpr -> . operand
    (74) conversion -> . type_ ( expression )
    (68) operand -> . ( expression )
    (69) operand -> . operandName
    (70) operand -> . literal
    (75) type_ -> . typeName
    (71) operandName -> . IDENTIFIER
    (72) literal -> . functionLit
    (73) literal -> . basicLit
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (42) functionLit -> . FN function_
    (94) basicLit -> . INT_LIT
    (95) basicLit -> . FLOAT_LIT
    (96) basicLit -> . DECIMAL_LIT EXPONENT
    (97) basicLit -> . FLOAT_LIT EXPONENT
    (98) basicLit -> . FALSE
    (99) basicLit -> . TRUE
    (100) basicLit -> . RUNE_LIT
    (101) basicLit -> . STRING_LIT
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    (105) INT_LIT -> . HEX_LIT
    (106) INT_LIT -> . OCTAL_LIT
    (107) INT_LIT -> . BINARY_LIT
    (108) INT_LIT -> . DECIMAL_LIT
    (102) FLOAT_LIT -> . . DECIMAL_LIT
    (103) FLOAT_LIT -> . DECIMAL_LIT .
    (104) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    AND             shift and go to state 30
    EXCLM           shift and go to state 31
    MINUS           shift and go to state 32
    (               shift and go to state 36
    IDENTIFIER      shift and go to state 24
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 46
    DECIMAL_LIT     shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    RUNE_LIT        shift and go to state 52
    STRING_LIT      shift and go to state 53
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67
    HEX_LIT         shift and go to state 68
    OCTAL_LIT       shift and go to state 69
    BINARY_LIT      shift and go to state 70
    .               shift and go to state 71

    expressionList                 shift and go to state 178
    expression                     shift and go to state 26
    unaryExpr                      shift and go to state 27
    UNARY_OP                       shift and go to state 28
    primaryExpr                    shift and go to state 29
    conversion                     shift and go to state 33
    operand                        shift and go to state 34
    type_                          shift and go to state 35
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 47
    FLOAT_LIT                      shift and go to state 48

state 139

    (26) identifierList -> identifierList , . IDENTIFIER
    IDENTIFIER      shift and go to state 179


state 140

    (113) assign_op -> SHR_ASGN .
    AND             reduce using rule 113 (assign_op -> SHR_ASGN .)
    EXCLM           reduce using rule 113 (assign_op -> SHR_ASGN .)
    MINUS           reduce using rule 113 (assign_op -> SHR_ASGN .)
    (               reduce using rule 113 (assign_op -> SHR_ASGN .)
    IDENTIFIER      reduce using rule 113 (assign_op -> SHR_ASGN .)
    STRING          reduce using rule 113 (assign_op -> SHR_ASGN .)
    BOOL            reduce using rule 113 (assign_op -> SHR_ASGN .)
    RUNE            reduce using rule 113 (assign_op -> SHR_ASGN .)
    FN              reduce using rule 113 (assign_op -> SHR_ASGN .)
    DECIMAL_LIT     reduce using rule 113 (assign_op -> SHR_ASGN .)
    FALSE           reduce using rule 113 (assign_op -> SHR_ASGN .)
    TRUE            reduce using rule 113 (assign_op -> SHR_ASGN .)
    RUNE_LIT        reduce using rule 113 (assign_op -> SHR_ASGN .)
    STRING_LIT      reduce using rule 113 (assign_op -> SHR_ASGN .)
    F32             reduce using rule 113 (assign_op -> SHR_ASGN .)
    F64             reduce using rule 113 (assign_op -> SHR_ASGN .)
    INT             reduce using rule 113 (assign_op -> SHR_ASGN .)
    ISIZE           reduce using rule 113 (assign_op -> SHR_ASGN .)
    I64             reduce using rule 113 (assign_op -> SHR_ASGN .)
    I32             reduce using rule 113 (assign_op -> SHR_ASGN .)
    I16             reduce using rule 113 (assign_op -> SHR_ASGN .)
    I8              reduce using rule 113 (assign_op -> SHR_ASGN .)
    UINT            reduce using rule 113 (assign_op -> SHR_ASGN .)
    USIZE           reduce using rule 113 (assign_op -> SHR_ASGN .)
    U64             reduce using rule 113 (assign_op -> SHR_ASGN .)
    U32             reduce using rule 113 (assign_op -> SHR_ASGN .)
    U16             reduce using rule 113 (assign_op -> SHR_ASGN .)
    U8              reduce using rule 113 (assign_op -> SHR_ASGN .)
    HEX_LIT         reduce using rule 113 (assign_op -> SHR_ASGN .)
    OCTAL_LIT       reduce using rule 113 (assign_op -> SHR_ASGN .)
    BINARY_LIT      reduce using rule 113 (assign_op -> SHR_ASGN .)
    .               reduce using rule 113 (assign_op -> SHR_ASGN .)


state 141

    (114) assign_op -> SHL_ASGN .
    AND             reduce using rule 114 (assign_op -> SHL_ASGN .)
    EXCLM           reduce using rule 114 (assign_op -> SHL_ASGN .)
    MINUS           reduce using rule 114 (assign_op -> SHL_ASGN .)
    (               reduce using rule 114 (assign_op -> SHL_ASGN .)
    IDENTIFIER      reduce using rule 114 (assign_op -> SHL_ASGN .)
    STRING          reduce using rule 114 (assign_op -> SHL_ASGN .)
    BOOL            reduce using rule 114 (assign_op -> SHL_ASGN .)
    RUNE            reduce using rule 114 (assign_op -> SHL_ASGN .)
    FN              reduce using rule 114 (assign_op -> SHL_ASGN .)
    DECIMAL_LIT     reduce using rule 114 (assign_op -> SHL_ASGN .)
    FALSE           reduce using rule 114 (assign_op -> SHL_ASGN .)
    TRUE            reduce using rule 114 (assign_op -> SHL_ASGN .)
    RUNE_LIT        reduce using rule 114 (assign_op -> SHL_ASGN .)
    STRING_LIT      reduce using rule 114 (assign_op -> SHL_ASGN .)
    F32             reduce using rule 114 (assign_op -> SHL_ASGN .)
    F64             reduce using rule 114 (assign_op -> SHL_ASGN .)
    INT             reduce using rule 114 (assign_op -> SHL_ASGN .)
    ISIZE           reduce using rule 114 (assign_op -> SHL_ASGN .)
    I64             reduce using rule 114 (assign_op -> SHL_ASGN .)
    I32             reduce using rule 114 (assign_op -> SHL_ASGN .)
    I16             reduce using rule 114 (assign_op -> SHL_ASGN .)
    I8              reduce using rule 114 (assign_op -> SHL_ASGN .)
    UINT            reduce using rule 114 (assign_op -> SHL_ASGN .)
    USIZE           reduce using rule 114 (assign_op -> SHL_ASGN .)
    U64             reduce using rule 114 (assign_op -> SHL_ASGN .)
    U32             reduce using rule 114 (assign_op -> SHL_ASGN .)
    U16             reduce using rule 114 (assign_op -> SHL_ASGN .)
    U8              reduce using rule 114 (assign_op -> SHL_ASGN .)
    HEX_LIT         reduce using rule 114 (assign_op -> SHL_ASGN .)
    OCTAL_LIT       reduce using rule 114 (assign_op -> SHL_ASGN .)
    BINARY_LIT      reduce using rule 114 (assign_op -> SHL_ASGN .)
    .               reduce using rule 114 (assign_op -> SHL_ASGN .)


state 142

    (115) assign_op -> MOD_ASGN .
    AND             reduce using rule 115 (assign_op -> MOD_ASGN .)
    EXCLM           reduce using rule 115 (assign_op -> MOD_ASGN .)
    MINUS           reduce using rule 115 (assign_op -> MOD_ASGN .)
    (               reduce using rule 115 (assign_op -> MOD_ASGN .)
    IDENTIFIER      reduce using rule 115 (assign_op -> MOD_ASGN .)
    STRING          reduce using rule 115 (assign_op -> MOD_ASGN .)
    BOOL            reduce using rule 115 (assign_op -> MOD_ASGN .)
    RUNE            reduce using rule 115 (assign_op -> MOD_ASGN .)
    FN              reduce using rule 115 (assign_op -> MOD_ASGN .)
    DECIMAL_LIT     reduce using rule 115 (assign_op -> MOD_ASGN .)
    FALSE           reduce using rule 115 (assign_op -> MOD_ASGN .)
    TRUE            reduce using rule 115 (assign_op -> MOD_ASGN .)
    RUNE_LIT        reduce using rule 115 (assign_op -> MOD_ASGN .)
    STRING_LIT      reduce using rule 115 (assign_op -> MOD_ASGN .)
    F32             reduce using rule 115 (assign_op -> MOD_ASGN .)
    F64             reduce using rule 115 (assign_op -> MOD_ASGN .)
    INT             reduce using rule 115 (assign_op -> MOD_ASGN .)
    ISIZE           reduce using rule 115 (assign_op -> MOD_ASGN .)
    I64             reduce using rule 115 (assign_op -> MOD_ASGN .)
    I32             reduce using rule 115 (assign_op -> MOD_ASGN .)
    I16             reduce using rule 115 (assign_op -> MOD_ASGN .)
    I8              reduce using rule 115 (assign_op -> MOD_ASGN .)
    UINT            reduce using rule 115 (assign_op -> MOD_ASGN .)
    USIZE           reduce using rule 115 (assign_op -> MOD_ASGN .)
    U64             reduce using rule 115 (assign_op -> MOD_ASGN .)
    U32             reduce using rule 115 (assign_op -> MOD_ASGN .)
    U16             reduce using rule 115 (assign_op -> MOD_ASGN .)
    U8              reduce using rule 115 (assign_op -> MOD_ASGN .)
    HEX_LIT         reduce using rule 115 (assign_op -> MOD_ASGN .)
    OCTAL_LIT       reduce using rule 115 (assign_op -> MOD_ASGN .)
    BINARY_LIT      reduce using rule 115 (assign_op -> MOD_ASGN .)
    .               reduce using rule 115 (assign_op -> MOD_ASGN .)


state 143

    (116) assign_op -> DIV_ASGN .
    AND             reduce using rule 116 (assign_op -> DIV_ASGN .)
    EXCLM           reduce using rule 116 (assign_op -> DIV_ASGN .)
    MINUS           reduce using rule 116 (assign_op -> DIV_ASGN .)
    (               reduce using rule 116 (assign_op -> DIV_ASGN .)
    IDENTIFIER      reduce using rule 116 (assign_op -> DIV_ASGN .)
    STRING          reduce using rule 116 (assign_op -> DIV_ASGN .)
    BOOL            reduce using rule 116 (assign_op -> DIV_ASGN .)
    RUNE            reduce using rule 116 (assign_op -> DIV_ASGN .)
    FN              reduce using rule 116 (assign_op -> DIV_ASGN .)
    DECIMAL_LIT     reduce using rule 116 (assign_op -> DIV_ASGN .)
    FALSE           reduce using rule 116 (assign_op -> DIV_ASGN .)
    TRUE            reduce using rule 116 (assign_op -> DIV_ASGN .)
    RUNE_LIT        reduce using rule 116 (assign_op -> DIV_ASGN .)
    STRING_LIT      reduce using rule 116 (assign_op -> DIV_ASGN .)
    F32             reduce using rule 116 (assign_op -> DIV_ASGN .)
    F64             reduce using rule 116 (assign_op -> DIV_ASGN .)
    INT             reduce using rule 116 (assign_op -> DIV_ASGN .)
    ISIZE           reduce using rule 116 (assign_op -> DIV_ASGN .)
    I64             reduce using rule 116 (assign_op -> DIV_ASGN .)
    I32             reduce using rule 116 (assign_op -> DIV_ASGN .)
    I16             reduce using rule 116 (assign_op -> DIV_ASGN .)
    I8              reduce using rule 116 (assign_op -> DIV_ASGN .)
    UINT            reduce using rule 116 (assign_op -> DIV_ASGN .)
    USIZE           reduce using rule 116 (assign_op -> DIV_ASGN .)
    U64             reduce using rule 116 (assign_op -> DIV_ASGN .)
    U32             reduce using rule 116 (assign_op -> DIV_ASGN .)
    U16             reduce using rule 116 (assign_op -> DIV_ASGN .)
    U8              reduce using rule 116 (assign_op -> DIV_ASGN .)
    HEX_LIT         reduce using rule 116 (assign_op -> DIV_ASGN .)
    OCTAL_LIT       reduce using rule 116 (assign_op -> DIV_ASGN .)
    BINARY_LIT      reduce using rule 116 (assign_op -> DIV_ASGN .)
    .               reduce using rule 116 (assign_op -> DIV_ASGN .)


state 144

    (117) assign_op -> OR_ASGN .
    AND             reduce using rule 117 (assign_op -> OR_ASGN .)
    EXCLM           reduce using rule 117 (assign_op -> OR_ASGN .)
    MINUS           reduce using rule 117 (assign_op -> OR_ASGN .)
    (               reduce using rule 117 (assign_op -> OR_ASGN .)
    IDENTIFIER      reduce using rule 117 (assign_op -> OR_ASGN .)
    STRING          reduce using rule 117 (assign_op -> OR_ASGN .)
    BOOL            reduce using rule 117 (assign_op -> OR_ASGN .)
    RUNE            reduce using rule 117 (assign_op -> OR_ASGN .)
    FN              reduce using rule 117 (assign_op -> OR_ASGN .)
    DECIMAL_LIT     reduce using rule 117 (assign_op -> OR_ASGN .)
    FALSE           reduce using rule 117 (assign_op -> OR_ASGN .)
    TRUE            reduce using rule 117 (assign_op -> OR_ASGN .)
    RUNE_LIT        reduce using rule 117 (assign_op -> OR_ASGN .)
    STRING_LIT      reduce using rule 117 (assign_op -> OR_ASGN .)
    F32             reduce using rule 117 (assign_op -> OR_ASGN .)
    F64             reduce using rule 117 (assign_op -> OR_ASGN .)
    INT             reduce using rule 117 (assign_op -> OR_ASGN .)
    ISIZE           reduce using rule 117 (assign_op -> OR_ASGN .)
    I64             reduce using rule 117 (assign_op -> OR_ASGN .)
    I32             reduce using rule 117 (assign_op -> OR_ASGN .)
    I16             reduce using rule 117 (assign_op -> OR_ASGN .)
    I8              reduce using rule 117 (assign_op -> OR_ASGN .)
    UINT            reduce using rule 117 (assign_op -> OR_ASGN .)
    USIZE           reduce using rule 117 (assign_op -> OR_ASGN .)
    U64             reduce using rule 117 (assign_op -> OR_ASGN .)
    U32             reduce using rule 117 (assign_op -> OR_ASGN .)
    U16             reduce using rule 117 (assign_op -> OR_ASGN .)
    U8              reduce using rule 117 (assign_op -> OR_ASGN .)
    HEX_LIT         reduce using rule 117 (assign_op -> OR_ASGN .)
    OCTAL_LIT       reduce using rule 117 (assign_op -> OR_ASGN .)
    BINARY_LIT      reduce using rule 117 (assign_op -> OR_ASGN .)
    .               reduce using rule 117 (assign_op -> OR_ASGN .)


state 145

    (118) assign_op -> AND_ASGN .
    AND             reduce using rule 118 (assign_op -> AND_ASGN .)
    EXCLM           reduce using rule 118 (assign_op -> AND_ASGN .)
    MINUS           reduce using rule 118 (assign_op -> AND_ASGN .)
    (               reduce using rule 118 (assign_op -> AND_ASGN .)
    IDENTIFIER      reduce using rule 118 (assign_op -> AND_ASGN .)
    STRING          reduce using rule 118 (assign_op -> AND_ASGN .)
    BOOL            reduce using rule 118 (assign_op -> AND_ASGN .)
    RUNE            reduce using rule 118 (assign_op -> AND_ASGN .)
    FN              reduce using rule 118 (assign_op -> AND_ASGN .)
    DECIMAL_LIT     reduce using rule 118 (assign_op -> AND_ASGN .)
    FALSE           reduce using rule 118 (assign_op -> AND_ASGN .)
    TRUE            reduce using rule 118 (assign_op -> AND_ASGN .)
    RUNE_LIT        reduce using rule 118 (assign_op -> AND_ASGN .)
    STRING_LIT      reduce using rule 118 (assign_op -> AND_ASGN .)
    F32             reduce using rule 118 (assign_op -> AND_ASGN .)
    F64             reduce using rule 118 (assign_op -> AND_ASGN .)
    INT             reduce using rule 118 (assign_op -> AND_ASGN .)
    ISIZE           reduce using rule 118 (assign_op -> AND_ASGN .)
    I64             reduce using rule 118 (assign_op -> AND_ASGN .)
    I32             reduce using rule 118 (assign_op -> AND_ASGN .)
    I16             reduce using rule 118 (assign_op -> AND_ASGN .)
    I8              reduce using rule 118 (assign_op -> AND_ASGN .)
    UINT            reduce using rule 118 (assign_op -> AND_ASGN .)
    USIZE           reduce using rule 118 (assign_op -> AND_ASGN .)
    U64             reduce using rule 118 (assign_op -> AND_ASGN .)
    U32             reduce using rule 118 (assign_op -> AND_ASGN .)
    U16             reduce using rule 118 (assign_op -> AND_ASGN .)
    U8              reduce using rule 118 (assign_op -> AND_ASGN .)
    HEX_LIT         reduce using rule 118 (assign_op -> AND_ASGN .)
    OCTAL_LIT       reduce using rule 118 (assign_op -> AND_ASGN .)
    BINARY_LIT      reduce using rule 118 (assign_op -> AND_ASGN .)
    .               reduce using rule 118 (assign_op -> AND_ASGN .)


state 146

    (119) assign_op -> STAR_ASGN .
    AND             reduce using rule 119 (assign_op -> STAR_ASGN .)
    EXCLM           reduce using rule 119 (assign_op -> STAR_ASGN .)
    MINUS           reduce using rule 119 (assign_op -> STAR_ASGN .)
    (               reduce using rule 119 (assign_op -> STAR_ASGN .)
    IDENTIFIER      reduce using rule 119 (assign_op -> STAR_ASGN .)
    STRING          reduce using rule 119 (assign_op -> STAR_ASGN .)
    BOOL            reduce using rule 119 (assign_op -> STAR_ASGN .)
    RUNE            reduce using rule 119 (assign_op -> STAR_ASGN .)
    FN              reduce using rule 119 (assign_op -> STAR_ASGN .)
    DECIMAL_LIT     reduce using rule 119 (assign_op -> STAR_ASGN .)
    FALSE           reduce using rule 119 (assign_op -> STAR_ASGN .)
    TRUE            reduce using rule 119 (assign_op -> STAR_ASGN .)
    RUNE_LIT        reduce using rule 119 (assign_op -> STAR_ASGN .)
    STRING_LIT      reduce using rule 119 (assign_op -> STAR_ASGN .)
    F32             reduce using rule 119 (assign_op -> STAR_ASGN .)
    F64             reduce using rule 119 (assign_op -> STAR_ASGN .)
    INT             reduce using rule 119 (assign_op -> STAR_ASGN .)
    ISIZE           reduce using rule 119 (assign_op -> STAR_ASGN .)
    I64             reduce using rule 119 (assign_op -> STAR_ASGN .)
    I32             reduce using rule 119 (assign_op -> STAR_ASGN .)
    I16             reduce using rule 119 (assign_op -> STAR_ASGN .)
    I8              reduce using rule 119 (assign_op -> STAR_ASGN .)
    UINT            reduce using rule 119 (assign_op -> STAR_ASGN .)
    USIZE           reduce using rule 119 (assign_op -> STAR_ASGN .)
    U64             reduce using rule 119 (assign_op -> STAR_ASGN .)
    U32             reduce using rule 119 (assign_op -> STAR_ASGN .)
    U16             reduce using rule 119 (assign_op -> STAR_ASGN .)
    U8              reduce using rule 119 (assign_op -> STAR_ASGN .)
    HEX_LIT         reduce using rule 119 (assign_op -> STAR_ASGN .)
    OCTAL_LIT       reduce using rule 119 (assign_op -> STAR_ASGN .)
    BINARY_LIT      reduce using rule 119 (assign_op -> STAR_ASGN .)
    .               reduce using rule 119 (assign_op -> STAR_ASGN .)


state 147

    (120) assign_op -> XOR_ASGN .
    AND             reduce using rule 120 (assign_op -> XOR_ASGN .)
    EXCLM           reduce using rule 120 (assign_op -> XOR_ASGN .)
    MINUS           reduce using rule 120 (assign_op -> XOR_ASGN .)
    (               reduce using rule 120 (assign_op -> XOR_ASGN .)
    IDENTIFIER      reduce using rule 120 (assign_op -> XOR_ASGN .)
    STRING          reduce using rule 120 (assign_op -> XOR_ASGN .)
    BOOL            reduce using rule 120 (assign_op -> XOR_ASGN .)
    RUNE            reduce using rule 120 (assign_op -> XOR_ASGN .)
    FN              reduce using rule 120 (assign_op -> XOR_ASGN .)
    DECIMAL_LIT     reduce using rule 120 (assign_op -> XOR_ASGN .)
    FALSE           reduce using rule 120 (assign_op -> XOR_ASGN .)
    TRUE            reduce using rule 120 (assign_op -> XOR_ASGN .)
    RUNE_LIT        reduce using rule 120 (assign_op -> XOR_ASGN .)
    STRING_LIT      reduce using rule 120 (assign_op -> XOR_ASGN .)
    F32             reduce using rule 120 (assign_op -> XOR_ASGN .)
    F64             reduce using rule 120 (assign_op -> XOR_ASGN .)
    INT             reduce using rule 120 (assign_op -> XOR_ASGN .)
    ISIZE           reduce using rule 120 (assign_op -> XOR_ASGN .)
    I64             reduce using rule 120 (assign_op -> XOR_ASGN .)
    I32             reduce using rule 120 (assign_op -> XOR_ASGN .)
    I16             reduce using rule 120 (assign_op -> XOR_ASGN .)
    I8              reduce using rule 120 (assign_op -> XOR_ASGN .)
    UINT            reduce using rule 120 (assign_op -> XOR_ASGN .)
    USIZE           reduce using rule 120 (assign_op -> XOR_ASGN .)
    U64             reduce using rule 120 (assign_op -> XOR_ASGN .)
    U32             reduce using rule 120 (assign_op -> XOR_ASGN .)
    U16             reduce using rule 120 (assign_op -> XOR_ASGN .)
    U8              reduce using rule 120 (assign_op -> XOR_ASGN .)
    HEX_LIT         reduce using rule 120 (assign_op -> XOR_ASGN .)
    OCTAL_LIT       reduce using rule 120 (assign_op -> XOR_ASGN .)
    BINARY_LIT      reduce using rule 120 (assign_op -> XOR_ASGN .)
    .               reduce using rule 120 (assign_op -> XOR_ASGN .)


state 148

    (121) assign_op -> MINUS_ASGN .
    AND             reduce using rule 121 (assign_op -> MINUS_ASGN .)
    EXCLM           reduce using rule 121 (assign_op -> MINUS_ASGN .)
    MINUS           reduce using rule 121 (assign_op -> MINUS_ASGN .)
    (               reduce using rule 121 (assign_op -> MINUS_ASGN .)
    IDENTIFIER      reduce using rule 121 (assign_op -> MINUS_ASGN .)
    STRING          reduce using rule 121 (assign_op -> MINUS_ASGN .)
    BOOL            reduce using rule 121 (assign_op -> MINUS_ASGN .)
    RUNE            reduce using rule 121 (assign_op -> MINUS_ASGN .)
    FN              reduce using rule 121 (assign_op -> MINUS_ASGN .)
    DECIMAL_LIT     reduce using rule 121 (assign_op -> MINUS_ASGN .)
    FALSE           reduce using rule 121 (assign_op -> MINUS_ASGN .)
    TRUE            reduce using rule 121 (assign_op -> MINUS_ASGN .)
    RUNE_LIT        reduce using rule 121 (assign_op -> MINUS_ASGN .)
    STRING_LIT      reduce using rule 121 (assign_op -> MINUS_ASGN .)
    F32             reduce using rule 121 (assign_op -> MINUS_ASGN .)
    F64             reduce using rule 121 (assign_op -> MINUS_ASGN .)
    INT             reduce using rule 121 (assign_op -> MINUS_ASGN .)
    ISIZE           reduce using rule 121 (assign_op -> MINUS_ASGN .)
    I64             reduce using rule 121 (assign_op -> MINUS_ASGN .)
    I32             reduce using rule 121 (assign_op -> MINUS_ASGN .)
    I16             reduce using rule 121 (assign_op -> MINUS_ASGN .)
    I8              reduce using rule 121 (assign_op -> MINUS_ASGN .)
    UINT            reduce using rule 121 (assign_op -> MINUS_ASGN .)
    USIZE           reduce using rule 121 (assign_op -> MINUS_ASGN .)
    U64             reduce using rule 121 (assign_op -> MINUS_ASGN .)
    U32             reduce using rule 121 (assign_op -> MINUS_ASGN .)
    U16             reduce using rule 121 (assign_op -> MINUS_ASGN .)
    U8              reduce using rule 121 (assign_op -> MINUS_ASGN .)
    HEX_LIT         reduce using rule 121 (assign_op -> MINUS_ASGN .)
    OCTAL_LIT       reduce using rule 121 (assign_op -> MINUS_ASGN .)
    BINARY_LIT      reduce using rule 121 (assign_op -> MINUS_ASGN .)
    .               reduce using rule 121 (assign_op -> MINUS_ASGN .)


state 149

    (122) assign_op -> PLUS_ASGN .
    AND             reduce using rule 122 (assign_op -> PLUS_ASGN .)
    EXCLM           reduce using rule 122 (assign_op -> PLUS_ASGN .)
    MINUS           reduce using rule 122 (assign_op -> PLUS_ASGN .)
    (               reduce using rule 122 (assign_op -> PLUS_ASGN .)
    IDENTIFIER      reduce using rule 122 (assign_op -> PLUS_ASGN .)
    STRING          reduce using rule 122 (assign_op -> PLUS_ASGN .)
    BOOL            reduce using rule 122 (assign_op -> PLUS_ASGN .)
    RUNE            reduce using rule 122 (assign_op -> PLUS_ASGN .)
    FN              reduce using rule 122 (assign_op -> PLUS_ASGN .)
    DECIMAL_LIT     reduce using rule 122 (assign_op -> PLUS_ASGN .)
    FALSE           reduce using rule 122 (assign_op -> PLUS_ASGN .)
    TRUE            reduce using rule 122 (assign_op -> PLUS_ASGN .)
    RUNE_LIT        reduce using rule 122 (assign_op -> PLUS_ASGN .)
    STRING_LIT      reduce using rule 122 (assign_op -> PLUS_ASGN .)
    F32             reduce using rule 122 (assign_op -> PLUS_ASGN .)
    F64             reduce using rule 122 (assign_op -> PLUS_ASGN .)
    INT             reduce using rule 122 (assign_op -> PLUS_ASGN .)
    ISIZE           reduce using rule 122 (assign_op -> PLUS_ASGN .)
    I64             reduce using rule 122 (assign_op -> PLUS_ASGN .)
    I32             reduce using rule 122 (assign_op -> PLUS_ASGN .)
    I16             reduce using rule 122 (assign_op -> PLUS_ASGN .)
    I8              reduce using rule 122 (assign_op -> PLUS_ASGN .)
    UINT            reduce using rule 122 (assign_op -> PLUS_ASGN .)
    USIZE           reduce using rule 122 (assign_op -> PLUS_ASGN .)
    U64             reduce using rule 122 (assign_op -> PLUS_ASGN .)
    U32             reduce using rule 122 (assign_op -> PLUS_ASGN .)
    U16             reduce using rule 122 (assign_op -> PLUS_ASGN .)
    U8              reduce using rule 122 (assign_op -> PLUS_ASGN .)
    HEX_LIT         reduce using rule 122 (assign_op -> PLUS_ASGN .)
    OCTAL_LIT       reduce using rule 122 (assign_op -> PLUS_ASGN .)
    BINARY_LIT      reduce using rule 122 (assign_op -> PLUS_ASGN .)
    .               reduce using rule 122 (assign_op -> PLUS_ASGN .)


state 150

    (123) assign_op -> ASSIGN .
    AND             reduce using rule 123 (assign_op -> ASSIGN .)
    EXCLM           reduce using rule 123 (assign_op -> ASSIGN .)
    MINUS           reduce using rule 123 (assign_op -> ASSIGN .)
    (               reduce using rule 123 (assign_op -> ASSIGN .)
    IDENTIFIER      reduce using rule 123 (assign_op -> ASSIGN .)
    STRING          reduce using rule 123 (assign_op -> ASSIGN .)
    BOOL            reduce using rule 123 (assign_op -> ASSIGN .)
    RUNE            reduce using rule 123 (assign_op -> ASSIGN .)
    FN              reduce using rule 123 (assign_op -> ASSIGN .)
    DECIMAL_LIT     reduce using rule 123 (assign_op -> ASSIGN .)
    FALSE           reduce using rule 123 (assign_op -> ASSIGN .)
    TRUE            reduce using rule 123 (assign_op -> ASSIGN .)
    RUNE_LIT        reduce using rule 123 (assign_op -> ASSIGN .)
    STRING_LIT      reduce using rule 123 (assign_op -> ASSIGN .)
    F32             reduce using rule 123 (assign_op -> ASSIGN .)
    F64             reduce using rule 123 (assign_op -> ASSIGN .)
    INT             reduce using rule 123 (assign_op -> ASSIGN .)
    ISIZE           reduce using rule 123 (assign_op -> ASSIGN .)
    I64             reduce using rule 123 (assign_op -> ASSIGN .)
    I32             reduce using rule 123 (assign_op -> ASSIGN .)
    I16             reduce using rule 123 (assign_op -> ASSIGN .)
    I8              reduce using rule 123 (assign_op -> ASSIGN .)
    UINT            reduce using rule 123 (assign_op -> ASSIGN .)
    USIZE           reduce using rule 123 (assign_op -> ASSIGN .)
    U64             reduce using rule 123 (assign_op -> ASSIGN .)
    U32             reduce using rule 123 (assign_op -> ASSIGN .)
    U16             reduce using rule 123 (assign_op -> ASSIGN .)
    U8              reduce using rule 123 (assign_op -> ASSIGN .)
    HEX_LIT         reduce using rule 123 (assign_op -> ASSIGN .)
    OCTAL_LIT       reduce using rule 123 (assign_op -> ASSIGN .)
    BINARY_LIT      reduce using rule 123 (assign_op -> ASSIGN .)
    .               reduce using rule 123 (assign_op -> ASSIGN .)


state 151

    (19) importPath -> IDENTIFIER .
    NEWL            reduce using rule 19 (importPath -> IDENTIFIER .)
    ;               reduce using rule 19 (importPath -> IDENTIFIER .)


state 152

    (16) importSpec -> IDENTIFIER importPath .
    NEWL            reduce using rule 16 (importSpec -> IDENTIFIER importPath .)
    ;               reduce using rule 16 (importSpec -> IDENTIFIER importPath .)


state 153

    (17) importSpec -> . importPath .
    NEWL            reduce using rule 17 (importSpec -> . importPath .)
    ;               reduce using rule 17 (importSpec -> . importPath .)


state 154

    (43) expressionList -> expressionList , expression .
    (61) expression -> expression . BINARY_OP unaryExpr
    (124) BINARY_OP -> . MUL_OP
    (125) BINARY_OP -> . ADD_OP
    (126) BINARY_OP -> . REL_OP
    (127) BINARY_OP -> . LOGIC_AND
    (128) BINARY_OP -> . LOGIC_OR
    (139) MUL_OP -> . SHR
    (140) MUL_OP -> . SHL
    (141) MUL_OP -> . AND
    (142) MUL_OP -> . MOD
    (143) MUL_OP -> . DIV
    (144) MUL_OP -> . STAR
    (135) ADD_OP -> . XOR
    (136) ADD_OP -> . OR
    (137) ADD_OP -> . MINUS
    (138) ADD_OP -> . PLUS
    (129) REL_OP -> . GE
    (130) REL_OP -> . GT
    (131) REL_OP -> . LE
    (132) REL_OP -> . LT
    (133) REL_OP -> . NE
    (134) REL_OP -> . EQ
    ,               reduce using rule 43 (expressionList -> expressionList , expression .)
    NEWL            reduce using rule 43 (expressionList -> expressionList , expression .)
    ;               reduce using rule 43 (expressionList -> expressionList , expression .)
    )               reduce using rule 43 (expressionList -> expressionList , expression .)
    }               reduce using rule 43 (expressionList -> expressionList , expression .)
    LOGIC_AND       shift and go to state 100
    LOGIC_OR        shift and go to state 101
    SHR             shift and go to state 102
    SHL             shift and go to state 103
    AND             shift and go to state 104
    MOD             shift and go to state 105
    DIV             shift and go to state 106
    STAR            shift and go to state 107
    XOR             shift and go to state 108
    OR              shift and go to state 109
    MINUS           shift and go to state 110
    PLUS            shift and go to state 111
    GE              shift and go to state 112
    GT              shift and go to state 113
    LE              shift and go to state 114
    LT              shift and go to state 115
    NE              shift and go to state 116
    EQ              shift and go to state 117

    BINARY_OP                      shift and go to state 96
    MUL_OP                         shift and go to state 97
    ADD_OP                         shift and go to state 98
    REL_OP                         shift and go to state 99

state 155

    (61) expression -> expression BINARY_OP unaryExpr .
    LOGIC_AND       reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    LOGIC_OR        reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    SHR             reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    SHL             reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    AND             reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    MOD             reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    DIV             reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    STAR            reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    XOR             reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    OR              reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    MINUS           reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    PLUS            reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    GE              reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    GT              reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    LE              reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    LT              reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    NE              reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    EQ              reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    ,               reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    NEWL            reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    ;               reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    )               reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)
    }               reduce using rule 61 (expression -> expression BINARY_OP unaryExpr .)


state 156

    (54) arguments -> ( type_ . , expressionList , )
    (55) arguments -> ( type_ . , expressionList )
    (56) arguments -> ( type_ . , )
    (57) arguments -> ( type_ . )
    (74) conversion -> type_ . ( expression )
    ,               shift and go to state 180
    )               shift and go to state 181
    (               shift and go to state 121


state 157

    (58) arguments -> ( expressionList . , )
    (59) arguments -> ( expressionList . )
    (43) expressionList -> expressionList . , expression
    ,               shift and go to state 182
    )               shift and go to state 183


state 158

    (60) arguments -> ( ) .
    (               reduce using rule 60 (arguments -> ( ) .)
    LOGIC_AND       reduce using rule 60 (arguments -> ( ) .)
    LOGIC_OR        reduce using rule 60 (arguments -> ( ) .)
    SHR             reduce using rule 60 (arguments -> ( ) .)
    SHL             reduce using rule 60 (arguments -> ( ) .)
    AND             reduce using rule 60 (arguments -> ( ) .)
    MOD             reduce using rule 60 (arguments -> ( ) .)
    DIV             reduce using rule 60 (arguments -> ( ) .)
    STAR            reduce using rule 60 (arguments -> ( ) .)
    XOR             reduce using rule 60 (arguments -> ( ) .)
    OR              reduce using rule 60 (arguments -> ( ) .)
    MINUS           reduce using rule 60 (arguments -> ( ) .)
    PLUS            reduce using rule 60 (arguments -> ( ) .)
    GE              reduce using rule 60 (arguments -> ( ) .)
    GT              reduce using rule 60 (arguments -> ( ) .)
    LE              reduce using rule 60 (arguments -> ( ) .)
    LT              reduce using rule 60 (arguments -> ( ) .)
    NE              reduce using rule 60 (arguments -> ( ) .)
    EQ              reduce using rule 60 (arguments -> ( ) .)
    ,               reduce using rule 60 (arguments -> ( ) .)
    NEWL            reduce using rule 60 (arguments -> ( ) .)
    ;               reduce using rule 60 (arguments -> ( ) .)
    )               reduce using rule 60 (arguments -> ( ) .)
    }               reduce using rule 60 (arguments -> ( ) .)


state 159

    (74) conversion -> type_ ( expression . )
    (61) expression -> expression . BINARY_OP unaryExpr
    (124) BINARY_OP -> . MUL_OP
    (125) BINARY_OP -> . ADD_OP
    (126) BINARY_OP -> . REL_OP
    (127) BINARY_OP -> . LOGIC_AND
    (128) BINARY_OP -> . LOGIC_OR
    (139) MUL_OP -> . SHR
    (140) MUL_OP -> . SHL
    (141) MUL_OP -> . AND
    (142) MUL_OP -> . MOD
    (143) MUL_OP -> . DIV
    (144) MUL_OP -> . STAR
    (135) ADD_OP -> . XOR
    (136) ADD_OP -> . OR
    (137) ADD_OP -> . MINUS
    (138) ADD_OP -> . PLUS
    (129) REL_OP -> . GE
    (130) REL_OP -> . GT
    (131) REL_OP -> . LE
    (132) REL_OP -> . LT
    (133) REL_OP -> . NE
    (134) REL_OP -> . EQ
    )               shift and go to state 184
    LOGIC_AND       shift and go to state 100
    LOGIC_OR        shift and go to state 101
    SHR             shift and go to state 102
    SHL             shift and go to state 103
    AND             shift and go to state 104
    MOD             shift and go to state 105
    DIV             shift and go to state 106
    STAR            shift and go to state 107
    XOR             shift and go to state 108
    OR              shift and go to state 109
    MINUS           shift and go to state 110
    PLUS            shift and go to state 111
    GE              shift and go to state 112
    GT              shift and go to state 113
    LE              shift and go to state 114
    LT              shift and go to state 115
    NE              shift and go to state 116
    EQ              shift and go to state 117

    BINARY_OP                      shift and go to state 96
    MUL_OP                         shift and go to state 97
    ADD_OP                         shift and go to state 98
    REL_OP                         shift and go to state 99

state 160

    (68) operand -> ( expression ) .
    (               reduce using rule 68 (operand -> ( expression ) .)
    LOGIC_AND       reduce using rule 68 (operand -> ( expression ) .)
    LOGIC_OR        reduce using rule 68 (operand -> ( expression ) .)
    SHR             reduce using rule 68 (operand -> ( expression ) .)
    SHL             reduce using rule 68 (operand -> ( expression ) .)
    AND             reduce using rule 68 (operand -> ( expression ) .)
    MOD             reduce using rule 68 (operand -> ( expression ) .)
    DIV             reduce using rule 68 (operand -> ( expression ) .)
    STAR            reduce using rule 68 (operand -> ( expression ) .)
    XOR             reduce using rule 68 (operand -> ( expression ) .)
    OR              reduce using rule 68 (operand -> ( expression ) .)
    MINUS           reduce using rule 68 (operand -> ( expression ) .)
    PLUS            reduce using rule 68 (operand -> ( expression ) .)
    GE              reduce using rule 68 (operand -> ( expression ) .)
    GT              reduce using rule 68 (operand -> ( expression ) .)
    LE              reduce using rule 68 (operand -> ( expression ) .)
    LT              reduce using rule 68 (operand -> ( expression ) .)
    NE              reduce using rule 68 (operand -> ( expression ) .)
    EQ              reduce using rule 68 (operand -> ( expression ) .)
    ,               reduce using rule 68 (operand -> ( expression ) .)
    NEWL            reduce using rule 68 (operand -> ( expression ) .)
    ;               reduce using rule 68 (operand -> ( expression ) .)
    )               reduce using rule 68 (operand -> ( expression ) .)
    }               reduce using rule 68 (operand -> ( expression ) .)


state 161

    (30) function_ -> signature block .
    (               reduce using rule 30 (function_ -> signature block .)
    LOGIC_AND       reduce using rule 30 (function_ -> signature block .)
    LOGIC_OR        reduce using rule 30 (function_ -> signature block .)
    SHR             reduce using rule 30 (function_ -> signature block .)
    SHL             reduce using rule 30 (function_ -> signature block .)
    AND             reduce using rule 30 (function_ -> signature block .)
    MOD             reduce using rule 30 (function_ -> signature block .)
    DIV             reduce using rule 30 (function_ -> signature block .)
    STAR            reduce using rule 30 (function_ -> signature block .)
    XOR             reduce using rule 30 (function_ -> signature block .)
    OR              reduce using rule 30 (function_ -> signature block .)
    MINUS           reduce using rule 30 (function_ -> signature block .)
    PLUS            reduce using rule 30 (function_ -> signature block .)
    GE              reduce using rule 30 (function_ -> signature block .)
    GT              reduce using rule 30 (function_ -> signature block .)
    LE              reduce using rule 30 (function_ -> signature block .)
    LT              reduce using rule 30 (function_ -> signature block .)
    NE              reduce using rule 30 (function_ -> signature block .)
    EQ              reduce using rule 30 (function_ -> signature block .)
    ,               reduce using rule 30 (function_ -> signature block .)
    NEWL            reduce using rule 30 (function_ -> signature block .)
    ;               reduce using rule 30 (function_ -> signature block .)
    )               reduce using rule 30 (function_ -> signature block .)
    }               reduce using rule 30 (function_ -> signature block .)


state 162

    (47) block -> { . statementList }
    (45) statementList -> . statementList eos statement
    (46) statementList -> . statement
    (48) statement -> . simpleStmt
    (49) statement -> . declaration
    (50) simpleStmt -> . assignment
    (51) simpleStmt -> . expressionStmt
    (24) declaration -> . varDecl
    (53) assignment -> . identifierList assign_op expressionList
    (52) expressionStmt -> . expression
    (25) varDecl -> . identifierList DECL_ASGN expressionList
    (26) identifierList -> . identifierList , IDENTIFIER
    (27) identifierList -> . IDENTIFIER
    (61) expression -> . expression BINARY_OP unaryExpr
    (62) expression -> . unaryExpr
    (63) unaryExpr -> . UNARY_OP unaryExpr
    (64) unaryExpr -> . primaryExpr
    (145) UNARY_OP -> . AND
    (146) UNARY_OP -> . EXCLM
    (147) UNARY_OP -> . MINUS
    (65) primaryExpr -> . primaryExpr arguments
    (66) primaryExpr -> . conversion
    (67) primaryExpr -> . operand
    (74) conversion -> . type_ ( expression )
    (68) operand -> . ( expression )
    (69) operand -> . operandName
    (70) operand -> . literal
    (75) type_ -> . typeName
    (71) operandName -> . IDENTIFIER
    (72) literal -> . functionLit
    (73) literal -> . basicLit
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (42) functionLit -> . FN function_
    (94) basicLit -> . INT_LIT
    (95) basicLit -> . FLOAT_LIT
    (96) basicLit -> . DECIMAL_LIT EXPONENT
    (97) basicLit -> . FLOAT_LIT EXPONENT
    (98) basicLit -> . FALSE
    (99) basicLit -> . TRUE
    (100) basicLit -> . RUNE_LIT
    (101) basicLit -> . STRING_LIT
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    (105) INT_LIT -> . HEX_LIT
    (106) INT_LIT -> . OCTAL_LIT
    (107) INT_LIT -> . BINARY_LIT
    (108) INT_LIT -> . DECIMAL_LIT
    (102) FLOAT_LIT -> . . DECIMAL_LIT
    (103) FLOAT_LIT -> . DECIMAL_LIT .
    (104) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    IDENTIFIER      shift and go to state 80
    AND             shift and go to state 30
    EXCLM           shift and go to state 31
    MINUS           shift and go to state 32
    (               shift and go to state 36
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 46
    DECIMAL_LIT     shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    RUNE_LIT        shift and go to state 52
    STRING_LIT      shift and go to state 53
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67
    HEX_LIT         shift and go to state 68
    OCTAL_LIT       shift and go to state 69
    BINARY_LIT      shift and go to state 70
    .               shift and go to state 71

    statementList                  shift and go to state 185
    statement                      shift and go to state 78
    simpleStmt                     shift and go to state 81
    declaration                    shift and go to state 82
    assignment                     shift and go to state 83
    expressionStmt                 shift and go to state 84
    varDecl                        shift and go to state 85
    identifierList                 shift and go to state 86
    expression                     shift and go to state 87
    unaryExpr                      shift and go to state 27
    UNARY_OP                       shift and go to state 28
    primaryExpr                    shift and go to state 29
    conversion                     shift and go to state 33
    operand                        shift and go to state 34
    type_                          shift and go to state 35
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 47
    FLOAT_LIT                      shift and go to state 48

state 163

    (34) result -> parameters .
    {               reduce using rule 34 (result -> parameters .)
    NEWL            reduce using rule 34 (result -> parameters .)
    ;               reduce using rule 34 (result -> parameters .)


state 164

    (32) signature -> parameters result .
    {               reduce using rule 32 (signature -> parameters result .)
    NEWL            reduce using rule 32 (signature -> parameters result .)
    ;               reduce using rule 32 (signature -> parameters result .)


state 165

    (33) result -> type_ .
    {               reduce using rule 33 (result -> type_ .)
    NEWL            reduce using rule 33 (result -> type_ .)
    ;               reduce using rule 33 (result -> type_ .)


state 166

    (35) parameters -> ( parameterList . , )
    (36) parameters -> ( parameterList . )
    (38) parameterList -> parameterList . , parameterDecl
    ,               shift and go to state 186
    )               shift and go to state 187


state 167

    (37) parameters -> ( ) .
    (               reduce using rule 37 (parameters -> ( ) .)
    STRING          reduce using rule 37 (parameters -> ( ) .)
    BOOL            reduce using rule 37 (parameters -> ( ) .)
    RUNE            reduce using rule 37 (parameters -> ( ) .)
    F32             reduce using rule 37 (parameters -> ( ) .)
    F64             reduce using rule 37 (parameters -> ( ) .)
    INT             reduce using rule 37 (parameters -> ( ) .)
    ISIZE           reduce using rule 37 (parameters -> ( ) .)
    I64             reduce using rule 37 (parameters -> ( ) .)
    I32             reduce using rule 37 (parameters -> ( ) .)
    I16             reduce using rule 37 (parameters -> ( ) .)
    I8              reduce using rule 37 (parameters -> ( ) .)
    UINT            reduce using rule 37 (parameters -> ( ) .)
    USIZE           reduce using rule 37 (parameters -> ( ) .)
    U64             reduce using rule 37 (parameters -> ( ) .)
    U32             reduce using rule 37 (parameters -> ( ) .)
    U16             reduce using rule 37 (parameters -> ( ) .)
    U8              reduce using rule 37 (parameters -> ( ) .)
    {               reduce using rule 37 (parameters -> ( ) .)
    NEWL            reduce using rule 37 (parameters -> ( ) .)
    ;               reduce using rule 37 (parameters -> ( ) .)


state 168

    (39) parameterList -> parameterDecl .
    ,               reduce using rule 39 (parameterList -> parameterDecl .)
    )               reduce using rule 39 (parameterList -> parameterDecl .)


state 169

    (40) parameterDecl -> type_ .
    ,               reduce using rule 40 (parameterDecl -> type_ .)
    )               reduce using rule 40 (parameterDecl -> type_ .)


state 170

    (41) parameterDecl -> identifierList . type_
    (26) identifierList -> identifierList . , IDENTIFIER
    (75) type_ -> . typeName
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    ,               shift and go to state 139
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67

    type_                          shift and go to state 188
    typeName                       shift and go to state 39
    numericType                    shift and go to state 42

state 171

    (27) identifierList -> IDENTIFIER .
    ,               reduce using rule 27 (identifierList -> IDENTIFIER .)
    STRING          reduce using rule 27 (identifierList -> IDENTIFIER .)
    BOOL            reduce using rule 27 (identifierList -> IDENTIFIER .)
    RUNE            reduce using rule 27 (identifierList -> IDENTIFIER .)
    F32             reduce using rule 27 (identifierList -> IDENTIFIER .)
    F64             reduce using rule 27 (identifierList -> IDENTIFIER .)
    INT             reduce using rule 27 (identifierList -> IDENTIFIER .)
    ISIZE           reduce using rule 27 (identifierList -> IDENTIFIER .)
    I64             reduce using rule 27 (identifierList -> IDENTIFIER .)
    I32             reduce using rule 27 (identifierList -> IDENTIFIER .)
    I16             reduce using rule 27 (identifierList -> IDENTIFIER .)
    I8              reduce using rule 27 (identifierList -> IDENTIFIER .)
    UINT            reduce using rule 27 (identifierList -> IDENTIFIER .)
    USIZE           reduce using rule 27 (identifierList -> IDENTIFIER .)
    U64             reduce using rule 27 (identifierList -> IDENTIFIER .)
    U32             reduce using rule 27 (identifierList -> IDENTIFIER .)
    U16             reduce using rule 27 (identifierList -> IDENTIFIER .)
    U8              reduce using rule 27 (identifierList -> IDENTIFIER .)


state 172

    (104) FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .
    EXPONENT        reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    (               reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LOGIC_AND       reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LOGIC_OR        reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    SHR             reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    SHL             reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    AND             reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    MOD             reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    DIV             reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    STAR            reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    XOR             reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    OR              reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    MINUS           reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    PLUS            reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    GE              reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    GT              reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LE              reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    LT              reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    NE              reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    EQ              reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    ,               reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    NEWL            reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    ;               reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    )               reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)
    }               reduce using rule 104 (FLOAT_LIT -> DECIMAL_LIT . DECIMAL_LIT .)


state 173

    (20) topLevelDecls -> topLevelDecls topLevelDecl eos .
    (109) eos -> eos . NEWL
    (111) eos -> eos . ;
    FN              reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    IDENTIFIER      reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    AND             reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    EXCLM           reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    MINUS           reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    (               reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    STRING          reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    BOOL            reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    RUNE            reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    DECIMAL_LIT     reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    FALSE           reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    TRUE            reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    RUNE_LIT        reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    STRING_LIT      reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    F32             reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    F64             reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    INT             reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    ISIZE           reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I64             reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I32             reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I16             reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    I8              reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    UINT            reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    USIZE           reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U64             reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U32             reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U16             reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    U8              reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    HEX_LIT         reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    OCTAL_LIT       reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    BINARY_LIT      reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    .               reduce using rule 20 (topLevelDecls -> topLevelDecls topLevelDecl eos .)
    NEWL            shift and go to state 22
    ;               shift and go to state 23


state 174

    (45) statementList -> statementList eos statement .
    NEWL            reduce using rule 45 (statementList -> statementList eos statement .)
    ;               reduce using rule 45 (statementList -> statementList eos statement .)
    }               reduce using rule 45 (statementList -> statementList eos statement .)


state 175

    (28) functionDecl -> FN IDENTIFIER signature .
    (30) function_ -> signature . block
    (47) block -> . { statementList }
    NEWL            reduce using rule 28 (functionDecl -> FN IDENTIFIER signature .)
    ;               reduce using rule 28 (functionDecl -> FN IDENTIFIER signature .)
    {               shift and go to state 162

    block                          shift and go to state 161

state 176

    (29) functionDecl -> FN IDENTIFIER function_ .
    NEWL            reduce using rule 29 (functionDecl -> FN IDENTIFIER function_ .)
    ;               reduce using rule 29 (functionDecl -> FN IDENTIFIER function_ .)


state 177

    (53) assignment -> identifierList assign_op expressionList .
    (43) expressionList -> expressionList . , expression
    NEWL            reduce using rule 53 (assignment -> identifierList assign_op expressionList .)
    ;               reduce using rule 53 (assignment -> identifierList assign_op expressionList .)
    }               reduce using rule 53 (assignment -> identifierList assign_op expressionList .)
    ,               shift and go to state 95


state 178

    (25) varDecl -> identifierList DECL_ASGN expressionList .
    (43) expressionList -> expressionList . , expression
    NEWL            reduce using rule 25 (varDecl -> identifierList DECL_ASGN expressionList .)
    ;               reduce using rule 25 (varDecl -> identifierList DECL_ASGN expressionList .)
    }               reduce using rule 25 (varDecl -> identifierList DECL_ASGN expressionList .)
    ,               shift and go to state 95


state 179

    (26) identifierList -> identifierList , IDENTIFIER .
    DECL_ASGN       reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    ,               reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    SHR_ASGN        reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    SHL_ASGN        reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    MOD_ASGN        reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    DIV_ASGN        reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    OR_ASGN         reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    AND_ASGN        reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    STAR_ASGN       reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    XOR_ASGN        reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    MINUS_ASGN      reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    PLUS_ASGN       reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    ASSIGN          reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    STRING          reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    BOOL            reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    RUNE            reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    F32             reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    F64             reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    INT             reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    ISIZE           reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    I64             reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    I32             reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    I16             reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    I8              reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    UINT            reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    USIZE           reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    U64             reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    U32             reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    U16             reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)
    U8              reduce using rule 26 (identifierList -> identifierList , IDENTIFIER .)


state 180

    (54) arguments -> ( type_ , . expressionList , )
    (55) arguments -> ( type_ , . expressionList )
    (56) arguments -> ( type_ , . )
    (43) expressionList -> . expressionList , expression
    (44) expressionList -> . expression
    (61) expression -> . expression BINARY_OP unaryExpr
    (62) expression -> . unaryExpr
    (63) unaryExpr -> . UNARY_OP unaryExpr
    (64) unaryExpr -> . primaryExpr
    (145) UNARY_OP -> . AND
    (146) UNARY_OP -> . EXCLM
    (147) UNARY_OP -> . MINUS
    (65) primaryExpr -> . primaryExpr arguments
    (66) primaryExpr -> . conversion
    (67) primaryExpr -> . operand
    (74) conversion -> . type_ ( expression )
    (68) operand -> . ( expression )
    (69) operand -> . operandName
    (70) operand -> . literal
    (75) type_ -> . typeName
    (71) operandName -> . IDENTIFIER
    (72) literal -> . functionLit
    (73) literal -> . basicLit
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (42) functionLit -> . FN function_
    (94) basicLit -> . INT_LIT
    (95) basicLit -> . FLOAT_LIT
    (96) basicLit -> . DECIMAL_LIT EXPONENT
    (97) basicLit -> . FLOAT_LIT EXPONENT
    (98) basicLit -> . FALSE
    (99) basicLit -> . TRUE
    (100) basicLit -> . RUNE_LIT
    (101) basicLit -> . STRING_LIT
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    (105) INT_LIT -> . HEX_LIT
    (106) INT_LIT -> . OCTAL_LIT
    (107) INT_LIT -> . BINARY_LIT
    (108) INT_LIT -> . DECIMAL_LIT
    (102) FLOAT_LIT -> . . DECIMAL_LIT
    (103) FLOAT_LIT -> . DECIMAL_LIT .
    (104) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    )               shift and go to state 190
    AND             shift and go to state 30
    EXCLM           shift and go to state 31
    MINUS           shift and go to state 32
    (               shift and go to state 36
    IDENTIFIER      shift and go to state 24
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 46
    DECIMAL_LIT     shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    RUNE_LIT        shift and go to state 52
    STRING_LIT      shift and go to state 53
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67
    HEX_LIT         shift and go to state 68
    OCTAL_LIT       shift and go to state 69
    BINARY_LIT      shift and go to state 70
    .               shift and go to state 71

    type_                          shift and go to state 35
    expressionList                 shift and go to state 189
    expression                     shift and go to state 26
    unaryExpr                      shift and go to state 27
    UNARY_OP                       shift and go to state 28
    primaryExpr                    shift and go to state 29
    conversion                     shift and go to state 33
    operand                        shift and go to state 34
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 47
    FLOAT_LIT                      shift and go to state 48

state 181

    (57) arguments -> ( type_ ) .
    (               reduce using rule 57 (arguments -> ( type_ ) .)
    LOGIC_AND       reduce using rule 57 (arguments -> ( type_ ) .)
    LOGIC_OR        reduce using rule 57 (arguments -> ( type_ ) .)
    SHR             reduce using rule 57 (arguments -> ( type_ ) .)
    SHL             reduce using rule 57 (arguments -> ( type_ ) .)
    AND             reduce using rule 57 (arguments -> ( type_ ) .)
    MOD             reduce using rule 57 (arguments -> ( type_ ) .)
    DIV             reduce using rule 57 (arguments -> ( type_ ) .)
    STAR            reduce using rule 57 (arguments -> ( type_ ) .)
    XOR             reduce using rule 57 (arguments -> ( type_ ) .)
    OR              reduce using rule 57 (arguments -> ( type_ ) .)
    MINUS           reduce using rule 57 (arguments -> ( type_ ) .)
    PLUS            reduce using rule 57 (arguments -> ( type_ ) .)
    GE              reduce using rule 57 (arguments -> ( type_ ) .)
    GT              reduce using rule 57 (arguments -> ( type_ ) .)
    LE              reduce using rule 57 (arguments -> ( type_ ) .)
    LT              reduce using rule 57 (arguments -> ( type_ ) .)
    NE              reduce using rule 57 (arguments -> ( type_ ) .)
    EQ              reduce using rule 57 (arguments -> ( type_ ) .)
    ,               reduce using rule 57 (arguments -> ( type_ ) .)
    NEWL            reduce using rule 57 (arguments -> ( type_ ) .)
    ;               reduce using rule 57 (arguments -> ( type_ ) .)
    )               reduce using rule 57 (arguments -> ( type_ ) .)
    }               reduce using rule 57 (arguments -> ( type_ ) .)


state 182

    (58) arguments -> ( expressionList , . )
    (43) expressionList -> expressionList , . expression
    (61) expression -> . expression BINARY_OP unaryExpr
    (62) expression -> . unaryExpr
    (63) unaryExpr -> . UNARY_OP unaryExpr
    (64) unaryExpr -> . primaryExpr
    (145) UNARY_OP -> . AND
    (146) UNARY_OP -> . EXCLM
    (147) UNARY_OP -> . MINUS
    (65) primaryExpr -> . primaryExpr arguments
    (66) primaryExpr -> . conversion
    (67) primaryExpr -> . operand
    (74) conversion -> . type_ ( expression )
    (68) operand -> . ( expression )
    (69) operand -> . operandName
    (70) operand -> . literal
    (75) type_ -> . typeName
    (71) operandName -> . IDENTIFIER
    (72) literal -> . functionLit
    (73) literal -> . basicLit
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (42) functionLit -> . FN function_
    (94) basicLit -> . INT_LIT
    (95) basicLit -> . FLOAT_LIT
    (96) basicLit -> . DECIMAL_LIT EXPONENT
    (97) basicLit -> . FLOAT_LIT EXPONENT
    (98) basicLit -> . FALSE
    (99) basicLit -> . TRUE
    (100) basicLit -> . RUNE_LIT
    (101) basicLit -> . STRING_LIT
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    (105) INT_LIT -> . HEX_LIT
    (106) INT_LIT -> . OCTAL_LIT
    (107) INT_LIT -> . BINARY_LIT
    (108) INT_LIT -> . DECIMAL_LIT
    (102) FLOAT_LIT -> . . DECIMAL_LIT
    (103) FLOAT_LIT -> . DECIMAL_LIT .
    (104) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    )               shift and go to state 191
    AND             shift and go to state 30
    EXCLM           shift and go to state 31
    MINUS           shift and go to state 32
    (               shift and go to state 36
    IDENTIFIER      shift and go to state 24
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 46
    DECIMAL_LIT     shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    RUNE_LIT        shift and go to state 52
    STRING_LIT      shift and go to state 53
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67
    HEX_LIT         shift and go to state 68
    OCTAL_LIT       shift and go to state 69
    BINARY_LIT      shift and go to state 70
    .               shift and go to state 71

    expression                     shift and go to state 154
    unaryExpr                      shift and go to state 27
    UNARY_OP                       shift and go to state 28
    primaryExpr                    shift and go to state 29
    conversion                     shift and go to state 33
    operand                        shift and go to state 34
    type_                          shift and go to state 35
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 47
    FLOAT_LIT                      shift and go to state 48

state 183

    (59) arguments -> ( expressionList ) .
    (               reduce using rule 59 (arguments -> ( expressionList ) .)
    LOGIC_AND       reduce using rule 59 (arguments -> ( expressionList ) .)
    LOGIC_OR        reduce using rule 59 (arguments -> ( expressionList ) .)
    SHR             reduce using rule 59 (arguments -> ( expressionList ) .)
    SHL             reduce using rule 59 (arguments -> ( expressionList ) .)
    AND             reduce using rule 59 (arguments -> ( expressionList ) .)
    MOD             reduce using rule 59 (arguments -> ( expressionList ) .)
    DIV             reduce using rule 59 (arguments -> ( expressionList ) .)
    STAR            reduce using rule 59 (arguments -> ( expressionList ) .)
    XOR             reduce using rule 59 (arguments -> ( expressionList ) .)
    OR              reduce using rule 59 (arguments -> ( expressionList ) .)
    MINUS           reduce using rule 59 (arguments -> ( expressionList ) .)
    PLUS            reduce using rule 59 (arguments -> ( expressionList ) .)
    GE              reduce using rule 59 (arguments -> ( expressionList ) .)
    GT              reduce using rule 59 (arguments -> ( expressionList ) .)
    LE              reduce using rule 59 (arguments -> ( expressionList ) .)
    LT              reduce using rule 59 (arguments -> ( expressionList ) .)
    NE              reduce using rule 59 (arguments -> ( expressionList ) .)
    EQ              reduce using rule 59 (arguments -> ( expressionList ) .)
    ,               reduce using rule 59 (arguments -> ( expressionList ) .)
    NEWL            reduce using rule 59 (arguments -> ( expressionList ) .)
    ;               reduce using rule 59 (arguments -> ( expressionList ) .)
    )               reduce using rule 59 (arguments -> ( expressionList ) .)
    }               reduce using rule 59 (arguments -> ( expressionList ) .)


state 184

    (74) conversion -> type_ ( expression ) .
    (               reduce using rule 74 (conversion -> type_ ( expression ) .)
    LOGIC_AND       reduce using rule 74 (conversion -> type_ ( expression ) .)
    LOGIC_OR        reduce using rule 74 (conversion -> type_ ( expression ) .)
    SHR             reduce using rule 74 (conversion -> type_ ( expression ) .)
    SHL             reduce using rule 74 (conversion -> type_ ( expression ) .)
    AND             reduce using rule 74 (conversion -> type_ ( expression ) .)
    MOD             reduce using rule 74 (conversion -> type_ ( expression ) .)
    DIV             reduce using rule 74 (conversion -> type_ ( expression ) .)
    STAR            reduce using rule 74 (conversion -> type_ ( expression ) .)
    XOR             reduce using rule 74 (conversion -> type_ ( expression ) .)
    OR              reduce using rule 74 (conversion -> type_ ( expression ) .)
    MINUS           reduce using rule 74 (conversion -> type_ ( expression ) .)
    PLUS            reduce using rule 74 (conversion -> type_ ( expression ) .)
    GE              reduce using rule 74 (conversion -> type_ ( expression ) .)
    GT              reduce using rule 74 (conversion -> type_ ( expression ) .)
    LE              reduce using rule 74 (conversion -> type_ ( expression ) .)
    LT              reduce using rule 74 (conversion -> type_ ( expression ) .)
    NE              reduce using rule 74 (conversion -> type_ ( expression ) .)
    EQ              reduce using rule 74 (conversion -> type_ ( expression ) .)
    ,               reduce using rule 74 (conversion -> type_ ( expression ) .)
    NEWL            reduce using rule 74 (conversion -> type_ ( expression ) .)
    ;               reduce using rule 74 (conversion -> type_ ( expression ) .)
    )               reduce using rule 74 (conversion -> type_ ( expression ) .)
    }               reduce using rule 74 (conversion -> type_ ( expression ) .)


state 185

    (47) block -> { statementList . }
    (45) statementList -> statementList . eos statement
    (109) eos -> . eos NEWL
    (110) eos -> . NEWL
    (111) eos -> . eos ;
    (112) eos -> . ;
    }               shift and go to state 192
    NEWL            shift and go to state 11
    ;               shift and go to state 12

    eos                            shift and go to state 193

state 186

    (35) parameters -> ( parameterList , . )
    (38) parameterList -> parameterList , . parameterDecl
    (40) parameterDecl -> . type_
    (41) parameterDecl -> . identifierList type_
    (75) type_ -> . typeName
    (26) identifierList -> . identifierList , IDENTIFIER
    (27) identifierList -> . IDENTIFIER
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    )               shift and go to state 194
    IDENTIFIER      shift and go to state 171
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67

    parameterDecl                  shift and go to state 195
    type_                          shift and go to state 169
    identifierList                 shift and go to state 170
    typeName                       shift and go to state 39
    numericType                    shift and go to state 42

state 187

    (36) parameters -> ( parameterList ) .
    (               reduce using rule 36 (parameters -> ( parameterList ) .)
    STRING          reduce using rule 36 (parameters -> ( parameterList ) .)
    BOOL            reduce using rule 36 (parameters -> ( parameterList ) .)
    RUNE            reduce using rule 36 (parameters -> ( parameterList ) .)
    F32             reduce using rule 36 (parameters -> ( parameterList ) .)
    F64             reduce using rule 36 (parameters -> ( parameterList ) .)
    INT             reduce using rule 36 (parameters -> ( parameterList ) .)
    ISIZE           reduce using rule 36 (parameters -> ( parameterList ) .)
    I64             reduce using rule 36 (parameters -> ( parameterList ) .)
    I32             reduce using rule 36 (parameters -> ( parameterList ) .)
    I16             reduce using rule 36 (parameters -> ( parameterList ) .)
    I8              reduce using rule 36 (parameters -> ( parameterList ) .)
    UINT            reduce using rule 36 (parameters -> ( parameterList ) .)
    USIZE           reduce using rule 36 (parameters -> ( parameterList ) .)
    U64             reduce using rule 36 (parameters -> ( parameterList ) .)
    U32             reduce using rule 36 (parameters -> ( parameterList ) .)
    U16             reduce using rule 36 (parameters -> ( parameterList ) .)
    U8              reduce using rule 36 (parameters -> ( parameterList ) .)
    {               reduce using rule 36 (parameters -> ( parameterList ) .)
    NEWL            reduce using rule 36 (parameters -> ( parameterList ) .)
    ;               reduce using rule 36 (parameters -> ( parameterList ) .)


state 188

    (41) parameterDecl -> identifierList type_ .
    ,               reduce using rule 41 (parameterDecl -> identifierList type_ .)
    )               reduce using rule 41 (parameterDecl -> identifierList type_ .)


state 189

    (54) arguments -> ( type_ , expressionList . , )
    (55) arguments -> ( type_ , expressionList . )
    (43) expressionList -> expressionList . , expression
    ,               shift and go to state 196
    )               shift and go to state 197


state 190

    (56) arguments -> ( type_ , ) .
    (               reduce using rule 56 (arguments -> ( type_ , ) .)
    LOGIC_AND       reduce using rule 56 (arguments -> ( type_ , ) .)
    LOGIC_OR        reduce using rule 56 (arguments -> ( type_ , ) .)
    SHR             reduce using rule 56 (arguments -> ( type_ , ) .)
    SHL             reduce using rule 56 (arguments -> ( type_ , ) .)
    AND             reduce using rule 56 (arguments -> ( type_ , ) .)
    MOD             reduce using rule 56 (arguments -> ( type_ , ) .)
    DIV             reduce using rule 56 (arguments -> ( type_ , ) .)
    STAR            reduce using rule 56 (arguments -> ( type_ , ) .)
    XOR             reduce using rule 56 (arguments -> ( type_ , ) .)
    OR              reduce using rule 56 (arguments -> ( type_ , ) .)
    MINUS           reduce using rule 56 (arguments -> ( type_ , ) .)
    PLUS            reduce using rule 56 (arguments -> ( type_ , ) .)
    GE              reduce using rule 56 (arguments -> ( type_ , ) .)
    GT              reduce using rule 56 (arguments -> ( type_ , ) .)
    LE              reduce using rule 56 (arguments -> ( type_ , ) .)
    LT              reduce using rule 56 (arguments -> ( type_ , ) .)
    NE              reduce using rule 56 (arguments -> ( type_ , ) .)
    EQ              reduce using rule 56 (arguments -> ( type_ , ) .)
    ,               reduce using rule 56 (arguments -> ( type_ , ) .)
    NEWL            reduce using rule 56 (arguments -> ( type_ , ) .)
    ;               reduce using rule 56 (arguments -> ( type_ , ) .)
    )               reduce using rule 56 (arguments -> ( type_ , ) .)
    }               reduce using rule 56 (arguments -> ( type_ , ) .)


state 191

    (58) arguments -> ( expressionList , ) .
    (               reduce using rule 58 (arguments -> ( expressionList , ) .)
    LOGIC_AND       reduce using rule 58 (arguments -> ( expressionList , ) .)
    LOGIC_OR        reduce using rule 58 (arguments -> ( expressionList , ) .)
    SHR             reduce using rule 58 (arguments -> ( expressionList , ) .)
    SHL             reduce using rule 58 (arguments -> ( expressionList , ) .)
    AND             reduce using rule 58 (arguments -> ( expressionList , ) .)
    MOD             reduce using rule 58 (arguments -> ( expressionList , ) .)
    DIV             reduce using rule 58 (arguments -> ( expressionList , ) .)
    STAR            reduce using rule 58 (arguments -> ( expressionList , ) .)
    XOR             reduce using rule 58 (arguments -> ( expressionList , ) .)
    OR              reduce using rule 58 (arguments -> ( expressionList , ) .)
    MINUS           reduce using rule 58 (arguments -> ( expressionList , ) .)
    PLUS            reduce using rule 58 (arguments -> ( expressionList , ) .)
    GE              reduce using rule 58 (arguments -> ( expressionList , ) .)
    GT              reduce using rule 58 (arguments -> ( expressionList , ) .)
    LE              reduce using rule 58 (arguments -> ( expressionList , ) .)
    LT              reduce using rule 58 (arguments -> ( expressionList , ) .)
    NE              reduce using rule 58 (arguments -> ( expressionList , ) .)
    EQ              reduce using rule 58 (arguments -> ( expressionList , ) .)
    ,               reduce using rule 58 (arguments -> ( expressionList , ) .)
    NEWL            reduce using rule 58 (arguments -> ( expressionList , ) .)
    ;               reduce using rule 58 (arguments -> ( expressionList , ) .)
    )               reduce using rule 58 (arguments -> ( expressionList , ) .)
    }               reduce using rule 58 (arguments -> ( expressionList , ) .)


state 192

    (47) block -> { statementList } .
    (               reduce using rule 47 (block -> { statementList } .)
    LOGIC_AND       reduce using rule 47 (block -> { statementList } .)
    LOGIC_OR        reduce using rule 47 (block -> { statementList } .)
    SHR             reduce using rule 47 (block -> { statementList } .)
    SHL             reduce using rule 47 (block -> { statementList } .)
    AND             reduce using rule 47 (block -> { statementList } .)
    MOD             reduce using rule 47 (block -> { statementList } .)
    DIV             reduce using rule 47 (block -> { statementList } .)
    STAR            reduce using rule 47 (block -> { statementList } .)
    XOR             reduce using rule 47 (block -> { statementList } .)
    OR              reduce using rule 47 (block -> { statementList } .)
    MINUS           reduce using rule 47 (block -> { statementList } .)
    PLUS            reduce using rule 47 (block -> { statementList } .)
    GE              reduce using rule 47 (block -> { statementList } .)
    GT              reduce using rule 47 (block -> { statementList } .)
    LE              reduce using rule 47 (block -> { statementList } .)
    LT              reduce using rule 47 (block -> { statementList } .)
    NE              reduce using rule 47 (block -> { statementList } .)
    EQ              reduce using rule 47 (block -> { statementList } .)
    ,               reduce using rule 47 (block -> { statementList } .)
    NEWL            reduce using rule 47 (block -> { statementList } .)
    ;               reduce using rule 47 (block -> { statementList } .)
    )               reduce using rule 47 (block -> { statementList } .)
    }               reduce using rule 47 (block -> { statementList } .)


state 193

    (45) statementList -> statementList eos . statement
    (109) eos -> eos . NEWL
    (111) eos -> eos . ;
    (48) statement -> . simpleStmt
    (49) statement -> . declaration
    (50) simpleStmt -> . assignment
    (51) simpleStmt -> . expressionStmt
    (24) declaration -> . varDecl
    (53) assignment -> . identifierList assign_op expressionList
    (52) expressionStmt -> . expression
    (25) varDecl -> . identifierList DECL_ASGN expressionList
    (26) identifierList -> . identifierList , IDENTIFIER
    (27) identifierList -> . IDENTIFIER
    (61) expression -> . expression BINARY_OP unaryExpr
    (62) expression -> . unaryExpr
    (63) unaryExpr -> . UNARY_OP unaryExpr
    (64) unaryExpr -> . primaryExpr
    (145) UNARY_OP -> . AND
    (146) UNARY_OP -> . EXCLM
    (147) UNARY_OP -> . MINUS
    (65) primaryExpr -> . primaryExpr arguments
    (66) primaryExpr -> . conversion
    (67) primaryExpr -> . operand
    (74) conversion -> . type_ ( expression )
    (68) operand -> . ( expression )
    (69) operand -> . operandName
    (70) operand -> . literal
    (75) type_ -> . typeName
    (71) operandName -> . IDENTIFIER
    (72) literal -> . functionLit
    (73) literal -> . basicLit
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (42) functionLit -> . FN function_
    (94) basicLit -> . INT_LIT
    (95) basicLit -> . FLOAT_LIT
    (96) basicLit -> . DECIMAL_LIT EXPONENT
    (97) basicLit -> . FLOAT_LIT EXPONENT
    (98) basicLit -> . FALSE
    (99) basicLit -> . TRUE
    (100) basicLit -> . RUNE_LIT
    (101) basicLit -> . STRING_LIT
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    (105) INT_LIT -> . HEX_LIT
    (106) INT_LIT -> . OCTAL_LIT
    (107) INT_LIT -> . BINARY_LIT
    (108) INT_LIT -> . DECIMAL_LIT
    (102) FLOAT_LIT -> . . DECIMAL_LIT
    (103) FLOAT_LIT -> . DECIMAL_LIT .
    (104) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    NEWL            shift and go to state 22
    ;               shift and go to state 23
    IDENTIFIER      shift and go to state 80
    AND             shift and go to state 30
    EXCLM           shift and go to state 31
    MINUS           shift and go to state 32
    (               shift and go to state 36
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 46
    DECIMAL_LIT     shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    RUNE_LIT        shift and go to state 52
    STRING_LIT      shift and go to state 53
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67
    HEX_LIT         shift and go to state 68
    OCTAL_LIT       shift and go to state 69
    BINARY_LIT      shift and go to state 70
    .               shift and go to state 71

    statement                      shift and go to state 174
    simpleStmt                     shift and go to state 81
    declaration                    shift and go to state 82
    assignment                     shift and go to state 83
    expressionStmt                 shift and go to state 84
    varDecl                        shift and go to state 85
    identifierList                 shift and go to state 86
    expression                     shift and go to state 87
    unaryExpr                      shift and go to state 27
    UNARY_OP                       shift and go to state 28
    primaryExpr                    shift and go to state 29
    conversion                     shift and go to state 33
    operand                        shift and go to state 34
    type_                          shift and go to state 35
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 47
    FLOAT_LIT                      shift and go to state 48

state 194

    (35) parameters -> ( parameterList , ) .
    (               reduce using rule 35 (parameters -> ( parameterList , ) .)
    STRING          reduce using rule 35 (parameters -> ( parameterList , ) .)
    BOOL            reduce using rule 35 (parameters -> ( parameterList , ) .)
    RUNE            reduce using rule 35 (parameters -> ( parameterList , ) .)
    F32             reduce using rule 35 (parameters -> ( parameterList , ) .)
    F64             reduce using rule 35 (parameters -> ( parameterList , ) .)
    INT             reduce using rule 35 (parameters -> ( parameterList , ) .)
    ISIZE           reduce using rule 35 (parameters -> ( parameterList , ) .)
    I64             reduce using rule 35 (parameters -> ( parameterList , ) .)
    I32             reduce using rule 35 (parameters -> ( parameterList , ) .)
    I16             reduce using rule 35 (parameters -> ( parameterList , ) .)
    I8              reduce using rule 35 (parameters -> ( parameterList , ) .)
    UINT            reduce using rule 35 (parameters -> ( parameterList , ) .)
    USIZE           reduce using rule 35 (parameters -> ( parameterList , ) .)
    U64             reduce using rule 35 (parameters -> ( parameterList , ) .)
    U32             reduce using rule 35 (parameters -> ( parameterList , ) .)
    U16             reduce using rule 35 (parameters -> ( parameterList , ) .)
    U8              reduce using rule 35 (parameters -> ( parameterList , ) .)
    {               reduce using rule 35 (parameters -> ( parameterList , ) .)
    NEWL            reduce using rule 35 (parameters -> ( parameterList , ) .)
    ;               reduce using rule 35 (parameters -> ( parameterList , ) .)


state 195

    (38) parameterList -> parameterList , parameterDecl .
    ,               reduce using rule 38 (parameterList -> parameterList , parameterDecl .)
    )               reduce using rule 38 (parameterList -> parameterList , parameterDecl .)


state 196

    (54) arguments -> ( type_ , expressionList , . )
    (43) expressionList -> expressionList , . expression
    (61) expression -> . expression BINARY_OP unaryExpr
    (62) expression -> . unaryExpr
    (63) unaryExpr -> . UNARY_OP unaryExpr
    (64) unaryExpr -> . primaryExpr
    (145) UNARY_OP -> . AND
    (146) UNARY_OP -> . EXCLM
    (147) UNARY_OP -> . MINUS
    (65) primaryExpr -> . primaryExpr arguments
    (66) primaryExpr -> . conversion
    (67) primaryExpr -> . operand
    (74) conversion -> . type_ ( expression )
    (68) operand -> . ( expression )
    (69) operand -> . operandName
    (70) operand -> . literal
    (75) type_ -> . typeName
    (71) operandName -> . IDENTIFIER
    (72) literal -> . functionLit
    (73) literal -> . basicLit
    (76) typeName -> . numericType
    (77) typeName -> . STRING
    (78) typeName -> . BOOL
    (79) typeName -> . RUNE
    (42) functionLit -> . FN function_
    (94) basicLit -> . INT_LIT
    (95) basicLit -> . FLOAT_LIT
    (96) basicLit -> . DECIMAL_LIT EXPONENT
    (97) basicLit -> . FLOAT_LIT EXPONENT
    (98) basicLit -> . FALSE
    (99) basicLit -> . TRUE
    (100) basicLit -> . RUNE_LIT
    (101) basicLit -> . STRING_LIT
    (80) numericType -> . F32
    (81) numericType -> . F64
    (82) numericType -> . INT
    (83) numericType -> . ISIZE
    (84) numericType -> . I64
    (85) numericType -> . I32
    (86) numericType -> . I16
    (87) numericType -> . I8
    (88) numericType -> . UINT
    (89) numericType -> . USIZE
    (90) numericType -> . U64
    (91) numericType -> . U32
    (92) numericType -> . U16
    (93) numericType -> . U8
    (105) INT_LIT -> . HEX_LIT
    (106) INT_LIT -> . OCTAL_LIT
    (107) INT_LIT -> . BINARY_LIT
    (108) INT_LIT -> . DECIMAL_LIT
    (102) FLOAT_LIT -> . . DECIMAL_LIT
    (103) FLOAT_LIT -> . DECIMAL_LIT .
    (104) FLOAT_LIT -> . DECIMAL_LIT . DECIMAL_LIT
    )               shift and go to state 198
    AND             shift and go to state 30
    EXCLM           shift and go to state 31
    MINUS           shift and go to state 32
    (               shift and go to state 36
    IDENTIFIER      shift and go to state 24
    STRING          shift and go to state 43
    BOOL            shift and go to state 44
    RUNE            shift and go to state 45
    FN              shift and go to state 46
    DECIMAL_LIT     shift and go to state 49
    FALSE           shift and go to state 50
    TRUE            shift and go to state 51
    RUNE_LIT        shift and go to state 52
    STRING_LIT      shift and go to state 53
    F32             shift and go to state 54
    F64             shift and go to state 55
    INT             shift and go to state 56
    ISIZE           shift and go to state 57
    I64             shift and go to state 58
    I32             shift and go to state 59
    I16             shift and go to state 60
    I8              shift and go to state 61
    UINT            shift and go to state 62
    USIZE           shift and go to state 63
    U64             shift and go to state 64
    U32             shift and go to state 65
    U16             shift and go to state 66
    U8              shift and go to state 67
    HEX_LIT         shift and go to state 68
    OCTAL_LIT       shift and go to state 69
    BINARY_LIT      shift and go to state 70
    .               shift and go to state 71

    type_                          shift and go to state 35
    expression                     shift and go to state 154
    unaryExpr                      shift and go to state 27
    UNARY_OP                       shift and go to state 28
    primaryExpr                    shift and go to state 29
    conversion                     shift and go to state 33
    operand                        shift and go to state 34
    operandName                    shift and go to state 37
    literal                        shift and go to state 38
    typeName                       shift and go to state 39
    functionLit                    shift and go to state 40
    basicLit                       shift and go to state 41
    numericType                    shift and go to state 42
    INT_LIT                        shift and go to state 47
    FLOAT_LIT                      shift and go to state 48

state 197

    (55) arguments -> ( type_ , expressionList ) .
    (               reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    LOGIC_AND       reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    LOGIC_OR        reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    SHR             reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    SHL             reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    AND             reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    MOD             reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    DIV             reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    STAR            reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    XOR             reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    OR              reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    MINUS           reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    PLUS            reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    GE              reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    GT              reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    LE              reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    LT              reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    NE              reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    EQ              reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    ,               reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    NEWL            reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    ;               reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    )               reduce using rule 55 (arguments -> ( type_ , expressionList ) .)
    }               reduce using rule 55 (arguments -> ( type_ , expressionList ) .)


state 198

    (54) arguments -> ( type_ , expressionList , ) .
    (               reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    LOGIC_AND       reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    LOGIC_OR        reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    SHR             reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    SHL             reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    AND             reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    MOD             reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    DIV             reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    STAR            reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    XOR             reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    OR              reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    MINUS           reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    PLUS            reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    GE              reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    GT              reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    LE              reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    LT              reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    NE              reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    EQ              reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    ,               reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    NEWL            reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    ;               reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    )               reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)
    }               reduce using rule 54 (arguments -> ( type_ , expressionList , ) .)


Conflicts:

shift/reduce conflict for C_PREPR in state 0 resolved as shift
shift/reduce conflict for IMPORT in state 6 resolved as shift