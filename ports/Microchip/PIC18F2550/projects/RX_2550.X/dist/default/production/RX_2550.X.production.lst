

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Jan 10 23:18:53 2024

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    12                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    15   000000                     
    16                           ; Version 2.40
    17                           ; Generated 17/11/2021 GMT
    18                           ; 
    19                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F2550 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51   000000                     _RCREG	set	4014
    52   000000                     _TXREG	set	4013
    53   000000                     _PORTB	set	3969
    54   000000                     _TRISB	set	3987
    55   000000                     _TRISCbits	set	3988
    56   000000                     _RCSTAbits	set	4011
    57   000000                     _TXSTAbits	set	4012
    58   000000                     _SPBRG	set	4015
    59                           
    60                           ; #config settings
    61                           
    62                           	psect	cinit
    63   007E52                     __pcinit:
    64                           	callstack 0
    65   007E52                     start_initialization:
    66                           	callstack 0
    67   007E52                     __initialization:
    68                           	callstack 0
    69   007E52                     end_of_initialization:
    70                           	callstack 0
    71   007E52                     __end_of__initialization:
    72                           	callstack 0
    73   007E52  0100               	movlb	0
    74   007E54  EF2C  F03F         	goto	_main	;jump to C main() function
    75                           
    76                           	psect	cstackCOMRAM
    77   000001                     __pcstackCOMRAM:
    78                           	callstack 0
    79   000001                     ?___aldiv:
    80                           	callstack 0
    81   000001                     ___aldiv@dividend:
    82                           	callstack 0
    83                           
    84                           ; 4 bytes @ 0x0
    85   000001                     	ds	4
    86   000005                     ___aldiv@divisor:
    87                           	callstack 0
    88                           
    89                           ; 4 bytes @ 0x4
    90   000005                     	ds	4
    91   000009                     ___aldiv@counter:
    92                           	callstack 0
    93                           
    94                           ; 1 bytes @ 0x8
    95   000009                     	ds	1
    96   00000A                     ___aldiv@sign:
    97                           	callstack 0
    98                           
    99                           ; 1 bytes @ 0x9
   100   00000A                     	ds	1
   101   00000B                     ___aldiv@quotient:
   102                           	callstack 0
   103                           
   104                           ; 4 bytes @ 0xA
   105   00000B                     	ds	4
   106   00000F                     USART_Init@BAUD:
   107                           	callstack 0
   108                           
   109                           ; 4 bytes @ 0xE
   110   00000F                     	ds	4
   111   000013                     _USART_Init$818:
   112                           	callstack 0
   113                           
   114                           ; 4 bytes @ 0x12
   115   000013                     	ds	4
   116   000017                     
   117                           ; 1 bytes @ 0x16
   118 ;;
   119 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   120 ;;
   121 ;; *************** function _main *****************
   122 ;; Defined at:
   123 ;;		line 77 in file "RX_2550.c"
   124 ;; Parameters:    Size  Location     Type
   125 ;;		None
   126 ;; Auto vars:     Size  Location     Type
   127 ;;		None
   128 ;; Return value:  Size  Location     Type
   129 ;;                  1    wreg      void 
   130 ;; Registers used:
   131 ;;		wreg, status,2, status,0, cstack
   132 ;; Tracked objects:
   133 ;;		On entry : 0/0
   134 ;;		On exit  : 0/0
   135 ;;		Unchanged: 0/0
   136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   137 ;;      Params:         0       0       0       0       0       0       0       0       0
   138 ;;      Locals:         0       0       0       0       0       0       0       0       0
   139 ;;      Temps:          0       0       0       0       0       0       0       0       0
   140 ;;      Totals:         0       0       0       0       0       0       0       0       0
   141 ;;Total ram usage:        0 bytes
   142 ;; Hardware stack levels required when called: 2
   143 ;; This function calls:
   144 ;;		_USART_Init
   145 ;;		_USART_Rx
   146 ;; This function is called by:
   147 ;;		Startup code after reset
   148 ;; This function uses a non-reentrant model
   149 ;;
   150                           
   151                           	psect	text0
   152   007E58                     __ptext0:
   153                           	callstack 0
   154   007E58                     _main:
   155                           	callstack 29
   156   007E58                     
   157                           ;RX_2550.c: 78:     TRISB=0x00;
   158   007E58  0E00               	movlw	0
   159   007E5A  6E93               	movwf	147,c	;volatile
   160   007E5C                     
   161                           ;RX_2550.c: 79:     USART_Init(9600);
   162   007E5C  0E80               	movlw	128
   163   007E5E  6E0F               	movwf	USART_Init@BAUD^0,c
   164   007E60  0E25               	movlw	37
   165   007E62  6E10               	movwf	(USART_Init@BAUD+1)^0,c
   166   007E64  0E00               	movlw	0
   167   007E66  6E11               	movwf	(USART_Init@BAUD+2)^0,c
   168   007E68  0E00               	movlw	0
   169   007E6A  6E12               	movwf	(USART_Init@BAUD+3)^0,c
   170   007E6C  EC3F  F03F         	call	_USART_Init	;wreg free
   171   007E70                     l865:
   172                           
   173                           ;RX_2550.c: 81:          PORTB=USART_Rx();
   174   007E70  EC27  F03F         	call	_USART_Rx	;wreg free
   175   007E74  6E81               	movwf	129,c	;volatile
   176   007E76  EF38  F03F         	goto	l865
   177   007E7A  EF00  F000         	goto	start
   178   007E7E                     __end_of_main:
   179                           	callstack 0
   180                           
   181 ;; *************** function _USART_Rx *****************
   182 ;; Defined at:
   183 ;;		line 39 in file "USART.c"
   184 ;; Parameters:    Size  Location     Type
   185 ;;		None
   186 ;; Auto vars:     Size  Location     Type
   187 ;;		None
   188 ;; Return value:  Size  Location     Type
   189 ;;                  1    wreg      unsigned char 
   190 ;; Registers used:
   191 ;;		wreg, status,2
   192 ;; Tracked objects:
   193 ;;		On entry : 0/0
   194 ;;		On exit  : 0/0
   195 ;;		Unchanged: 0/0
   196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   197 ;;      Params:         0       0       0       0       0       0       0       0       0
   198 ;;      Locals:         0       0       0       0       0       0       0       0       0
   199 ;;      Temps:          0       0       0       0       0       0       0       0       0
   200 ;;      Totals:         0       0       0       0       0       0       0       0       0
   201 ;;Total ram usage:        0 bytes
   202 ;; Hardware stack levels used: 1
   203 ;; This function calls:
   204 ;;		Nothing
   205 ;; This function is called by:
   206 ;;		_main
   207 ;; This function uses a non-reentrant model
   208 ;;
   209                           
   210                           	psect	text1
   211   007E4E                     __ptext1:
   212                           	callstack 0
   213   007E4E                     _USART_Rx:
   214                           	callstack 30
   215   007E4E                     
   216                           ;USART.c: 40:   return RCREG;
   217   007E4E  50AE               	movf	174,w,c	;volatile
   218   007E50  0012               	return		;funcret
   219   007E52                     __end_of_USART_Rx:
   220                           	callstack 0
   221                           
   222 ;; *************** function _USART_Init *****************
   223 ;; Defined at:
   224 ;;		line 13 in file "USART.c"
   225 ;; Parameters:    Size  Location     Type
   226 ;;  BAUD            4   14[COMRAM] long 
   227 ;; Auto vars:     Size  Location     Type
   228 ;;		None
   229 ;; Return value:  Size  Location     Type
   230 ;;                  1    wreg      void 
   231 ;; Registers used:
   232 ;;		wreg, status,2, status,0, cstack
   233 ;; Tracked objects:
   234 ;;		On entry : 0/0
   235 ;;		On exit  : 0/0
   236 ;;		Unchanged: 0/0
   237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   238 ;;      Params:         4       0       0       0       0       0       0       0       0
   239 ;;      Locals:         4       0       0       0       0       0       0       0       0
   240 ;;      Temps:          0       0       0       0       0       0       0       0       0
   241 ;;      Totals:         8       0       0       0       0       0       0       0       0
   242 ;;Total ram usage:        8 bytes
   243 ;; Hardware stack levels used: 1
   244 ;; Hardware stack levels required when called: 1
   245 ;; This function calls:
   246 ;;		___aldiv
   247 ;; This function is called by:
   248 ;;		_main
   249 ;; This function uses a non-reentrant model
   250 ;;
   251                           
   252                           	psect	text2
   253   007E7E                     __ptext2:
   254                           	callstack 0
   255   007E7E                     _USART_Init:
   256                           	callstack 29
   257   007E7E                     
   258                           ;USART.c: 15:     TRISCbits.RC6=0;
   259   007E7E  9C94               	bcf	148,6,c	;volatile
   260                           
   261                           ;USART.c: 16:     TRISCbits.RC7=1;
   262   007E80  8E94               	bsf	148,7,c	;volatile
   263   007E82                     
   264                           ;USART.c: 18:     SPBRG=(unsigned char)((8000000/BAUD)/64)-1;
   265   007E82  C00F  F005         	movff	USART_Init@BAUD,___aldiv@divisor
   266   007E86  C010  F006         	movff	USART_Init@BAUD+1,___aldiv@divisor+1
   267   007E8A  C011  F007         	movff	USART_Init@BAUD+2,___aldiv@divisor+2
   268   007E8E  C012  F008         	movff	USART_Init@BAUD+3,___aldiv@divisor+3
   269   007E92  0E00               	movlw	0
   270   007E94  6E01               	movwf	___aldiv@dividend^0,c
   271   007E96  0E12               	movlw	18
   272   007E98  6E02               	movwf	(___aldiv@dividend+1)^0,c
   273   007E9A  0E7A               	movlw	122
   274   007E9C  6E03               	movwf	(___aldiv@dividend+2)^0,c
   275   007E9E  0E00               	movlw	0
   276   007EA0  6E04               	movwf	(___aldiv@dividend+3)^0,c
   277   007EA2  EC7A  F03F         	call	___aldiv	;wreg free
   278   007EA6  C001  F013         	movff	?___aldiv,_USART_Init$818
   279   007EAA  C002  F014         	movff	?___aldiv+1,_USART_Init$818+1
   280   007EAE  C003  F015         	movff	?___aldiv+2,_USART_Init$818+2
   281   007EB2  C004  F016         	movff	?___aldiv+3,_USART_Init$818+3
   282                           
   283                           ;USART.c: 18:     SPBRG=(unsigned char)((8000000/BAUD)/64)-1;
   284   007EB6  C013  F001         	movff	_USART_Init$818,___aldiv@dividend
   285   007EBA  C014  F002         	movff	_USART_Init$818+1,___aldiv@dividend+1
   286   007EBE  C015  F003         	movff	_USART_Init$818+2,___aldiv@dividend+2
   287   007EC2  C016  F004         	movff	_USART_Init$818+3,___aldiv@dividend+3
   288   007EC6  0E40               	movlw	64
   289   007EC8  6E05               	movwf	___aldiv@divisor^0,c
   290   007ECA  0E00               	movlw	0
   291   007ECC  6E06               	movwf	(___aldiv@divisor+1)^0,c
   292   007ECE  0E00               	movlw	0
   293   007ED0  6E07               	movwf	(___aldiv@divisor+2)^0,c
   294   007ED2  0E00               	movlw	0
   295   007ED4  6E08               	movwf	(___aldiv@divisor+3)^0,c
   296   007ED6  EC7A  F03F         	call	___aldiv	;wreg free
   297   007EDA  0401               	decf	?___aldiv^0,w,c
   298   007EDC  6EAF               	movwf	175,c	;volatile
   299   007EDE                     
   300                           ;USART.c: 20:     TXSTAbits.BRGH=0;
   301   007EDE  94AC               	bcf	172,2,c	;volatile
   302   007EE0                     
   303                           ;USART.c: 21:     TXSTAbits.SYNC=0;
   304   007EE0  98AC               	bcf	172,4,c	;volatile
   305   007EE2                     
   306                           ;USART.c: 22:     RCSTAbits.SPEN =1;
   307   007EE2  8EAB               	bsf	171,7,c	;volatile
   308   007EE4                     
   309                           ;USART.c: 24:     TXSTAbits.TXEN=1;
   310   007EE4  8AAC               	bsf	172,5,c	;volatile
   311   007EE6                     
   312                           ;USART.c: 26:     RCSTAbits.RC9=0;
   313   007EE6  9CAB               	bcf	171,6,c	;volatile
   314   007EE8                     
   315                           ;USART.c: 27:     RCSTAbits.CREN=1;
   316   007EE8  88AB               	bsf	171,4,c	;volatile
   317   007EEA                     
   318                           ;USART.c: 29:     TXSTAbits.TX9=0;
   319   007EEA  9CAC               	bcf	172,6,c	;volatile
   320   007EEC                     
   321                           ;USART.c: 30:     TXSTAbits.TXEN=1;
   322   007EEC  8AAC               	bsf	172,5,c	;volatile
   323   007EEE                     
   324                           ;USART.c: 32:     RCSTAbits.RC9=0;
   325   007EEE  9CAB               	bcf	171,6,c	;volatile
   326   007EF0                     
   327                           ;USART.c: 33:     RCSTAbits.CREN=1;
   328   007EF0  88AB               	bsf	171,4,c	;volatile
   329   007EF2  0012               	return		;funcret
   330   007EF4                     __end_of_USART_Init:
   331                           	callstack 0
   332                           
   333 ;; *************** function ___aldiv *****************
   334 ;; Defined at:
   335 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aldiv.c"
   336 ;; Parameters:    Size  Location     Type
   337 ;;  dividend        4    0[COMRAM] long 
   338 ;;  divisor         4    4[COMRAM] long 
   339 ;; Auto vars:     Size  Location     Type
   340 ;;  quotient        4   10[COMRAM] long 
   341 ;;  sign            1    9[COMRAM] unsigned char 
   342 ;;  counter         1    8[COMRAM] unsigned char 
   343 ;; Return value:  Size  Location     Type
   344 ;;                  4    0[COMRAM] long 
   345 ;; Registers used:
   346 ;;		wreg, status,2, status,0
   347 ;; Tracked objects:
   348 ;;		On entry : 0/0
   349 ;;		On exit  : 0/0
   350 ;;		Unchanged: 0/0
   351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   352 ;;      Params:         8       0       0       0       0       0       0       0       0
   353 ;;      Locals:         6       0       0       0       0       0       0       0       0
   354 ;;      Temps:          0       0       0       0       0       0       0       0       0
   355 ;;      Totals:        14       0       0       0       0       0       0       0       0
   356 ;;Total ram usage:       14 bytes
   357 ;; Hardware stack levels used: 1
   358 ;; This function calls:
   359 ;;		Nothing
   360 ;; This function is called by:
   361 ;;		_USART_Init
   362 ;; This function uses a non-reentrant model
   363 ;;
   364                           
   365                           	psect	text3
   366   007EF4                     __ptext3:
   367                           	callstack 0
   368   007EF4                     ___aldiv:
   369                           	callstack 29
   370   007EF4  0E00               	movlw	0
   371   007EF6  6E0A               	movwf	___aldiv@sign^0,c
   372   007EF8  BE08               	btfsc	(___aldiv@divisor+3)^0,7,c
   373   007EFA  EF83  F03F         	goto	u70
   374   007EFE  EF81  F03F         	goto	u71
   375   007F02                     u71:
   376   007F02  EF8D  F03F         	goto	l801
   377   007F06                     u70:
   378   007F06  1E08               	comf	(___aldiv@divisor+3)^0,f,c
   379   007F08  1E07               	comf	(___aldiv@divisor+2)^0,f,c
   380   007F0A  1E06               	comf	(___aldiv@divisor+1)^0,f,c
   381   007F0C  6C05               	negf	___aldiv@divisor^0,c
   382   007F0E  0E00               	movlw	0
   383   007F10  2206               	addwfc	(___aldiv@divisor+1)^0,f,c
   384   007F12  2207               	addwfc	(___aldiv@divisor+2)^0,f,c
   385   007F14  2208               	addwfc	(___aldiv@divisor+3)^0,f,c
   386   007F16  0E01               	movlw	1
   387   007F18  6E0A               	movwf	___aldiv@sign^0,c
   388   007F1A                     l801:
   389   007F1A  BE04               	btfsc	(___aldiv@dividend+3)^0,7,c
   390   007F1C  EF94  F03F         	goto	u80
   391   007F20  EF92  F03F         	goto	u81
   392   007F24                     u81:
   393   007F24  EF9E  F03F         	goto	l807
   394   007F28                     u80:
   395   007F28  1E04               	comf	(___aldiv@dividend+3)^0,f,c
   396   007F2A  1E03               	comf	(___aldiv@dividend+2)^0,f,c
   397   007F2C  1E02               	comf	(___aldiv@dividend+1)^0,f,c
   398   007F2E  6C01               	negf	___aldiv@dividend^0,c
   399   007F30  0E00               	movlw	0
   400   007F32  2202               	addwfc	(___aldiv@dividend+1)^0,f,c
   401   007F34  2203               	addwfc	(___aldiv@dividend+2)^0,f,c
   402   007F36  2204               	addwfc	(___aldiv@dividend+3)^0,f,c
   403   007F38  0E01               	movlw	1
   404   007F3A  1A0A               	xorwf	___aldiv@sign^0,f,c
   405   007F3C                     l807:
   406   007F3C  0E00               	movlw	0
   407   007F3E  6E0B               	movwf	___aldiv@quotient^0,c
   408   007F40  0E00               	movlw	0
   409   007F42  6E0C               	movwf	(___aldiv@quotient+1)^0,c
   410   007F44  0E00               	movlw	0
   411   007F46  6E0D               	movwf	(___aldiv@quotient+2)^0,c
   412   007F48  0E00               	movlw	0
   413   007F4A  6E0E               	movwf	(___aldiv@quotient+3)^0,c
   414   007F4C  5005               	movf	___aldiv@divisor^0,w,c
   415   007F4E  1006               	iorwf	(___aldiv@divisor+1)^0,w,c
   416   007F50  1007               	iorwf	(___aldiv@divisor+2)^0,w,c
   417   007F52  1008               	iorwf	(___aldiv@divisor+3)^0,w,c
   418   007F54  B4D8               	btfsc	status,2,c
   419   007F56  EFAF  F03F         	goto	u91
   420   007F5A  EFB1  F03F         	goto	u90
   421   007F5E                     u91:
   422   007F5E  EFE7  F03F         	goto	l829
   423   007F62                     u90:
   424   007F62  0E01               	movlw	1
   425   007F64  6E09               	movwf	___aldiv@counter^0,c
   426   007F66  EFBB  F03F         	goto	l815
   427   007F6A                     l813:
   428   007F6A  90D8               	bcf	status,0,c
   429   007F6C  3605               	rlcf	___aldiv@divisor^0,f,c
   430   007F6E  3606               	rlcf	(___aldiv@divisor+1)^0,f,c
   431   007F70  3607               	rlcf	(___aldiv@divisor+2)^0,f,c
   432   007F72  3608               	rlcf	(___aldiv@divisor+3)^0,f,c
   433   007F74  2A09               	incf	___aldiv@counter^0,f,c
   434   007F76                     l815:
   435   007F76  AE08               	btfss	(___aldiv@divisor+3)^0,7,c
   436   007F78  EFC0  F03F         	goto	u101
   437   007F7C  EFC2  F03F         	goto	u100
   438   007F80                     u101:
   439   007F80  EFB5  F03F         	goto	l813
   440   007F84                     u100:
   441   007F84                     l817:
   442   007F84  90D8               	bcf	status,0,c
   443   007F86  360B               	rlcf	___aldiv@quotient^0,f,c
   444   007F88  360C               	rlcf	(___aldiv@quotient+1)^0,f,c
   445   007F8A  360D               	rlcf	(___aldiv@quotient+2)^0,f,c
   446   007F8C  360E               	rlcf	(___aldiv@quotient+3)^0,f,c
   447   007F8E  5005               	movf	___aldiv@divisor^0,w,c
   448   007F90  5C01               	subwf	___aldiv@dividend^0,w,c
   449   007F92  5006               	movf	(___aldiv@divisor+1)^0,w,c
   450   007F94  5802               	subwfb	(___aldiv@dividend+1)^0,w,c
   451   007F96  5007               	movf	(___aldiv@divisor+2)^0,w,c
   452   007F98  5803               	subwfb	(___aldiv@dividend+2)^0,w,c
   453   007F9A  5008               	movf	(___aldiv@divisor+3)^0,w,c
   454   007F9C  5804               	subwfb	(___aldiv@dividend+3)^0,w,c
   455   007F9E  A0D8               	btfss	status,0,c
   456   007FA0  EFD4  F03F         	goto	u111
   457   007FA4  EFD6  F03F         	goto	u110
   458   007FA8                     u111:
   459   007FA8  EFDF  F03F         	goto	l825
   460   007FAC                     u110:
   461   007FAC  5005               	movf	___aldiv@divisor^0,w,c
   462   007FAE  5E01               	subwf	___aldiv@dividend^0,f,c
   463   007FB0  5006               	movf	(___aldiv@divisor+1)^0,w,c
   464   007FB2  5A02               	subwfb	(___aldiv@dividend+1)^0,f,c
   465   007FB4  5007               	movf	(___aldiv@divisor+2)^0,w,c
   466   007FB6  5A03               	subwfb	(___aldiv@dividend+2)^0,f,c
   467   007FB8  5008               	movf	(___aldiv@divisor+3)^0,w,c
   468   007FBA  5A04               	subwfb	(___aldiv@dividend+3)^0,f,c
   469   007FBC  800B               	bsf	___aldiv@quotient^0,0,c
   470   007FBE                     l825:
   471   007FBE  90D8               	bcf	status,0,c
   472   007FC0  3208               	rrcf	(___aldiv@divisor+3)^0,f,c
   473   007FC2  3207               	rrcf	(___aldiv@divisor+2)^0,f,c
   474   007FC4  3206               	rrcf	(___aldiv@divisor+1)^0,f,c
   475   007FC6  3205               	rrcf	___aldiv@divisor^0,f,c
   476   007FC8  2E09               	decfsz	___aldiv@counter^0,f,c
   477   007FCA  EFC2  F03F         	goto	l817
   478   007FCE                     l829:
   479   007FCE  500A               	movf	___aldiv@sign^0,w,c
   480   007FD0  B4D8               	btfsc	status,2,c
   481   007FD2  EFED  F03F         	goto	u121
   482   007FD6  EFEF  F03F         	goto	u120
   483   007FDA                     u121:
   484   007FDA  EFF7  F03F         	goto	l833
   485   007FDE                     u120:
   486   007FDE  1E0E               	comf	(___aldiv@quotient+3)^0,f,c
   487   007FE0  1E0D               	comf	(___aldiv@quotient+2)^0,f,c
   488   007FE2  1E0C               	comf	(___aldiv@quotient+1)^0,f,c
   489   007FE4  6C0B               	negf	___aldiv@quotient^0,c
   490   007FE6  0E00               	movlw	0
   491   007FE8  220C               	addwfc	(___aldiv@quotient+1)^0,f,c
   492   007FEA  220D               	addwfc	(___aldiv@quotient+2)^0,f,c
   493   007FEC  220E               	addwfc	(___aldiv@quotient+3)^0,f,c
   494   007FEE                     l833:
   495   007FEE  C00B  F001         	movff	___aldiv@quotient,?___aldiv
   496   007FF2  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
   497   007FF6  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
   498   007FFA  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
   499   007FFE  0012               	return		;funcret
   500   008000                     __end_of___aldiv:
   501                           	callstack 0
   502   000000                     
   503                           	psect	rparam
   504   000000                     
   505                           	psect	idloc
   506                           
   507                           ;Config register IDLOC0 @ 0x200000
   508                           ;	unspecified, using default values
   509   200000                     	org	2097152
   510   200000  FF                 	db	255
   511                           
   512                           ;Config register IDLOC1 @ 0x200001
   513                           ;	unspecified, using default values
   514   200001                     	org	2097153
   515   200001  FF                 	db	255
   516                           
   517                           ;Config register IDLOC2 @ 0x200002
   518                           ;	unspecified, using default values
   519   200002                     	org	2097154
   520   200002  FF                 	db	255
   521                           
   522                           ;Config register IDLOC3 @ 0x200003
   523                           ;	unspecified, using default values
   524   200003                     	org	2097155
   525   200003  FF                 	db	255
   526                           
   527                           ;Config register IDLOC4 @ 0x200004
   528                           ;	unspecified, using default values
   529   200004                     	org	2097156
   530   200004  FF                 	db	255
   531                           
   532                           ;Config register IDLOC5 @ 0x200005
   533                           ;	unspecified, using default values
   534   200005                     	org	2097157
   535   200005  FF                 	db	255
   536                           
   537                           ;Config register IDLOC6 @ 0x200006
   538                           ;	unspecified, using default values
   539   200006                     	org	2097158
   540   200006  FF                 	db	255
   541                           
   542                           ;Config register IDLOC7 @ 0x200007
   543                           ;	unspecified, using default values
   544   200007                     	org	2097159
   545   200007  FF                 	db	255
   546                           
   547                           	psect	config
   548                           
   549                           ;Config register CONFIG1L @ 0x300000
   550                           ;	PLL Prescaler Selection bits
   551                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   552                           ;	System Clock Postscaler Selection bits
   553                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   554                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   555                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   556   300000                     	org	3145728
   557   300000  00                 	db	0
   558                           
   559                           ;Config register CONFIG1H @ 0x300001
   560                           ;	Oscillator Selection bits
   561                           ;	FOSC = HS, HS oscillator (HS)
   562                           ;	Fail-Safe Clock Monitor Enable bit
   563                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   564                           ;	Internal/External Oscillator Switchover bit
   565                           ;	IESO = OFF, Oscillator Switchover mode disabled
   566   300001                     	org	3145729
   567   300001  0C                 	db	12
   568                           
   569                           ;Config register CONFIG2L @ 0x300002
   570                           ;	Power-up Timer Enable bit
   571                           ;	PWRT = ON, PWRT enabled
   572                           ;	Brown-out Reset Enable bits
   573                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   574                           ;	Brown-out Reset Voltage bits
   575                           ;	BORV = 3, Minimum setting 2.05V
   576                           ;	USB Voltage Regulator Enable bit
   577                           ;	VREGEN = OFF, USB voltage regulator disabled
   578   300002                     	org	3145730
   579   300002  18                 	db	24
   580                           
   581                           ;Config register CONFIG2H @ 0x300003
   582                           ;	Watchdog Timer Enable bit
   583                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   584                           ;	Watchdog Timer Postscale Select bits
   585                           ;	WDTPS = 32768, 1:32768
   586   300003                     	org	3145731
   587   300003  1E                 	db	30
   588                           
   589                           ; Padding undefined space
   590   300004                     	org	3145732
   591   300004  FF                 	db	255
   592                           
   593                           ;Config register CONFIG3H @ 0x300005
   594                           ;	CCP2 MUX bit
   595                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   596                           ;	PORTB A/D Enable bit
   597                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   598                           ;	Low-Power Timer 1 Oscillator Enable bit
   599                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   600                           ;	MCLR Pin Enable bit
   601                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   602   300005                     	org	3145733
   603   300005  81                 	db	129
   604                           
   605                           ;Config register CONFIG4L @ 0x300006
   606                           ;	Stack Full/Underflow Reset Enable bit
   607                           ;	STVREN = ON, Stack full/underflow will cause Reset
   608                           ;	Single-Supply ICSP Enable bit
   609                           ;	LVP = ON, Single-Supply ICSP enabled
   610                           ;	Extended Instruction Set Enable bit
   611                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   612                           ;	Background Debugger Enable bit
   613                           ;	DEBUG = 0x1, unprogrammed default
   614   300006                     	org	3145734
   615   300006  85                 	db	133
   616                           
   617                           ; Padding undefined space
   618   300007                     	org	3145735
   619   300007  FF                 	db	255
   620                           
   621                           ;Config register CONFIG5L @ 0x300008
   622                           ;	Code Protection bit
   623                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   624                           ;	Code Protection bit
   625                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   626                           ;	Code Protection bit
   627                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   628                           ;	Code Protection bit
   629                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   630   300008                     	org	3145736
   631   300008  0F                 	db	15
   632                           
   633                           ;Config register CONFIG5H @ 0x300009
   634                           ;	Boot Block Code Protection bit
   635                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   636                           ;	Data EEPROM Code Protection bit
   637                           ;	CPD = OFF, Data EEPROM is not code-protected
   638   300009                     	org	3145737
   639   300009  C0                 	db	192
   640                           
   641                           ;Config register CONFIG6L @ 0x30000A
   642                           ;	Write Protection bit
   643                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   644                           ;	Write Protection bit
   645                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   646                           ;	Write Protection bit
   647                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   648                           ;	Write Protection bit
   649                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   650   30000A                     	org	3145738
   651   30000A  0F                 	db	15
   652                           
   653                           ;Config register CONFIG6H @ 0x30000B
   654                           ;	Configuration Register Write Protection bit
   655                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   656                           ;	Boot Block Write Protection bit
   657                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   658                           ;	Data EEPROM Write Protection bit
   659                           ;	WRTD = OFF, Data EEPROM is not write-protected
   660   30000B                     	org	3145739
   661   30000B  E0                 	db	224
   662                           
   663                           ;Config register CONFIG7L @ 0x30000C
   664                           ;	Table Read Protection bit
   665                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   666                           ;	Table Read Protection bit
   667                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   668                           ;	Table Read Protection bit
   669                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   670                           ;	Table Read Protection bit
   671                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   672   30000C                     	org	3145740
   673   30000C  0F                 	db	15
   674                           
   675                           ;Config register CONFIG7H @ 0x30000D
   676                           ;	Boot Block Table Read Protection bit
   677                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   678   30000D                     	org	3145741
   679   30000D  40                 	db	64
   680                           tosu	equ	0xFFF
   681                           tosh	equ	0xFFE
   682                           tosl	equ	0xFFD
   683                           stkptr	equ	0xFFC
   684                           pclatu	equ	0xFFB
   685                           pclath	equ	0xFFA
   686                           pcl	equ	0xFF9
   687                           tblptru	equ	0xFF8
   688                           tblptrh	equ	0xFF7
   689                           tblptrl	equ	0xFF6
   690                           tablat	equ	0xFF5
   691                           prodh	equ	0xFF4
   692                           prodl	equ	0xFF3
   693                           indf0	equ	0xFEF
   694                           postinc0	equ	0xFEE
   695                           postdec0	equ	0xFED
   696                           preinc0	equ	0xFEC
   697                           plusw0	equ	0xFEB
   698                           fsr0h	equ	0xFEA
   699                           fsr0l	equ	0xFE9
   700                           wreg	equ	0xFE8
   701                           indf1	equ	0xFE7
   702                           postinc1	equ	0xFE6
   703                           postdec1	equ	0xFE5
   704                           preinc1	equ	0xFE4
   705                           plusw1	equ	0xFE3
   706                           fsr1h	equ	0xFE2
   707                           fsr1l	equ	0xFE1
   708                           bsr	equ	0xFE0
   709                           indf2	equ	0xFDF
   710                           postinc2	equ	0xFDE
   711                           postdec2	equ	0xFDD
   712                           preinc2	equ	0xFDC
   713                           plusw2	equ	0xFDB
   714                           fsr2h	equ	0xFDA
   715                           fsr2l	equ	0xFD9
   716                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     22      22
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_USART_Init
    _USART_Init->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     725
                         _USART_Init
                           _USART_Rx
 ---------------------------------------------------------------------------------
 (1) _USART_Rx                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           8     4      4     725
                                             14 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_Init
     ___aldiv
   _USART_Rx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     16      16       1       23.2%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBIGSFRhh         50      0       0      20        0.0%
BITBIGSFRhll        16      0       0      21        0.0%
BITBIGSFRlh         11      0       0      22        0.0%
BITBIGSFRll         21      0       0      23        0.0%
ABS                  0      0       0      24        0.0%
BIGRAM             7FF      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Jan 10 23:18:53 2024

                     l21 7E50                       l15 7EF2                       u70 7F06  
                     u71 7F02                       u80 7F28                       u81 7F24  
                     u90 7F62                       u91 7F5E                      l119 7FFE  
                    l801 7F1A                      l811 7F62                      l803 7F28  
                    l821 7FAC                      l813 7F6A                      l805 7F38  
                    l831 7FDE                      l823 7FBC                      l815 7F76  
                    l807 7F3C                      l833 7FEE                      l825 7FBE  
                    l817 7F84                      l809 7F4C                      l841 7EDE  
                    l827 7FC8                      l819 7F8E                      l851 7EE8  
                    l843 7EE0                      l829 7FCE                      l853 7EEA  
                    l845 7EE2                      l837 7E7E                      l781 7E4E  
                    l861 7E58                      l855 7EEC                      l847 7EE4  
                    l839 7E82                      l863 7E5C                      l793 7EF4  
                    l857 7EEE                      l849 7EE6                      l865 7E70  
                    l795 7EF8                      l859 7EF0                      l797 7F06  
                    l799 7F16                      u100 7F84                      u101 7F80  
                    u110 7FAC                      u111 7FA8                      u120 7FDE  
                    u121 7FDA                     _main 7E58                     start 0000  
           ___param_bank 000000          __end_of___aldiv 8000                    ?_main 0001  
                  _RCREG 000FAE                    _SPBRG 000FAF                    _PORTB 000F81  
                  _TRISB 000F93                    _TXREG 000FAD         __end_of_USART_Rx 7E52  
                  status 000FD8              ?_USART_Init 000F          __initialization 7E52  
           __end_of_main 7E7E                   ??_main 0017            __activetblptr 000000  
              ??___aldiv 0009                   isa$std 000001               __accesstop 0060  
__end_of__initialization 7E52            ___rparam_used 000001           __pcstackCOMRAM 0001  
              ?_USART_Rx 0001               ??_USART_Rx 0001             ??_USART_Init 0013  
                __Hparam 0000                  __Lparam 0000                  ___aldiv 7EF4  
         USART_Init@BAUD 000F                  __pcinit 7E52                  __ramtop 0800  
                __ptext0 7E58                  __ptext1 7E4E                  __ptext2 7E7E  
                __ptext3 7EF4         ___aldiv@dividend 0001       __end_of_USART_Init 7EF4  
   end_of_initialization 7E52                _RCSTAbits 000FAB         ___aldiv@quotient 000B  
              _TRISCbits 000F94                _TXSTAbits 000FAC      start_initialization 7E52  
               ?___aldiv 0001          ___aldiv@divisor 0005          ___aldiv@counter 0009  
               _USART_Rx 7E4E                 __Hrparam 0000                 __Lrparam 0000  
               isa$xinst 000000           _USART_Init$818 0013             ___aldiv@sign 000A  
             _USART_Init 7E7E  
