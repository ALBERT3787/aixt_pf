

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue Oct 03 11:12:29 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F676
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
     9                           	dabs	1,0x5E,2
    10     0000                     
    11                           ; Generated 22/03/2023 GMT
    12                           ; 
    13                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    14                           ; All rights reserved.
    15                           ; 
    16                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    17                           ; 
    18                           ; Redistribution and use in source and binary forms, with or without modification, are
    19                           ; permitted provided that the following conditions are met:
    20                           ; 
    21                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    22                           ;        conditions and the following disclaimer.
    23                           ; 
    24                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    25                           ;        of conditions and the following disclaimer in the documentation and/or other
    26                           ;        materials provided with the distribution. Publication is not required when
    27                           ;        this file is used in an embedded application.
    28                           ; 
    29                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    30                           ;        software without specific prior written permission.
    31                           ; 
    32                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    33                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    34                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    35                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    36                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    37                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    38                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    39                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    40                           ; 
    41                           ; 
    42                           ; Code-generator required, PIC16F676 Definitions
    43                           ; 
    44                           ; SFR Addresses
    45     0000                     	;# 
    46     0001                     	;# 
    47     0002                     	;# 
    48     0003                     	;# 
    49     0004                     	;# 
    50     0005                     	;# 
    51     0007                     	;# 
    52     000A                     	;# 
    53     000B                     	;# 
    54     000C                     	;# 
    55     000E                     	;# 
    56     000E                     	;# 
    57     000F                     	;# 
    58     0010                     	;# 
    59     0019                     	;# 
    60     001E                     	;# 
    61     001F                     	;# 
    62     0081                     	;# 
    63     0085                     	;# 
    64     0087                     	;# 
    65     008C                     	;# 
    66     008E                     	;# 
    67     0090                     	;# 
    68     0091                     	;# 
    69     0095                     	;# 
    70     0095                     	;# 
    71     0096                     	;# 
    72     0096                     	;# 
    73     0099                     	;# 
    74     009A                     	;# 
    75     009A                     	;# 
    76     009B                     	;# 
    77     009C                     	;# 
    78     009D                     	;# 
    79     009E                     	;# 
    80     009F                     	;# 
    81     0000                     	;# 
    82     0001                     	;# 
    83     0002                     	;# 
    84     0003                     	;# 
    85     0004                     	;# 
    86     0005                     	;# 
    87     0007                     	;# 
    88     000A                     	;# 
    89     000B                     	;# 
    90     000C                     	;# 
    91     000E                     	;# 
    92     000E                     	;# 
    93     000F                     	;# 
    94     0010                     	;# 
    95     0019                     	;# 
    96     001E                     	;# 
    97     001F                     	;# 
    98     0081                     	;# 
    99     0085                     	;# 
   100     0087                     	;# 
   101     008C                     	;# 
   102     008E                     	;# 
   103     0090                     	;# 
   104     0091                     	;# 
   105     0095                     	;# 
   106     0095                     	;# 
   107     0096                     	;# 
   108     0096                     	;# 
   109     0099                     	;# 
   110     009A                     	;# 
   111     009A                     	;# 
   112     009B                     	;# 
   113     009C                     	;# 
   114     009D                     	;# 
   115     009E                     	;# 
   116     009F                     	;# 
   117                           
   118                           	psect	nvBANK0
   119     0023                     __pnvBANK0:
   120     0023                     ___port_bit:
   121     0023                     	ds	1
   122     0024                     ___addr:
   123     0024                     	ds	1
   124     0007                     _PORTC	set	7
   125     0085                     _TRISA	set	133
   126                           
   127                           	psect	cinit
   128     03FD                     start_initialization:	
   129                           ; #config settings
   130                           
   131     03FD                     __initialization:
   132     03FD                     end_of_initialization:	
   133                           ;End of C runtime variable initialization code
   134                           
   135     03FD                     __end_of__initialization:
   136     03FD  0183               	clrf	3
   137     03FE  2B9F               	ljmp	_main	;jump to C main() function
   138                           
   139                           	psect	cstackBANK0
   140     0020                     __pcstackBANK0:
   141     0020                     ?_main:
   142     0020                     ??_main:	
   143                           ; 1 bytes @ 0x0
   144                           
   145                           
   146                           ; 1 bytes @ 0x0
   147     0020                     	ds	3
   148                           
   149                           	psect	maintext
   150     039F                     __pmaintext:	
   151 ;;
   152 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   153 ;;
   154 ;; *************** function _main *****************
   155 ;; Defined at:
   156 ;;		line 23 in file "blinking.c"
   157 ;; Parameters:    Size  Location     Type
   158 ;;		None
   159 ;; Auto vars:     Size  Location     Type
   160 ;;		None
   161 ;; Return value:  Size  Location     Type
   162 ;;                  1    wreg      void 
   163 ;; Registers used:
   164 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   165 ;; Tracked objects:
   166 ;;		On entry : B00/0
   167 ;;		On exit  : 0/0
   168 ;;		Unchanged: 0/0
   169 ;; Data sizes:     COMMON   BANK0
   170 ;;      Params:         0       0
   171 ;;      Locals:         0       0
   172 ;;      Temps:          0       3
   173 ;;      Totals:         0       3
   174 ;;Total ram usage:        3 bytes
   175 ;; This function calls:
   176 ;;		Nothing
   177 ;; This function is called by:
   178 ;;		Startup code after reset
   179 ;; This function uses a non-reentrant model
   180 ;;
   181                           
   182     039F                     _main:	
   183                           ;psect for function _main
   184                           
   185     039F                     l676:	
   186                           ;incstack = 0
   187                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1]
   188                           
   189                           
   190                           ;blinking.c: 25:     __addr = (unsigned char)(rc5/8) + &TRISA; __port_bit = rc5%8; if(0=
      +                          =1) *__addr |= 0x01<<__port_bit; else *__addr &= ~(0x01<<__port_bit);
   191     039F  3087               	movlw	135
   192     03A0  1283               	bcf	3,5	;RP0=0, select bank0
   193     03A1  00A4               	movwf	___addr
   194     03A2  3005               	movlw	5
   195     03A3  00A3               	movwf	___port_bit
   196     03A4                     l680:
   197     03A4  30DF               	movlw	223
   198     03A5  00DF               	movwf	btemp+1
   199     03A6  0824               	movf	___addr,w
   200     03A7  0084               	movwf	4
   201     03A8  085F               	movf	btemp+1,w
   202     03A9  1383               	bcf	3,7	;select IRP bank0
   203     03AA  0580               	andwf	0,f
   204     03AB                     l682:
   205                           
   206                           ;blinking.c: 26:     __addr = (unsigned char)(rc4/8) + &TRISA; __port_bit = rc4%8; if(0=
      +                          =1) *__addr |= 0x01<<__port_bit; else *__addr &= ~(0x01<<__port_bit);
   207     03AB  3087               	movlw	135
   208     03AC  00A4               	movwf	___addr
   209     03AD                     l684:
   210     03AD  3004               	movlw	4
   211     03AE  00A3               	movwf	___port_bit
   212     03AF                     l688:
   213     03AF  30EF               	movlw	239
   214     03B0  00DF               	movwf	btemp+1
   215     03B1  0824               	movf	___addr,w
   216     03B2  0084               	movwf	4
   217     03B3  085F               	movf	btemp+1,w
   218     03B4  0580               	andwf	0,f
   219     03B5                     l690:
   220                           
   221                           ;blinking.c: 27:     __addr = (unsigned char)(rc3/8) + &TRISA; __port_bit = rc3%8; if(0=
      +                          =1) *__addr |= 0x01<<__port_bit; else *__addr &= ~(0x01<<__port_bit);
   222     03B5  3087               	movlw	135
   223     03B6  00A4               	movwf	___addr
   224     03B7                     l692:
   225     03B7  3003               	movlw	3
   226     03B8  00A3               	movwf	___port_bit
   227     03B9                     l696:
   228     03B9  30F7               	movlw	247
   229     03BA  00DF               	movwf	btemp+1
   230     03BB  0824               	movf	___addr,w
   231     03BC  0084               	movwf	4
   232     03BD  085F               	movf	btemp+1,w
   233     03BE  0580               	andwf	0,f
   234     03BF                     l698:
   235                           
   236                           ;blinking.c: 28:     __addr = (unsigned char)(rc2/8) + &TRISA; __port_bit = rc2%8; if(0=
      +                          =1) *__addr |= 0x01<<__port_bit; else *__addr &= ~(0x01<<__port_bit);
   237     03BF  3087               	movlw	135
   238     03C0  00A4               	movwf	___addr
   239     03C1                     l700:
   240     03C1  3002               	movlw	2
   241     03C2  00A3               	movwf	___port_bit
   242     03C3                     l704:
   243     03C3  30FB               	movlw	251
   244     03C4  00DF               	movwf	btemp+1
   245     03C5  0824               	movf	___addr,w
   246     03C6  0084               	movwf	4
   247     03C7  085F               	movf	btemp+1,w
   248     03C8  0580               	andwf	0,f
   249     03C9                     l706:
   250                           
   251                           ;blinking.c: 29:     __addr = (unsigned char)(rc1/8) + &TRISA; __port_bit = rc1%8; if(0=
      +                          =1) *__addr |= 0x01<<__port_bit; else *__addr &= ~(0x01<<__port_bit);
   252     03C9  3087               	movlw	135
   253     03CA  00A4               	movwf	___addr
   254     03CB                     l708:
   255     03CB  01A3               	clrf	___port_bit
   256     03CC  0AA3               	incf	___port_bit,f
   257     03CD                     l712:
   258     03CD  30FD               	movlw	253
   259     03CE  00DF               	movwf	btemp+1
   260     03CF  0824               	movf	___addr,w
   261     03D0  0084               	movwf	4
   262     03D1  085F               	movf	btemp+1,w
   263     03D2  0580               	andwf	0,f
   264     03D3                     l714:
   265                           
   266                           ;blinking.c: 30:     __addr = (unsigned char)(rc0/8) + &TRISA; __port_bit = rc0%8; if(0=
      +                          =1) *__addr |= 0x01<<__port_bit; else *__addr &= ~(0x01<<__port_bit);
   267     03D3  3087               	movlw	135
   268     03D4  00A4               	movwf	___addr
   269     03D5                     l716:
   270     03D5  01A3               	clrf	___port_bit
   271     03D6                     l720:
   272     03D6  30FE               	movlw	254
   273     03D7  00DF               	movwf	btemp+1
   274     03D8  0824               	movf	___addr,w
   275     03D9  0084               	movwf	4
   276     03DA  085F               	movf	btemp+1,w
   277     03DB  0580               	andwf	0,f
   278     03DC                     l722:
   279                           
   280                           ;blinking.c: 34:         PORTC = 0b111111;
   281     03DC  303F               	movlw	63
   282     03DD  1283               	bcf	3,5	;RP0=0, select bank0
   283     03DE  0087               	movwf	7	;volatile
   284     03DF                     l724:
   285                           
   286                           ;blinking.c: 35:         _delay((unsigned long)((500)*(4000000/4000.0)));
   287     03DF  3003               	movlw	3
   288     03E0  00A2               	movwf	??_main+2
   289     03E1  308A               	movlw	138
   290     03E2  00A1               	movwf	??_main+1
   291     03E3  3055               	movlw	85
   292     03E4  00A0               	movwf	??_main
   293     03E5                     u17:
   294     03E5  0BA0               	decfsz	??_main,f
   295     03E6  2BE5               	goto	u17
   296     03E7  0BA1               	decfsz	??_main+1,f
   297     03E8  2BE5               	goto	u17
   298     03E9  0BA2               	decfsz	??_main+2,f
   299     03EA  2BE5               	goto	u17
   300     03EB  2BEC               	nop2
   301     03EC                     l726:
   302                           
   303                           ;blinking.c: 36:         PORTC = 0b000000;
   304     03EC  1283               	bcf	3,5	;RP0=0, select bank0
   305     03ED  0187               	clrf	7	;volatile
   306     03EE                     l728:
   307                           
   308                           ;blinking.c: 37:         _delay((unsigned long)((500)*(4000000/4000.0)));
   309     03EE  3003               	movlw	3
   310     03EF  00A2               	movwf	??_main+2
   311     03F0  308A               	movlw	138
   312     03F1  00A1               	movwf	??_main+1
   313     03F2  3055               	movlw	85
   314     03F3  00A0               	movwf	??_main
   315     03F4                     u27:
   316     03F4  0BA0               	decfsz	??_main,f
   317     03F5  2BF4               	goto	u27
   318     03F6  0BA1               	decfsz	??_main+1,f
   319     03F7  2BF4               	goto	u27
   320     03F8  0BA2               	decfsz	??_main+2,f
   321     03F9  2BF4               	goto	u27
   322     03FA  2BFB               	nop2
   323     03FB  2BDC               	goto	l722
   324     03FC  2800               	ljmp	start
   325     03FD                     __end_of_main:
   326     005E                     btemp	set	94	;btemp
   327     005E                     wtemp0	set	94
   328                           
   329                           	psect	config
   330                           
   331                           ;Config register CONFIG @ 0x2007
   332                           ;	Oscillator Selection bits
   333                           ;	FOSC = INTRCIO, INTOSC oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O function o
      +                          n RA5/OSC1/CLKIN
   334                           ;	Watchdog Timer Enable bit
   335                           ;	WDTE = OFF, WDT disabled
   336                           ;	Power-up Timer Enable bit
   337                           ;	PWRTE = OFF, PWRT disabled
   338                           ;	RA3/MCLR pin function select
   339                           ;	MCLRE = OFF, RA3/MCLR pin function is digital I/O, MCLR internally tied to VDD
   340                           ;	Brown-out Detect Enable bit
   341                           ;	BOREN = OFF, BOD disabled
   342                           ;	Code Protection bit
   343                           ;	CP = OFF, Program Memory code protection is disabled
   344                           ;	Data Code Protection bit
   345                           ;	CPD = OFF, Data memory code protection is disabled
   346     2007                     	org	8199
   347     2007  3F94               	dw	16276

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62      3       5

Pointer List with Targets:

    __addr	PTR unsigned char  size(1) Largest target is 1
		 -> NULL(NULL[0]), TRISA(SFR1[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E      3       5       4        8.1%
ABS                  0      0       5       5        0.0%
DATA                 0      0       5       6        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue Oct 03 11:12:29 2023

                     u17 03E5                       u27 03F4                      l700 03C1  
                    l720 03D6                      l712 03CD                      l704 03C3  
                    l722 03DC                      l714 03D3                      l706 03C9  
                    l724 03DF                      l716 03D5                      l708 03CB  
                    l726 03EC                      l728 03EE                      l680 03A4  
                    l690 03B5                      l682 03AB                      l692 03B7  
                    l684 03AD                      l676 039F                      l696 03B9  
                    l688 03AF                      l698 03BF                      fsr0 0004  
                    indf 0000                     _main 039F                     btemp 005E  
                   start 0000                    ?_main 0020                    _PORTC 0007  
                  _TRISA 0085                    status 0003                    wtemp0 005E  
        __initialization 03FD             __end_of_main 03FD                   ??_main 0020  
                 ___addr 0024  __end_of__initialization 03FD               ___port_bit 0023  
             __pmaintext 039F     end_of_initialization 03FD      start_initialization 03FD  
              ___latbits 0000            __pcstackBANK0 0020                __pnvBANK0 0023  
