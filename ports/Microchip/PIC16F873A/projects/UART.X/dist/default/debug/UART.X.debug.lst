

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Mon Mar 04 07:30:19 2024

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F873A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 22/03/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F873A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0006                     	;# 
    58     0007                     	;# 
    59     000A                     	;# 
    60     000B                     	;# 
    61     000C                     	;# 
    62     000D                     	;# 
    63     000E                     	;# 
    64     000E                     	;# 
    65     000F                     	;# 
    66     0010                     	;# 
    67     0011                     	;# 
    68     0012                     	;# 
    69     0013                     	;# 
    70     0014                     	;# 
    71     0015                     	;# 
    72     0015                     	;# 
    73     0016                     	;# 
    74     0017                     	;# 
    75     0018                     	;# 
    76     0019                     	;# 
    77     001A                     	;# 
    78     001B                     	;# 
    79     001B                     	;# 
    80     001C                     	;# 
    81     001D                     	;# 
    82     001E                     	;# 
    83     001F                     	;# 
    84     0081                     	;# 
    85     0085                     	;# 
    86     0086                     	;# 
    87     0087                     	;# 
    88     008C                     	;# 
    89     008D                     	;# 
    90     008E                     	;# 
    91     0091                     	;# 
    92     0092                     	;# 
    93     0093                     	;# 
    94     0094                     	;# 
    95     0098                     	;# 
    96     0099                     	;# 
    97     009C                     	;# 
    98     009D                     	;# 
    99     009E                     	;# 
   100     009F                     	;# 
   101     010C                     	;# 
   102     010D                     	;# 
   103     010E                     	;# 
   104     010F                     	;# 
   105     018C                     	;# 
   106     018D                     	;# 
   107     0000                     	;# 
   108     0001                     	;# 
   109     0002                     	;# 
   110     0003                     	;# 
   111     0004                     	;# 
   112     0005                     	;# 
   113     0006                     	;# 
   114     0007                     	;# 
   115     000A                     	;# 
   116     000B                     	;# 
   117     000C                     	;# 
   118     000D                     	;# 
   119     000E                     	;# 
   120     000E                     	;# 
   121     000F                     	;# 
   122     0010                     	;# 
   123     0011                     	;# 
   124     0012                     	;# 
   125     0013                     	;# 
   126     0014                     	;# 
   127     0015                     	;# 
   128     0015                     	;# 
   129     0016                     	;# 
   130     0017                     	;# 
   131     0018                     	;# 
   132     0019                     	;# 
   133     001A                     	;# 
   134     001B                     	;# 
   135     001B                     	;# 
   136     001C                     	;# 
   137     001D                     	;# 
   138     001E                     	;# 
   139     001F                     	;# 
   140     0081                     	;# 
   141     0085                     	;# 
   142     0086                     	;# 
   143     0087                     	;# 
   144     008C                     	;# 
   145     008D                     	;# 
   146     008E                     	;# 
   147     0091                     	;# 
   148     0092                     	;# 
   149     0093                     	;# 
   150     0094                     	;# 
   151     0098                     	;# 
   152     0099                     	;# 
   153     009C                     	;# 
   154     009D                     	;# 
   155     009E                     	;# 
   156     009F                     	;# 
   157     010C                     	;# 
   158     010D                     	;# 
   159     010E                     	;# 
   160     010F                     	;# 
   161     018C                     	;# 
   162     018D                     	;# 
   163                           
   164                           	psect	strings
   165     0002                     __pstrings:
   166     0002                     stringtab:
   167     0002                     __stringtab:
   168     0002                     stringcode:	
   169                           ;	String table - string pointers are 1 byte each
   170                           
   171     0002                     stringdir:
   172     0002  3000               	movlw	high stringdir
   173     0003  008A               	movwf	10
   174     0004  0804               	movf	4,w
   175     0005  0A84               	incf	4,f
   176     0006  0782               	addwf	2,f
   177     0007                     __stringbase:
   178     0007  3400               	retlw	0
   179     0008                     __end_of__stringtab:
   180     0008                     _dpowers:
   181     0008  3401               	retlw	1
   182     0009  3400               	retlw	0
   183     000A  340A               	retlw	10
   184     000B  3400               	retlw	0
   185     000C  3464               	retlw	100
   186     000D  3400               	retlw	0
   187     000E  34E8               	retlw	232
   188     000F  3403               	retlw	3
   189     0010  3410               	retlw	16
   190     0011  3427               	retlw	39
   191     0012                     __end_of_dpowers:
   192     0019                     _TXREG	set	25
   193     001F                     _ADCON0	set	31
   194     001A                     _RCREG	set	26
   195     0018                     _RCSTAbits	set	24
   196     000C                     _PIR1bits	set	12
   197     001E                     _ADRESH	set	30
   198     001F                     _ADCON0bits	set	31
   199     0064                     _TXIF	set	100
   200     0098                     _TXSTAbits	set	152
   201     0099                     _SPBRG	set	153
   202     009F                     _ADCON1	set	159
   203     009E                     _ADRESL	set	158
   204     0012                     STR_1:
   205     0012  3441               	retlw	65	;'A'
   206     0013  3444               	retlw	68	;'D'
   207     0014  3443               	retlw	67	;'C'
   208     0015  3420               	retlw	32	;' '
   209     0016  3443               	retlw	67	;'C'
   210     0017  3448               	retlw	72	;'H'
   211     0018  3430               	retlw	48	;'0'
   212     0019  343A               	retlw	58	;':'
   213     001A  3420               	retlw	32	;' '
   214     001B  3425               	retlw	37	;'%'
   215     001C  3475               	retlw	117	;'u'
   216     001D  340D               	retlw	13
   217     001E  340A               	retlw	10
   218     001F  3400               	retlw	0
   219                           
   220                           	psect	cinit
   221     07F8                     start_initialization:	
   222                           ; #config settings
   223                           
   224     07F8                     __initialization:
   225                           
   226                           ; Clear objects allocated to BANK0
   227     07F8  1283               	bcf	3,5	;RP0=0, select bank0
   228     07F9  1303               	bcf	3,6	;RP1=0, select bank0
   229     07FA  01BF               	clrf	__pbssBANK0& (0+127)
   230     07FB  01C0               	clrf	(__pbssBANK0+1)& (0+127)
   231     07FC  01C1               	clrf	(__pbssBANK0+2)& (0+127)
   232     07FD                     end_of_initialization:	
   233                           ;End of C runtime variable initialization code
   234                           
   235     07FD                     __end_of__initialization:
   236     07FD  0183               	clrf	3
   237     07FE  118A  2EE5         	ljmp	_main	;jump to C main() function
   238                           
   239                           	psect	bssBANK0
   240     003F                     __pbssBANK0:
   241     003F                     _adc:
   242     003F                     	ds	2
   243     0041                     _caracteres:
   244     0041                     	ds	1
   245                           
   246                           	psect	cstackCOMMON
   247     0000                     __pcstackCOMMON:
   248     0000                     ??_adc__reading:
   249     0000                     ??___lwdiv:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0000                     ??___lwmod:	
   253                           ; 1 bytes @ 0x0
   254                           
   255                           
   256                           	psect	cstackBANK0
   257     0020                     __pcstackBANK0:	
   258                           ; 1 bytes @ 0x0
   259                           
   260     0020                     ?_main:
   261     0020                     ?_adc__reading:	
   262                           ; 1 bytes @ 0x0
   263                           
   264     0020                     ?___lwdiv:	
   265                           ; 2 bytes @ 0x0
   266                           
   267     0020                     ___lwdiv@divisor:	
   268                           ; 2 bytes @ 0x0
   269                           
   270                           
   271                           ; 2 bytes @ 0x0
   272     0020                     	ds	2
   273     0022                     ___lwdiv@dividend:
   274                           
   275                           ; 2 bytes @ 0x2
   276     0022                     	ds	2
   277     0024                     ___lwdiv@quotient:
   278                           
   279                           ; 2 bytes @ 0x4
   280     0024                     	ds	2
   281     0026                     ___lwdiv@counter:
   282                           
   283                           ; 1 bytes @ 0x6
   284     0026                     	ds	1
   285     0027                     ?___lwmod:
   286     0027                     ___lwmod@divisor:	
   287                           ; 2 bytes @ 0x7
   288                           
   289                           
   290                           ; 2 bytes @ 0x7
   291     0027                     	ds	2
   292     0029                     ___lwmod@dividend:
   293                           
   294                           ; 2 bytes @ 0x9
   295     0029                     	ds	2
   296     002B                     ___lwmod@counter:
   297                           
   298                           ; 1 bytes @ 0xB
   299     002B                     	ds	1
   300     002C                     ?_sprintf:
   301     002C                     sprintf@f:	
   302                           ; 2 bytes @ 0xC
   303                           
   304                           
   305                           ; 1 bytes @ 0xC
   306     002C                     	ds	3
   307     002F                     ??_sprintf:
   308                           
   309                           ; 1 bytes @ 0xF
   310     002F                     	ds	3
   311     0032                     sprintf@flag:
   312                           
   313                           ; 1 bytes @ 0x12
   314     0032                     	ds	1
   315     0033                     sprintf@ap:
   316                           
   317                           ; 1 bytes @ 0x13
   318     0033                     	ds	1
   319     0034                     sprintf@val:
   320                           
   321                           ; 2 bytes @ 0x14
   322     0034                     	ds	2
   323     0036                     sprintf@prec:
   324                           
   325                           ; 1 bytes @ 0x16
   326     0036                     	ds	1
   327     0037                     sprintf@sp:
   328                           
   329                           ; 1 bytes @ 0x17
   330     0037                     	ds	1
   331     0038                     sprintf@c:
   332                           
   333                           ; 1 bytes @ 0x18
   334     0038                     	ds	1
   335     0039                     ??_main:
   336                           
   337                           ; 1 bytes @ 0x19
   338     0039                     	ds	3
   339     003C                     main@i:
   340                           
   341                           ; 2 bytes @ 0x1C
   342     003C                     	ds	2
   343     003E                     main@caracter:
   344                           
   345                           ; 1 bytes @ 0x1E
   346     003E                     	ds	1
   347                           
   348                           	psect	maintext
   349     06E5                     __pmaintext:	
   350 ;;
   351 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   352 ;;
   353 ;; *************** function _main *****************
   354 ;; Defined at:
   355 ;;		line 22 in file "uart.c"
   356 ;; Parameters:    Size  Location     Type
   357 ;;		None
   358 ;; Auto vars:     Size  Location     Type
   359 ;;  i               2   28[BANK0 ] int 
   360 ;;  caracter        1   30[BANK0 ] unsigned char 
   361 ;; Return value:  Size  Location     Type
   362 ;;                  1    wreg      void 
   363 ;; Registers used:
   364 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   365 ;; Tracked objects:
   366 ;;		On entry : B00/0
   367 ;;		On exit  : 0/0
   368 ;;		Unchanged: 0/0
   369 ;; Data sizes:     COMMON   BANK0   BANK1
   370 ;;      Params:         0       0       0
   371 ;;      Locals:         0       3       0
   372 ;;      Temps:          0       3       0
   373 ;;      Totals:         0       6       0
   374 ;;Total ram usage:        6 bytes
   375 ;; Hardware stack levels required when called: 2
   376 ;; This function calls:
   377 ;;		_adc__reading
   378 ;;		_sprintf
   379 ;; This function is called by:
   380 ;;		Startup code after reset
   381 ;; This function uses a non-reentrant model
   382 ;;
   383                           
   384     06E5                     _main:	
   385                           ;psect for function _main
   386                           
   387     06E5                     l948:	
   388                           ;incstack = 0
   389                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   390                           
   391                           
   392                           ;uart.c: 24:     ADCON1 = 0b10000000; ADCON0 = 0b11001000; ADCON0bits.ADON = 1;
   393     06E5  3080               	movlw	128
   394     06E6  1683               	bsf	3,5	;RP0=1, select bank1
   395     06E7  1303               	bcf	3,6	;RP1=0, select bank1
   396     06E8  009F               	movwf	31	;volatile
   397     06E9  30C8               	movlw	200
   398     06EA  1283               	bcf	3,5	;RP0=0, select bank0
   399     06EB  1303               	bcf	3,6	;RP1=0, select bank0
   400     06EC  009F               	movwf	31	;volatile
   401     06ED                     l950:
   402     06ED  141F               	bsf	31,0	;volatile
   403                           
   404                           ;uart.c: 25:     SPBRG = 51; TXSTAbits.SYNC = 0; TXSTAbits.BRGH = 1; RCSTAbits.SPEN = 1;
      +                           TXSTAbits.TXEN = 1; RCSTAbits.CREN = 1;;
   405     06EE  3033               	movlw	51
   406     06EF  1683               	bsf	3,5	;RP0=1, select bank1
   407     06F0  1303               	bcf	3,6	;RP1=0, select bank1
   408     06F1  0099               	movwf	25	;volatile
   409     06F2                     l952:
   410     06F2  1218               	bcf	24,4	;volatile
   411     06F3                     l954:
   412     06F3  1518               	bsf	24,2	;volatile
   413     06F4                     l956:
   414     06F4  1283               	bcf	3,5	;RP0=0, select bank0
   415     06F5  1303               	bcf	3,6	;RP1=0, select bank0
   416     06F6  1798               	bsf	24,7	;volatile
   417     06F7                     l958:
   418     06F7  1683               	bsf	3,5	;RP0=1, select bank1
   419     06F8  1303               	bcf	3,6	;RP1=0, select bank1
   420     06F9  1698               	bsf	24,5	;volatile
   421     06FA                     l960:
   422     06FA  1283               	bcf	3,5	;RP0=0, select bank0
   423     06FB  1303               	bcf	3,6	;RP1=0, select bank0
   424     06FC  1618               	bsf	24,4	;volatile
   425     06FD                     l962:
   426                           
   427                           ;uart.c: 29:         ADCON0bits.CHS = 0; adc__reading();
   428     06FD  30C7               	movlw	-57
   429     06FE  1283               	bcf	3,5	;RP0=0, select bank0
   430     06FF  1303               	bcf	3,6	;RP1=0, select bank0
   431     0700  059F               	andwf	31,f	;volatile
   432     0701                     l964:
   433     0701  118A  2653  118A   	fcall	_adc__reading
   434                           
   435                           ;uart.c: 31:         adc = adc__reading();
   436     0704  118A  2653  118A   	fcall	_adc__reading
   437     0707  1283               	bcf	3,5	;RP0=0, select bank0
   438     0708  1303               	bcf	3,6	;RP1=0, select bank0
   439     0709  0821               	movf	?_adc__reading+1,w
   440     070A  00C0               	movwf	_adc+1
   441     070B  0820               	movf	?_adc__reading,w
   442     070C  00BF               	movwf	_adc
   443     070D                     l966:
   444                           
   445                           ;uart.c: 33:         sprintf(caracteres, "ADC CH0: %u\r\n", adc);
   446     070D  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   447     070E  00AC               	movwf	sprintf@f
   448     070F  0840               	movf	_adc+1,w
   449     0710  00AE               	movwf	?_sprintf+2
   450     0711  083F               	movf	_adc,w
   451     0712  00AD               	movwf	?_sprintf+1
   452     0713  3041               	movlw	(low (_caracteres| 0))& (0+255)
   453     0714  118A  2745  118A   	fcall	_sprintf
   454     0717                     l968:
   455                           
   456                           ;uart.c: 34:         { char caracter; for (int i = 0; (caracter = (caracteres)[i]); ++i)
      +                           { while (!TXIF); TXREG = caracter; } };
   457     0717  1283               	bcf	3,5	;RP0=0, select bank0
   458     0718  1303               	bcf	3,6	;RP1=0, select bank0
   459     0719  01BC               	clrf	main@i
   460     071A  01BD               	clrf	main@i+1
   461     071B  2F28               	goto	l972
   462     071C                     l53:
   463     071C  1E0C               	btfss	12,4	;volatile
   464     071D  2F1F               	goto	u431
   465     071E  2F20               	goto	u430
   466     071F                     u431:
   467     071F  2F1C               	goto	l53
   468     0720                     u430:
   469     0720                     l970:
   470     0720  083E               	movf	main@caracter,w
   471     0721  0099               	movwf	25	;volatile
   472     0722  3001               	movlw	1
   473     0723  07BC               	addwf	main@i,f
   474     0724  1803               	skipnc
   475     0725  0ABD               	incf	main@i+1,f
   476     0726  3000               	movlw	0
   477     0727  07BD               	addwf	main@i+1,f
   478     0728                     l972:
   479     0728  083C               	movf	main@i,w
   480     0729  3E41               	addlw	(low (_caracteres| 0))& (0+255)
   481     072A  0084               	movwf	4
   482     072B  1383               	bcf	3,7	;select IRP bank0
   483     072C  0800               	movf	0,w
   484     072D  00BE               	movwf	main@caracter
   485     072E  083E               	movf	main@caracter,w
   486     072F  1D03               	btfss	3,2
   487     0730  2F32               	goto	u441
   488     0731  2F33               	goto	u440
   489     0732                     u441:
   490     0732  2F1C               	goto	l53
   491     0733                     u440:
   492     0733                     l974:
   493                           
   494                           ;uart.c: 35:         _delay((unsigned long)((200)*(8000000/4000.0)));
   495     0733  3003               	movlw	3
   496     0734  1283               	bcf	3,5	;RP0=0, select bank0
   497     0735  1303               	bcf	3,6	;RP1=0, select bank0
   498     0736  00BB               	movwf	??_main+2
   499     0737  3008               	movlw	8
   500     0738  00BA               	movwf	??_main+1
   501     0739  3076               	movlw	118
   502     073A  00B9               	movwf	??_main
   503     073B                     u457:
   504     073B  0BB9               	decfsz	??_main,f
   505     073C  2F3B               	goto	u457
   506     073D  0BBA               	decfsz	??_main+1,f
   507     073E  2F3B               	goto	u457
   508     073F  0BBB               	decfsz	??_main+2,f
   509     0740  2F3B               	goto	u457
   510     0741  2F42               	nop2
   511     0742  2EFD               	goto	l962
   512     0743  118A  2800         	ljmp	start
   513     0745                     __end_of_main:
   514                           
   515                           	psect	text1
   516     0745                     __ptext1:	
   517 ;; *************** function _sprintf *****************
   518 ;; Defined at:
   519 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
   520 ;; Parameters:    Size  Location     Type
   521 ;;  sp              1    wreg     PTR unsigned char 
   522 ;;		 -> caracteres(1), 
   523 ;;  f               1   12[BANK0 ] PTR const unsigned char 
   524 ;;		 -> STR_1(14), 
   525 ;; Auto vars:     Size  Location     Type
   526 ;;  sp              1   23[BANK0 ] PTR unsigned char 
   527 ;;		 -> caracteres(1), 
   528 ;;  tmpval          4    0        struct .
   529 ;;  val             2   20[BANK0 ] unsigned int 
   530 ;;  cp              2    0        PTR const unsigned char 
   531 ;;  len             2    0        unsigned int 
   532 ;;  c               1   24[BANK0 ] unsigned char 
   533 ;;  prec            1   22[BANK0 ] char 
   534 ;;  ap              1   19[BANK0 ] PTR void [1]
   535 ;;		 -> ?_sprintf(2), 
   536 ;;  flag            1   18[BANK0 ] unsigned char 
   537 ;; Return value:  Size  Location     Type
   538 ;;                  2   12[BANK0 ] int 
   539 ;; Registers used:
   540 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   541 ;; Tracked objects:
   542 ;;		On entry : 0/0
   543 ;;		On exit  : 0/0
   544 ;;		Unchanged: 0/0
   545 ;; Data sizes:     COMMON   BANK0   BANK1
   546 ;;      Params:         0       3       0
   547 ;;      Locals:         0       7       0
   548 ;;      Temps:          0       3       0
   549 ;;      Totals:         0      13       0
   550 ;;Total ram usage:       13 bytes
   551 ;; Hardware stack levels used: 1
   552 ;; Hardware stack levels required when called: 1
   553 ;; This function calls:
   554 ;;		___lwdiv
   555 ;;		___lwmod
   556 ;; This function is called by:
   557 ;;		_main
   558 ;; This function uses a non-reentrant model
   559 ;;
   560                           
   561     0745                     _sprintf:	
   562                           ;psect for function _sprintf
   563                           
   564                           
   565                           ;incstack = 0
   566                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   567                           ;sprintf@sp stored from wreg
   568     0745  1283               	bcf	3,5	;RP0=0, select bank0
   569     0746  1303               	bcf	3,6	;RP1=0, select bank0
   570     0747  00B7               	movwf	sprintf@sp
   571     0748                     l894:
   572                           
   573                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   574     0748  302D               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   575     0749  00B3               	movwf	sprintf@ap
   576                           
   577                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   578     074A  2FE5               	goto	l938
   579     074B                     l896:
   580                           
   581                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   582     074B  3025               	movlw	37
   583     074C  0638               	xorwf	sprintf@c,w
   584     074D  1903               	btfsc	3,2
   585     074E  2F50               	goto	u381
   586     074F  2F51               	goto	u380
   587     0750                     u381:
   588     0750  2F5B               	goto	l902
   589     0751                     u380:
   590     0751                     l898:
   591                           
   592                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   593     0751  0837               	movf	sprintf@sp,w
   594     0752  0084               	movwf	4
   595     0753  0838               	movf	sprintf@c,w
   596     0754  1383               	bcf	3,7	;select IRP bank0
   597     0755  0080               	movwf	0
   598     0756                     l900:
   599     0756  3001               	movlw	1
   600     0757  00FF               	movwf	btemp+1
   601     0758  087F               	movf	btemp+1,w
   602     0759  07B7               	addwf	sprintf@sp,f
   603                           
   604                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 559:    continue;
   605     075A  2FE5               	goto	l938
   606     075B                     l902:
   607                           
   608                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   609     075B  01B2               	clrf	sprintf@flag
   610                           
   611                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   612     075C  2F62               	goto	l908
   613     075D                     l904:
   614                           
   615                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 844:    flag |= 0
      +                          xC0;
   616     075D  30C0               	movlw	192
   617     075E  00FF               	movwf	btemp+1
   618     075F  087F               	movf	btemp+1,w
   619     0760  04B2               	iorwf	sprintf@flag,f
   620                           
   621                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 845:    break;
   622     0761  2F7A               	goto	l910
   623     0762                     l908:
   624     0762  3001               	movlw	1
   625     0763  07AC               	addwf	sprintf@f,f
   626     0764  30FF               	movlw	-1
   627     0765  072C               	addwf	sprintf@f,w
   628     0766  0084               	movwf	4
   629     0767  118A  2002  118A   	fcall	stringdir
   630     076A  00B8               	movwf	sprintf@c
   631     076B  00AF               	movwf	??_sprintf
   632     076C  01B0               	clrf	??_sprintf+1
   633                           
   634                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   635                           ; Switch size 1, requested type "simple"
   636                           ; Number of cases is 1, Range of values is 0 to 0
   637                           ; switch strategies available:
   638                           ; Name         Instructions Cycles
   639                           ; simple_byte            4     3 (average)
   640                           ; direct_byte            9     7 (fixed)
   641                           ; jumptable            260     6 (fixed)
   642                           ;	Chosen strategy is simple_byte
   643     076D  0830               	movf	??_sprintf+1,w
   644     076E  3A00               	xorlw	0	; case 0
   645     076F  1903               	skipnz
   646     0770  2F72               	goto	l996
   647     0771  2FE5               	goto	l938
   648     0772                     l996:
   649                           
   650                           ; Switch size 1, requested type "simple"
   651                           ; Number of cases is 2, Range of values is 0 to 117
   652                           ; switch strategies available:
   653                           ; Name         Instructions Cycles
   654                           ; simple_byte            7     4 (average)
   655                           ; direct_byte          243     7 (fixed)
   656                           ; jumptable            260     6 (fixed)
   657                           ;	Chosen strategy is simple_byte
   658     0772  082F               	movf	??_sprintf,w
   659     0773  3A00               	xorlw	0	; case 0
   660     0774  1903               	skipnz
   661     0775  2FF3               	goto	l940
   662     0776  3A75               	xorlw	117	; case 117
   663     0777  1903               	skipnz
   664     0778  2F5D               	goto	l904
   665     0779  2FE5               	goto	l938
   666     077A                     l910:
   667                           
   668                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1299:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1312:     val = (*(unsign
      +                          ed *)__va_arg((*(unsigned **)ap), (unsigned)0));
   669     077A  0833               	movf	sprintf@ap,w
   670     077B  0084               	movwf	4
   671     077C  1383               	bcf	3,7	;select IRP bank0
   672     077D  0800               	movf	0,w
   673     077E  00B4               	movwf	sprintf@val
   674     077F  0A84               	incf	4,f
   675     0780  0800               	movf	0,w
   676     0781  00B5               	movwf	sprintf@val+1
   677     0782                     l912:
   678     0782  3002               	movlw	2
   679     0783  00FF               	movwf	btemp+1
   680     0784  087F               	movf	btemp+1,w
   681     0785  07B3               	addwf	sprintf@ap,f
   682     0786                     l914:
   683                           
   684                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1313:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
   685     0786  01B8               	clrf	sprintf@c
   686     0787  0AB8               	incf	sprintf@c,f
   687     0788                     l920:
   688                           
   689                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
   690     0788  0838               	movf	sprintf@c,w
   691     0789  00AF               	movwf	??_sprintf
   692     078A  072F               	addwf	??_sprintf,w
   693     078B  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   694     078C  0084               	movwf	4
   695     078D  118A  2002  118A   	fcall	stringdir
   696     0790  00B0               	movwf	??_sprintf+1
   697     0791  118A  2002  118A   	fcall	stringdir
   698     0794  00B1               	movwf	??_sprintf+2
   699     0795  0831               	movf	??_sprintf+2,w
   700     0796  0235               	subwf	sprintf@val+1,w
   701     0797  1D03               	skipz
   702     0798  2F9B               	goto	u395
   703     0799  0830               	movf	??_sprintf+1,w
   704     079A  0234               	subwf	sprintf@val,w
   705     079B                     u395:
   706     079B  1803               	skipnc
   707     079C  2F9E               	goto	u391
   708     079D  2F9F               	goto	u390
   709     079E                     u391:
   710     079E  2FA0               	goto	l924
   711     079F                     u390:
   712     079F  2FAA               	goto	l928
   713     07A0                     l924:
   714     07A0  3001               	movlw	1
   715     07A1  00FF               	movwf	btemp+1
   716     07A2  087F               	movf	btemp+1,w
   717     07A3  07B8               	addwf	sprintf@c,f
   718     07A4                     l926:
   719     07A4  3005               	movlw	5
   720     07A5  0638               	xorwf	sprintf@c,w
   721     07A6  1D03               	btfss	3,2
   722     07A7  2FA9               	goto	u401
   723     07A8  2FAA               	goto	u400
   724     07A9                     u401:
   725     07A9  2F88               	goto	l920
   726     07AA                     u400:
   727     07AA                     l928:
   728                           
   729                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1495:   };C:\Program File
      +                          s\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
   730     07AA  0838               	movf	sprintf@c,w
   731     07AB  00B6               	movwf	sprintf@prec
   732                           
   733                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   734     07AC  2FDC               	goto	l936
   735     07AD                     l930:
   736                           
   737                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
   738     07AD  300A               	movlw	10
   739     07AE  00A7               	movwf	___lwmod@divisor
   740     07AF  3000               	movlw	0
   741     07B0  00A8               	movwf	___lwmod@divisor+1
   742     07B1  0836               	movf	sprintf@prec,w
   743     07B2  00AF               	movwf	??_sprintf
   744     07B3  072F               	addwf	??_sprintf,w
   745     07B4  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   746     07B5  0084               	movwf	4
   747     07B6  118A  2002  118A   	fcall	stringdir
   748     07B9  00A0               	movwf	___lwdiv@divisor
   749     07BA  118A  2002  118A   	fcall	stringdir
   750     07BD  00A1               	movwf	___lwdiv@divisor+1
   751     07BE  0835               	movf	sprintf@val+1,w
   752     07BF  00A3               	movwf	___lwdiv@dividend+1
   753     07C0  0834               	movf	sprintf@val,w
   754     07C1  00A2               	movwf	___lwdiv@dividend
   755     07C2  118A  269F  118A   	fcall	___lwdiv
   756     07C5  1283               	bcf	3,5	;RP0=0, select bank0
   757     07C6  1303               	bcf	3,6	;RP1=0, select bank0
   758     07C7  0821               	movf	?___lwdiv+1,w
   759     07C8  00AA               	movwf	___lwmod@dividend+1
   760     07C9  0820               	movf	?___lwdiv,w
   761     07CA  00A9               	movwf	___lwmod@dividend
   762     07CB  118A  2663  118A   	fcall	___lwmod
   763     07CE  1283               	bcf	3,5	;RP0=0, select bank0
   764     07CF  1303               	bcf	3,6	;RP1=0, select bank0
   765     07D0  0827               	movf	?___lwmod,w
   766     07D1  3E30               	addlw	48
   767     07D2  00B8               	movwf	sprintf@c
   768     07D3                     l932:
   769                           
   770                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
   771     07D3  0837               	movf	sprintf@sp,w
   772     07D4  0084               	movwf	4
   773     07D5  0838               	movf	sprintf@c,w
   774     07D6  1383               	bcf	3,7	;select IRP bank0
   775     07D7  0080               	movwf	0
   776     07D8                     l934:
   777     07D8  3001               	movlw	1
   778     07D9  00FF               	movwf	btemp+1
   779     07DA  087F               	movf	btemp+1,w
   780     07DB  07B7               	addwf	sprintf@sp,f
   781     07DC                     l936:
   782                           
   783                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   784     07DC  30FF               	movlw	255
   785     07DD  00FF               	movwf	btemp+1
   786     07DE  087F               	movf	btemp+1,w
   787     07DF  07B6               	addwf	sprintf@prec,f
   788     07E0  0A36               	incf	sprintf@prec,w
   789     07E1  1D03               	btfss	3,2
   790     07E2  2FE4               	goto	u411
   791     07E3  2FE5               	goto	u410
   792     07E4                     u411:
   793     07E4  2FAD               	goto	l930
   794     07E5                     u410:
   795     07E5                     l938:
   796                           
   797                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   798     07E5  3001               	movlw	1
   799     07E6  07AC               	addwf	sprintf@f,f
   800     07E7  30FF               	movlw	-1
   801     07E8  072C               	addwf	sprintf@f,w
   802     07E9  0084               	movwf	4
   803     07EA  118A  2002  118A   	fcall	stringdir
   804     07ED  00B8               	movwf	sprintf@c
   805     07EE  0838               	movf	sprintf@c,w
   806     07EF  1D03               	btfss	3,2
   807     07F0  2FF2               	goto	u421
   808     07F1  2FF3               	goto	u420
   809     07F2                     u421:
   810     07F2  2F4B               	goto	l896
   811     07F3                     u420:
   812     07F3                     l940:
   813                           
   814                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
   815     07F3  0837               	movf	sprintf@sp,w
   816     07F4  0084               	movwf	4
   817     07F5  1383               	bcf	3,7	;select IRP bank0
   818     07F6  0180               	clrf	0
   819     07F7                     l166:
   820     07F7  0008               	return
   821     07F8                     __end_of_sprintf:
   822                           
   823                           	psect	text2
   824     0663                     __ptext2:	
   825 ;; *************** function ___lwmod *****************
   826 ;; Defined at:
   827 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwmod.c"
   828 ;; Parameters:    Size  Location     Type
   829 ;;  divisor         2    7[BANK0 ] unsigned int 
   830 ;;  dividend        2    9[BANK0 ] unsigned int 
   831 ;; Auto vars:     Size  Location     Type
   832 ;;  counter         1   11[BANK0 ] unsigned char 
   833 ;; Return value:  Size  Location     Type
   834 ;;                  2    7[BANK0 ] unsigned int 
   835 ;; Registers used:
   836 ;;		wreg, status,2, status,0, btemp+1
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMMON   BANK0   BANK1
   842 ;;      Params:         0       4       0
   843 ;;      Locals:         0       1       0
   844 ;;      Temps:          0       0       0
   845 ;;      Totals:         0       5       0
   846 ;;Total ram usage:        5 bytes
   847 ;; Hardware stack levels used: 1
   848 ;; This function calls:
   849 ;;		Nothing
   850 ;; This function is called by:
   851 ;;		_sprintf
   852 ;; This function uses a non-reentrant model
   853 ;;
   854                           
   855     0663                     ___lwmod:	
   856                           ;psect for function ___lwmod
   857                           
   858     0663                     l866:	
   859                           ;incstack = 0
   860                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
   861                           
   862     0663  1283               	bcf	3,5	;RP0=0, select bank0
   863     0664  1303               	bcf	3,6	;RP1=0, select bank0
   864     0665  0827               	movf	___lwmod@divisor,w
   865     0666  0428               	iorwf	___lwmod@divisor+1,w
   866     0667  1903               	btfsc	3,2
   867     0668  2E6A               	goto	u311
   868     0669  2E6B               	goto	u310
   869     066A                     u311:
   870     066A  2E9A               	goto	l884
   871     066B                     u310:
   872     066B                     l868:
   873     066B  01AB               	clrf	___lwmod@counter
   874     066C  0AAB               	incf	___lwmod@counter,f
   875     066D  2E79               	goto	l874
   876     066E                     l870:
   877     066E  3001               	movlw	1
   878     066F                     u325:
   879     066F  1003               	clrc
   880     0670  0DA7               	rlf	___lwmod@divisor,f
   881     0671  0DA8               	rlf	___lwmod@divisor+1,f
   882     0672  3EFF               	addlw	-1
   883     0673  1D03               	skipz
   884     0674  2E6F               	goto	u325
   885     0675                     l872:
   886     0675  3001               	movlw	1
   887     0676  00FF               	movwf	btemp+1
   888     0677  087F               	movf	btemp+1,w
   889     0678  07AB               	addwf	___lwmod@counter,f
   890     0679                     l874:
   891     0679  1FA8               	btfss	___lwmod@divisor+1,7
   892     067A  2E7C               	goto	u331
   893     067B  2E7D               	goto	u330
   894     067C                     u331:
   895     067C  2E6E               	goto	l870
   896     067D                     u330:
   897     067D                     l876:
   898     067D  0828               	movf	___lwmod@divisor+1,w
   899     067E  022A               	subwf	___lwmod@dividend+1,w
   900     067F  1D03               	skipz
   901     0680  2E83               	goto	u345
   902     0681  0827               	movf	___lwmod@divisor,w
   903     0682  0229               	subwf	___lwmod@dividend,w
   904     0683                     u345:
   905     0683  1C03               	skipc
   906     0684  2E86               	goto	u341
   907     0685  2E87               	goto	u340
   908     0686                     u341:
   909     0686  2E8D               	goto	l880
   910     0687                     u340:
   911     0687                     l878:
   912     0687  0827               	movf	___lwmod@divisor,w
   913     0688  02A9               	subwf	___lwmod@dividend,f
   914     0689  0828               	movf	___lwmod@divisor+1,w
   915     068A  1C03               	skipc
   916     068B  03AA               	decf	___lwmod@dividend+1,f
   917     068C  02AA               	subwf	___lwmod@dividend+1,f
   918     068D                     l880:
   919     068D  3001               	movlw	1
   920     068E                     u355:
   921     068E  1003               	clrc
   922     068F  0CA8               	rrf	___lwmod@divisor+1,f
   923     0690  0CA7               	rrf	___lwmod@divisor,f
   924     0691  3EFF               	addlw	-1
   925     0692  1D03               	skipz
   926     0693  2E8E               	goto	u355
   927     0694                     l882:
   928     0694  3001               	movlw	1
   929     0695  02AB               	subwf	___lwmod@counter,f
   930     0696  1D03               	btfss	3,2
   931     0697  2E99               	goto	u361
   932     0698  2E9A               	goto	u360
   933     0699                     u361:
   934     0699  2E7D               	goto	l876
   935     069A                     u360:
   936     069A                     l884:
   937     069A  082A               	movf	___lwmod@dividend+1,w
   938     069B  00A8               	movwf	?___lwmod+1
   939     069C  0829               	movf	___lwmod@dividend,w
   940     069D  00A7               	movwf	?___lwmod
   941     069E                     l452:
   942     069E  0008               	return
   943     069F                     __end_of___lwmod:
   944                           
   945                           	psect	text3
   946     069F                     __ptext3:	
   947 ;; *************** function ___lwdiv *****************
   948 ;; Defined at:
   949 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwdiv.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;  divisor         2    0[BANK0 ] unsigned int 
   952 ;;  dividend        2    2[BANK0 ] unsigned int 
   953 ;; Auto vars:     Size  Location     Type
   954 ;;  quotient        2    4[BANK0 ] unsigned int 
   955 ;;  counter         1    6[BANK0 ] unsigned char 
   956 ;; Return value:  Size  Location     Type
   957 ;;                  2    0[BANK0 ] unsigned int 
   958 ;; Registers used:
   959 ;;		wreg, status,2, status,0, btemp+1
   960 ;; Tracked objects:
   961 ;;		On entry : 0/0
   962 ;;		On exit  : 0/0
   963 ;;		Unchanged: 0/0
   964 ;; Data sizes:     COMMON   BANK0   BANK1
   965 ;;      Params:         0       4       0
   966 ;;      Locals:         0       3       0
   967 ;;      Temps:          0       0       0
   968 ;;      Totals:         0       7       0
   969 ;;Total ram usage:        7 bytes
   970 ;; Hardware stack levels used: 1
   971 ;; This function calls:
   972 ;;		Nothing
   973 ;; This function is called by:
   974 ;;		_sprintf
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978     069F                     ___lwdiv:	
   979                           ;psect for function ___lwdiv
   980                           
   981     069F                     l840:	
   982                           ;incstack = 0
   983                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
   984                           
   985     069F  1283               	bcf	3,5	;RP0=0, select bank0
   986     06A0  1303               	bcf	3,6	;RP1=0, select bank0
   987     06A1  01A4               	clrf	___lwdiv@quotient
   988     06A2  01A5               	clrf	___lwdiv@quotient+1
   989     06A3                     l842:
   990     06A3  0820               	movf	___lwdiv@divisor,w
   991     06A4  0421               	iorwf	___lwdiv@divisor+1,w
   992     06A5  1903               	btfsc	3,2
   993     06A6  2EA8               	goto	u241
   994     06A7  2EA9               	goto	u240
   995     06A8                     u241:
   996     06A8  2EE0               	goto	l862
   997     06A9                     u240:
   998     06A9                     l844:
   999     06A9  01A6               	clrf	___lwdiv@counter
  1000     06AA  0AA6               	incf	___lwdiv@counter,f
  1001     06AB  2EB7               	goto	l850
  1002     06AC                     l846:
  1003     06AC  3001               	movlw	1
  1004     06AD                     u255:
  1005     06AD  1003               	clrc
  1006     06AE  0DA0               	rlf	___lwdiv@divisor,f
  1007     06AF  0DA1               	rlf	___lwdiv@divisor+1,f
  1008     06B0  3EFF               	addlw	-1
  1009     06B1  1D03               	skipz
  1010     06B2  2EAD               	goto	u255
  1011     06B3                     l848:
  1012     06B3  3001               	movlw	1
  1013     06B4  00FF               	movwf	btemp+1
  1014     06B5  087F               	movf	btemp+1,w
  1015     06B6  07A6               	addwf	___lwdiv@counter,f
  1016     06B7                     l850:
  1017     06B7  1FA1               	btfss	___lwdiv@divisor+1,7
  1018     06B8  2EBA               	goto	u261
  1019     06B9  2EBB               	goto	u260
  1020     06BA                     u261:
  1021     06BA  2EAC               	goto	l846
  1022     06BB                     u260:
  1023     06BB                     l852:
  1024     06BB  3001               	movlw	1
  1025     06BC                     u275:
  1026     06BC  1003               	clrc
  1027     06BD  0DA4               	rlf	___lwdiv@quotient,f
  1028     06BE  0DA5               	rlf	___lwdiv@quotient+1,f
  1029     06BF  3EFF               	addlw	-1
  1030     06C0  1D03               	skipz
  1031     06C1  2EBC               	goto	u275
  1032     06C2  0821               	movf	___lwdiv@divisor+1,w
  1033     06C3  0223               	subwf	___lwdiv@dividend+1,w
  1034     06C4  1D03               	skipz
  1035     06C5  2EC8               	goto	u285
  1036     06C6  0820               	movf	___lwdiv@divisor,w
  1037     06C7  0222               	subwf	___lwdiv@dividend,w
  1038     06C8                     u285:
  1039     06C8  1C03               	skipc
  1040     06C9  2ECB               	goto	u281
  1041     06CA  2ECC               	goto	u280
  1042     06CB                     u281:
  1043     06CB  2ED3               	goto	l858
  1044     06CC                     u280:
  1045     06CC                     l854:
  1046     06CC  0820               	movf	___lwdiv@divisor,w
  1047     06CD  02A2               	subwf	___lwdiv@dividend,f
  1048     06CE  0821               	movf	___lwdiv@divisor+1,w
  1049     06CF  1C03               	skipc
  1050     06D0  03A3               	decf	___lwdiv@dividend+1,f
  1051     06D1  02A3               	subwf	___lwdiv@dividend+1,f
  1052     06D2                     l856:
  1053     06D2  1424               	bsf	___lwdiv@quotient,0
  1054     06D3                     l858:
  1055     06D3  3001               	movlw	1
  1056     06D4                     u295:
  1057     06D4  1003               	clrc
  1058     06D5  0CA1               	rrf	___lwdiv@divisor+1,f
  1059     06D6  0CA0               	rrf	___lwdiv@divisor,f
  1060     06D7  3EFF               	addlw	-1
  1061     06D8  1D03               	skipz
  1062     06D9  2ED4               	goto	u295
  1063     06DA                     l860:
  1064     06DA  3001               	movlw	1
  1065     06DB  02A6               	subwf	___lwdiv@counter,f
  1066     06DC  1D03               	btfss	3,2
  1067     06DD  2EDF               	goto	u301
  1068     06DE  2EE0               	goto	u300
  1069     06DF                     u301:
  1070     06DF  2EBB               	goto	l852
  1071     06E0                     u300:
  1072     06E0                     l862:
  1073     06E0  0825               	movf	___lwdiv@quotient+1,w
  1074     06E1  00A1               	movwf	?___lwdiv+1
  1075     06E2  0824               	movf	___lwdiv@quotient,w
  1076     06E3  00A0               	movwf	?___lwdiv
  1077     06E4                     l442:
  1078     06E4  0008               	return
  1079     06E5                     __end_of___lwdiv:
  1080                           
  1081                           	psect	text4
  1082     0653                     __ptext4:	
  1083 ;; *************** function _adc__reading *****************
  1084 ;; Defined at:
  1085 ;;		line 12 in file "./../../api/adc/reading.c.v"
  1086 ;; Parameters:    Size  Location     Type
  1087 ;;		None
  1088 ;; Auto vars:     Size  Location     Type
  1089 ;;		None
  1090 ;; Return value:  Size  Location     Type
  1091 ;;                  2    0[BANK0 ] unsigned int 
  1092 ;; Registers used:
  1093 ;;		wreg
  1094 ;; Tracked objects:
  1095 ;;		On entry : 0/0
  1096 ;;		On exit  : 0/0
  1097 ;;		Unchanged: 0/0
  1098 ;; Data sizes:     COMMON   BANK0   BANK1
  1099 ;;      Params:         0       2       0
  1100 ;;      Locals:         0       0       0
  1101 ;;      Temps:          0       0       0
  1102 ;;      Totals:         0       2       0
  1103 ;;Total ram usage:        2 bytes
  1104 ;; Hardware stack levels used: 1
  1105 ;; This function calls:
  1106 ;;		Nothing
  1107 ;; This function is called by:
  1108 ;;		_main
  1109 ;; This function uses a non-reentrant model
  1110 ;;
  1111                           
  1112     0653                     _adc__reading:	
  1113                           ;psect for function _adc__reading
  1114                           
  1115     0653                     l888:	
  1116                           ;incstack = 0
  1117                           ; Regs used in _adc__reading: [wreg]
  1118                           
  1119                           
  1120                           ;./../../api/adc/reading.c.v: 13:     ADCON0bits.GO_DONE = 1;
  1121     0653  1283               	bcf	3,5	;RP0=0, select bank0
  1122     0654  1303               	bcf	3,6	;RP1=0, select bank0
  1123     0655  151F               	bsf	31,2	;volatile
  1124     0656                     l31:	
  1125                           ;./../../api/adc/reading.c.v: 14:     while (ADCON0bits.GO_DONE == 1);
  1126                           
  1127     0656  191F               	btfsc	31,2	;volatile
  1128     0657  2E59               	goto	u371
  1129     0658  2E5A               	goto	u370
  1130     0659                     u371:
  1131     0659  2E56               	goto	l31
  1132     065A                     u370:
  1133     065A                     l890:
  1134                           
  1135                           ;./../../api/adc/reading.c.v: 15:     return (ADRESH << 8) | ADRESL;
  1136     065A  081E               	movf	30,w	;volatile
  1137     065B  00A1               	movwf	?_adc__reading+1
  1138     065C  1683               	bsf	3,5	;RP0=1, select bank1
  1139     065D  1303               	bcf	3,6	;RP1=0, select bank1
  1140     065E  081E               	movf	30,w	;volatile
  1141     065F  1283               	bcf	3,5	;RP0=0, select bank0
  1142     0660  1303               	bcf	3,6	;RP1=0, select bank0
  1143     0661  00A0               	movwf	?_adc__reading
  1144     0662                     l34:
  1145     0662  0008               	return
  1146     0663                     __end_of_adc__reading:
  1147     007E                     btemp	set	126	;btemp
  1148     007E                     wtemp0	set	126
  1149                           
  1150                           	psect	config
  1151                           
  1152                           ;Config register CONFIG @ 0x2007
  1153                           ;	Oscillator Selection bits
  1154                           ;	FOSC = HS, HS oscillator
  1155                           ;	Watchdog Timer Enable bit
  1156                           ;	WDTE = OFF, WDT disabled
  1157                           ;	Power-up Timer Enable bit
  1158                           ;	PWRTE = OFF, PWRT disabled
  1159                           ;	Brown-out Reset Enable bit
  1160                           ;	BOREN = OFF, BOR disabled
  1161                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1162                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1163                           ;	Data EEPROM Memory Code Protection bit
  1164                           ;	CPD = OFF, Data EEPROM code protection off
  1165                           ;	Flash Program Memory Write Enable bits
  1166                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1167                           ;	In-Circuit Debugger Mode bit
  1168                           ;	DEBUG = 0x1, unprogrammed default
  1169                           ;	Flash Program Memory Code Protection bit
  1170                           ;	CP = OFF, Code protection off
  1171     2007                     	org	8199
  1172     2007  3F3A               	dw	16186

Data Sizes:
    Strings     14
    Constant    10
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            94     31      34
    BANK1            94      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[14]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 1
		 -> caracteres(BANK0[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    1168
                                             25 BANK0      6     6      0
                       _adc__reading
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1121
                                             12 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _adc__reading                                         2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc__reading
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            5E      0       0       3        0.0%
BANK0               5E     1F      22       4       36.2%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            5E      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               5E      0       0       6        0.0%
ABS                  0      0      22       7        0.0%
DATA                 0      0      22       8        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Mon Mar 04 07:30:19 2024

                      pc 0002                       l31 0656                       l34 0662  
                     l53 071C                       fsr 0004                      l166 07F7  
                    l442 06E4                      l452 069E                      l900 0756  
                    l910 077A                      l902 075B                      l840 069F  
                    l920 0788                      l912 0782                      l904 075D  
                    l850 06B7                      l842 06A3                      l930 07AD  
                    l914 0786                      l860 06DA                      l852 06BB  
                    l844 06A9                      l932 07D3                      l924 07A0  
                    l940 07F3                      l908 0762                      l854 06CC  
                    l846 06AC                      l862 06E0                      l870 066E  
                    l934 07D8                      l926 07A4                      l950 06ED  
                    l856 06D2                      l848 06B3                      l880 068D  
                    l872 0675                      l936 07DC                      l928 07AA  
                    l960 06FA                      l952 06F2                      l890 065A  
                    l858 06D3                      l882 0694                      l874 0679  
                    l866 0663                      l938 07E5                      l970 0720  
                    l962 06FD                      l954 06F3                      l876 067D  
                    l868 066B                      l884 069A                      l972 0728  
                    l964 0701                      l956 06F4                      l948 06E5  
                    l878 0687                      l894 0748                      l974 0733  
                    l966 070D                      l958 06F7                      l888 0653  
                    l896 074B                      l968 0717                      l898 0751  
                    l996 0772                      u300 06E0                      u301 06DF  
                    u310 066B                      u311 066A                      u240 06A9  
                    u400 07AA                      u241 06A8                      u401 07A9  
                    u330 067D                      u410 07E5                      u331 067C  
                    u411 07E4                      u260 06BB                      u340 0687  
                    u420 07F3                      u261 06BA                      u341 0686  
                    u325 066F                      u421 07F2                      u430 0720  
                    u255 06AD                      u431 071F                      u280 06CC  
                    u360 069A                      u440 0733                      u281 06CB  
                    u361 0699                      u345 0683                      u441 0732  
                    u370 065A                      u371 0659                      u275 06BC  
                    u355 068E                      u380 0751                      u285 06C8  
                    u381 0750                      u390 079F                      u295 06D4  
                    u391 079E                      u457 073B                      u395 079B  
                    _adc 003F                      fsr0 0004                      indf 0000  
                   STR_1 0012                     _TXIF 0064                     _main 06E5  
                   btemp 007E                     start 0000             main@caracter 003E  
           _adc__reading 0653                    ?_main 0020          __end_of___lwdiv 06E5  
        __end_of___lwmod 069F                    _RCREG 001A                    _SPBRG 0099  
                  _TXREG 0019          __end_of_dpowers 0012                    main@i 003C  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __end_of_sprintf 07F8          __initialization 07F8             __end_of_main 0745  
                 ??_main 0039                   _ADCON0 001F                   _ADCON1 009F  
                 _ADRESH 001E                   _ADRESL 009E                ??___lwdiv 0000  
              ??___lwmod 0000                ??_sprintf 002F  __end_of__initialization 07FD  
         __pcstackCOMMON 0000               _caracteres 0041               __pbssBANK0 003F  
             __pmaintext 06E5               __stringtab 0002                  ___lwdiv 069F  
                ___lwmod 0663                  __ptext1 0745                  __ptext2 0663  
                __ptext3 069F                  __ptext4 0653                  _dpowers 0008  
                _sprintf 0745     end_of_initialization 07FD                _RCSTAbits 0018  
              _TXSTAbits 0098      start_initialization 07F8            ?_adc__reading 0020  
              ___latbits 0001            __pcstackBANK0 0020              sprintf@flag 0032  
            sprintf@prec 0036         ___lwdiv@dividend 0022           ??_adc__reading 0000  
               ?___lwdiv 0020                 ?___lwmod 0027                __pstrings 0002  
       ___lwdiv@quotient 0024                 ?_sprintf 002C                 _PIR1bits 000C  
             _ADCON0bits 001F              __stringbase 0007       __end_of__stringtab 0008  
             sprintf@val 0034          ___lwdiv@divisor 0020          ___lwdiv@counter 0026  
   __end_of_adc__reading 0663                sprintf@ap 0033                sprintf@sp 0037  
       ___lwmod@dividend 0029                stringcode 0002                 sprintf@c 0038  
               sprintf@f 002C          ___lwmod@divisor 0027          ___lwmod@counter 002B  
               stringdir 0002                 stringtab 0002  
