

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Sun Jan 14 00:33:05 2024

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F873A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 22/03/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F873A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0006                     	;# 
    58     0007                     	;# 
    59     000A                     	;# 
    60     000B                     	;# 
    61     000C                     	;# 
    62     000D                     	;# 
    63     000E                     	;# 
    64     000E                     	;# 
    65     000F                     	;# 
    66     0010                     	;# 
    67     0011                     	;# 
    68     0012                     	;# 
    69     0013                     	;# 
    70     0014                     	;# 
    71     0015                     	;# 
    72     0015                     	;# 
    73     0016                     	;# 
    74     0017                     	;# 
    75     0018                     	;# 
    76     0019                     	;# 
    77     001A                     	;# 
    78     001B                     	;# 
    79     001B                     	;# 
    80     001C                     	;# 
    81     001D                     	;# 
    82     001E                     	;# 
    83     001F                     	;# 
    84     0081                     	;# 
    85     0085                     	;# 
    86     0086                     	;# 
    87     0087                     	;# 
    88     008C                     	;# 
    89     008D                     	;# 
    90     008E                     	;# 
    91     0091                     	;# 
    92     0092                     	;# 
    93     0093                     	;# 
    94     0094                     	;# 
    95     0098                     	;# 
    96     0099                     	;# 
    97     009C                     	;# 
    98     009D                     	;# 
    99     009E                     	;# 
   100     009F                     	;# 
   101     010C                     	;# 
   102     010D                     	;# 
   103     010E                     	;# 
   104     010F                     	;# 
   105     018C                     	;# 
   106     018D                     	;# 
   107     0000                     	;# 
   108     0001                     	;# 
   109     0002                     	;# 
   110     0003                     	;# 
   111     0004                     	;# 
   112     0005                     	;# 
   113     0006                     	;# 
   114     0007                     	;# 
   115     000A                     	;# 
   116     000B                     	;# 
   117     000C                     	;# 
   118     000D                     	;# 
   119     000E                     	;# 
   120     000E                     	;# 
   121     000F                     	;# 
   122     0010                     	;# 
   123     0011                     	;# 
   124     0012                     	;# 
   125     0013                     	;# 
   126     0014                     	;# 
   127     0015                     	;# 
   128     0015                     	;# 
   129     0016                     	;# 
   130     0017                     	;# 
   131     0018                     	;# 
   132     0019                     	;# 
   133     001A                     	;# 
   134     001B                     	;# 
   135     001B                     	;# 
   136     001C                     	;# 
   137     001D                     	;# 
   138     001E                     	;# 
   139     001F                     	;# 
   140     0081                     	;# 
   141     0085                     	;# 
   142     0086                     	;# 
   143     0087                     	;# 
   144     008C                     	;# 
   145     008D                     	;# 
   146     008E                     	;# 
   147     0091                     	;# 
   148     0092                     	;# 
   149     0093                     	;# 
   150     0094                     	;# 
   151     0098                     	;# 
   152     0099                     	;# 
   153     009C                     	;# 
   154     009D                     	;# 
   155     009E                     	;# 
   156     009F                     	;# 
   157     010C                     	;# 
   158     010D                     	;# 
   159     010E                     	;# 
   160     010F                     	;# 
   161     018C                     	;# 
   162     018D                     	;# 
   163                           
   164                           	psect	strings
   165     0002                     __pstrings:
   166     0002                     stringtab:
   167     0002                     __stringtab:
   168     0002                     stringcode:	
   169                           ;	String table - string pointers are 1 byte each
   170                           
   171     0002                     stringdir:
   172     0002  3000               	movlw	high stringdir
   173     0003  008A               	movwf	10
   174     0004  0804               	movf	4,w
   175     0005  0A84               	incf	4,f
   176     0006  0782               	addwf	2,f
   177     0007                     __stringbase:
   178     0007  3400               	retlw	0
   179     0008                     __end_of__stringtab:
   180     0008                     _dpowers:
   181     0008  3401               	retlw	1
   182     0009  3400               	retlw	0
   183     000A  340A               	retlw	10
   184     000B  3400               	retlw	0
   185     000C  3464               	retlw	100
   186     000D  3400               	retlw	0
   187     000E  34E8               	retlw	232
   188     000F  3403               	retlw	3
   189     0010  3410               	retlw	16
   190     0011  3427               	retlw	39
   191     0012                     __end_of_dpowers:
   192     0019                     _TXREG	set	25
   193     0018                     _RCSTAbits	set	24
   194     001F                     _ADCON0	set	31
   195     001E                     _ADRESH	set	30
   196     001F                     _ADCON0bits	set	31
   197     0064                     _TXIF	set	100
   198     0098                     _TXSTAbits	set	152
   199     0099                     _SPBRG	set	153
   200     009F                     _ADCON1	set	159
   201     009E                     _ADRESL	set	158
   202     0012                     STR_1:
   203     0012  3441               	retlw	65	;'A'
   204     0013  3444               	retlw	68	;'D'
   205     0014  3443               	retlw	67	;'C'
   206     0015  3420               	retlw	32	;' '
   207     0016  3443               	retlw	67	;'C'
   208     0017  3448               	retlw	72	;'H'
   209     0018  3430               	retlw	48	;'0'
   210     0019  343A               	retlw	58	;':'
   211     001A  3420               	retlw	32	;' '
   212     001B  3425               	retlw	37	;'%'
   213     001C  3475               	retlw	117	;'u'
   214     001D  340D               	retlw	13
   215     001E  340A               	retlw	10
   216     001F  3400               	retlw	0
   217                           
   218                           	psect	cinit
   219     07F8                     start_initialization:	
   220                           ; #config settings
   221                           
   222     07F8                     __initialization:
   223                           
   224                           ; Clear objects allocated to BANK0
   225     07F8  1283               	bcf	3,5	;RP0=0, select bank0
   226     07F9  1303               	bcf	3,6	;RP1=0, select bank0
   227     07FA  01BF               	clrf	__pbssBANK0& (0+127)
   228     07FB  01C0               	clrf	(__pbssBANK0+1)& (0+127)
   229     07FC  01C1               	clrf	(__pbssBANK0+2)& (0+127)
   230     07FD                     end_of_initialization:	
   231                           ;End of C runtime variable initialization code
   232                           
   233     07FD                     __end_of__initialization:
   234     07FD  0183               	clrf	3
   235     07FE  118A  2EE5         	ljmp	_main	;jump to C main() function
   236                           
   237                           	psect	bssBANK0
   238     003F                     __pbssBANK0:
   239     003F                     _adc:
   240     003F                     	ds	2
   241     0041                     _caracteres:
   242     0041                     	ds	1
   243                           
   244                           	psect	cstackCOMMON
   245     0000                     __pcstackCOMMON:
   246     0000                     ??_adc_reading:
   247     0000                     ??___lwdiv:	
   248                           ; 1 bytes @ 0x0
   249                           
   250     0000                     ??___lwmod:	
   251                           ; 1 bytes @ 0x0
   252                           
   253                           
   254                           	psect	cstackBANK0
   255     0020                     __pcstackBANK0:	
   256                           ; 1 bytes @ 0x0
   257                           
   258     0020                     ?_main:
   259     0020                     ?_adc_reading:	
   260                           ; 1 bytes @ 0x0
   261                           
   262     0020                     ?___lwdiv:	
   263                           ; 2 bytes @ 0x0
   264                           
   265     0020                     ___lwdiv@divisor:	
   266                           ; 2 bytes @ 0x0
   267                           
   268                           
   269                           ; 2 bytes @ 0x0
   270     0020                     	ds	2
   271     0022                     ___lwdiv@dividend:
   272                           
   273                           ; 2 bytes @ 0x2
   274     0022                     	ds	2
   275     0024                     ___lwdiv@quotient:
   276                           
   277                           ; 2 bytes @ 0x4
   278     0024                     	ds	2
   279     0026                     ___lwdiv@counter:
   280                           
   281                           ; 1 bytes @ 0x6
   282     0026                     	ds	1
   283     0027                     ?___lwmod:
   284     0027                     ___lwmod@divisor:	
   285                           ; 2 bytes @ 0x7
   286                           
   287                           
   288                           ; 2 bytes @ 0x7
   289     0027                     	ds	2
   290     0029                     ___lwmod@dividend:
   291                           
   292                           ; 2 bytes @ 0x9
   293     0029                     	ds	2
   294     002B                     ___lwmod@counter:
   295                           
   296                           ; 1 bytes @ 0xB
   297     002B                     	ds	1
   298     002C                     ?_sprintf:
   299     002C                     sprintf@f:	
   300                           ; 2 bytes @ 0xC
   301                           
   302                           
   303                           ; 1 bytes @ 0xC
   304     002C                     	ds	3
   305     002F                     ??_sprintf:
   306                           
   307                           ; 1 bytes @ 0xF
   308     002F                     	ds	3
   309     0032                     sprintf@flag:
   310                           
   311                           ; 1 bytes @ 0x12
   312     0032                     	ds	1
   313     0033                     sprintf@ap:
   314                           
   315                           ; 1 bytes @ 0x13
   316     0033                     	ds	1
   317     0034                     sprintf@val:
   318                           
   319                           ; 2 bytes @ 0x14
   320     0034                     	ds	2
   321     0036                     sprintf@prec:
   322                           
   323                           ; 1 bytes @ 0x16
   324     0036                     	ds	1
   325     0037                     sprintf@sp:
   326                           
   327                           ; 1 bytes @ 0x17
   328     0037                     	ds	1
   329     0038                     sprintf@c:
   330                           
   331                           ; 1 bytes @ 0x18
   332     0038                     	ds	1
   333     0039                     ??_main:
   334                           
   335                           ; 1 bytes @ 0x19
   336     0039                     	ds	3
   337     003C                     main@i:
   338                           
   339                           ; 2 bytes @ 0x1C
   340     003C                     	ds	2
   341     003E                     main@caracter:
   342                           
   343                           ; 1 bytes @ 0x1E
   344     003E                     	ds	1
   345                           
   346                           	psect	maintext
   347     06E5                     __pmaintext:	
   348 ;;
   349 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   350 ;;
   351 ;; *************** function _main *****************
   352 ;; Defined at:
   353 ;;		line 28 in file "uart.c"
   354 ;; Parameters:    Size  Location     Type
   355 ;;		None
   356 ;; Auto vars:     Size  Location     Type
   357 ;;  i               2   28[BANK0 ] int 
   358 ;;  caracter        1   30[BANK0 ] unsigned char 
   359 ;; Return value:  Size  Location     Type
   360 ;;                  1    wreg      void 
   361 ;; Registers used:
   362 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   363 ;; Tracked objects:
   364 ;;		On entry : B00/0
   365 ;;		On exit  : 0/0
   366 ;;		Unchanged: 0/0
   367 ;; Data sizes:     COMMON   BANK0   BANK1
   368 ;;      Params:         0       0       0
   369 ;;      Locals:         0       3       0
   370 ;;      Temps:          0       3       0
   371 ;;      Totals:         0       6       0
   372 ;;Total ram usage:        6 bytes
   373 ;; Hardware stack levels required when called: 2
   374 ;; This function calls:
   375 ;;		_adc_reading
   376 ;;		_sprintf
   377 ;; This function is called by:
   378 ;;		Startup code after reset
   379 ;; This function uses a non-reentrant model
   380 ;;
   381                           
   382     06E5                     _main:	
   383                           ;psect for function _main
   384                           
   385     06E5                     l929:	
   386                           ;incstack = 0
   387                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   388                           
   389                           
   390                           ;uart.c: 30:     ADCON1 = 0b10000000; ADCON0 = 0b11001000; ADCON0bits.ADON = 1;
   391     06E5  3080               	movlw	128
   392     06E6  1683               	bsf	3,5	;RP0=1, select bank1
   393     06E7  1303               	bcf	3,6	;RP1=0, select bank1
   394     06E8  009F               	movwf	31	;volatile
   395     06E9  30C8               	movlw	200
   396     06EA  1283               	bcf	3,5	;RP0=0, select bank0
   397     06EB  1303               	bcf	3,6	;RP1=0, select bank0
   398     06EC  009F               	movwf	31	;volatile
   399     06ED                     l931:
   400     06ED  141F               	bsf	31,0	;volatile
   401                           
   402                           ;uart.c: 31:     SPBRG = 51; TXSTAbits.SYNC = 0; TXSTAbits.BRGH = 1; RCSTAbits.SPEN = 1;
      +                           TXSTAbits.TXEN = 1; RCSTAbits.CREN = 1;;
   403     06EE  3033               	movlw	51
   404     06EF  1683               	bsf	3,5	;RP0=1, select bank1
   405     06F0  1303               	bcf	3,6	;RP1=0, select bank1
   406     06F1  0099               	movwf	25	;volatile
   407     06F2                     l933:
   408     06F2  1218               	bcf	24,4	;volatile
   409     06F3                     l935:
   410     06F3  1518               	bsf	24,2	;volatile
   411     06F4                     l937:
   412     06F4  1283               	bcf	3,5	;RP0=0, select bank0
   413     06F5  1303               	bcf	3,6	;RP1=0, select bank0
   414     06F6  1798               	bsf	24,7	;volatile
   415     06F7                     l939:
   416     06F7  1683               	bsf	3,5	;RP0=1, select bank1
   417     06F8  1303               	bcf	3,6	;RP1=0, select bank1
   418     06F9  1698               	bsf	24,5	;volatile
   419     06FA                     l941:
   420     06FA  1283               	bcf	3,5	;RP0=0, select bank0
   421     06FB  1303               	bcf	3,6	;RP1=0, select bank0
   422     06FC  1618               	bsf	24,4	;volatile
   423     06FD                     l943:
   424                           
   425                           ;uart.c: 35:         ADCON0bits.CHS = 0; adc_reading();
   426     06FD  30C7               	movlw	-57
   427     06FE  1283               	bcf	3,5	;RP0=0, select bank0
   428     06FF  1303               	bcf	3,6	;RP1=0, select bank0
   429     0700  059F               	andwf	31,f	;volatile
   430     0701                     l945:
   431     0701  118A  2653  118A   	fcall	_adc_reading
   432                           
   433                           ;uart.c: 37:         adc = adc_reading();
   434     0704  118A  2653  118A   	fcall	_adc_reading
   435     0707  1283               	bcf	3,5	;RP0=0, select bank0
   436     0708  1303               	bcf	3,6	;RP1=0, select bank0
   437     0709  0821               	movf	?_adc_reading+1,w
   438     070A  00C0               	movwf	_adc+1
   439     070B  0820               	movf	?_adc_reading,w
   440     070C  00BF               	movwf	_adc
   441     070D                     l947:
   442                           
   443                           ;uart.c: 39:         sprintf(caracteres, "ADC CH0: %u\r\n", adc);
   444     070D  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   445     070E  00AC               	movwf	sprintf@f
   446     070F  0840               	movf	_adc+1,w
   447     0710  00AE               	movwf	?_sprintf+2
   448     0711  083F               	movf	_adc,w
   449     0712  00AD               	movwf	?_sprintf+1
   450     0713  3041               	movlw	(low (_caracteres| 0))& (0+255)
   451     0714  118A  2745  118A   	fcall	_sprintf
   452     0717                     l949:
   453                           
   454                           ;uart.c: 40:         { char caracter; for (int i = 0; (caracter = (caracteres)[i]); ++i)
      +                           { while (!TXIF); TXREG = caracter; } };
   455     0717  1283               	bcf	3,5	;RP0=0, select bank0
   456     0718  1303               	bcf	3,6	;RP1=0, select bank0
   457     0719  01BC               	clrf	main@i
   458     071A  01BD               	clrf	main@i+1
   459     071B  2F28               	goto	l953
   460     071C                     l42:
   461     071C  1E0C               	btfss	12,4	;volatile
   462     071D  2F1F               	goto	u411
   463     071E  2F20               	goto	u410
   464     071F                     u411:
   465     071F  2F1C               	goto	l42
   466     0720                     u410:
   467     0720                     l951:
   468     0720  083E               	movf	main@caracter,w
   469     0721  0099               	movwf	25	;volatile
   470     0722  3001               	movlw	1
   471     0723  07BC               	addwf	main@i,f
   472     0724  1803               	skipnc
   473     0725  0ABD               	incf	main@i+1,f
   474     0726  3000               	movlw	0
   475     0727  07BD               	addwf	main@i+1,f
   476     0728                     l953:
   477     0728  083C               	movf	main@i,w
   478     0729  3E41               	addlw	(low (_caracteres| 0))& (0+255)
   479     072A  0084               	movwf	4
   480     072B  1383               	bcf	3,7	;select IRP bank0
   481     072C  0800               	movf	0,w
   482     072D  00BE               	movwf	main@caracter
   483     072E  083E               	movf	main@caracter,w
   484     072F  1D03               	btfss	3,2
   485     0730  2F32               	goto	u421
   486     0731  2F33               	goto	u420
   487     0732                     u421:
   488     0732  2F1C               	goto	l42
   489     0733                     u420:
   490     0733                     l955:
   491                           
   492                           ;uart.c: 41:         _delay((unsigned long)((200)*(8000000/4000.0)));
   493     0733  3003               	movlw	3
   494     0734  1283               	bcf	3,5	;RP0=0, select bank0
   495     0735  1303               	bcf	3,6	;RP1=0, select bank0
   496     0736  00BB               	movwf	??_main+2
   497     0737  3008               	movlw	8
   498     0738  00BA               	movwf	??_main+1
   499     0739  3076               	movlw	118
   500     073A  00B9               	movwf	??_main
   501     073B                     u437:
   502     073B  0BB9               	decfsz	??_main,f
   503     073C  2F3B               	goto	u437
   504     073D  0BBA               	decfsz	??_main+1,f
   505     073E  2F3B               	goto	u437
   506     073F  0BBB               	decfsz	??_main+2,f
   507     0740  2F3B               	goto	u437
   508     0741  2F42               	nop2
   509     0742  2EFD               	goto	l943
   510     0743  118A  2800         	ljmp	start
   511     0745                     __end_of_main:
   512                           
   513                           	psect	text1
   514     0745                     __ptext1:	
   515 ;; *************** function _sprintf *****************
   516 ;; Defined at:
   517 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c"
   518 ;; Parameters:    Size  Location     Type
   519 ;;  sp              1    wreg     PTR unsigned char 
   520 ;;		 -> caracteres(1), 
   521 ;;  f               1   12[BANK0 ] PTR const unsigned char 
   522 ;;		 -> STR_1(14), 
   523 ;; Auto vars:     Size  Location     Type
   524 ;;  sp              1   23[BANK0 ] PTR unsigned char 
   525 ;;		 -> caracteres(1), 
   526 ;;  tmpval          4    0        struct .
   527 ;;  val             2   20[BANK0 ] unsigned int 
   528 ;;  cp              2    0        PTR const unsigned char 
   529 ;;  len             2    0        unsigned int 
   530 ;;  c               1   24[BANK0 ] unsigned char 
   531 ;;  prec            1   22[BANK0 ] char 
   532 ;;  ap              1   19[BANK0 ] PTR void [1]
   533 ;;		 -> ?_sprintf(2), 
   534 ;;  flag            1   18[BANK0 ] unsigned char 
   535 ;; Return value:  Size  Location     Type
   536 ;;                  2   12[BANK0 ] int 
   537 ;; Registers used:
   538 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   539 ;; Tracked objects:
   540 ;;		On entry : 0/0
   541 ;;		On exit  : 0/0
   542 ;;		Unchanged: 0/0
   543 ;; Data sizes:     COMMON   BANK0   BANK1
   544 ;;      Params:         0       3       0
   545 ;;      Locals:         0       7       0
   546 ;;      Temps:          0       3       0
   547 ;;      Totals:         0      13       0
   548 ;;Total ram usage:       13 bytes
   549 ;; Hardware stack levels used: 1
   550 ;; Hardware stack levels required when called: 1
   551 ;; This function calls:
   552 ;;		___lwdiv
   553 ;;		___lwmod
   554 ;; This function is called by:
   555 ;;		_main
   556 ;; This function uses a non-reentrant model
   557 ;;
   558                           
   559     0745                     _sprintf:	
   560                           ;psect for function _sprintf
   561                           
   562                           
   563                           ;incstack = 0
   564                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   565                           ;sprintf@sp stored from wreg
   566     0745  1283               	bcf	3,5	;RP0=0, select bank0
   567     0746  1303               	bcf	3,6	;RP1=0, select bank0
   568     0747  00B7               	movwf	sprintf@sp
   569     0748                     l875:
   570                           
   571                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   572     0748  302D               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   573     0749  00B3               	movwf	sprintf@ap
   574                           
   575                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   576     074A  2FE5               	goto	l919
   577     074B                     l877:
   578                           
   579                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   580     074B  3025               	movlw	37
   581     074C  0638               	xorwf	sprintf@c,w
   582     074D  1903               	btfsc	3,2
   583     074E  2F50               	goto	u361
   584     074F  2F51               	goto	u360
   585     0750                     u361:
   586     0750  2F5B               	goto	l883
   587     0751                     u360:
   588     0751                     l879:
   589                           
   590                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   591     0751  0837               	movf	sprintf@sp,w
   592     0752  0084               	movwf	4
   593     0753  0838               	movf	sprintf@c,w
   594     0754  1383               	bcf	3,7	;select IRP bank0
   595     0755  0080               	movwf	0
   596     0756                     l881:
   597     0756  3001               	movlw	1
   598     0757  00FF               	movwf	btemp+1
   599     0758  087F               	movf	btemp+1,w
   600     0759  07B7               	addwf	sprintf@sp,f
   601                           
   602                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 559:    continue;
   603     075A  2FE5               	goto	l919
   604     075B                     l883:
   605                           
   606                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   607     075B  01B2               	clrf	sprintf@flag
   608                           
   609                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   610     075C  2F62               	goto	l889
   611     075D                     l885:
   612                           
   613                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 844:    flag |= 0
      +                          xC0;
   614     075D  30C0               	movlw	192
   615     075E  00FF               	movwf	btemp+1
   616     075F  087F               	movf	btemp+1,w
   617     0760  04B2               	iorwf	sprintf@flag,f
   618                           
   619                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 845:    break;
   620     0761  2F7A               	goto	l891
   621     0762                     l889:
   622     0762  3001               	movlw	1
   623     0763  07AC               	addwf	sprintf@f,f
   624     0764  30FF               	movlw	-1
   625     0765  072C               	addwf	sprintf@f,w
   626     0766  0084               	movwf	4
   627     0767  118A  2002  118A   	fcall	stringdir
   628     076A  00B8               	movwf	sprintf@c
   629     076B  00AF               	movwf	??_sprintf
   630     076C  01B0               	clrf	??_sprintf+1
   631                           
   632                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   633                           ; Switch size 1, requested type "simple"
   634                           ; Number of cases is 1, Range of values is 0 to 0
   635                           ; switch strategies available:
   636                           ; Name         Instructions Cycles
   637                           ; simple_byte            4     3 (average)
   638                           ; direct_byte            9     7 (fixed)
   639                           ; jumptable            260     6 (fixed)
   640                           ;	Chosen strategy is simple_byte
   641     076D  0830               	movf	??_sprintf+1,w
   642     076E  3A00               	xorlw	0	; case 0
   643     076F  1903               	skipnz
   644     0770  2F72               	goto	l977
   645     0771  2FE5               	goto	l919
   646     0772                     l977:
   647                           
   648                           ; Switch size 1, requested type "simple"
   649                           ; Number of cases is 2, Range of values is 0 to 117
   650                           ; switch strategies available:
   651                           ; Name         Instructions Cycles
   652                           ; simple_byte            7     4 (average)
   653                           ; direct_byte          243     7 (fixed)
   654                           ; jumptable            260     6 (fixed)
   655                           ;	Chosen strategy is simple_byte
   656     0772  082F               	movf	??_sprintf,w
   657     0773  3A00               	xorlw	0	; case 0
   658     0774  1903               	skipnz
   659     0775  2FF3               	goto	l921
   660     0776  3A75               	xorlw	117	; case 117
   661     0777  1903               	skipnz
   662     0778  2F5D               	goto	l885
   663     0779  2FE5               	goto	l919
   664     077A                     l891:
   665                           
   666                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1299:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1312:     val = (*(unsign
      +                          ed *)__va_arg((*(unsigned **)ap), (unsigned)0));
   667     077A  0833               	movf	sprintf@ap,w
   668     077B  0084               	movwf	4
   669     077C  1383               	bcf	3,7	;select IRP bank0
   670     077D  0800               	movf	0,w
   671     077E  00B4               	movwf	sprintf@val
   672     077F  0A84               	incf	4,f
   673     0780  0800               	movf	0,w
   674     0781  00B5               	movwf	sprintf@val+1
   675     0782                     l893:
   676     0782  3002               	movlw	2
   677     0783  00FF               	movwf	btemp+1
   678     0784  087F               	movf	btemp+1,w
   679     0785  07B3               	addwf	sprintf@ap,f
   680     0786                     l895:
   681                           
   682                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1313:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
   683     0786  01B8               	clrf	sprintf@c
   684     0787  0AB8               	incf	sprintf@c,f
   685     0788                     l901:
   686                           
   687                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
   688     0788  0838               	movf	sprintf@c,w
   689     0789  00AF               	movwf	??_sprintf
   690     078A  072F               	addwf	??_sprintf,w
   691     078B  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   692     078C  0084               	movwf	4
   693     078D  118A  2002  118A   	fcall	stringdir
   694     0790  00B0               	movwf	??_sprintf+1
   695     0791  118A  2002  118A   	fcall	stringdir
   696     0794  00B1               	movwf	??_sprintf+2
   697     0795  0831               	movf	??_sprintf+2,w
   698     0796  0235               	subwf	sprintf@val+1,w
   699     0797  1D03               	skipz
   700     0798  2F9B               	goto	u375
   701     0799  0830               	movf	??_sprintf+1,w
   702     079A  0234               	subwf	sprintf@val,w
   703     079B                     u375:
   704     079B  1803               	skipnc
   705     079C  2F9E               	goto	u371
   706     079D  2F9F               	goto	u370
   707     079E                     u371:
   708     079E  2FA0               	goto	l905
   709     079F                     u370:
   710     079F  2FAA               	goto	l909
   711     07A0                     l905:
   712     07A0  3001               	movlw	1
   713     07A1  00FF               	movwf	btemp+1
   714     07A2  087F               	movf	btemp+1,w
   715     07A3  07B8               	addwf	sprintf@c,f
   716     07A4                     l907:
   717     07A4  3005               	movlw	5
   718     07A5  0638               	xorwf	sprintf@c,w
   719     07A6  1D03               	btfss	3,2
   720     07A7  2FA9               	goto	u381
   721     07A8  2FAA               	goto	u380
   722     07A9                     u381:
   723     07A9  2F88               	goto	l901
   724     07AA                     u380:
   725     07AA                     l909:
   726                           
   727                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1495:   };C:\Program File
      +                          s\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
   728     07AA  0838               	movf	sprintf@c,w
   729     07AB  00B6               	movwf	sprintf@prec
   730                           
   731                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   732     07AC  2FDC               	goto	l917
   733     07AD                     l911:
   734                           
   735                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
   736     07AD  300A               	movlw	10
   737     07AE  00A7               	movwf	___lwmod@divisor
   738     07AF  3000               	movlw	0
   739     07B0  00A8               	movwf	___lwmod@divisor+1
   740     07B1  0836               	movf	sprintf@prec,w
   741     07B2  00AF               	movwf	??_sprintf
   742     07B3  072F               	addwf	??_sprintf,w
   743     07B4  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
   744     07B5  0084               	movwf	4
   745     07B6  118A  2002  118A   	fcall	stringdir
   746     07B9  00A0               	movwf	___lwdiv@divisor
   747     07BA  118A  2002  118A   	fcall	stringdir
   748     07BD  00A1               	movwf	___lwdiv@divisor+1
   749     07BE  0835               	movf	sprintf@val+1,w
   750     07BF  00A3               	movwf	___lwdiv@dividend+1
   751     07C0  0834               	movf	sprintf@val,w
   752     07C1  00A2               	movwf	___lwdiv@dividend
   753     07C2  118A  269F  118A   	fcall	___lwdiv
   754     07C5  1283               	bcf	3,5	;RP0=0, select bank0
   755     07C6  1303               	bcf	3,6	;RP1=0, select bank0
   756     07C7  0821               	movf	?___lwdiv+1,w
   757     07C8  00AA               	movwf	___lwmod@dividend+1
   758     07C9  0820               	movf	?___lwdiv,w
   759     07CA  00A9               	movwf	___lwmod@dividend
   760     07CB  118A  2663  118A   	fcall	___lwmod
   761     07CE  1283               	bcf	3,5	;RP0=0, select bank0
   762     07CF  1303               	bcf	3,6	;RP1=0, select bank0
   763     07D0  0827               	movf	?___lwmod,w
   764     07D1  3E30               	addlw	48
   765     07D2  00B8               	movwf	sprintf@c
   766     07D3                     l913:
   767                           
   768                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
   769     07D3  0837               	movf	sprintf@sp,w
   770     07D4  0084               	movwf	4
   771     07D5  0838               	movf	sprintf@c,w
   772     07D6  1383               	bcf	3,7	;select IRP bank0
   773     07D7  0080               	movwf	0
   774     07D8                     l915:
   775     07D8  3001               	movlw	1
   776     07D9  00FF               	movwf	btemp+1
   777     07DA  087F               	movf	btemp+1,w
   778     07DB  07B7               	addwf	sprintf@sp,f
   779     07DC                     l917:
   780                           
   781                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
   782     07DC  30FF               	movlw	255
   783     07DD  00FF               	movwf	btemp+1
   784     07DE  087F               	movf	btemp+1,w
   785     07DF  07B6               	addwf	sprintf@prec,f
   786     07E0  0A36               	incf	sprintf@prec,w
   787     07E1  1D03               	btfss	3,2
   788     07E2  2FE4               	goto	u391
   789     07E3  2FE5               	goto	u390
   790     07E4                     u391:
   791     07E4  2FAD               	goto	l911
   792     07E5                     u390:
   793     07E5                     l919:
   794                           
   795                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   796     07E5  3001               	movlw	1
   797     07E6  07AC               	addwf	sprintf@f,f
   798     07E7  30FF               	movlw	-1
   799     07E8  072C               	addwf	sprintf@f,w
   800     07E9  0084               	movwf	4
   801     07EA  118A  2002  118A   	fcall	stringdir
   802     07ED  00B8               	movwf	sprintf@c
   803     07EE  0838               	movf	sprintf@c,w
   804     07EF  1D03               	btfss	3,2
   805     07F0  2FF2               	goto	u401
   806     07F1  2FF3               	goto	u400
   807     07F2                     u401:
   808     07F2  2F4B               	goto	l877
   809     07F3                     u400:
   810     07F3                     l921:
   811                           
   812                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
   813     07F3  0837               	movf	sprintf@sp,w
   814     07F4  0084               	movwf	4
   815     07F5  1383               	bcf	3,7	;select IRP bank0
   816     07F6  0180               	clrf	0
   817     07F7                     l155:
   818     07F7  0008               	return
   819     07F8                     __end_of_sprintf:
   820                           
   821                           	psect	text2
   822     0663                     __ptext2:	
   823 ;; *************** function ___lwmod *****************
   824 ;; Defined at:
   825 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwmod.c"
   826 ;; Parameters:    Size  Location     Type
   827 ;;  divisor         2    7[BANK0 ] unsigned int 
   828 ;;  dividend        2    9[BANK0 ] unsigned int 
   829 ;; Auto vars:     Size  Location     Type
   830 ;;  counter         1   11[BANK0 ] unsigned char 
   831 ;; Return value:  Size  Location     Type
   832 ;;                  2    7[BANK0 ] unsigned int 
   833 ;; Registers used:
   834 ;;		wreg, status,2, status,0, btemp+1
   835 ;; Tracked objects:
   836 ;;		On entry : 0/0
   837 ;;		On exit  : 0/0
   838 ;;		Unchanged: 0/0
   839 ;; Data sizes:     COMMON   BANK0   BANK1
   840 ;;      Params:         0       4       0
   841 ;;      Locals:         0       1       0
   842 ;;      Temps:          0       0       0
   843 ;;      Totals:         0       5       0
   844 ;;Total ram usage:        5 bytes
   845 ;; Hardware stack levels used: 1
   846 ;; This function calls:
   847 ;;		Nothing
   848 ;; This function is called by:
   849 ;;		_sprintf
   850 ;; This function uses a non-reentrant model
   851 ;;
   852                           
   853     0663                     ___lwmod:	
   854                           ;psect for function ___lwmod
   855                           
   856     0663                     l847:	
   857                           ;incstack = 0
   858                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
   859                           
   860     0663  1283               	bcf	3,5	;RP0=0, select bank0
   861     0664  1303               	bcf	3,6	;RP1=0, select bank0
   862     0665  0827               	movf	___lwmod@divisor,w
   863     0666  0428               	iorwf	___lwmod@divisor+1,w
   864     0667  1903               	btfsc	3,2
   865     0668  2E6A               	goto	u291
   866     0669  2E6B               	goto	u290
   867     066A                     u291:
   868     066A  2E9A               	goto	l865
   869     066B                     u290:
   870     066B                     l849:
   871     066B  01AB               	clrf	___lwmod@counter
   872     066C  0AAB               	incf	___lwmod@counter,f
   873     066D  2E79               	goto	l855
   874     066E                     l851:
   875     066E  3001               	movlw	1
   876     066F                     u305:
   877     066F  1003               	clrc
   878     0670  0DA7               	rlf	___lwmod@divisor,f
   879     0671  0DA8               	rlf	___lwmod@divisor+1,f
   880     0672  3EFF               	addlw	-1
   881     0673  1D03               	skipz
   882     0674  2E6F               	goto	u305
   883     0675                     l853:
   884     0675  3001               	movlw	1
   885     0676  00FF               	movwf	btemp+1
   886     0677  087F               	movf	btemp+1,w
   887     0678  07AB               	addwf	___lwmod@counter,f
   888     0679                     l855:
   889     0679  1FA8               	btfss	___lwmod@divisor+1,7
   890     067A  2E7C               	goto	u311
   891     067B  2E7D               	goto	u310
   892     067C                     u311:
   893     067C  2E6E               	goto	l851
   894     067D                     u310:
   895     067D                     l857:
   896     067D  0828               	movf	___lwmod@divisor+1,w
   897     067E  022A               	subwf	___lwmod@dividend+1,w
   898     067F  1D03               	skipz
   899     0680  2E83               	goto	u325
   900     0681  0827               	movf	___lwmod@divisor,w
   901     0682  0229               	subwf	___lwmod@dividend,w
   902     0683                     u325:
   903     0683  1C03               	skipc
   904     0684  2E86               	goto	u321
   905     0685  2E87               	goto	u320
   906     0686                     u321:
   907     0686  2E8D               	goto	l861
   908     0687                     u320:
   909     0687                     l859:
   910     0687  0827               	movf	___lwmod@divisor,w
   911     0688  02A9               	subwf	___lwmod@dividend,f
   912     0689  0828               	movf	___lwmod@divisor+1,w
   913     068A  1C03               	skipc
   914     068B  03AA               	decf	___lwmod@dividend+1,f
   915     068C  02AA               	subwf	___lwmod@dividend+1,f
   916     068D                     l861:
   917     068D  3001               	movlw	1
   918     068E                     u335:
   919     068E  1003               	clrc
   920     068F  0CA8               	rrf	___lwmod@divisor+1,f
   921     0690  0CA7               	rrf	___lwmod@divisor,f
   922     0691  3EFF               	addlw	-1
   923     0692  1D03               	skipz
   924     0693  2E8E               	goto	u335
   925     0694                     l863:
   926     0694  3001               	movlw	1
   927     0695  02AB               	subwf	___lwmod@counter,f
   928     0696  1D03               	btfss	3,2
   929     0697  2E99               	goto	u341
   930     0698  2E9A               	goto	u340
   931     0699                     u341:
   932     0699  2E7D               	goto	l857
   933     069A                     u340:
   934     069A                     l865:
   935     069A  082A               	movf	___lwmod@dividend+1,w
   936     069B  00A8               	movwf	?___lwmod+1
   937     069C  0829               	movf	___lwmod@dividend,w
   938     069D  00A7               	movwf	?___lwmod
   939     069E                     l441:
   940     069E  0008               	return
   941     069F                     __end_of___lwmod:
   942                           
   943                           	psect	text3
   944     069F                     __ptext3:	
   945 ;; *************** function ___lwdiv *****************
   946 ;; Defined at:
   947 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\lwdiv.c"
   948 ;; Parameters:    Size  Location     Type
   949 ;;  divisor         2    0[BANK0 ] unsigned int 
   950 ;;  dividend        2    2[BANK0 ] unsigned int 
   951 ;; Auto vars:     Size  Location     Type
   952 ;;  quotient        2    4[BANK0 ] unsigned int 
   953 ;;  counter         1    6[BANK0 ] unsigned char 
   954 ;; Return value:  Size  Location     Type
   955 ;;                  2    0[BANK0 ] unsigned int 
   956 ;; Registers used:
   957 ;;		wreg, status,2, status,0, btemp+1
   958 ;; Tracked objects:
   959 ;;		On entry : 0/0
   960 ;;		On exit  : 0/0
   961 ;;		Unchanged: 0/0
   962 ;; Data sizes:     COMMON   BANK0   BANK1
   963 ;;      Params:         0       4       0
   964 ;;      Locals:         0       3       0
   965 ;;      Temps:          0       0       0
   966 ;;      Totals:         0       7       0
   967 ;;Total ram usage:        7 bytes
   968 ;; Hardware stack levels used: 1
   969 ;; This function calls:
   970 ;;		Nothing
   971 ;; This function is called by:
   972 ;;		_sprintf
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976     069F                     ___lwdiv:	
   977                           ;psect for function ___lwdiv
   978                           
   979     069F                     l821:	
   980                           ;incstack = 0
   981                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
   982                           
   983     069F  1283               	bcf	3,5	;RP0=0, select bank0
   984     06A0  1303               	bcf	3,6	;RP1=0, select bank0
   985     06A1  01A4               	clrf	___lwdiv@quotient
   986     06A2  01A5               	clrf	___lwdiv@quotient+1
   987     06A3                     l823:
   988     06A3  0820               	movf	___lwdiv@divisor,w
   989     06A4  0421               	iorwf	___lwdiv@divisor+1,w
   990     06A5  1903               	btfsc	3,2
   991     06A6  2EA8               	goto	u221
   992     06A7  2EA9               	goto	u220
   993     06A8                     u221:
   994     06A8  2EE0               	goto	l843
   995     06A9                     u220:
   996     06A9                     l825:
   997     06A9  01A6               	clrf	___lwdiv@counter
   998     06AA  0AA6               	incf	___lwdiv@counter,f
   999     06AB  2EB7               	goto	l831
  1000     06AC                     l827:
  1001     06AC  3001               	movlw	1
  1002     06AD                     u235:
  1003     06AD  1003               	clrc
  1004     06AE  0DA0               	rlf	___lwdiv@divisor,f
  1005     06AF  0DA1               	rlf	___lwdiv@divisor+1,f
  1006     06B0  3EFF               	addlw	-1
  1007     06B1  1D03               	skipz
  1008     06B2  2EAD               	goto	u235
  1009     06B3                     l829:
  1010     06B3  3001               	movlw	1
  1011     06B4  00FF               	movwf	btemp+1
  1012     06B5  087F               	movf	btemp+1,w
  1013     06B6  07A6               	addwf	___lwdiv@counter,f
  1014     06B7                     l831:
  1015     06B7  1FA1               	btfss	___lwdiv@divisor+1,7
  1016     06B8  2EBA               	goto	u241
  1017     06B9  2EBB               	goto	u240
  1018     06BA                     u241:
  1019     06BA  2EAC               	goto	l827
  1020     06BB                     u240:
  1021     06BB                     l833:
  1022     06BB  3001               	movlw	1
  1023     06BC                     u255:
  1024     06BC  1003               	clrc
  1025     06BD  0DA4               	rlf	___lwdiv@quotient,f
  1026     06BE  0DA5               	rlf	___lwdiv@quotient+1,f
  1027     06BF  3EFF               	addlw	-1
  1028     06C0  1D03               	skipz
  1029     06C1  2EBC               	goto	u255
  1030     06C2  0821               	movf	___lwdiv@divisor+1,w
  1031     06C3  0223               	subwf	___lwdiv@dividend+1,w
  1032     06C4  1D03               	skipz
  1033     06C5  2EC8               	goto	u265
  1034     06C6  0820               	movf	___lwdiv@divisor,w
  1035     06C7  0222               	subwf	___lwdiv@dividend,w
  1036     06C8                     u265:
  1037     06C8  1C03               	skipc
  1038     06C9  2ECB               	goto	u261
  1039     06CA  2ECC               	goto	u260
  1040     06CB                     u261:
  1041     06CB  2ED3               	goto	l839
  1042     06CC                     u260:
  1043     06CC                     l835:
  1044     06CC  0820               	movf	___lwdiv@divisor,w
  1045     06CD  02A2               	subwf	___lwdiv@dividend,f
  1046     06CE  0821               	movf	___lwdiv@divisor+1,w
  1047     06CF  1C03               	skipc
  1048     06D0  03A3               	decf	___lwdiv@dividend+1,f
  1049     06D1  02A3               	subwf	___lwdiv@dividend+1,f
  1050     06D2                     l837:
  1051     06D2  1424               	bsf	___lwdiv@quotient,0
  1052     06D3                     l839:
  1053     06D3  3001               	movlw	1
  1054     06D4                     u275:
  1055     06D4  1003               	clrc
  1056     06D5  0CA1               	rrf	___lwdiv@divisor+1,f
  1057     06D6  0CA0               	rrf	___lwdiv@divisor,f
  1058     06D7  3EFF               	addlw	-1
  1059     06D8  1D03               	skipz
  1060     06D9  2ED4               	goto	u275
  1061     06DA                     l841:
  1062     06DA  3001               	movlw	1
  1063     06DB  02A6               	subwf	___lwdiv@counter,f
  1064     06DC  1D03               	btfss	3,2
  1065     06DD  2EDF               	goto	u281
  1066     06DE  2EE0               	goto	u280
  1067     06DF                     u281:
  1068     06DF  2EBB               	goto	l833
  1069     06E0                     u280:
  1070     06E0                     l843:
  1071     06E0  0825               	movf	___lwdiv@quotient+1,w
  1072     06E1  00A1               	movwf	?___lwdiv+1
  1073     06E2  0824               	movf	___lwdiv@quotient,w
  1074     06E3  00A0               	movwf	?___lwdiv
  1075     06E4                     l431:
  1076     06E4  0008               	return
  1077     06E5                     __end_of___lwdiv:
  1078                           
  1079                           	psect	text4
  1080     0653                     __ptext4:	
  1081 ;; *************** function _adc_reading *****************
  1082 ;; Defined at:
  1083 ;;		line 21 in file "./../../api/machine/adc.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;		None
  1086 ;; Auto vars:     Size  Location     Type
  1087 ;;		None
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  2    0[BANK0 ] unsigned int 
  1090 ;; Registers used:
  1091 ;;		wreg
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMMON   BANK0   BANK1
  1097 ;;      Params:         0       2       0
  1098 ;;      Locals:         0       0       0
  1099 ;;      Temps:          0       0       0
  1100 ;;      Totals:         0       2       0
  1101 ;;Total ram usage:        2 bytes
  1102 ;; Hardware stack levels used: 1
  1103 ;; This function calls:
  1104 ;;		Nothing
  1105 ;; This function is called by:
  1106 ;;		_main
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110     0653                     _adc_reading:	
  1111                           ;psect for function _adc_reading
  1112                           
  1113     0653                     l869:	
  1114                           ;incstack = 0
  1115                           ; Regs used in _adc_reading: [wreg]
  1116                           
  1117                           
  1118                           ;./../../api/machine/adc.c: 22:     ADCON0bits.GO_DONE = 1;
  1119     0653  1283               	bcf	3,5	;RP0=0, select bank0
  1120     0654  1303               	bcf	3,6	;RP1=0, select bank0
  1121     0655  151F               	bsf	31,2	;volatile
  1122     0656                     l27:	
  1123                           ;./../../api/machine/adc.c: 23:     while (ADCON0bits.GO_DONE == 1);
  1124                           
  1125     0656  191F               	btfsc	31,2	;volatile
  1126     0657  2E59               	goto	u351
  1127     0658  2E5A               	goto	u350
  1128     0659                     u351:
  1129     0659  2E56               	goto	l27
  1130     065A                     u350:
  1131     065A                     l871:
  1132                           
  1133                           ;./../../api/machine/adc.c: 24:     return ((ADRESH << 8) | ADRESL);
  1134     065A  081E               	movf	30,w	;volatile
  1135     065B  00A1               	movwf	?_adc_reading+1
  1136     065C  1683               	bsf	3,5	;RP0=1, select bank1
  1137     065D  1303               	bcf	3,6	;RP1=0, select bank1
  1138     065E  081E               	movf	30,w	;volatile
  1139     065F  1283               	bcf	3,5	;RP0=0, select bank0
  1140     0660  1303               	bcf	3,6	;RP1=0, select bank0
  1141     0661  00A0               	movwf	?_adc_reading
  1142     0662                     l30:
  1143     0662  0008               	return
  1144     0663                     __end_of_adc_reading:
  1145     007E                     btemp	set	126	;btemp
  1146     007E                     wtemp0	set	126
  1147                           
  1148                           	psect	config
  1149                           
  1150                           ;Config register CONFIG @ 0x2007
  1151                           ;	Oscillator Selection bits
  1152                           ;	FOSC = HS, HS oscillator
  1153                           ;	Watchdog Timer Enable bit
  1154                           ;	WDTE = OFF, WDT disabled
  1155                           ;	Power-up Timer Enable bit
  1156                           ;	PWRTE = OFF, PWRT disabled
  1157                           ;	Brown-out Reset Enable bit
  1158                           ;	BOREN = OFF, BOR disabled
  1159                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1160                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1161                           ;	Data EEPROM Memory Code Protection bit
  1162                           ;	CPD = OFF, Data EEPROM code protection off
  1163                           ;	Flash Program Memory Write Enable bits
  1164                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1165                           ;	In-Circuit Debugger Mode bit
  1166                           ;	DEBUG = 0x1, unprogrammed default
  1167                           ;	Flash Program Memory Code Protection bit
  1168                           ;	CP = OFF, Code protection off
  1169     2007                     	org	8199
  1170     2007  3F3A               	dw	16186

Data Sizes:
    Strings     14
    Constant    10
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            94     31      34
    BANK1            94      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[14]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 1
		 -> caracteres(BANK0[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    1168
                                             25 BANK0      6     6      0
                        _adc_reading
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1121
                                             12 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _adc_reading                                          2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc_reading
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            5E      0       0       3        0.0%
BANK0               5E     1F      22       4       36.2%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            5E      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               5E      0       0       6        0.0%
ABS                  0      0      22       7        0.0%
DATA                 0      0      22       8        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Sun Jan 14 00:33:05 2024

                      pc 0002                       l30 0662                       l42 071C  
                     l27 0656                       fsr 0004                      l155 07F7  
                    l431 06E4                      l441 069E                      l821 069F  
                    l901 0788                      l831 06B7                      l823 06A3  
                    l911 07AD                      l841 06DA                      l833 06BB  
                    l825 06A9                      l913 07D3                      l905 07A0  
                    l921 07F3                      l835 06CC                      l827 06AC  
                    l843 06E0                      l851 066E                      l915 07D8  
                    l907 07A4                      l931 06ED                      l837 06D2  
                    l829 06B3                      l861 068D                      l853 0675  
                    l917 07DC                      l909 07AA                      l941 06FA  
                    l933 06F2                      l871 065A                      l839 06D3  
                    l863 0694                      l855 0679                      l847 0663  
                    l919 07E5                      l951 0720                      l943 06FD  
                    l935 06F3                      l857 067D                      l849 066B  
                    l865 069A                      l881 0756                      l953 0728  
                    l945 0701                      l937 06F4                      l929 06E5  
                    l859 0687                      l891 077A                      l883 075B  
                    l875 0748                      l955 0733                      l947 070D  
                    l939 06F7                      l869 0653                      l893 0782  
                    l885 075D                      l877 074B                      l949 0717  
                    l895 0786                      l879 0751                      l977 0772  
                    l889 0762                      u220 06A9                      u221 06A8  
                    u310 067D                      u311 067C                      u240 06BB  
                    u320 0687                      u400 07F3                      u241 06BA  
                    u321 0686                      u305 066F                      u401 07F2  
                    u410 0720                      u235 06AD                      u411 071F  
                    u260 06CC                      u340 069A                      u420 0733  
                    u261 06CB                      u341 0699                      u325 0683  
                    u421 0732                      u350 065A                      u351 0659  
                    u255 06BC                      u335 068E                      u280 06E0  
                    u360 0751                      u281 06DF                      u265 06C8  
                    u361 0750                      u290 066B                      u370 079F  
                    u275 06D4                      u291 066A                      u371 079E  
                    u380 07AA                      u381 07A9                      u437 073B  
                    u390 07E5                      u391 07E4                      u375 079B  
                    _adc 003F                      fsr0 0004                      indf 0000  
                   STR_1 0012                     _TXIF 0064                     _main 06E5  
                   btemp 007E                     start 0000             main@caracter 003E  
                  ?_main 0020          __end_of___lwdiv 06E5          __end_of___lwmod 069F  
                  _SPBRG 0099                    _TXREG 0019          __end_of_dpowers 0012  
                  main@i 003C                    pclath 000A                    status 0003  
                  wtemp0 007E          __end_of_sprintf 07F8          __initialization 07F8  
           __end_of_main 0745                   ??_main 0039                   _ADCON0 001F  
                 _ADCON1 009F                   _ADRESH 001E                   _ADRESL 009E  
              ??___lwdiv 0000                ??___lwmod 0000                ??_sprintf 002F  
__end_of__initialization 07FD           __pcstackCOMMON 0000               _caracteres 0041  
             __pbssBANK0 003F               __pmaintext 06E5            ??_adc_reading 0000  
             __stringtab 0002                  ___lwdiv 069F                  ___lwmod 0663  
                __ptext1 0745                  __ptext2 0663                  __ptext3 069F  
                __ptext4 0653                  _dpowers 0008      __end_of_adc_reading 0663  
                _sprintf 0745     end_of_initialization 07FD                _RCSTAbits 0018  
              _TXSTAbits 0098              _adc_reading 0653      start_initialization 07F8  
              ___latbits 0001            __pcstackBANK0 0020              sprintf@flag 0032  
            sprintf@prec 0036         ___lwdiv@dividend 0022                 ?___lwdiv 0020  
               ?___lwmod 0027                __pstrings 0002         ___lwdiv@quotient 0024  
               ?_sprintf 002C               _ADCON0bits 001F              __stringbase 0007  
           ?_adc_reading 0020       __end_of__stringtab 0008               sprintf@val 0034  
        ___lwdiv@divisor 0020          ___lwdiv@counter 0026                sprintf@ap 0033  
              sprintf@sp 0037         ___lwmod@dividend 0029                stringcode 0002  
               sprintf@c 0038                 sprintf@f 002C          ___lwmod@divisor 0027  
        ___lwmod@counter 002B                 stringdir 0002                 stringtab 0002  
